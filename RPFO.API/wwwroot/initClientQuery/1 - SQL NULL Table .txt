

/****** Object:  UserDefinedTableType [dbo].[M_BOMDetailsType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_BOMDetailsType] AS TABLE(
	[ItemCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemName] [nvarchar](250) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[SubItemCode] [nvarchar](50) NOT NULL,
	[SubItemName] [nvarchar](250) NULL,
	[SubUOMCode] [nvarchar](50) NULL,
	[SubQuantity] [decimal](19, 6) NULL,
	[SubStatus] [char](1) NULL,
	[IsOption] [bit] NULL,
	[OptionGroup] [nvarchar](10) NULL,
	[TriggerStatus] [nvarchar](50) NULL,
	[TriggerSystem] [nvarchar](250) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_CustomerType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_CustomerType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CustomerId] [nvarchar](50) NOT NULL,
	[CustomerGrpId] [nvarchar](50) NULL,
	[CustomerName] [nvarchar](250) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[DOB] [date] NULL,
	[JoinedDate] [datetime] NULL,
	[Status] [char](1) NULL,
	[CusType] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_ExchangeRateType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_ExchangeRateType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Date] [datetime] NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[Rate] [decimal](19, 6) NULL,
	[Status] [nvarchar](10) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_ItemStoreListingType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_ItemStoreListingType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[Status] [char](1) NOT NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [date] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_ItemsType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_ItemsType] AS TABLE(
	[ItemCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ProductId] [nvarchar](50) NOT NULL,
	[VariantId] [nvarchar](50) NOT NULL,
	[Status] [char](1) NULL,
	[CapacityValue] [int] NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[SalesTaxCode] [nvarchar](50) NULL,
	[PurchaseTaxCode] [nvarchar](50) NULL,
	[ItemName] [nvarchar](250) NULL,
	[ItemDescription] [nvarchar](250) NULL,
	[ItemCategory_1] [nvarchar](50) NULL,
	[ItemCategory_2] [nvarchar](50) NULL,
	[ItemCategory_3] [nvarchar](50) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[InventoryUOM] [nvarchar](50) NULL,
	[ImageURL] [nvarchar](250) NULL,
	[ImageLink] [nvarchar](250) NULL,
	[MCId] [nvarchar](50) NULL,
	[CustomField1] [nvarchar](250) NULL,
	[CustomField2] [nvarchar](250) NULL,
	[CustomField3] [nvarchar](250) NULL,
	[CustomField4] [nvarchar](250) NULL,
	[CustomField5] [nvarchar](250) NULL,
	[CustomField6] [nvarchar](250) NULL,
	[CustomField7] [nvarchar](250) NULL,
	[CustomField8] [nvarchar](250) NULL,
	[CustomField9] [nvarchar](250) NULL,
	[CustomField10] [nvarchar](250) NULL,
	[DefaultPrice] [decimal](19, 6) NULL,
	[IsSerial] [char](1) NULL,
	[IsBOM] [char](1) NULL,
	[IsVoucher] [bit] NULL,
	[ValidFrom] [date] NULL,
	[ValidTo] [date] NULL,
	[SaleTaxPercent] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Returnable] [bit] NULL,
	[IsPriceTime] [bit] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_ItemUomType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_ItemUomType] AS TABLE(
	[ItemCode] [nvarchar](50) NOT NULL,
	[UOMCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Factor] [decimal](19, 6) NULL,
	[BarCode] [nvarchar](250) NULL,
	[QRCode] [nvarchar](250) NULL,
	[PLU_Flag] [nvarchar](10) NULL,
	[PLU] [nvarchar](50) NULL,
	[WeightValue] [decimal](19, 6) NULL,
	[WeightCount] [int] NULL,
	[WeightUnit] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[AltFactor] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_ITMGRPSType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_ITMGRPSType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[IGId] [nvarchar](50) NOT NULL,
	[IGName] [nvarchar](250) NULL,
	[Status] [char](1) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_PriceListType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_PriceListType] AS TABLE(
	[StoreId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NOT NULL,
	[PriceListId] [nvarchar](50) NULL,
	[SalesTaxCode] [nvarchar](50) NULL,
	[PriceBeforeTax] [decimal](19, 6) NULL,
	[PriceAfterTax] [decimal](19, 6) NULL,
	[Status] [char](1) NOT NULL,
	[ValidFrom] [datetime] NULL,
	[ValidTo] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_StoreType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_StoreType] AS TABLE(
	[StoreId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[StoreDescription] [nvarchar](250) NULL,
	[Status] [char](1) NULL,
	[WhsCode] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_TaxType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_TaxType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TaxCode] [nvarchar](50) NOT NULL,
	[TaxName] [nvarchar](50) NULL,
	[TaxPercent] [decimal](19, 6) NULL,
	[TaxType] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_UOMType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_UOMType] AS TABLE(
	[UOMCode] [nvarchar](50) NOT NULL,
	[UOMName] [nvarchar](250) NULL,
	[Status] [char](1) NULL,
	[CompanyCode] [nvarchar](50) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[M_WarehouseType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[M_WarehouseType] AS TABLE(
	[WhsCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[WhsName] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[WhsType] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LogTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LogTableType] AS TABLE(
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](100) NOT NULL,
	[StoreId] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](100) NOT NULL,
	[TransId] [nvarchar](100) NOT NULL,
	[LineNum] [nvarchar](100) NOT NULL,
	[Action] [nvarchar](500) NOT NULL,
	[Time] [datetime] NULL,
	[Value] [nvarchar](max) NOT NULL,
	[Result] [nvarchar](500) NOT NULL,
	[CustomF1] [nvarchar](max) NOT NULL,
	[CustomF2] [nvarchar](max) NOT NULL,
	[CustomF3] [nvarchar](max) NOT NULL,
	[CustomF4] [nvarchar](max) NOT NULL,
	[CustomF5] [nvarchar](max) NOT NULL,
	[CreatedBy] [nvarchar](300) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[TerminalId] [nvarchar](300) NOT NULL,
	[CustomF6] [nvarchar](3000) NOT NULL,
	[CustomF7] [nvarchar](3000) NOT NULL,
	[CustomF8] [nvarchar](3000) NOT NULL,
	[CustomF9] [nvarchar](3000) NOT NULL,
	[CustomF10] [nvarchar](3000) NOT NULL,
	[rowguid] [uniqueidentifier] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LoyaltyBuyType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LoyaltyBuyType] AS TABLE(
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ValueType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](10) NULL,
	[Value_2] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LoyaltyCustomerType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LoyaltyCustomerType] AS TABLE(
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[CustomerValue] [nvarchar](50) NULL,
	[CustomerType] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LoyaltyEarnType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LoyaltyEarnType] AS TABLE(
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ConditionType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](50) NULL,
	[Value_2] [decimal](19, 6) NULL,
	[ValueType] [nvarchar](50) NULL,
	[EarnValue] [decimal](19, 6) NULL,
	[MaxPointApply] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LoyaltyExcludeType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LoyaltyExcludeType] AS TABLE(
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineType] [nvarchar](50) NOT NULL,
	[LineCode] [nvarchar](50) NOT NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LoyaltyHeaderType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LoyaltyHeaderType] AS TABLE(
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LoyaltyType] [int] NULL,
	[LoyaltyName] [nvarchar](250) NULL,
	[CustomerType] [char](1) NULL,
	[ValidDateFrom] [date] NULL,
	[ValidDateTo] [date] NULL,
	[ValidTimeFrom] [int] NULL,
	[ValidTimeTo] [int] NULL,
	[IsMon] [char](1) NULL,
	[IsTue] [char](1) NULL,
	[IsWed] [char](1) NULL,
	[IsThu] [char](1) NULL,
	[IsFri] [char](1) NULL,
	[IsSat] [char](1) NULL,
	[IsSun] [char](1) NULL,
	[TotalBuyFrom] [decimal](19, 6) NULL,
	[TotalBuyTo] [decimal](19, 6) NULL,
	[TotalEarnType] [nvarchar](50) NULL,
	[TotalEarnValue] [decimal](19, 6) NULL,
	[MaxTotalEarnValue] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_LoyaltyStoreType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_LoyaltyStoreType] AS TABLE(
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[StoreValue] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_PromoBuyType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_PromoBuyType] AS TABLE(
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ValueType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](10) NULL,
	[Value_2] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_PromoCustomerType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_PromoCustomerType] AS TABLE(
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[CustomerValue] [nvarchar](50) NULL,
	[CustomerType] [varchar](5) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_PromoGetType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_PromoGetType] AS TABLE(
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ConditionType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](50) NULL,
	[Value_2] [decimal](19, 6) NULL,
	[ValueType] [nvarchar](50) NULL,
	[GetValue] [decimal](19, 6) NULL,
	[MaxAmtDis] [decimal](19, 6) NULL,
	[MaxQtyDis] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_PromoHeaderType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_PromoHeaderType] AS TABLE(
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PromoType] [varchar](5) NULL,
	[PromoName] [nvarchar](250) NULL,
	[CustomerType] [varchar](5) NULL,
	[ValidDateFrom] [date] NULL,
	[ValidDateTo] [date] NULL,
	[ValidTimeFrom] [int] NULL,
	[ValidTimeTo] [int] NULL,
	[IsMon] [char](1) NULL,
	[IsTue] [char](1) NULL,
	[IsWed] [char](1) NULL,
	[IsThu] [char](1) NULL,
	[IsFri] [char](1) NULL,
	[IsSat] [char](1) NULL,
	[IsSun] [char](1) NULL,
	[TotalBuyFrom] [decimal](19, 6) NULL,
	[TotalBuyTo] [decimal](19, 6) NULL,
	[TotalGetType] [nvarchar](50) NULL,
	[TotalGetValue] [decimal](19, 6) NULL,
	[MaxTotalGetValue] [decimal](19, 6) NULL,
	[IsCombine] [char](1) NULL,
	[IsVoucher] [bit] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[SAPPromoId] [nvarchar](50) NULL,
	[SAPBonusBuyId] [nvarchar](50) NULL,
	[SchemaId] [nvarchar](50) NULL,
	[MaxQtyByReceipt] [decimal](19, 6) NULL,
	[MaxQtyByStore] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_PromoOTGroupType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_PromoOTGroupType] AS TABLE(
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[GroupID] [nvarchar](100) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUoM] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[S_PromoStoreType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[S_PromoStoreType] AS TABLE(
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[StoreValue] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[Sales_DeliveryTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[Sales_DeliveryTableType] AS TABLE(
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[DeliveryType] [nvarchar](20) NULL,
	[DeliveryMethod] [nvarchar](250) NULL,
	[DeliveryFee] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[SalesHeaderTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[SalesHeaderTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](20) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesPersonName] [nvarchar](250) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[SalesType] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
	[DataSource] [nvarchar](50) NULL,
	[POSType] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[EInvoice] [nvarchar](10) NULL,
	[SyncJAStatus] [char](1) NULL,
	[SyncJADate] [datetime] NULL,
	[SyncJAMsg] [nvarchar](500) NULL,
	[Phone] [nvarchar](50) NULL,
	[CusName] [nvarchar](250) NULL,
	[CusAddress] [nvarchar](250) NULL,
	[Reason] [nvarchar](250) NULL,
	[CollectedStatus] [nvarchar](50) NULL,
	[OMSId] [nvarchar](50) NULL,
	[Chanel] [nvarchar](50) NULL,
	[StartTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[ShortOrderID] [nvarchar](50) NULL,
	[MerchantId] [nvarchar](50) NULL,
	[OMSStatus] [nvarchar](50) NULL,
	[PromoId] [nvarchar](50) NULL,
	[ApprovalId] [nvarchar](50) NULL,
	[RewardPoints] [decimal](19, 6) NULL,
	[ExpiryDate] [datetime] NULL,
	[DocDate] [datetime] NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
	[LuckyNo] [nvarchar](50) NULL,
	[OrderId] [uniqueidentifier] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[SalesInvoiceTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[SalesInvoiceTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[CustomerName] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[SalesLineSerialTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[SalesLineSerialTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](100) NULL,
	[LineNum] [int] NULL,
	[Description] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[Prefix] [nvarchar](50) NULL,
	[ExpDate] [datetime] NULL,
	[StoreId] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](2500) NULL,
	[CustomF4] [nvarchar](2500) NULL,
	[CustomF5] [nvarchar](2500) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[SalesLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[SalesLineTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
	[StoreAreaId] [nvarchar](50) NULL,
	[TimeFrameId] [nvarchar](50) NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](50) NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](1) NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[PrepaidCardNo] [nvarchar](50) NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](15) NULL,
	[Description] [nvarchar](250) NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[SerialNum] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[ItemTypeS4] [nvarchar](15) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
	[PriceListId] [nvarchar](50) NULL,
	[ProductId] [nvarchar](50) NULL,
	[WeightScaleBarcode] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[BookletNo] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[SalesPaymentTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[SalesPaymentTableType] AS TABLE(
	[PaymentCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[CardType] [nvarchar](50) NULL,
	[CardHolderName] [nvarchar](250) NULL,
	[CardNo] [nvarchar](50) NULL,
	[VoucherBarCode] [nvarchar](250) NULL,
	[VoucherSerial] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](250) NULL,
	[DataSource] [nvarchar](50) NULL,
	[Currency] [nvarchar](50) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CardExpiryDate] [datetime] NULL,
	[AdjudicationCode] [nvarchar](50) NULL,
	[AuthorizationDateTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[FCRoundingOff] [decimal](19, 6) NULL,
	[ForfeitCode] [nvarchar](150) NULL,
	[Forfeit] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[SalesPromoTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[SalesPromoTableType] AS TABLE(
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ApplyType] [nvarchar](50) NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Value] [decimal](19, 6) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoTypeLine] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoAmt] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_DeliveryHeaderTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_DeliveryHeaderTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](20) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesPersonName] [nvarchar](250) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[SalesType] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
	[DataSource] [nvarchar](50) NULL,
	[POSType] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[EInvoice] [nvarchar](10) NULL,
	[SyncJAStatus] [char](1) NULL,
	[SyncJADate] [datetime] NULL,
	[SyncJAMsg] [nvarchar](500) NULL,
	[Phone] [nvarchar](50) NULL,
	[CusName] [nvarchar](250) NULL,
	[CusAddress] [nvarchar](250) NULL,
	[Reason] [nvarchar](250) NULL,
	[CollectedStatus] [nvarchar](50) NULL,
	[OMSId] [nvarchar](50) NULL,
	[Chanel] [nvarchar](50) NULL,
	[StartTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[ShortOrderID] [nvarchar](50) NULL,
	[MerchantId] [nvarchar](50) NULL,
	[OMSStatus] [nvarchar](50) NULL,
	[PromoId] [nvarchar](50) NULL,
	[ApprovalId] [nvarchar](50) NULL,
	[RewardPoints] [decimal](19, 6) NULL,
	[ExpiryDate] [datetime] NULL,
	[DocDate] [datetime] NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
	[LuckyNo] [nvarchar](50) NULL,
	[DeliveryBy] [nvarchar](550) NULL,
	[ReceiptBy] [nvarchar](550) NULL,
	[From] [nvarchar](550) NULL,
	[To] [nvarchar](550) NULL,
	[ToCustom1] [nvarchar](550) NULL,
	[ToCustom2] [nvarchar](550) NULL,
	[ToCustom3] [nvarchar](550) NULL,
	[OrderId] [uniqueidentifier] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_DeliveryLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_DeliveryLineTableType] AS TABLE(
	[TransId] [nvarchar](100) NOT NULL,
	[LineId] [nvarchar](100) NOT NULL,
	[CompanyCode] [nvarchar](100) NOT NULL,
	[ItemCode] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](100) NOT NULL,
	[BarCode] [nvarchar](500) NOT NULL,
	[UOMCode] [nvarchar](100) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](100) NOT NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](100) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](100) NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](20) NOT NULL,
	[Remark] [nvarchar](500) NOT NULL,
	[PromoId] [nvarchar](100) NOT NULL,
	[PromoType] [nvarchar](100) NOT NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](100) NOT NULL,
	[SalesMode] [nvarchar](100) NOT NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](100) NOT NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NOT NULL,
	[POSService] [nvarchar](100) NOT NULL,
	[StoreAreaId] [nvarchar](100) NOT NULL,
	[TimeFrameId] [nvarchar](100) NOT NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](100) NOT NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](100) NOT NULL,
	[BaseTransId] [nvarchar](100) NOT NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](2) NOT NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[PrepaidCardNo] [nvarchar](100) NOT NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](30) NOT NULL,
	[Description] [nvarchar](500) NOT NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[Name] [nvarchar](500) NOT NULL,
	[Phone] [nvarchar](100) NOT NULL,
	[ItemTypeS4] [nvarchar](30) NOT NULL,
	[Custom1] [nvarchar](500) NOT NULL,
	[Custom2] [nvarchar](500) NOT NULL,
	[Custom3] [nvarchar](500) NOT NULL,
	[Custom4] [nvarchar](500) NOT NULL,
	[Custom5] [nvarchar](500) NOT NULL,
	[PriceListId] [nvarchar](100) NOT NULL,
	[ProductId] [nvarchar](100) NOT NULL,
	[WeightScaleBarcode] [nvarchar](100) NOT NULL,
	[StoreId] [nvarchar](100) NOT NULL,
	[BookletNo] [nvarchar](100) NOT NULL,
	[OrgQty] [decimal](19, 6) NULL,
	[DeliveryQty] [decimal](19, 6) NULL,
	[ReceiptQty] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_DeliveryOrderLineSerialTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_DeliveryOrderLineSerialTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](100) NULL,
	[LineNum] [int] NULL,
	[Description] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[Prefix] [nvarchar](50) NULL,
	[ExpDate] [datetime] NULL,
	[StoreId] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](2500) NULL,
	[CustomF4] [nvarchar](2500) NULL,
	[CustomF5] [nvarchar](2500) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_DeliveryOrderLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_DeliveryOrderLineTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
	[StoreAreaId] [nvarchar](50) NULL,
	[TimeFrameId] [nvarchar](50) NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](50) NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](1) NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[PrepaidCardNo] [nvarchar](50) NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](15) NULL,
	[Description] [nvarchar](250) NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[SerialNum] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[ItemTypeS4] [nvarchar](15) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
	[PriceListId] [nvarchar](50) NULL,
	[ProductId] [nvarchar](50) NULL,
	[WeightScaleBarcode] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[BookletNo] [nvarchar](50) NULL,
	[OrgQty] [decimal](19, 6) NULL,
	[DeliveryQty] [decimal](19, 6) NULL,
	[ReceiptQty] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_DivisionLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_DivisionLineTableType] AS TABLE(
	[Id] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_EndDateDetailType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_EndDateDetailType] AS TABLE(
	[CompanyCode] [nvarchar](20) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Id] [uniqueidentifier] NOT NULL,
	[EndDateId] [nvarchar](50) NOT NULL,
	[LineId] [int] NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[UoMCode] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](250) NULL,
	[Barcode] [nvarchar](50) NULL,
	[Price] [decimal](19, 6) NULL,
	[Quantity] [decimal](18, 9) NULL,
	[LineTotal] [decimal](18, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_EndDatePaymentType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_EndDatePaymentType] AS TABLE(
	[CompanyCode] [nvarchar](20) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[EndDateId] [nvarchar](50) NOT NULL,
	[Id] [uniqueidentifier] NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[LineId] [int] NULL,
	[PaymentCode] [nvarchar](50) NULL,
	[EOD_Code] [nvarchar](50) NULL,
	[Amount] [decimal](19, 6) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[Balance] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[FCCollectedAmount] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[BankInAmt] [decimal](19, 6) NULL,
	[BankInBalance] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_EndDateType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_EndDateType] AS TABLE(
	[CompanyCode] [nvarchar](20) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Id] [nvarchar](50) NOT NULL,
	[Date] [datetime] NULL,
	[Description] [nvarchar](150) NULL,
	[Remark] [nvarchar](250) NULL,
	[Status] [nvarchar](2) NULL,
	[CreateOn] [datetime] NULL,
	[CreateBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[TotalSales] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[TotalCollected] [decimal](19, 6) NULL,
	[TotalBalance] [decimal](19, 6) NULL,
	[TaxTotal] [decimal](19, 6) NULL,
	[DiscountTotal] [decimal](19, 6) NULL,
	[PaymentTotal] [decimal](19, 6) NULL,
	[LineItemCount] [decimal](19, 6) NULL,
	[TaxCount] [decimal](19, 6) NULL,
	[DiscountCount] [decimal](19, 6) NULL,
	[PaymentCount] [decimal](19, 6) NULL,
	[AmtNotInBank] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_PaymentLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_PaymentLineTableType] AS TABLE(
	[PaymentCode] [nvarchar](100) NOT NULL,
	[CompanyCode] [nvarchar](100) NOT NULL,
	[TransId] [nvarchar](100) NOT NULL,
	[LineId] [nvarchar](100) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](100) NULL,
	[CardType] [nvarchar](100) NULL,
	[CardHolderName] [nvarchar](500) NULL,
	[CardNo] [nvarchar](100) NULL,
	[VoucherBarCode] [nvarchar](500) NULL,
	[VoucherSerial] [nvarchar](100) NULL,
	[CreatedBy] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](100) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](1000) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](1000) NULL,
	[DataSource] [nvarchar](100) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](100) NULL,
	[Currency] [nvarchar](100) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](100) NULL,
	[CardExpiryDate] [datetime] NULL,
	[AdjudicationCode] [nvarchar](100) NULL,
	[AuthorizationDateTime] [datetime] NULL,
	[TerminalId] [nvarchar](100) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[FCRoundingOff] [decimal](19, 6) NULL,
	[ForfeitCode] [nvarchar](300) NULL,
	[Forfeit] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
	[StoreId] [nvarchar](100) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_PurchaseOrderHeaderType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_PurchaseOrderHeaderType] AS TABLE(
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[CardCode] [nvarchar](50) NULL,
	[CardName] [nvarchar](250) NULL,
	[InvoiceAddress] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[VATTotal] [decimal](19, 6) NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[IsCanceled] [char](1) NULL,
	[DocEntry] [int] NULL,
	[DataSource] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_PurchaseOrderLineSerialType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_PurchaseOrderLineSerialType] AS TABLE(
	[PurchaseId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_PurchaseOrderLineType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_PurchaseOrderLineType] AS TABLE(
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseRef] [nvarchar](50) NULL,
	[BaseType] [nvarchar](50) NULL,
	[BaseEntry] [nvarchar](50) NULL,
	[BaseLine] [int] NULL,
	[LineStatus] [char](1) NULL,
	[DiscPercent] [decimal](19, 6) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_Sales_DeliveryTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_Sales_DeliveryTableType] AS TABLE(
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[DeliveryType] [nvarchar](20) NULL,
	[DeliveryMethod] [nvarchar](250) NULL,
	[DeliveryFee] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesHeaderTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesHeaderTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](20) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesPersonName] [nvarchar](250) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[SalesType] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
	[DataSource] [nvarchar](50) NULL,
	[POSType] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[EInvoice] [nvarchar](10) NULL,
	[SyncJAStatus] [char](1) NULL,
	[SyncJADate] [datetime] NULL,
	[SyncJAMsg] [nvarchar](500) NULL,
	[Phone] [nvarchar](50) NULL,
	[CusName] [nvarchar](250) NULL,
	[CusAddress] [nvarchar](250) NULL,
	[Reason] [nvarchar](250) NULL,
	[CollectedStatus] [nvarchar](50) NULL,
	[OMSId] [nvarchar](50) NULL,
	[Chanel] [nvarchar](50) NULL,
	[StartTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[ShortOrderID] [nvarchar](50) NULL,
	[MerchantId] [nvarchar](50) NULL,
	[OMSStatus] [nvarchar](50) NULL,
	[PromoId] [nvarchar](50) NULL,
	[ApprovalId] [nvarchar](50) NULL,
	[RewardPoints] [decimal](19, 6) NULL,
	[ExpiryDate] [datetime] NULL,
	[DocDate] [datetime] NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
	[LuckyNo] [nvarchar](50) NULL,
	[OrderId] [uniqueidentifier] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesInvoiceTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesInvoiceTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[CustomerName] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesLineSerialTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesLineSerialTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](100) NULL,
	[LineNum] [int] NULL,
	[Description] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[Prefix] [nvarchar](50) NULL,
	[ExpDate] [datetime] NULL,
	[StoreId] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](2500) NULL,
	[CustomF4] [nvarchar](2500) NULL,
	[CustomF5] [nvarchar](2500) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesLineTableType] AS TABLE(
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
	[StoreAreaId] [nvarchar](50) NULL,
	[TimeFrameId] [nvarchar](50) NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](50) NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](1) NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[PrepaidCardNo] [nvarchar](50) NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](15) NULL,
	[Description] [nvarchar](250) NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[SerialNum] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[ItemTypeS4] [nvarchar](15) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
	[PriceListId] [nvarchar](50) NULL,
	[ProductId] [nvarchar](50) NULL,
	[WeightScaleBarcode] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[BookletNo] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesPaymentTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesPaymentTableType] AS TABLE(
	[PaymentCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[CardType] [nvarchar](50) NULL,
	[CardHolderName] [nvarchar](250) NULL,
	[CardNo] [nvarchar](50) NULL,
	[VoucherBarCode] [nvarchar](250) NULL,
	[VoucherSerial] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](250) NULL,
	[DataSource] [nvarchar](50) NULL,
	[Currency] [nvarchar](50) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CardExpiryDate] [datetime] NULL,
	[AdjudicationCode] [nvarchar](50) NULL,
	[AuthorizationDateTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[FCRoundingOff] [decimal](19, 6) NULL,
	[ForfeitCode] [nvarchar](150) NULL,
	[Forfeit] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesPaymentType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesPaymentType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[PaymentCode] [nvarchar](50) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[CardType] [nvarchar](50) NULL,
	[CardHolderName] [nvarchar](250) NULL,
	[CardNo] [nvarchar](50) NULL,
	[VoucherBarCode] [nvarchar](250) NULL,
	[VoucherSerial] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](50) NULL,
	[DataSource] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_SalesPromoTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_SalesPromoTableType] AS TABLE(
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ApplyType] [nvarchar](50) NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Value] [decimal](19, 6) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoTypeLine] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoAmt] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_ShiftHeaderType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_ShiftHeaderType] AS TABLE(
	[ShiftId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[DeviceId] [nvarchar](50) NOT NULL,
	[OpenAmt] [decimal](19, 6) NULL,
	[EndAmt] [decimal](19, 6) NULL,
	[ShiftTotal] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[Id] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_ShiftLineType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_ShiftLineType] AS TABLE(
	[ShiftId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PaymentCode] [nvarchar](50) NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[Value] [decimal](19, 6) NULL,
	[FCValue] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CollectAmount] [decimal](19, 6) NULL,
	[FCCollectedAmount] [decimal](19, 6) NULL,
	[BankInAmt] [decimal](19, 6) NULL,
	[CountedBalance] [decimal](19, 6) NULL,
	[BankInBalance] [decimal](19, 6) NULL,
	[Cashier] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_ShiftSummaryType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_ShiftSummaryType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ShiftId] [nvarchar](50) NOT NULL,
	[TerminalId] [nvarchar](50) NOT NULL,
	[SummaryType] [nvarchar](50) NOT NULL,
	[SummaryValue] [nvarchar](50) NOT NULL,
	[SummaryCount] [int] NULL,
	[SummaryAmount] [decimal](19, 6) NULL,
	[Currency] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_ShippingDivisionLineTableType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_ShippingDivisionLineTableType] AS TABLE(
	[Id] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CusId] [nvarchar](50) NOT NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[ShippingCode] [nvarchar](150) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_StoreDailyType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_StoreDailyType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[DeviceId] [nvarchar](50) NOT NULL,
	[CreateDate] [datetime] NULL,
	[TotalSales] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[TotalCollected] [decimal](19, 6) NULL,
	[TotalBalance] [decimal](19, 6) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[T_StoreSummaryType]    Script Date: 1/30/2023 9:43:31 AM ******/
CREATE TYPE [dbo].[T_StoreSummaryType] AS TABLE(
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[TerminalId] [nvarchar](50) NOT NULL,
	[SummaryType] [nvarchar](50) NOT NULL,
	[SummaryValue] [nvarchar](50) NOT NULL,
	[SummaryCount] [int] NULL,
	[SummaryAmount] [decimal](19, 6) NULL,
	[BusinessDate] [date] NULL,
	[Currency] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetDivisionItemByCus]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- select *  from  [[fn_GetDivisionItemByCus]] ('CP001', '3001' ,'2022-10-09')
-- select Sum(collectedAmount) collectedAmount, Sum(totalAmt) totalAmt, (Sum(collectedAmount) - Sum(totalAmt)) totalBalance, Sum(TotalQty) totalItem from  [fn_GetEndDateSummary] ('CP001', '3001' ,'2022-10-09')
CREATE   Function [dbo].[fn_GetDivisionItemByCus](
	@CompanyCode	nvarchar(50),
	@CusId	nvarchar(50)	,
	@Date	Date
)

RETURNS @DivisionItemByCusTable TABLE 
	(
		CusId nvarchar(150), ItemCode nvarchar(250),   BarCode nvarchar(250),  UOMCode nvarchar(250),  
		Quantity decimal(19, 6), DivisionQty decimal(19, 6)
	 
	)
AS
begin 
 
	 
	INSERT INTO @DivisionItemByCusTable
	select  @CusId CusId,  ItemCode, BarCode, UOMCode, Quantity, 0 DivisionQty 
	
	from T_DivisionLine t1 with (nolock) 
	left join T_DivisionHeader t2 with (nolock)  on t1.Id = t2.Id and t1.CompanyCode= t2.CompanyCode
	where  t1.StoreId = @CusId  and CONVERT(date, t2.DocDate) = @Date

	return

end

GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetEndDatePaymentDetail]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- select *  from  [fn_GetEndDatePaymentDetail] ('CP001', '3001' ,'2022-10-09')
-- select Sum(collectedAmount) collectedAmount, Sum(totalAmt) totalAmt, (Sum(collectedAmount) - Sum(totalAmt)) totalBalance, Sum(TotalQty) totalItem from  [fn_GetEndDateSummary] ('CP001', '3001' ,'2022-10-09')
CREATE   Function [dbo].[fn_GetEndDatePaymentDetail](
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date)

RETURNS @EODSummaryTable TABLE 
	(
		RowNum int, CounterId nvarchar(150), ShiftId nvarchar(250),   PaymentCode nvarchar(250),  ShortName nvarchar(250), Currency nvarchar(150),  
		Rate decimal(19, 6), FCAmount decimal(19, 6), 
		CreatedBy  nvarchar(250), FullName nvarchar(550),   Status nvarchar(50),TotalAmt decimal(19, 6), CollectedAmount decimal(19, 6), 
		EOD_Code nvarchar(250), ChargableAmount decimal(19, 6),  ChangeAmt decimal(19, 6),  BankInAmt decimal(19, 6), BankInBalance decimal(19, 6) 
		--TotalQty decimal(19, 6) 
	    --TotalCollectedAmount decimal(19, 6) ,	TotalAmt decimal(19, 6) ,	TotalBalance decimal(19, 6) ,	TotalItem decimal(19, 6) 
	)
AS
begin 
 

	    Declare @Currency nvarchar(15); 

		Declare @DailyId nvarchar(15); 
		set @DailyId = (select dbo.[fnc_GetDailyID]( @StoreId, @CompanyCode, @Date))

		set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode)


		--Declare @EODSummaryTableX TABLE (
		--	CounterId nvarchar(150), ShiftId nvarchar(250),   PaymentCode nvarchar(250),  ShortName nvarchar(250), Currency nvarchar(150),  
		--	Rate decimal(19, 6), FCAmount decimal(19, 6), 
		--	CreatedBy  nvarchar(250), FullName nvarchar(550),   Status nvarchar(50),TotalAmt decimal(19, 6), CollectedAmount decimal(19, 6),
		--	EOD_Code nvarchar(250), ChargableAmount decimal(19, 6),  ChangeAmt decimal(19, 6),  BankInAmt decimal(19, 6), BankInBalance decimal(19, 6) ,
		--	TotalQty decimal(19, 6) 
		--)



		INSERT INTO @EODSummaryTable
		select distinct ROW_NUMBER() OVER(ORDER BY t1.TerminalId, t1.ShiftId, t1.PaymentCode ASC) AS RowNum , t1.TerminalId CounterId, t1.ShiftId, t1.PaymentCode, isnull( t7.ShortName, t1.PaymentCode) ShortName, 
		isnull(t1.Currency, @Currency) Currency,  isnull( t1.Rate, 1) Rate, case isnull(t1.Rate, 1) when 1 then 0 else SUM(t1.FCAmount ) end FCAmount,
		--t1.CreatedBy, t4.FirstName + ' ' + t4.LastName as FullName, 
		'' CreatedBy, '' as FullName, 
		t5.Status,
		SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt,  
		-- Lập sửa để get End Amount của Shift đã được ghi nhận 
		case t5.Status when 'C' then isnull(t6.CollectAmount,0) else  CASE WHEN t7.PaymentType <> 'C' 
		THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) 
		ELSE 
		 0
		 
		END end CollectedAmount, 
	     
		t7.EODCode EOD_Code,
	
		SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt, 
		
		
		case t5.Status when 'C' then isnull(t6.BankInAmt,0) else  CASE WHEN t7.PaymentType <> 'C' THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) ELSE 0 END end   BankInAmt ,
		0 BankInBalance  
		 
		 --SUM(t8.Quantity) TotalQty
		from T_SalesPayment t1 with (nolock)
		left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId  
		--left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
		left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
		left join T_ShiftLine t6  with (nolock) on t6.ShiftId = t5.ShiftId and t6.CompanyCode = t5.CompanyCode   
		and isnull(t6.Currency, @Currency) = isnull(t1.Currency, @Currency) and t1.PaymentCode = t6.PaymentCode 
		left Join M_PaymentMethod t7  with (nolock) on t1.CompanyCode = t7.CompanyCode and t1.PaymentCode = t7.PaymentCode

		--left Join T_SalesLine t8  with (nolock) on t1.CompanyCode = t8.CompanyCode and t2.TransId = t8.TransId  
		--left join T_PickupAmount t8 with (nolock) on t5.CompanyCode = t8.CompanyCode and t8.ShiftId = t5.ShiftId
		where t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId   
				and ISNULL(t2.IsCanceled,'N') = 'N'  and t2.Status = 'C' 

				and	T1.ShiftId  IN (
				    --CONVERT(date, CreatedOn ) =  CONVERT(date, @Date)
					SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND StoreId = @StoreId 
					AND CompanyCode = @CompanyCode
				) 
			 
		Group by  t7.PaymentType,t1.TerminalId ,  t6.CounterId, t1.ShiftId,t1.PaymentCode,t7.ShortName , t1.Currency,  t1.Rate,  t5.Status, t6.CollectAmount, t7.EODCode, t6.BankInAmt ,t6.BankInBalance
	


		Declare @TotalQtyCal decimal(19, 6); 

		set @TotalQtyCal = (select SUM(t1.Quantity) from T_SalesLine t1 with (nolock)
		left join  T_SalesHeader t2 with (nolock) on t1.TransId = t2.TransId
		where  ShiftId  IN ( 
					SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND StoreId = @StoreId 
					AND CompanyCode = @CompanyCode
				) )

	 -- 	INSERT INTO @EODSummaryTable
		--select Sum(CollectedAmount) collectedAmount, Sum(TotalAmt) totalAmt, (Sum(CollectedAmount) - Sum(TotalAmt)) totalBalance, @TotalQtyCal totalItem
		--from   @EODSummaryTableX


	return

end

GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetEndDateSummary]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- select *  from  [fn_GetEndDateSummary] ('CP001', '3001' ,'2022-10-09')
-- select Sum(collectedAmount) collectedAmount, Sum(totalAmt) totalAmt, (Sum(collectedAmount) - Sum(totalAmt)) totalBalance, Sum(TotalQty) totalItem from  [fn_GetEndDateSummary] ('CP001', '3001' ,'2022-10-09')
CREATE   Function [dbo].[fn_GetEndDateSummary](
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date)

RETURNS @EODSummaryTable TABLE 
	(
		--CounterId nvarchar(150), ShiftId nvarchar(250),   PaymentCode nvarchar(250),  ShortName nvarchar(250), Currency nvarchar(150),  
		--Rate decimal(19, 6), FCAmount decimal(19, 6), 
		--CreatedBy  nvarchar(250), FullName nvarchar(550),   Status nvarchar(50),TotalAmt decimal(19, 6), CollectedAmount decimal(19, 6),
		--EOD_Code nvarchar(250), ChargableAmount decimal(19, 6),  ChangeAmt decimal(19, 6),  BankInAmt decimal(19, 6), BankInBalance decimal(19, 6) ,
		--TotalQty decimal(19, 6) 
	    TotalCollectedAmount decimal(19, 6) ,	TotalAmt decimal(19, 6) ,	TotalBalance decimal(19, 6) ,	TotalCount decimal(19, 6) ,	TotalItem decimal(19, 6) 
	)
AS
begin 
 

	    Declare @Currency nvarchar(15); 

		Declare @DailyId nvarchar(15); 
		set @DailyId = (select dbo.[fnc_GetDailyID]( @StoreId, @CompanyCode, @Date))

		set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode)


		Declare @EODSummaryTableX TABLE (
			CounterId nvarchar(150), ShiftId nvarchar(250),   PaymentCode nvarchar(250),  ShortName nvarchar(250), Currency nvarchar(150),  
			Rate decimal(19, 6), FCAmount decimal(19, 6), 
			CreatedBy  nvarchar(250), FullName nvarchar(550),   Status nvarchar(50),TotalAmt decimal(19, 6), CollectedAmount decimal(19, 6),
			EOD_Code nvarchar(250), ChargableAmount decimal(19, 6),  ChangeAmt decimal(19, 6),  BankInAmt decimal(19, 6), BankInBalance decimal(19, 6) ,
			TotalQty decimal(19, 6)
		)



		INSERT INTO @EODSummaryTableX
		select distinct t1.TerminalId CounterId, t1.ShiftId,t1.PaymentCode, isnull( t7.ShortName, t1.PaymentCode) ShortName, 
		isnull(t1.Currency, @Currency) Currency,  isnull( t1.Rate, 1) Rate, case isnull(t1.Rate, 1) when 1 then 0 else SUM(t1.FCAmount ) end FCAmount,
		--t1.CreatedBy, t4.FirstName + ' ' + t4.LastName as FullName, 
		'' CreatedBy, '' as FullName, 
		t5.Status,
		SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt,
		-- Lập sửa để get End Amount của Shift đã được ghi nhận 
		case t5.Status when 'C' then isnull(t6.CollectAmount,0) else  CASE WHEN t7.PaymentType <> 'C' 
		THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) 
		ELSE 
		 0
		 
		END end CollectedAmount, 
		
		t7.EODCode EOD_Code,
	
		SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt, 
		
		
		case t5.Status when 'C' then isnull(t6.BankInAmt,0) else  CASE WHEN t7.PaymentType <> 'C' THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) ELSE 0 END end   BankInAmt ,
		0 BankInBalance , 0 
		 
		 --SUM(t8.Quantity) TotalQty
		from T_SalesPayment t1 with (nolock)
		left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId  
		--left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
		left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
		left join T_ShiftLine t6  with (nolock) on t6.ShiftId = t5.ShiftId and t6.CompanyCode = t5.CompanyCode   
		and isnull(t6.Currency, @Currency) = isnull(t1.Currency, @Currency) and t1.PaymentCode = t6.PaymentCode 
		left Join M_PaymentMethod t7  with (nolock) on t1.CompanyCode = t7.CompanyCode and t1.PaymentCode = t7.PaymentCode

		--left Join T_SalesLine t8  with (nolock) on t1.CompanyCode = t8.CompanyCode and t2.TransId = t8.TransId  
		--left join T_PickupAmount t8 with (nolock) on t5.CompanyCode = t8.CompanyCode and t8.ShiftId = t5.ShiftId
		where t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId   
				and ISNULL(t2.IsCanceled,'N') = 'N'  and t2.Status = 'C' 

				and	T1.ShiftId  IN (
				    --CONVERT(date, CreatedOn ) =  CONVERT(date, @Date)
					SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND StoreId = @StoreId 
					AND CompanyCode = @CompanyCode
				) 
			 
		Group by  t7.PaymentType,t1.TerminalId ,  t6.CounterId, t1.ShiftId,t1.PaymentCode,t7.ShortName , t1.Currency,  t1.Rate,  t5.Status, t6.CollectAmount, t7.EODCode, t6.BankInAmt ,t6.BankInBalance
	


		Declare @TotalQtyCal decimal(19, 6); 

		set @TotalQtyCal = (select SUM(t1.Quantity) from T_SalesLine t1 with (nolock)
		left join  T_SalesHeader t2 with (nolock) on t1.TransId = t2.TransId
		where  ShiftId  IN ( 
					SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND StoreId = @StoreId 
					AND CompanyCode = @CompanyCode
				) )

		Declare @TotalBillCount decimal(19, 6); 

		set @TotalBillCount = (select Count(t2.TransId) from  T_SalesHeader t2 with (nolock)  
		where  ShiftId  IN ( 
					SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND StoreId = @StoreId 
					AND CompanyCode = @CompanyCode
				) )



	  	INSERT INTO @EODSummaryTable
		select Sum(CollectedAmount) collectedAmount, Sum(TotalAmt) totalAmt, (Sum(CollectedAmount) - Sum(TotalAmt)) totalBalance, @TotalBillCount TotalCount, @TotalQtyCal totalItem
		from   @EODSummaryTableX


	return

end
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetPriceListByCustomerGroup]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- select * from [fn_GetPriceListByCustomerGroup]('CP001','1001','')
-- =============================================
CREATE FUNCTION  [dbo].[fn_GetPriceListByCustomerGroup]( 
	 @CompanyCode	nvarchar(50)	,
	 @StoreId	nvarchar(50)	,
	 @CustomerGroupId	nvarchar(50)
)
 
RETURNS @ItemTable  TABLE
	(StoreId nvarchar(50), ItemCode nvarchar(50),   UOMCode nvarchar(50),  Barcode nvarchar(50), PriceBeforeTAx decimal(19, 6), PriceAfterTAx decimal(19, 6), 
	ValidFrom DateTime,ValidTo DateTime, PriceListId  nvarchar(50),  Status nvarchar(50))
AS 
begin
	DECLARE	@CusGrpTmp	nvarchar(50)
	DECLARE	@CountInt	int
	--(select top 1 isnull(CustomerGrpId , 1)  from M_Customer where CompanyCode = @CompanyCode and CustomerId = @CustomerId)
	set @CusGrpTmp = case isnull(@CustomerGroupId,'') when '' then 2 else @CustomerGroupId end
	DECLARE	@CusGrpId	nvarchar(50)
	DECLARE	@Priority	decimal(19,6)
	DECLARE	@PriceListId	nvarchar(50)
	
	if( (select  count(*)  from M_PriorityPriceList  with (nolock) ) <> 0 and isnull(@CusGrpTmp,'') <> '')
	begin
	   DECLARE PriorityPriceList CURSOR FOR
			select PriceListId,Priority	,CusGrpId  from M_PriorityPriceList t1 with (nolock)
			where Status ='A' and CompanyCode= @CompanyCode 
			AND (CusGrpId = @CusGrpTmp  or ISNULL(@CusGrpTmp, '')='')  
			--and CusGrpId = @CustomerGrpId 
			order by Priority asc
		OPEN PriorityPriceList
		--SELECT  * from M_PriceList RETURN

		FETCH NEXT FROM PriorityPriceList
		INTO @PriceListId, @CusGrpId,   @Priority
		WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO @ItemTable
				select distinct t1.StoreId, t1.ItemCode, t1.UOMCode, t1.BarCode, t1.PriceBeforeTax, t1.PriceAfterTax  ,t1.ValidFrom, t1.ValidTo, t1.PriceListId, t1.Status
				from M_PriceList t1 with (nolock)
				left join @ItemTable t2   on t1.ItemCode = t2.ItemCode and t1.UOMCode = t2.UOMCode  
			   join M_ItemStoreListing t3 with (nolock) on t3.CompanyCode = t1.CompanyCode and t3.ItemCode = t1.ItemCode and t1.StoreId = t3.StoreId
				where
				--t1.PriceListId = @PriceListId and t2.ItemCode is null and t1.StoreId =@StoreId
				t2.ItemCode is null
				AND (t1.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='') 
				AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='') 
				and isnull(t3.Status,'A') = 'A'
				FETCH NEXT FROM PriorityPriceList
				INTO @PriceListId, @CusGrpId,   @Priority

			END 
		CLOSE PriorityPriceList 
		DEALLOCATE PriorityPriceList
	end
	else
	begin
		INSERT INTO @ItemTable
		select distinct t1.StoreId, t1.ItemCode, t1.UOMCode, t1.BarCode, t1.PriceBeforeTax, t1.PriceAfterTax  ,t1.ValidFrom, t1.ValidTo, t1.PriceListId, t1.Status
		from M_PriceList t1 with (nolock)
		join M_ItemStoreListing t3 with (nolock) on t3.CompanyCode = t1.CompanyCode and t3.ItemCode = t1.ItemCode and t1.StoreId = t3.StoreId
		where  isnull(t3.Status,'A') = 'A' AND t1.StoreId = @StoreId
	end
	return   
end


 
 -- select * from M_CustomerGroup
 --select  *  from M_ItemStoreListing
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetPriceListByCustomerGroup_Check]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- select * from [fn_GetPriceListByCustomerGroup]('CP001', '3008', '')
-- =============================================
CREATE FUNCTION  [dbo].[fn_GetPriceListByCustomerGroup_Check]( 
	 @CompanyCode	nvarchar(50)	,
	 @StoreId	nvarchar(50)	,
	 @CustomerGroupId	nvarchar(50)
)
 
RETURNS @ItemTable  TABLE
	(StoreId nvarchar(50), ItemCode nvarchar(50),   UOMCode nvarchar(50),  Barcode nvarchar(50), PriceBeforeTAx decimal(19, 6), PriceAfterTAx decimal(19, 6), 
	ValidFrom DateTime,ValidTo DateTime, PriceListId  nvarchar(50),  Status nvarchar(50))
AS 
begin
	DECLARE	@CusGrpTmp	nvarchar(50)
	DECLARE	@CountInt	int
	--(select top 1 isnull(CustomerGrpId , 1)  from M_Customer where CompanyCode = @CompanyCode and CustomerId = @CustomerId)
	set @CusGrpTmp = case isnull(@CustomerGroupId,'') when '' then 2 else @CustomerGroupId end
	DECLARE	@CusGrpId	nvarchar(50)
	DECLARE	@Priority	decimal(19,6)
	DECLARE	@PriceListId	nvarchar(50)
	
	if( (select  count(*)  from M_PriorityPriceList  with (nolock) ) <> 0 and isnull(@CusGrpTmp,'') <> '')
	begin
	   DECLARE PriorityPriceList CURSOR FOR
			select PriceListId,Priority	,CusGrpId  from M_PriorityPriceList t1 with (nolock)
			where Status ='A' 
			--and PriceListId = 'NP'
			and CompanyCode= @CompanyCode 
			AND (CusGrpId = @CusGrpTmp  or ISNULL(@CusGrpTmp, '')='')  
			--and CusGrpId = @CustomerGrpId 
			order by Priority asc
		OPEN PriorityPriceList
		--SELECT  * from M_PriceList RETURN

		FETCH NEXT FROM PriorityPriceList
		INTO @PriceListId, @CusGrpId,   @Priority
		WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO @ItemTable
				select distinct  t1.StoreId, t1.ItemCode, t1.UOMCode, t1.BarCode, t1.PriceBeforeTax, t1.PriceAfterTax  ,t1.ValidFrom, t1.ValidTo, 
				t1.PriceListId, @PriceListId  Status
				from M_PriceList t1 with (nolock)
				left join @ItemTable t2   on t1.ItemCode = t2.ItemCode and t1.UOMCode = t2.UOMCode  
			   join M_ItemStoreListing t3 with (nolock) on t3.CompanyCode = t1.CompanyCode and t3.ItemCode = t1.ItemCode and t1.StoreId = t3.StoreId
				where
				--t1.PriceListId = @PriceListId and t2.ItemCode is null and t1.StoreId =@StoreId
				 t2.ItemCode is null AND
				 --(t1.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='') AND
				 (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='') and
				 --isnull(t3.Status,'A') = 'A' and
				 t1.ItemCode = '10004944'
				  --select * from [fn_GetPriceListByCustomerGroup_Check]('CP001', '3008', '')
				FETCH NEXT FROM PriorityPriceList
				INTO @PriceListId, @CusGrpId,   @Priority

			END 
		CLOSE PriorityPriceList 
		DEALLOCATE PriorityPriceList
	end
	 
	return   
end


 
 -- select * from M_CustomerGroup
 --select  *  from M_ItemStoreListing
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_AutoGenCode]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnc_AutoGenCode](
	@StoreId nvarchar(20)
) 

RETURNS VARCHAR(20)
AS
BEGIN
	DECLARE @id VARCHAR(20)
	set @id = (SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMdd'), RIGHT(CONCAT('0000',ISNULL(right(max(TransId),4),0) + 1),4)) 
				from T_SalesHeader
				where StoreId = @StoreId
				group by StoreId)
    if @id is null
	set @id = ( SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMdd'), '00001') )
				 
	RETURN @id
END

 
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_AutoGenDocumentCode]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--   select  dbo.[fnc_AutoGenDocumentCode] ('LK01', N'CP001',  N'2019')
CREATE FUNCTION [dbo].[fnc_AutoGenDocumentCode](
	@DocType nvarchar(5),
	@CompanyCode nvarchar(5),
	@StoreId nvarchar(20)
) 
--SOCP001100100016232
--SO100100016232
--SO100100016232
RETURNS VARCHAR(50)
AS
BEGIN
	
	DECLARE @id VARCHAR(25), @string varchar(20), @string1 varchar(20), @sql     NVARCHAR(MAX) = '';
	declare  @leng int;  
	declare  @Idleng int; 
	DECLARE @tempVl VARCHAR(25)
	set @string = @DocType + @CompanyCode  + @StoreId;
	-- 
	IF @DocType = 'SO' OR @DocType = 'SV' OR LEFT(@DocType, 2) = 'SL' -- Sale Order
	begin
		   --CONCAT( @string,)  
		--set @id = (
		--	SELECT  Top 1   RIGHT(CONCAT('00000000',ISNULL(right(TransId,8),0) + 1),8)
		--	from T_SalesHeader with (nolock)
		--	where StoreId = @StoreId and CompanyCode = @CompanyCode
			
		--	group by TransId, StoreId, CompanyCode , CreatedOn
		--	order by CreatedOn desc )

		declare @NewNum nvarchar(50);
		set @NewNum = (
			SELECT top 1  ISNULL( MAX( CONVERT (int, right(TransId,8))), 0) + 1
		 
			from T_SalesHeader with (nolock)
			where StoreId = @StoreId and CompanyCode = @CompanyCode and  (select LEFT( TransId, (select LEN(@DocType)))) = @DocType
			and LEN(TransId) = 16

			group by TransId, StoreId, CompanyCode , CreatedOn
			order by   right(TransId,8)  desc, CreatedOn desc
		)
	 
		set @string = @DocType +  @StoreId; 
		if @NewNum is null
		set @NewNum = '00000001'

	    set @id =(SELECT  CONCAT( @string, RIGHT(CONCAT('00000000', @NewNum),8))) 
	    
	end
	--IF @DocType = 'AR' -- T_InvoiceHeader
	--begin
	--	declare @NewARNum nvarchar(50);
	--	set @NewARNum = (
	--		SELECT top 1  ISNULL( MAX( CONVERT (int, right(TransId,8))), 0) + 1
	--		from T_InvoiceHeader with (nolock)
	--		where StoreId = @StoreId and CompanyCode = @CompanyCode  
	--		group by TransId, StoreId, CompanyCode , CreatedOn
	--		order by   right(TransId,8)  desc
	--	)
	 
	--	set @string = @DocType +  @StoreId; 
	--    set @id =(SELECT  CONCAT( @string, RIGHT(CONCAT('00000000', @NewARNum),8))) 

	--		--set @id = (
	--		--	SELECT TOP 1 CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(TransId),8),0) + 1),8)) 
	--		--	from T_InvoiceHeader with (nolock)
	--		--	where StoreId = @StoreId and CompanyCode = @CompanyCode
	--		--	group by StoreId, CompanyCode,CreatedOn 
	--		--	order by  CreatedOn desc)
	--end
	--IF @DocType = 'PO' -- Purchase Order
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
	--			from T_PurchaseOrderHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)
	--end
	--IF @DocType = 'PU' -- Purchase Request
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
	--			from T_PurchaseRequestHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)
	--end
	IF @DocType = 'SH' -- Shift
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(ShiftId),8),0) + 1),8)) 
				from T_ShiftHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	IF @DocType = 'DO' -- Promotion Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PromoId),8),0) + 1),8)) 
				from T_DeliveryHeader with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	--IF @DocType = 'GR' -- Goods Receipt
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTId),8),0) + 1),8)) 
	--			from T_GoodsReceiptHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)
	--end
	
	--IF @DocType = 'GI' -- Goods Issue
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTId),8),0) + 1),8)) 
	--			from T_GoodsIssueHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)
	--end
	--IF @DocType = 'GP' -- Goods Receipt PO
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
	--			from T_GoodsReceiptPOHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)
				 
	--end
	--		IF @DocType = 'GT' -- Goods Return
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
	--			from T_GoodsReturnHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)
				 
	--end
	--IF @DocType = 'IV' -- Inventory Header
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTId),8),0) + 1),8)) 
	--			from T_InventoryHeader with (nolock)
	--			where FromStore = @StoreId and CompanyCode = @CompanyCode
	--			group by FromStore, CompanyCode)
	--end
	--IF @DocType = 'IVT' -- Inventory transfer Header
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTTransId),8),0) + 1),8)) 
	--			from T_InventoryTransferHeader with (nolock)
	--			where StoreId = @StoreId and CompanyCode = @CompanyCode
	--			group by StoreId, CompanyCode)


				 
	--end
	IF @DocType = 'PR' -- Promotion Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PromoId),8),0) + 1),8)) 
				from S_PromoHeader with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	IF @DocType = 'PS' -- Schema Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(SchemaId),8),0) + 1),8)) 
				from S_PromoSchema with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	--IF @DocType = 'IC' -- Inventory Counting Header
	--begin
	--		set @id = (
	--			SELECT TOP 1 CONCAT( 'IC', RIGHT(CONCAT('00000000',ISNULL(right(max(ICId),8),0) + 1),8)) 
	--			from T_InventoryCountingHeader with (nolock)
	--			where  CompanyCode = @CompanyCode
	--			group by  CompanyCode, CreatedOn, ICId
	--			order by  CreatedOn desc)
	--end

	--IF @DocType = 'IP' -- Inventory Posting Header
	--begin
	--		set @id = (
	--			SELECT TOP 1 CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(IPId),8),0) + 1),8)) 
	--			from T_InventoryPostingHeader with (nolock)
	--			where  CompanyCode = @CompanyCode
	--			group by  CompanyCode, CreatedOn, IPId
	--			order by  CreatedOn desc)
	--end
	
	IF @DocType = 'C' -- Customer 
	begin
			set @id = (
				SELECT TOP 1 CONCAT( @string, RIGHT(CONCAT('0000000',ISNULL(right(max(CustomerId),7),0) + 1),7)) 
				from M_Customer with (nolock)
				where  CompanyCode = @CompanyCode  and CustomerId not in ('FM001','FM002','FM003','FM004','FM005','FM006','C0000001','CH000925','CUS000011','CUS00007','CUS00008')
				group by  CompanyCode, CreatedOn , CustomerId
				order by  CreatedOn desc)
	end
	IF @DocType = 'LT' -- Loyalty Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(LoyaltyId),8),0) + 1),8)) 
				from S_LoyaltyHeader with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	IF @DocType = 'LU' OR LEFT(@DocType, 2) = 'LK' -- Lucky draw 
	begin
			set @NewNum = (
			--SELECT TOP 1 CONCAT( @string, RIGHT(CONCAT('000000',ISNULL(right(max(LuckyNo),5),0) + 1),5))
			--from T_SalesHeader with (nolock)
			--where StoreId = @StoreId and CompanyCode = @CompanyCode and  (select LEFT( @string, (select LEN(@DocType)))) = @DocType
			--and ISNULL(LuckyNo, '') <> ''
			--group by LuckyNo, StoreId, CompanyCode , CreatedOn
			--order by CreatedOn desc 

			SELECT top 1  ISNULL( MAX( CONVERT (int, right(LuckyNo,5))), 0) + 1
		 
			from T_SalesHeader with (nolock)
			where StoreId = @StoreId 
			--and CompanyCode = @CompanyCode 
			and  (select LEFT( LuckyNo, (select LEN(@DocType)))) = @DocType
			--and LEN(LuckyNo) = 18

			group by LuckyNo, StoreId, CompanyCode , CreatedOn
			order by   right(LuckyNo, 5)  desc
			)

			set @string = @DocType +  @StoreId + @CompanyCode; 
			if @NewNum is null
			set @NewNum = '00001'
			--set @id = ( SELECT CONCAT( @string, '00001') )
			set @id =(SELECT  CONCAT( @string, RIGHT(CONCAT('00000', @NewNum),5))) 
	end
	IF @DocType = 'PT' -- Point Transfer
	begin
			set @id = (
				SELECT TOP 1 CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(TransId),8),0) + 1),8)) 
				from T_LoyaltyLog with (nolock)
				where  CompanyCode = @CompanyCode AND TransId like 'PT%'
				group by  CompanyCode, CreatedOn, TransId
				order by  CreatedOn desc)
	end
    if @id is null
	set @id = ( SELECT CONCAT( @string, '00000001') )
				 
	RETURN  @id
END
--select top 1 * from S_PromoHeader
 
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_AutoGenDocumentCode_Test]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--   select  dbo.[fnc_AutoGenDocumentCode_Test] ('SO', N'CP001',  N'3006')
CREATE FUNCTION [dbo].[fnc_AutoGenDocumentCode_Test](
	@DocType nvarchar(5),
	@CompanyCode nvarchar(5),
	@StoreId nvarchar(20)
) 
--SOCP001100100016232
--SO100100016232
--SO100100016232
RETURNS VARCHAR(50)
AS
BEGIN
	
	DECLARE @id VARCHAR(25), @string varchar(20), @sql     NVARCHAR(MAX) = '';
	declare  @leng int;  
	declare  @Idleng int; 
	DECLARE @tempVl VARCHAR(25)
	set @string = @DocType + @CompanyCode  + @StoreId;
	--
	IF @DocType = 'SO' -- Sale Order
	begin
			set @id = (
			  --CONCAT( @string, )
				SELECT  Top 1   RIGHT(CONCAT('00000000',ISNULL(right(TransId,8),0) + 1),8)  
				from T_SalesHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
			
				group by TransId, StoreId, CompanyCode , CreatedOn
				order by CreatedOn desc
				)
		--set @leng  = (select LEN(@string))  
		--set @string =  @DocType + @StoreId; 
		--set @Idleng  = (select LEN(@id))
	 --   set @tempVl = (select SUBSTRING(@id, @leng,@Idleng))
		--set @id =  @string + @tempVl
		 -- set @id = SUBSTRING(@id, 9, 11)  ;-- @DocType + @StoreId +
		 --SELECT SUBSTRING('SOCP001100100016232', 11, 19) AS ExtractString;
	end
	IF @DocType = 'AR' -- T_InvoiceHeader
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(TransId),8),0) + 1),8)) 
				from T_InvoiceHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	IF @DocType = 'PO' -- Purchase Order
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
				from T_PurchaseOrderHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	IF @DocType = 'PU' -- Purchase Request
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
				from T_PurchaseRequestHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	IF @DocType = 'SH' -- Shift
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(ShiftId),8),0) + 1),8)) 
				from T_ShiftHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	IF @DocType = 'GR' -- Goods Receipt
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTId),8),0) + 1),8)) 
				from T_GoodsReceiptHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	
	IF @DocType = 'GI' -- Goods Issue
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTId),8),0) + 1),8)) 
				from T_GoodsIssueHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
	end
	IF @DocType = 'GP' -- Goods Receipt PO
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
				from T_GoodsReceiptPOHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
				 
	end
			IF @DocType = 'GT' -- Goods Return
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PurchaseId),8),0) + 1),8)) 
				from T_GoodsReturnHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)
				 
	end
	IF @DocType = 'IV' -- Inventory Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTId),8),0) + 1),8)) 
				from T_InventoryHeader with (nolock)
				where FromStore = @StoreId and CompanyCode = @CompanyCode
				group by FromStore, CompanyCode)
	end
	IF @DocType = 'IVT' -- Inventory transfer Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(INVTTransId),8),0) + 1),8)) 
				from T_InventoryTransferHeader with (nolock)
				where StoreId = @StoreId and CompanyCode = @CompanyCode
				group by StoreId, CompanyCode)


				 
	end
	IF @DocType = 'PR' -- Promotion Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(PromoId),8),0) + 1),8)) 
				from S_PromoHeader with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	IF @DocType = 'PS' -- Schema Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(SchemaId),8),0) + 1),8)) 
				from S_PromoSchema with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	IF @DocType = 'IC' -- Inventory Counting Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(ICId),8),0) + 1),8)) 
				from T_InventoryCountingHeader with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end

	IF @DocType = 'IP' -- Inventory Posting Header
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(IPId),8),0) + 1),8)) 
				from T_InventoryPostingHeader with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	
	IF @DocType = 'CUS' -- Customer 
	begin
			set @id = (
				SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(CustomerId),8),0) + 1),8)) 
				from M_Customer with (nolock)
				where  CompanyCode = @CompanyCode
				group by  CompanyCode)
	end
	--IF @DocType = 'LT' -- Loyalty Header
	--begin
	--		set @id = (
	--			SELECT CONCAT( @string, RIGHT(CONCAT('00000000',ISNULL(right(max(LoyaltyId),8),0) + 1),8)) 
	--			from S_LoyaltyHeader with (nolock)
	--			where  CompanyCode = @CompanyCode
	--			group by  CompanyCode)
	--end
    if @id is null
	set @id = ( SELECT CONCAT( @string, '00000001') )
				 
	RETURN  @id
END
--select top 1 * from S_PromoHeader
 
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_AutoGenSerial]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select   [dbo].[fnc_AutoGenSerial]('CP001', 'JA110104003','AA',3,6)
CREATE FUNCTION [dbo].[fnc_AutoGenSerial](
	@CompanyCode nvarchar(20),
	@ItemCode nvarchar(20),
	@Prefix nvarchar(20),
	@RandomNumberLen int,
	@RuningNumberLen int
) 

RETURNS VARCHAR(50)
AS
BEGIN
	--select * from 
	DECLARE @RandomValue VARCHAR(20)
	set @RandomValue =  ( SELECT SUBSTRING(CONVERT(varchar(40), (select new_id from v_newid)),0, @RandomNumberLen + 1))
 
	 DECLARE @InputStr int  ,@Size     int
	 DECLARE @SplitValue VARCHAR(20)
	SELECT @InputStr=0
		  ,@Size=@RuningNumberLen
	set @SplitValue = (select REPLICATE('0',@Size-LEN(RTRIM(CONVERT(varchar(8000),@InputStr)))) + CONVERT(varchar(8000),@InputStr))

	DECLARE @id VARCHAR(20)
	set @id = (SELECT CONCAT( @Prefix + @RandomValue, RIGHT(CONCAT(@SplitValue,ISNULL(right(max(SerialNum),@RuningNumberLen + 1),0) + 1),@RuningNumberLen + 1)) 
				from M_ItemSerial with (nolock)
				where CompanyCode = @CompanyCode and ItemCode= @ItemCode
				group by ItemCode)
    if @id is null
	set @id = ( SELECT CONCAT( @Prefix + @RandomValue, @SplitValue + '1') )
				 
	RETURN @id
END

 


-- CREATE VIEW [dbo].[v_newid]
--AS
--SELECT     NEWID() AS new_id
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_AutoGenShift]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnc_AutoGenShift](
	@StoreId nvarchar(20)
) 

RETURNS VARCHAR(20)
AS
BEGIN
	DECLARE @id VARCHAR(20)

	--DECLARE @PREFIX VARCHAR(20)
	--SET @PREFIX = (SELECT RIGHT(CAST(RAND() AS VARCHAR(100)), 3))

	set @id = (SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMddsss'), RIGHT(CONCAT('00000',ISNULL( MAX( CONVERT (int, right(ShiftId,5))), 0) + 1),5)) 
				from T_ShiftHeader with (nolock)
				where StoreId = @StoreId and CONVERT(date, CreatedOn) = CONVERT(date, getdate())
				group by StoreId)
    if @id is null
	set @id = ( SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMddsss'), '00001') )
				 
	RETURN @id
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnc_AutoGenShiftWithPrefix]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select   [dbo].[fnc_AutoGenShiftWithPrefix] ('CP001','XXXXXX','S','AVX')
-- select   [dbo].[fnc_AutoGenSerial]('CP001', 'JA110104003','AA',3,6)
CREATE FUNCTION [dbo].[fnc_AutoGenShiftWithPrefix](
	@CompanyCode nvarchar(20),
	@StoreId nvarchar(30),
	@Prefix nvarchar(20) = null
	--, @DeviceId nvarchar(150) = null
) 

RETURNS nVARCHAR(20)
AS
BEGIN
    DECLARE @id nVARCHAR(20);
	DECLARE @DeviceId nVARCHAR(50)
	set @DeviceId =''
	if(isnull(@DeviceId,  '') <> '')
	begin
		
		if(isnull(@Prefix,  '') = '')
		begin
			
			set @id = (SELECT CONCAT(@DeviceId + @StoreId + FORMAT(getdate(), 'yyMMdd'), RIGHT(CONCAT('00',ISNULL( MAX( CONVERT (int, right(ShiftId,3))), 0) + 1),3)) 
						from T_ShiftHeader with (nolock)
						where StoreId = @StoreId and CONVERT(date, CreatedOn) = CONVERT(date, getdate()) and CompanyCode = @CompanyCode
						group by StoreId)
			if @id is null
			set @id = ( SELECT CONCAT(@DeviceId + @StoreId + FORMAT(getdate(), 'yyMMdd'), '001') )
				 
	
		end
		else
		begin 
			 
			set @id = (SELECT CONCAT(@DeviceId + @StoreId + FORMAT(getdate(), 'yyMMdd'), RIGHT(CONCAT('000',ISNULL( MAX( CONVERT (int, right(ShiftId, 3))), 0) + 1),3)) 
						from T_ShiftHeader with (nolock)
						where StoreId = @StoreId and CONVERT(date, CreatedOn) = CONVERT(date, getdate()) and CompanyCode = @CompanyCode
						group by StoreId)
			if @id is null
			set @id = ( SELECT CONCAT(@DeviceId + @StoreId + FORMAT(getdate(), 'yyMMdd'), '001') )

		end
	end
	else
	begin
		
		if(isnull(@Prefix,  '') = '')
		begin
	
			set @id = (SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMddsss'), RIGHT(CONCAT('00000',ISNULL( MAX( CONVERT (int, right(ShiftId,5))), 0) + 1),5)) 
						from T_ShiftHeader with (nolock)
						where StoreId = @StoreId and CONVERT(date, CreatedOn) = CONVERT(date, getdate()) and CompanyCode = @CompanyCode
						group by StoreId)
			if @id is null
			set @id = ( SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMddsss'), '00001') )
				 
	
		end
		else
		begin 
			--set @id = (SELECT CONCAT(@Prefix + @StoreId + FORMAT(getdate(), 'yyMMddsss'), RIGHT(CONCAT('00000',ISNULL( MAX( CONVERT (int, right(ShiftId,5))), 0) + 1),5)) 
			--			from T_ShiftHeader with (nolock)
			--			where StoreId = @StoreId and CONVERT(date, CreatedOn) = CONVERT(date, getdate())
			--			 and CompanyCode = @CompanyCode and   (select LEFT( ShiftId, (select LEN(@Prefix)))) = @Prefix
			--			group by StoreId)
			--if @id is null
			--set @id = ( SELECT CONCAT(@Prefix + @StoreId + FORMAT(getdate(), 'yyMMddsss'), '00001') )

			set @id = (SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMddsss'), RIGHT(CONCAT('00000',ISNULL( MAX( CONVERT (int, right(ShiftId,5))), 0) + 1),5)) 
						from T_ShiftHeader with (nolock)
						where StoreId = @StoreId and CONVERT(date, CreatedOn) = CONVERT(date, getdate()) and CompanyCode = @CompanyCode
						group by StoreId)
			if @id is null
			set @id = ( SELECT CONCAT( @StoreId + FORMAT(getdate(), 'yyMMddsss'), '00001') )

		end
	end

	RETURN @id
END

 
 
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_GetDailyID]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select dbo.[fnc_GetDailyID]( '3017','CP001', '2021-11-27 03:29:00')
CREATE FUNCTION [dbo].[fnc_GetDailyID](
	@StoreId nvarchar(20),
	@CompanyCode nvarchar(20) = null,
	@DateTime Datetime = null
) 

RETURNS VARCHAR(50)
AS
BEGIN
	--SET @DateTime = GETDATE()
	DECLARE @Time VARCHAR(20)
	DECLARE @Id VARCHAR(50)
	set @Time = (
	select   top 1 SettingValue 
	from (
	 select isnull(t1.[SettingValue] , t2.SettingValue)  SettingValue
	  from S_GeneralSetting t1 with (nolock)
	  left join S_DefaultGeneralSetting t2   with (nolock) on t1.SettingId = t2.SettingId and t1.CompanyCode = t2.CompanyCode
	  where t1.CompanyCode = @CompanyCode and StoreId= @StoreId and  t1.SettingId = 'StoreTime' 
	  --and isnull(t1.Status,'A') = 'A'
	  union all 
	  select t1.SettingValue
	  from [S_DefaultGeneralSetting] t1 with (nolock)
	  left join S_GeneralSetting t2   with (nolock) on t1.SettingId = t2.SettingId and t1.CompanyCode = t2.CompanyCode and t2.StoreId = @StoreId
	  where t1.CompanyCode = @CompanyCode  and isnull(t2.SettingId,'') = '' and  t1.SettingId = 'StoreTime' 
	  ) tmp
	)
	 
    if ISNULL(@Time, '') = '' 
	begin
		if ISNULL(@DateTime, '') = ''
		begin
			set @id = ( SELECT  FORMAT(getdate(), 'yyMMdd')  )
		end
		else
		begin
			set @id =  ( SELECT FORMAT(@DateTime, 'yyMMdd')  )
		end  
	end
	else
	begin
		if ISNULL(@DateTime, '') = ''
		begin
			-- CONVERT(nvarchar(40), CONVERT(time , @Time )) + '-' + CONVERT(nvarchar(40), CONVERT(time ,  GETDATE() )) + '-' +
			set @id =  ( SELECT  FORMAT(getdate() , 'yyMMdd')  )
			if(CONVERT(time , @Time )  > CONVERT(time , GETDATE()))
			begin
			--CONVERT(nvarchar(40), CONVERT(time , @Time )) + '-' + CONVERT(nvarchar(40), CONVERT(time ,  GETDATE() )) + '-' +
			 set @id =  ( SELECT  FORMAT(getdate() - 1, 'yyMMdd')  )
			end 
		end
		else
		begin
			--CONVERT(nvarchar(40), CONVERT(time , @Time )) + '-' + CONVERT(nvarchar(40), CONVERT(time ,  @DateTime )) + '-' +
			set @id =  ( SELECT  FORMAT(@DateTime , 'yyMMdd')  )
			if(CONVERT(time , @Time )  > CONVERT(time ,  @DateTime))
			begin
			-- CONVERT(nvarchar(40), CONVERT(time , @Time )) + '-' + CONVERT(nvarchar(40), CONVERT(time , @DateTime)) + '-' +
			  set @id = ( SELECT  FORMAT(@DateTime - 1, 'yyMMdd')  )
			end 
			--set @id = ( SELECT FORMAT(, 'yyMMdd')  )
		end
		--if(CONVERT(time , @Time )  < CONVERT(time , GETDATE()))
		--begin
			
		--end
		--else
		--begin
		--	if ISNULL(@DateTime, '') = ''
		--	begin
		--		set @id = ( SELECT  FORMAT(getdate(), 'yyMMdd')  )
		--	end
		--	else
		--	begin
				
		--	end 
		--end
		
	end
				 
	RETURN   @id 
END

 
 
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_GetRoundingPaymentDifByDefCurStore]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION[dbo].[fnc_GetRoundingPaymentDifByDefCurStore]( @CompanyCode nvarchar(50), @StoreId nvarchar(50) )  RETURNS decimal(19, 6) AS  BEGIN  Declare @RoundingOff decimal(19, 6)   set @RoundingOff = ( select RoundingPaymentDif from M_Currency t1 with (nolock)  left join M_Store t2 with (nolock) on t1.CurrencyCode = t2.CurrencyCode   where t2.CompanyCode = @CompanyCode and t2.StoreId = @StoreId )  set @RoundingOff = (select ISNULL(@RoundingOff, 0))  RETURN @RoundingOff  END
GO
/****** Object:  UserDefinedFunction [dbo].[fnc_GetVirtualWhs]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- select   dbo.[fnc_GetVirtualWhs]( 'CP001','JaRCP001')
create FUNCTION [dbo].[fnc_GetVirtualWhs]( 
	@CompanyCode nvarchar(5),
	@StoreId nvarchar(20)
) 

RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @id VARCHAR(25), @string varchar(20), @sql     NVARCHAR(MAX) = '';
	set @string = (select CustomField1 from M_Store where StoreId = @StoreId and CompanyCode= @CompanyCode)
	    	 
	RETURN  @string
END
 
--select top 1 * from S_PromoHeader
 
GO
/****** Object:  Table [dbo].[S_Permission]    Script Date: 1/30/2023 9:43:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_Permission](
	[Id] [nvarchar](10) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
	[Status] [bit] NULL,
 CONSTRAINT [PK_S_Permission] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetHeaderPermission]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION  [dbo].[fn_GetHeaderPermission]()
 
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
	 select 'ControlName' as field, 'Control Name' as header
	 union all  
	 select  Id as field, Name as header 
	 from S_Permission with (nolock)
	 where Status =1
)

--select * from M_Control
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetHeaderFunctionPermission]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION  [dbo].[fn_GetHeaderFunctionPermission]()
 
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
	 select 'Name' as field, 'Name' as header 
	 union all 
	 select  Id as field, Name as header from S_Permission with (nolock) where Status =1
)
GO
/****** Object:  Table [dbo].[S_DefaultGeneralSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_DefaultGeneralSetting](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[SettingId] [nvarchar](50) NOT NULL,
	[SettingName] [nvarchar](250) NULL,
	[SettingValue] [nvarchar](50) NULL,
	[SettingDescription] [nvarchar](250) NULL,
	[ValueType] [nvarchar](50) NULL,
	[TokenExpired] [decimal](19, 6) NULL,
	[DefaultValue] [nvarchar](250) NULL,
	[CustomField1] [nvarchar](300) NULL,
	[CustomField2] [nvarchar](300) NULL,
	[CustomField3] [nvarchar](50) NULL,
	[CustomField4] [nvarchar](50) NULL,
	[CustomField5] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[Priority] [int] NULL,
 CONSTRAINT [PK_S_DefaultGeneralSetting] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[SettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_GeneralSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_GeneralSetting](
	[SettingId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[SettingName] [nvarchar](250) NULL,
	[SettingValue] [nvarchar](50) NULL,
	[SettingDescription] [nvarchar](250) NULL,
	[ValueType] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[TokenExpired] [decimal](19, 6) NULL,
	[DefaultValue] [nvarchar](250) NULL,
	[CustomField1] [nvarchar](300) NULL,
	[CustomField2] [nvarchar](300) NULL,
	[CustomField3] [nvarchar](300) NULL,
	[CustomField4] [nvarchar](300) NULL,
	[CustomField5] [nvarchar](300) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_GeneralSetting] PRIMARY KEY CLUSTERED 
(
	[SettingId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetGeneralSettingStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--ClearHoldBillAfterEOD
--ClearHoldBillAfterEOS
 -- select * from [fn_GetGeneralSettingStore] ('CP001','3001' , '')
create FUNCTION [dbo].[fn_GetGeneralSettingStore]    (
	 @CompanyCode nvarchar(50),
	 @StoreId nvarchar(50),
	 @SettingId  nvarchar(50) = null)
 
RETURNS TABLE
AS
Return
	  
	   select   
	    [SettingId]
      , [CompanyCode]
      , [StoreId]
      , [SettingName]
      , SettingValue
      , [SettingDescription]
      , [ValueType]
      ,   Status
      , [CreatedBy]
      , [CreatedOn]
      , [ModifiedBy]
      , [ModifiedOn]
      , [TokenExpired]
      , [DefaultValue]
      , [CustomField1]
      , [CustomField2]
      , CustomField3
      , [CustomField4]
      , [CustomField5] 

	  from
	  (
		 select distinct 
	   t1.[SettingId]
      ,t1.[CompanyCode]
      ,t1.[StoreId]
      ,t1.[SettingName]
      ,isnull(t1.[SettingValue] , t2.SettingValue)  SettingValue
      ,isnull(t1.SettingName , t2.[SettingDescription]) [SettingDescription]
      ,t2.[ValueType]
      , isnull(t1.Status,'I')   Status
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[TokenExpired]
      ,t1.[DefaultValue]
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5] 
	  ,t2.Priority
	  from S_GeneralSetting t1 with (nolock)
	  left join S_DefaultGeneralSetting t2   with (nolock) on t1.SettingId = t2.SettingId and t1.CompanyCode = t2.CompanyCode
	  where t1.CompanyCode = @CompanyCode and StoreId=@StoreId  
	  --and isnull(t1.Status,'A') = 'A'

	  union all 

	  --select * from S_GeneralSetting where SettingId = 'OpenDrawerOnReceipt'

	  select distinct 
	   t1.[SettingId]
      ,t1.[CompanyCode]
      ,@StoreId StoreId
      ,t1.[SettingName]
      ,t1.SettingValue
      ,isnull(t1.[SettingDescription] , t1.SettingName) [SettingDescription]
      ,t1.[ValueType]
      , isnull(t1.Status,'I')   Status
      ,'' [CreatedBy]
      , null [CreatedOn]
      ,'' [ModifiedBy]
      ,null [ModifiedOn]
      ,t1.[TokenExpired]
      ,t1.[DefaultValue]
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5] 
	  ,t1.Priority
	  from [S_DefaultGeneralSetting] t1 with (nolock)
	  left join S_GeneralSetting t2   with (nolock) on t1.SettingId = t2.SettingId and t1.CompanyCode = t2.CompanyCode and t2.StoreId = @StoreId
	  where t1.CompanyCode = @CompanyCode  and isnull(t2.SettingId,'') = ''

	  ) tmp 
	  where  (ISNULL(@SettingId, '') = '' OR SettingId = @SettingId)  
 
 
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetRoundingMethod]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create FUNCTION  [dbo].[fn_GetRoundingMethod]()
 
RETURNS TABLE 
AS
RETURN 
(
	select 'NoRounding' Code, 'No Rounding' Name
	 union all 
	select 'RoundToFiveHundredth' Code, 'Round To Five Hundredth' Name
	 union all 
	select 'RoundToTenHundredth' Code, 'Round To Ten Hundredth' Name
	 union all 
	select 'RoundToOne' Code, 'Round To One' Name
	 union all 
	select 'RoundToTen' Code, 'Round To Ten' Name
)


 
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetTableInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[fn_GetTableInfor]    ( @TableName nvarchar(250), @ConvertToC bit ) RETURNS TABLE AS Return    select  replace(col.name, ' ', '_') ColumnName,  column_id ColumnId, case @ConvertToC when 1  then case typ.name  when 'bigint' then 'long' when 'binary' then 'byte[]' when 'bit' then 'bool' when 'char' then 'string' when 'date' then 'DateTime' when 'datetime' then 'DateTime' when 'datetime2' then 'DateTime' when 'datetimeoffset' then 'DateTimeOffset' when 'decimal' then 'decimal' when 'float' then 'double' when 'image' then 'byte[]' when 'int' then 'int' when 'money' then 'decimal' when 'nchar' then 'string' when 'ntext' then 'string' when 'numeric' then 'decimal' when 'nvarchar' then 'string' when 'real' then 'float' when 'smalldatetime' then 'DateTime' when 'smallint' then 'short' when 'smallmoney' then 'decimal'  when 'text' then 'string' when 'time' then 'TimeSpan' when 'timestamp' then 'long' when 'tinyint' then 'byte' when 'uniqueidentifier' then 'Guid' when 'varbinary' then 'byte[]' when 'varchar' then 'string' else 'UNKNOWN_' + typ.name end else  typ.name   end ColumnType, case typ.name   when 'nvarchar'   then '(' +   case when  COL_LENGTH(OBJECT_NAME(object_id), col.name) = -1  then 'MAX' else CONVERT(nvarchar(50) ,  COL_LENGTH(OBJECT_NAME(object_id), col.name)  ) end+ ')' when 'varchar' then  '(' + CONVERT(nvarchar(50) , COL_LENGTH(OBJECT_NAME(object_id), col.name)) + ')'  when 'nchar' then  '(' + CONVERT(nvarchar(50) , COL_LENGTH(OBJECT_NAME(object_id), col.name)) + ')' when 'char' then  '(' +CONVERT(nvarchar(50) , COL_LENGTH(OBJECT_NAME(object_id), col.name)) + ')' when 'text' then   '(' + CONVERT(nvarchar(50) , COL_LENGTH(OBJECT_NAME(object_id), col.name))+ ')' when 'text' then '(' +CONVERT(nvarchar(50) , COL_LENGTH(OBJECT_NAME(object_id), col.name)) + ')' when 'decimal' then '(19, 6)'  end ColumnLength, case  when col.is_nullable = 1 and typ.name in ('bigint', 'bit', 'date', 'datetime', 'datetime2', 'datetimeoffset', 'decimal', 'float', 'int', 'money', 'numeric', 'real', 'smalldatetime', 'smallint', 'smallmoney', 'time', 'tinyint', 'uniqueidentifier')  then '?'  else ''  end NullableSign from sys.columns col join sys.types typ on  col.system_type_id = typ.system_type_id AND col.user_type_id = typ.user_type_id   where object_id = object_id(@TableName) 
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetWhsType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION  [dbo].[fn_GetWhsType]()
 
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
	 select 'S' as Id, 'Store' as Name 
	 union all 
	 select 'W' as Id, 'Warehouse' as Name 
	 union all 
	 select 'T' as Id, 'Transit' as Name 
)
GO
/****** Object:  View [dbo].[v_newid]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE VIEW [dbo].[v_newid]
AS
SELECT     NEWID() AS new_id
GO
/****** Object:  Table [dbo].[M_Area]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Area](
	[AreaCode] [nvarchar](50) NOT NULL,
	[AreaName] [nvarchar](250) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[Status] [char](1) NULL,
	[RegionCode] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_Area] PRIMARY KEY CLUSTERED 
(
	[AreaCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_BankTerminal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_BankTerminal](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[PaymentMethod] [nvarchar](50) NOT NULL,
	[TerminalIdDefault] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_BankTerminal] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[CounterId] ASC,
	[PaymentMethod] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_BOMGroupOption]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_BOMGroupOption](
	[Id] [nvarchar](10) NOT NULL,
	[Description] [nvarchar](250) NULL,
	[MaxValue] [int] NULL,
	[Status] [nvarchar](1) NULL,
 CONSTRAINT [PK_M_BOM_GroupOption] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_BOMHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_BOMHeader](
	[ItemCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemName] [nvarchar](250) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_BOMHeader] PRIMARY KEY CLUSTERED 
(
	[ItemCode] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_BOMLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_BOMLine](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[BOMId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[ItemName] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsOption] [bit] NULL,
	[OptionGroup] [nvarchar](10) NULL,
	[TriggerStatus] [nvarchar](50) NULL,
	[TriggerSystem] [nvarchar](250) NULL,
 CONSTRAINT [PK_M_BOMLine] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[BOMId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Company]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Company](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CompanyName] [nvarchar](250) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[ShortName] [nvarchar](150) NULL,
	[Logo] [nvarchar](250) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](250) NULL,
	[Email] [nvarchar](150) NULL,
	[Fax] [nvarchar](250) NULL,
	[Website] [nvarchar](250) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[CheckUserStatus] [bit] NULL,
	[CustomerF1] [varchar](500) NULL,
	[CustomerF2] [varchar](500) NULL,
	[CustomerF3] [varchar](500) NULL,
	[CustomerF4] [varchar](500) NULL,
	[CustomerF5] [varchar](500) NULL,
	[CustomerF6] [varchar](500) NULL,
	[CustomerF7] [varchar](500) NULL,
	[CustomerF8] [varchar](500) NULL,
	[CustomerF9] [varchar](500) NULL,
	[CustomerF10] [varchar](500) NULL,
 CONSTRAINT [PK_M_Company] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Control]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Control](
	[ControlId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ControlName] [nvarchar](250) NULL,
	[FunctionId] [nvarchar](50) NOT NULL,
	[Action] [nvarchar](50) NULL,
	[ControlType] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[OrderNum] [int] NULL,
	[Require] [bit] NULL,
	[OptionName] [nvarchar](50) NULL,
	[OptionKey] [nvarchar](50) NULL,
	[OptionValue] [nvarchar](50) NULL,
	[Custom1] [nvarchar](max) NULL,
	[Custom2] [nvarchar](max) NULL,
	[Status] [char](1) NULL,
	[GroupNum] [int] NULL,
	[TotalItem] [nvarchar](150) NULL,
	[GroupItem] [nvarchar](150) NULL,
	[ReadOnly] [bit] NULL,
	[QueryStr] [nvarchar](max) NULL,
	[Custom3] [nvarchar](max) NULL,
	[Custom4] [nvarchar](max) NULL,
	[Custom5] [nvarchar](max) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_Control] PRIMARY KEY CLUSTERED 
(
	[ControlId] ASC,
	[CompanyCode] ASC,
	[FunctionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Country]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Country](
	[CountryCode] [nvarchar](50) NOT NULL,
	[CountryName] [nvarchar](250) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[AreaCode] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_Country] PRIMARY KEY CLUSTERED 
(
	[CountryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Currency]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Currency](
	[CurrencyCode] [nvarchar](50) NOT NULL,
	[CurrencyName] [nvarchar](250) NULL,
	[Rounding] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[MaxValue] [decimal](19, 6) NULL,
	[RoundingPaymentDif] [decimal](19, 6) NULL,
 CONSTRAINT [PK_M_Currency_1] PRIMARY KEY CLUSTERED 
(
	[CurrencyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Customer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Customer](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CustomerId] [nvarchar](50) NOT NULL,
	[CustomerGrpId] [nvarchar](50) NULL,
	[CustomerName] [nvarchar](250) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[DOB] [date] NULL,
	[JoinedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[CusType] [char](1) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[CustomerRank] [nvarchar](50) NULL,
	[CustomerRankName] [nvarchar](50) NULL,
	[RewardPoints] [decimal](19, 6) NULL,
	[Gender] [nvarchar](50) NULL,
	[Email] [nvarchar](250) NULL,
	[CardNo] [nvarchar](150) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[DoNotAccumPoints] [bit] NULL,
	[CreatedByStore] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_Customer] PRIMARY KEY CLUSTERED 
(
	[CustomerId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_CustomerGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_CustomerGroup](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CusGrpId] [nvarchar](50) NOT NULL,
	[CusGrpDesc] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[DiscTypeCode] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_CustomerGroup] PRIMARY KEY CLUSTERED 
(
	[CusGrpId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_DeliveryInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_DeliveryInfor](
	[Id] [uniqueidentifier] NOT NULL,
	[CustomerId] [nvarchar](150) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[DeliveryPartner] [nvarchar](50) NOT NULL,
	[DeliveryId] [nvarchar](50) NOT NULL,
	[Phone] [nvarchar](50) NULL,
	[Fax] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[TaxCode] [nvarchar](150) NULL,
	[Name] [nvarchar](250) NULL,
	[Address] [nvarchar](500) NULL,
	[Remarks] [nvarchar](max) NULL,
	[Status] [nvarchar](1) NULL,
	[isDefault] [bit] NULL,
	[DeliveryFee] [decimal](19, 6) NULL,
	[DeliveryType] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_DeliveryInfor] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CustomerId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Denomination]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Denomination](
	[Id] [uniqueidentifier] NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](150) NULL,
	[Description] [nvarchar](250) NULL,
	[Value] [decimal](19, 6) NULL,
	[Status] [nvarchar](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[ShowOnPayment] [bit] NULL,
	[ShowOnDiscount] [bit] NULL,
 CONSTRAINT [PK_M_Denomination] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[Currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Employee]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Employee](
	[EmployeeId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[EmployeeName] [nvarchar](250) NULL,
	[Position] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_Employee] PRIMARY KEY CLUSTERED 
(
	[EmployeeId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_EmployeeSalary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_EmployeeSalary](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[EmployeeId] [nvarchar](50) NOT NULL,
	[Salary] [decimal](19, 6) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_M_EmployeeSalary] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[EmployeeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_EmployeeStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_EmployeeStore](
	[EmployeeId] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_EmployeeStore] PRIMARY KEY CLUSTERED 
(
	[EmployeeId] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ExchangeRate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ExchangeRate](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Date] [datetime] NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[Rate] [decimal](19, 6) NULL,
	[Status] [nvarchar](10) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_ExchangeRate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[Date] ASC,
	[Currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Function]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Function](
	[FunctionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Url] [nvarchar](250) NULL,
	[ParentId] [nvarchar](50) NULL,
	[Icon] [nvarchar](150) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[LicenseType] [nvarchar](50) NULL,
	[OrderNo] [int] NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[isShowMenu] [bit] NULL,
	[isParent] [bit] NULL,
	[MenuOrder] [int] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_Function] PRIMARY KEY CLUSTERED 
(
	[FunctionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Holiday]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Holiday](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[HldCode] [nvarchar](50) NOT NULL,
	[StrDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Rmrks] [nvarchar](150) NULL,
	[Status] [nvarchar](1) NULL,
 CONSTRAINT [PK_M_Holiday] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[HldCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Image]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Image](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NULL,
	[Type] [nvarchar](15) NULL,
	[Num] [nvarchar](250) NULL,
	[Image] [varbinary](max) NULL,
	[Description] [nvarchar](250) NULL,
	[CreateOn] [datetime] NULL,
	[CustomerPhone] [nvarchar](250) NULL,
	[CustomerName] [nchar](10) NULL,
 CONSTRAINT [PK_M_Image] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_InvoiceInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_InvoiceInfor](
	[Id] [uniqueidentifier] NOT NULL,
	[CustomerId] [nvarchar](150) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Phone] [nvarchar](50) NULL,
	[Fax] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[TaxCode] [nvarchar](150) NULL,
	[Name] [nvarchar](250) NULL,
	[Address] [nvarchar](500) NULL,
	[Remarks] [nvarchar](max) NULL,
	[Status] [nvarchar](1) NULL,
 CONSTRAINT [PK_M_InvoiceInfor] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CustomerId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Item]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Item](
	[ItemCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ProductId] [nvarchar](50) NOT NULL,
	[VariantId] [nvarchar](50) NOT NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[CapacityValue] [int] NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[SalesTaxCode] [nvarchar](50) NULL,
	[PurchaseTaxCode] [nvarchar](50) NULL,
	[ItemName] [nvarchar](250) NULL,
	[ItemDescription] [nvarchar](250) NULL,
	[ItemCategory_1] [nvarchar](50) NULL,
	[ItemCategory_2] [nvarchar](50) NULL,
	[ItemCategory_3] [nvarchar](50) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[InventoryUOM] [nvarchar](50) NULL,
	[ImageURL] [nvarchar](250) NULL,
	[ImageLink] [nvarchar](250) NULL,
	[MCId] [nvarchar](50) NULL,
	[CustomField1] [nvarchar](250) NULL,
	[CustomField2] [nvarchar](250) NULL,
	[CustomField3] [nvarchar](250) NULL,
	[CustomField4] [nvarchar](250) NULL,
	[CustomField5] [nvarchar](250) NULL,
	[CustomField6] [nvarchar](250) NULL,
	[CustomField7] [nvarchar](250) NULL,
	[CustomField8] [nvarchar](250) NULL,
	[CustomField9] [nvarchar](250) NULL,
	[CustomField10] [nvarchar](250) NULL,
	[DefaultPrice] [decimal](19, 6) NULL,
	[IsSerial] [bit] NULL,
	[IsBOM] [bit] NULL,
	[isVoucher] [bit] NULL,
	[ValidFrom] [date] NULL,
	[ValidTo] [date] NULL,
	[RejectPayType] [nvarchar](50) NULL,
	[Returnable] [bit] NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[VoucherCollection] [nvarchar](50) NULL,
	[IsPriceTime] [bit] NULL,
	[AllowSalesNegative] [bit] NULL,
	[MappingCode] [nvarchar](250) NULL,
	[IsFixedQty] [bit] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_Item] PRIMARY KEY CLUSTERED 
(
	[ItemCode] ASC,
	[CompanyCode] ASC,
	[ProductId] ASC,
	[VariantId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ItemGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ItemGroup](
	[IGId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[IGName] [nvarchar](250) NULL,
	[IGDescription] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
 CONSTRAINT [PK_M_ItemGroup] PRIMARY KEY CLUSTERED 
(
	[IGId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ItemRejectPayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ItemRejectPayment](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[PaymentType] [nvarchar](50) NOT NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [nvarchar](50) NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [nvarchar](50) NULL,
	[Status] [nvarchar](15) NULL,
 CONSTRAINT [PK_M_ItemRejectPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[PaymentType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ItemSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ItemSerial](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[ExpDate] [date] NULL,
	[StoredDate] [date] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
	[Prefix] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_ItemSerial] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ItemSerialStock]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ItemSerialStock](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[StockQty] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
 CONSTRAINT [PK_M_ItemSerialStock] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SLocId] ASC,
	[SerialNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ItemStoreListing]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ItemStoreListing](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [date] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [date] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_ItemStoreListing] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[ItemCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ItemUOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ItemUOM](
	[ItemCode] [nvarchar](50) NOT NULL,
	[UOMCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Factor] [decimal](19, 6) NULL,
	[BarCode] [nvarchar](250) NOT NULL,
	[QRCode] [nvarchar](250) NULL,
	[PLU_Flag] [nvarchar](10) NULL,
	[PLU] [nvarchar](50) NULL,
	[WeightValue] [decimal](19, 6) NULL,
	[WeightCount] [int] NULL,
	[WeightUnit] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[DefaultFixedQty] [decimal](19, 6) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[AltFactor] [decimal](19, 6) NULL,
 CONSTRAINT [PK_M_ItemUOM_1] PRIMARY KEY CLUSTERED 
(
	[ItemCode] ASC,
	[UOMCode] ASC,
	[CompanyCode] ASC,
	[BarCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_KeyCap]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_KeyCap](
	[Id] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](150) NULL,
	[Description] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_KeyCap] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_LoyaltyType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_LoyaltyType](
	[LoyaltyType] [int] NOT NULL,
	[TypeName] [nvarchar](250) NULL,
	[PriorityNo] [int] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_LoyaltyType] PRIMARY KEY CLUSTERED 
(
	[LoyaltyType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_MemberCard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_MemberCard](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CardNo] [nchar](10) NOT NULL,
	[StartDate] [date] NULL,
	[ExpireDate] [date] NULL,
	[LastExpireDate] [date] NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[CardType] [nvarchar](50) NULL,
	[OwnerId] [nvarchar](50) NULL,
	[OwnerType] [nvarchar](20) NULL,
	[HoldType] [nvarchar](20) NULL,
	[TransId] [nvarchar](50) NULL,
	[SyncSource] [nvarchar](50) NULL,
	[SyncDate] [datetime] NULL,
 CONSTRAINT [PK_M_MemberCard] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[CardNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_MerchandiseCategory]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_MerchandiseCategory](
	[MCId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[MCHier] [nvarchar](50) NULL,
	[MCName] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[isShow] [bit] NULL,
	[OrderNum] [int] NULL,
	[BarcodePrefix] [nvarchar](15) NULL,
	[Custom1] [nvarchar](50) NULL,
	[Custom2] [nvarchar](50) NULL,
	[Custom3] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_MerchandiseCategory] PRIMARY KEY CLUSTERED 
(
	[MCId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_MovementType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_MovementType](
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Status] [nvarchar](5) NULL,
 CONSTRAINT [PK_M_MovementType] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PaymentMethod]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PaymentMethod](
	[PaymentCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ShortName] [nvarchar](50) NULL,
	[PaymentDesc] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[AccountCode] [nvarchar](50) NULL,
	[IsRequireRefnum] [bit] NULL,
	[AllowChange] [bit] NULL,
	[PaymentType] [nvarchar](50) NULL,
	[ApiURL] [nvarchar](250) NULL,
	[RejectReturn] [bit] NULL,
	[RejectVoid] [bit] NULL,
	[RejectExchange] [bit] NULL,
	[ForfeitCode] [nvarchar](50) NULL,
	[EODApply] [bit] NULL,
	[EODCode] [nvarchar](50) NULL,
	[AllowRefund] [bit] NULL,
	[Currency] [nvarchar](50) NULL,
	[RequireTerminal] [bit] NULL,
	[VoucherCategory] [nvarchar](250) NULL,
	[FatherId] [nvarchar](150) NULL,
	[IsFatherShow] [bit] NULL,
	[BankPaymentType] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](150) NULL,
	[CustomF2] [nvarchar](150) NULL,
	[CustomF3] [nvarchar](150) NULL,
	[CustomF4] [nvarchar](150) NULL,
	[CustomF5] [nvarchar](150) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_PaymentMethod] PRIMARY KEY CLUSTERED 
(
	[PaymentCode] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PaymentMethodMapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PaymentMethodMapping](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PaymentCode] [nvarchar](150) NOT NULL,
	[FatherId] [nvarchar](150) NOT NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
	[CustomF6] [nvarchar](500) NULL,
	[Status] [nvarchar](50) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_PaymentMethodMapping] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[PaymentCode] ASC,
	[FatherId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PaymentType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PaymentType](
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Status] [nvarchar](1) NULL,
 CONSTRAINT [PK_M_PaymentType] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Peripherals]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Peripherals](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](150) NOT NULL,
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](500) NULL,
	[Type] [nvarchar](150) NULL,
	[ConnectType] [nvarchar](150) NULL,
	[Port] [nvarchar](150) NULL,
	[BaudRate] [nvarchar](150) NULL,
	[Parity] [nvarchar](150) NULL,
	[DataBits] [nvarchar](150) NULL,
	[StopBits] [nvarchar](150) NULL,
	[Handshake] [nvarchar](150) NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
	[Status] [nvarchar](150) NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_M_Peripherals] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Permission]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Permission](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PermissionId] [uniqueidentifier] NOT NULL,
	[RoleId] [uniqueidentifier] NOT NULL,
	[FunctionId] [nvarchar](50) NOT NULL,
	[ControlId] [nvarchar](50) NULL,
	[Permissions] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_Permission] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PlaceInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PlaceInfor](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](150) NOT NULL,
	[PlaceId] [nvarchar](50) NOT NULL,
	[PlaceName] [nvarchar](250) NULL,
	[Description] [nvarchar](1500) NULL,
	[Remark] [nvarchar](2500) NULL,
	[UrlImage] [varbinary](max) NULL,
	[AssignMap] [nvarchar](max) NULL,
	[Height] [decimal](19, 6) NULL,
	[Width] [decimal](19, 6) NULL,
	[Longs] [decimal](19, 6) NULL,
	[Slot] [decimal](19, 6) NULL,
	[CustomField1] [nvarchar](1500) NULL,
	[CustomField2] [nvarchar](1500) NULL,
	[CustomField3] [nvarchar](1500) NULL,
	[CustomField4] [nvarchar](1500) NULL,
	[CustomField5] [nvarchar](1500) NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
	[Type] [nvarchar](150) NULL,
	[Status] [nvarchar](10) NULL,
 CONSTRAINT [PK_M_PlaceInfor] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[PlaceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Position]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Position](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](500) NULL,
	[Priority] [int] NULL,
	[GroupCode] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_Position] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PrepaidCard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PrepaidCard](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PrepaidCardNo] [nvarchar](50) NOT NULL,
	[MainBalance] [numeric](19, 2) NULL,
	[SubBalance] [numeric](19, 2) NULL,
	[StartDate] [date] NULL,
	[Duration] [int] NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_M_PrepaidCard] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[PrepaidCardNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PriceList](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[UOMCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](50) NOT NULL,
	[PriceListId] [nvarchar](50) NOT NULL,
	[ValidFrom] [datetime] NULL,
	[ValidTo] [datetime] NOT NULL,
	[PriceBeforeTax] [decimal](19, 6) NULL,
	[PriceAfterTax] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_PriceList] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[ItemCode] ASC,
	[UOMCode] ASC,
	[BarCode] ASC,
	[PriceListId] ASC,
	[ValidTo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PriceListName]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PriceListName](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Id] [uniqueidentifier] NOT NULL,
	[PriceListId] [nvarchar](50) NULL,
	[PriceListName] [nvarchar](250) NULL,
 CONSTRAINT [PK_M_PriceListName] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PriorityPriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PriorityPriceList](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CusGrpId] [nvarchar](50) NOT NULL,
	[CusGrpDesc] [nvarchar](250) NULL,
	[PriceListId] [nvarchar](50) NULL,
	[Priority] [int] NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_PriorityPriceList] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[CusGrpId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Product]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Product](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ProductId] [nvarchar](50) NOT NULL,
	[ProductName] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_Product] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[ProductId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption1]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption1](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption1] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption10]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption10](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption10] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption2]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption2](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption2] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption3]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption3](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption3] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption4]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption4](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption4] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption5]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption5](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption5] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption6]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption6](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption6] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption7]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption7](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption7] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption8]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption8](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption8] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductOption9]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductOption9](
	[OptionId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[OptionName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption9] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ProductVariant]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ProductVariant](
	[ProductId] [nvarchar](50) NOT NULL,
	[VariantId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Option1] [nvarchar](50) NULL,
	[Option2] [nvarchar](50) NULL,
	[Option3] [nvarchar](50) NULL,
	[Option4] [nvarchar](50) NULL,
	[Option5] [nvarchar](50) NULL,
	[Option6] [nvarchar](50) NULL,
	[Option7] [nvarchar](50) NULL,
	[Option8] [nvarchar](50) NULL,
	[Option9] [nvarchar](50) NULL,
	[Option10] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_ProductOption] PRIMARY KEY CLUSTERED 
(
	[ProductId] ASC,
	[VariantId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_PromoType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_PromoType](
	[PromoType] [int] NOT NULL,
	[TypeName] [nvarchar](250) NULL,
	[PriorityNo] [int] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_PromoType] PRIMARY KEY CLUSTERED 
(
	[PromoType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Province]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Province](
	[ProvinceId] [nvarchar](50) NOT NULL,
	[ProvinceName] [nvarchar](250) NULL,
	[DistrictId] [nvarchar](50) NOT NULL,
	[DistrictName] [nvarchar](250) NULL,
	[WardId] [nvarchar](50) NOT NULL,
	[WardName] [nvarchar](250) NULL,
	[WardLevel] [nvarchar](50) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[AreaCode] [nvarchar](50) NULL,
	[CountryCode] [nvarchar](50) NULL,
	[RegionCode] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_Provinces] PRIMARY KEY CLUSTERED 
(
	[ProvinceId] ASC,
	[DistrictId] ASC,
	[WardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Reason]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Reason](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Value] [nvarchar](50) NULL,
	[Language] [nvarchar](50) NULL,
	[Remark] [nvarchar](50) NULL,
	[Type] [nvarchar](50) NULL,
	[Status] [nvarchar](10) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_Reason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Region]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Region](
	[RegionCode] [nvarchar](50) NOT NULL,
	[RegionName] [nvarchar](250) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[CountryCode] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_Region] PRIMARY KEY CLUSTERED 
(
	[RegionCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Role]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Role](
	[RoleId] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[RoleName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[DefaultScreen] [nvarchar](250) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_Roles] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_SalesPlanHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_SalesPlanHeader](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Id] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](500) NULL,
	[Description] [nvarchar](500) NULL,
	[Status] [nvarchar](50) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Remark] [nvarchar](2500) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](150) NULL,
	[SetupType] [nvarchar](50) NULL,
	[SetupValue] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
 CONSTRAINT [PK_M_SalesTargetHeader] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_SalesPlanLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_SalesPlanLine](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[SalesPlanId] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[StoreId] [nvarchar](50) NULL,
	[Name] [nvarchar](500) NULL,
	[Description] [nvarchar](500) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[SetupType] [nvarchar](50) NULL,
	[SetupValue] [nvarchar](1500) NULL,
	[Target] [decimal](19, 6) NULL,
	[CommissionType] [nvarchar](50) NULL,
	[CommissionValue] [decimal](19, 6) NULL,
	[FilterBy] [nvarchar](250) NULL,
	[Remark] [nvarchar](max) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_M_SalesTarget] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[SalesPlanId] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Serial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Serial](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[Prefix] [nvarchar](50) NULL,
	[Serial] [nvarchar](150) NULL,
	[ExpiryDate] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[Stock] [decimal](19, 6) NULL,
	[Custom1] [nvarchar](50) NULL,
	[Custom2] [nvarchar](50) NULL,
	[Custom3] [nvarchar](50) NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](150) NULL,
 CONSTRAINT [PK_M_Serial] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Shipping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Shipping](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ShippingCode] [nvarchar](150) NOT NULL,
	[ShippingName] [nvarchar](550) NULL,
	[Description] [nvarchar](550) NULL,
	[Remark] [nvarchar](1500) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[CustomF6] [nvarchar](250) NULL,
	[CustomF7] [nvarchar](250) NULL,
	[CustomF8] [nvarchar](250) NULL,
	[CustomF9] [nvarchar](250) NULL,
	[CustomF10] [nvarchar](250) NULL,
	[Amount1] [decimal](19, 6) NULL,
	[Amount2] [decimal](19, 6) NULL,
	[Amoun3] [decimal](19, 6) NULL,
	[Amoun4] [decimal](19, 6) NULL,
	[Amount5] [decimal](19, 6) NULL,
	[LicensePlate] [nvarchar](50) NULL,
	[Driver] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_Shipping] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[ShippingCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_ShortcutKeyboard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_ShortcutKeyboard](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Key1] [nvarchar](50) NULL,
	[Key2] [nvarchar](50) NULL,
	[Key3] [nvarchar](50) NULL,
	[Key4] [nvarchar](50) NULL,
	[Key5] [nvarchar](50) NULL,
	[Custom1] [nvarchar](50) NULL,
	[Custom2] [nvarchar](50) NULL,
	[Custom3] [nvarchar](50) NULL,
	[FunctionCode] [nvarchar](50) NULL,
	[Window] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_ShortcutKeyboard] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Storage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Storage](
	[SLocId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[WhsCode] [nvarchar](50) NOT NULL,
	[SlocName] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[IsNegative] [bit] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_Storage] PRIMARY KEY CLUSTERED 
(
	[SLocId] ASC,
	[CompanyCode] ASC,
	[WhsCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ__M_Storag__8FCBC8A3EA3A0069] UNIQUE NONCLUSTERED 
(
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Store]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Store](
	[StoreId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[StoreDescription] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ForeignName] [nvarchar](250) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[DefaultCusId] [nvarchar](50) NULL,
	[StoreGroupId] [nvarchar](50) NULL,
	[ProvinceId] [nvarchar](50) NULL,
	[DistrictId] [nvarchar](50) NULL,
	[WardId] [nvarchar](50) NULL,
	[CountryCode] [nvarchar](50) NULL,
	[CustomField1] [nvarchar](250) NULL,
	[CustomField2] [nvarchar](250) NULL,
	[CustomField3] [nvarchar](250) NULL,
	[CustomField4] [nvarchar](250) NULL,
	[CustomField5] [nvarchar](250) NULL,
	[AreaCode] [nvarchar](50) NULL,
	[CurrencyCode] [nvarchar](50) NULL,
	[StoreType] [nvarchar](50) NULL,
	[ListType] [nvarchar](50) NULL,
	[FormatConfigId] [nvarchar](50) NULL,
	[WhsCode] [nvarchar](50) NULL,
	[RegionCode] [nvarchar](50) NULL,
	[PrintRemarks] [nvarchar](max) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_Stores] PRIMARY KEY CLUSTERED 
(
	[StoreId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_StoreArea]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_StoreArea](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreAreaId] [nvarchar](50) NOT NULL,
	[StoreAreaName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[StoreAreaType] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_StoreArea_1] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreAreaId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_StoreCapacity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_StoreCapacity](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreAreaId] [nvarchar](50) NOT NULL,
	[TimeFrameId] [nvarchar](50) NOT NULL,
	[MaxCapacity] [int] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_StoreCapacity] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[StoreAreaId] ASC,
	[TimeFrameId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_StoreCurrency]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_StoreCurrency](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Currency] [nvarchar](50) NULL,
	[Status] [nvarchar](10) NULL,
 CONSTRAINT [PK_M_StoreCurrency_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_StoreGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_StoreGroup](
	[StoreGroupId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreGroupName] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_StoreGroup] PRIMARY KEY CLUSTERED 
(
	[StoreGroupId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_StorePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_StorePayment](
	[StoreId] [nvarchar](50) NOT NULL,
	[PaymentCode] [nvarchar](50) NOT NULL,
	[isShow] [bit] NULL,
	[OrderNum] [int] NULL,
	[Status] [char](1) NULL,
	[AllowMix] [bit] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_StorePayment] PRIMARY KEY CLUSTERED 
(
	[StoreId] ASC,
	[PaymentCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_StoreWarehouse]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_StoreWarehouse](
	[StoreID] [nvarchar](50) NOT NULL,
	[WareHouseID] [nvarchar](50) NOT NULL,
	[MappingType] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_M_StoreWarehouse_1] PRIMARY KEY CLUSTERED 
(
	[StoreID] ASC,
	[WareHouseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_TableInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_TableInfor](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TableId] [nvarchar](150) NOT NULL,
	[StoreId] [nvarchar](50) NULL,
	[TableName] [nvarchar](500) NULL,
	[Description] [nvarchar](1500) NULL,
	[Height] [decimal](16, 9) NULL,
	[Width] [decimal](16, 9) NULL,
	[Longs] [decimal](16, 9) NULL,
	[Slot] [decimal](16, 9) NULL,
	[Remark] [nvarchar](1500) NULL,
	[CustomField1] [nvarchar](1500) NULL,
	[CustomField2] [nvarchar](1500) NULL,
	[CustomField3] [nvarchar](1500) NULL,
	[CustomField4] [nvarchar](1500) NULL,
	[CustomField5] [nvarchar](1500) NULL,
	[Status] [nvarchar](10) NULL,
	[CreatedBy] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](100) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_M_TableInfor] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[TableId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_TablePlace]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_TablePlace](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[PlaceId] [nvarchar](50) NOT NULL,
	[TableId] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[Remark] [nvarchar](500) NULL,
	[UrlImage] [varbinary](max) NULL,
	[Height] [decimal](19, 6) NULL,
	[Width] [decimal](19, 6) NULL,
	[Longs] [decimal](19, 6) NULL,
	[Slot] [decimal](19, 6) NULL,
	[CustomField1] [nvarchar](500) NULL,
	[CustomField2] [nvarchar](500) NULL,
	[CustomField3] [nvarchar](500) NULL,
	[CustomField4] [nvarchar](500) NULL,
	[CustomField5] [nvarchar](500) NULL,
	[CreatedBy] [nvarchar](500) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](500) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[Type] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_TablePlace] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[PlaceId] ASC,
	[TableId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Tax]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Tax](
	[TaxCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TaxName] [nvarchar](50) NULL,
	[TaxPercent] [decimal](19, 6) NULL,
	[TaxType] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_Tax] PRIMARY KEY CLUSTERED 
(
	[TaxCode] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_TerminalPeripherals]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_TerminalPeripherals](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[TerminalId] [nvarchar](50) NOT NULL,
	[PeripheralCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](500) NULL,
	[Type] [nvarchar](150) NULL,
	[ConnectType] [nvarchar](150) NULL,
	[Port] [nvarchar](150) NULL,
	[BaudRate] [nvarchar](150) NULL,
	[Parity] [nchar](10) NULL,
	[DataBits] [nchar](10) NULL,
	[StopBits] [nchar](10) NULL,
	[Handshake] [nchar](10) NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
	[Value] [nvarchar](250) NULL,
	[Condition1] [nvarchar](250) NULL,
	[Condition2] [nvarchar](250) NULL,
	[Condition3] [nvarchar](250) NULL,
	[Condition4] [nvarchar](250) NULL,
	[Condition5] [nvarchar](250) NULL,
 CONSTRAINT [PK_M_TerminalPeripherals] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[TerminalId] ASC,
	[PeripheralCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_TimeFrame]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_TimeFrame](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TimeFrameId] [nvarchar](50) NOT NULL,
	[StartTime] [time](7) NULL,
	[EndTime] [time](7) NULL,
	[Duration]  AS (datediff(minute,[StartTime],[EndTime])) PERSISTED,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_TimeFrame] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[TimeFrameId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_TransactionType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_TransactionType](
	[TransType] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_M_TransactionType] PRIMARY KEY CLUSTERED 
(
	[TransType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_UOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_UOM](
	[UOMCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[UOMName] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[DecimalFormat] [nvarchar](150) NULL,
	[ThousandFormat] [nvarchar](150) NULL,
	[DecimalPlacesFormat] [nvarchar](150) NULL,
	[CustomF1] [nvarchar](150) NULL,
	[CustomF2] [nvarchar](150) NULL,
	[CustomF3] [nvarchar](150) NULL,
	[CustomF4] [nvarchar](150) NULL,
	[CustomF5] [nvarchar](150) NULL,
	[AllowDecimal] [bit] NULL,
 CONSTRAINT [PK_M_UOM] PRIMARY KEY CLUSTERED 
(
	[UOMCode] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_User]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_User](
	[UserId] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Username] [nvarchar](50) NULL,
	[Password] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[LastLoginStoreId] [nvarchar](50) NULL,
	[LastLoginStoreLang] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[FirstName] [nvarchar](150) NULL,
	[LastName] [nvarchar](250) NULL,
	[Position] [nvarchar](250) NULL,
	[DefEmployee] [nvarchar](50) NULL,
	[DefStore] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[QRBarcode] [nvarchar](250) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_M_Users] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_UserLicense]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_UserLicense](
	[UserId] [nvarchar](50) NOT NULL,
	[LicenseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_UserLicense] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[LicenseId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_UserRole]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_UserRole](
	[UserId] [nvarchar](50) NOT NULL,
	[RoleId] [nvarchar](50) NOT NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_UserRoles] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_UserStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_UserStore](
	[UserId] [uniqueidentifier] NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
 CONSTRAINT [PK_M_UserStores] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[M_Warehouse]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[M_Warehouse](
	[WhsCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[WhsName] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[WhsType] [nvarchar](50) NULL,
	[DefaultSlocId] [nvarchar](10) NULL,
 CONSTRAINT [PK_M_Warehouses] PRIMARY KEY CLUSTERED 
(
	[WhsCode] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_AC_StoreProcedure]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_AC_StoreProcedure](
	[Id] [uniqueidentifier] NOT NULL,
	[FunctionService] [nvarchar](250) NULL,
	[NameOfStore] [nvarchar](250) NULL,
	[TableName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[IsRequired] [bit] NULL,
	[Content1] [nvarchar](max) NULL,
	[Content2] [nvarchar](max) NULL,
	[Content3] [nvarchar](max) NULL,
	[Content4] [nvarchar](max) NULL,
	[Content5] [nvarchar](max) NULL,
	[Content6] [nvarchar](max) NULL,
	[Content7] [nvarchar](max) NULL,
	[Content8] [nvarchar](max) NULL,
	[Content9] [nvarchar](max) NULL,
	[Content10] [nvarchar](max) NULL,
	[Status] [nvarchar](15) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_S_AC_StoreProcedure] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_BarcodeSetup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_BarcodeSetup](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[Prefix] [nvarchar](50) NULL,
	[PrefixPosition] [int] NULL,
	[PLUPosition] [int] NULL,
	[BarCodePosition] [int] NULL,
	[QtyPosition] [int] NULL,
	[AmountPosition] [int] NULL,
	[WeightPosition] [int] NULL,
	[CheckCode] [nvarchar](50) NULL,
	[CharSeparator] [nvarchar](50) NULL,
	[Status] [nvarchar](10) NULL,
	[PLULength] [int] NULL,
	[BarCodeLength] [int] NULL,
	[QtyLength] [int] NULL,
	[WeightLength] [int] NULL,
	[CheckCodeLength] [int] NULL,
	[AmountLength] [int] NULL,
	[Type] [nvarchar](50) NULL,
	[CheckPosition] [int] NULL,
	[AmountCalculation] [nvarchar](50) NULL,
	[AmountValue] [int] NULL,
	[WeightCalculation] [nvarchar](50) NULL,
	[WeightValue] [int] NULL,
	[PrefixCheckLength] [int] NULL,
	[IsOrgPrice] [bit] NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_BarcodeSetup] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_ConfigType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_ConfigType](
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Status] [nvarchar](1) NULL,
 CONSTRAINT [PK_S_ConfigType] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_CurrencyRoundingOff]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_CurrencyRoundingOff](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NULL,
	[CurrencyCode] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[Status] [nvarchar](10) NULL,
 CONSTRAINT [PK_S_CurrencyRoundOff] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_CustomerCard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_CustomerCard](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CustomerId] [nvarchar](50) NOT NULL,
	[CardNo] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_CustomerCard] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[CustomerId] ASC,
	[CardNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_DataSourceEdit]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_DataSourceEdit](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[DataSource] [nvarchar](50) NULL,
	[Field] [nvarchar](50) NULL,
	[CanEdit] [bit] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_S_DataSourceEdit] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_FormatConfig]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_FormatConfig](
	[FormatId] [int] IDENTITY(1,1) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[FormatName] [nvarchar](250) NULL,
	[SetupType] [nvarchar](50) NULL,
	[SetupCode] [nvarchar](50) NULL,
	[DateFormat] [nvarchar](50) NULL,
	[DecimalFormat] [nvarchar](50) NULL,
	[ThousandFormat] [nvarchar](50) NULL,
	[DecimalPlacesFormat] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[QtyDecimalPlacesFormat] [nvarchar](50) NULL,
	[PerDecimalPlacesFormat] [nvarchar](50) NULL,
	[RateDecimalPlacesFormat] [nvarchar](50) NULL,
 CONSTRAINT [PK_M_FormatConfig] PRIMARY KEY CLUSTERED 
(
	[FormatId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_License]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_License](
	[LicenseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LicenseType] [nvarchar](50) NOT NULL,
	[LicenseDesc] [nvarchar](250) NULL,
	[LicenseCode] [nvarchar](250) NULL,
	[ValidFrom] [datetime] NULL,
	[ValidTo] [datetime] NULL,
	[Status] [char](1) NULL,
	[LicenseAmt] [decimal](19, 6) NULL,
	[LicenseRemain] [decimal](19, 6) NULL,
	[Token] [nvarchar](max) NULL,
	[CustomF1] [nvarchar](max) NULL,
	[CustomF2] [nvarchar](max) NULL,
	[CustomF3] [nvarchar](max) NULL,
	[CustomF4] [nvarchar](max) NULL,
	[CustomF5] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[CustomF6] [nvarchar](max) NULL,
	[CustomF7] [nvarchar](max) NULL,
	[CustomF8] [nvarchar](max) NULL,
	[CustomF9] [nvarchar](max) NULL,
	[CustomF10] [nvarchar](max) NULL,
	[CustomF11] [nvarchar](max) NULL,
	[CustomF12] [nvarchar](max) NULL,
	[CustomF13] [nvarchar](max) NULL,
	[CustomF14] [nvarchar](max) NULL,
	[CustomF15] [nvarchar](max) NULL,
	[Hash] [nvarchar](150) NULL,
	[HardwareKey] [nvarchar](50) NULL,
	[LicenseCusF1] [nvarchar](250) NULL,
	[LicenseCusF2] [nvarchar](250) NULL,
	[LicenseCusF3] [nvarchar](250) NULL,
	[LicenseCusF4] [nvarchar](250) NULL,
	[LicenseCusF5] [nvarchar](250) NULL,
	[NotifyShowOn] [int] NULL,
 CONSTRAINT [PK_S_License_1] PRIMARY KEY CLUSTERED 
(
	[LicenseId] ASC,
	[CompanyCode] ASC,
	[LicenseType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LicenseType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LicenseType](
	[LicenseType] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_S_LicenseType] PRIMARY KEY CLUSTERED 
(
	[LicenseType] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LocalLog]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LocalLog](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Type] [nvarchar](50) NULL,
	[TransId] [nvarchar](50) NULL,
	[LineNum] [nvarchar](50) NULL,
	[Action] [nvarchar](250) NULL,
	[Time] [datetime] NULL,
	[Value] [nvarchar](max) NULL,
	[Result] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](150) NULL,
	[CustomF2] [nvarchar](150) NULL,
	[CustomF3] [nvarchar](150) NULL,
	[CustomF4] [nvarchar](150) NULL,
	[CustomF5] [nvarchar](150) NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_S_LocalLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_Log]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_Log](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Type] [nvarchar](50) NULL,
	[TransId] [nvarchar](50) NULL,
	[LineNum] [nvarchar](50) NULL,
	[Action] [nvarchar](250) NULL,
	[Time] [datetime] NULL,
	[Value] [nvarchar](max) NULL,
	[Result] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](max) NULL,
	[CustomF2] [nvarchar](max) NULL,
	[CustomF3] [nvarchar](max) NULL,
	[CustomF4] [nvarchar](max) NULL,
	[CustomF5] [nvarchar](max) NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[CreatedOn] [datetime] NULL,
	[TerminalId] [nvarchar](150) NULL,
	[CustomF6] [nvarchar](1500) NULL,
	[CustomF7] [nvarchar](1500) NULL,
	[CustomF8] [nvarchar](1500) NULL,
	[CustomF9] [nvarchar](1500) NULL,
	[CustomF10] [nvarchar](1500) NULL,
 CONSTRAINT [PK_S_Log] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyBuy]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyBuy](
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ValueType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](10) NULL,
	[Value_2] [decimal](19, 6) NULL,
 CONSTRAINT [PK_S_LoyaltyBuy] PRIMARY KEY CLUSTERED 
(
	[LoyaltyId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyCustomer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyCustomer](
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[CustomerValue] [nvarchar](50) NULL,
	[CustomerType] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_LoyaltyCustomer] PRIMARY KEY CLUSTERED 
(
	[LoyaltyId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyEarn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyEarn](
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ConditionType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](50) NULL,
	[Value_2] [decimal](19, 6) NULL,
	[ValueType] [nvarchar](50) NULL,
	[EarnValue] [decimal](19, 6) NULL,
	[MaxPointApply] [decimal](19, 6) NULL,
 CONSTRAINT [PK_S_LoyaltyEarn] PRIMARY KEY CLUSTERED 
(
	[LoyaltyId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyExclude]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyExclude](
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineType] [nvarchar](50) NOT NULL,
	[LineCode] [nvarchar](50) NOT NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_LoyaltyExclude] PRIMARY KEY CLUSTERED 
(
	[LoyaltyId] ASC,
	[CompanyCode] ASC,
	[LineType] ASC,
	[LineCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyHeader](
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LoyaltyType] [int] NULL,
	[LoyaltyName] [nvarchar](250) NULL,
	[CustomerType] [char](1) NULL,
	[ValidDateFrom] [date] NULL,
	[ValidDateTo] [date] NULL,
	[ValidTimeFrom] [int] NULL,
	[ValidTimeTo] [int] NULL,
	[IsMon] [char](1) NULL,
	[IsTue] [char](1) NULL,
	[IsWed] [char](1) NULL,
	[IsThu] [char](1) NULL,
	[IsFri] [char](1) NULL,
	[IsSat] [char](1) NULL,
	[IsSun] [char](1) NULL,
	[TotalBuyFrom] [decimal](19, 6) NULL,
	[TotalBuyTo] [decimal](19, 6) NULL,
	[TotalEarnType] [nvarchar](50) NULL,
	[TotalEarnValue] [decimal](19, 6) NULL,
	[MaxTotalEarnValue] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_S_LoyaltyHeader] PRIMARY KEY CLUSTERED 
(
	[LoyaltyId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyPointConvert]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyPointConvert](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Point] [decimal](19, 6) NULL,
	[Amount] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_LoyaltyPointConvert] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyRank]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyRank](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[RankId] [nvarchar](10) NOT NULL,
	[RankName] [nvarchar](50) NULL,
	[Factor] [decimal](19, 6) NULL,
	[TargetAmount] [decimal](19, 6) NULL,
	[Period] [int] NULL,
	[Status] [nvarchar](5) NULL,
 CONSTRAINT [PK_S_LoyaltyRank] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[RankId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_LoyaltyStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_LoyaltyStore](
	[LoyaltyId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[StoreValue] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_LoyaltyStore] PRIMARY KEY CLUSTERED 
(
	[LoyaltyId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PersonalSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PersonalSetting](
	[SettingId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[FunctionId] [nvarchar](50) NULL,
	[SettingName] [nvarchar](50) NULL,
	[SettingType] [nvarchar](50) NULL,
	[SettingValue] [nvarchar](50) NULL,
	[UserId] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_PersonalSetting] PRIMARY KEY CLUSTERED 
(
	[SettingId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PoleDisplayConnector]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PoleDisplayConnector](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[SerialPortName] [nvarchar](150) NULL,
	[SerialPortBaudRate] [nvarchar](150) NULL,
	[SerialPortParity] [nvarchar](150) NULL,
	[SerialPortDataBits] [nvarchar](150) NULL,
	[SerialPortStopBits] [nvarchar](150) NULL,
	[SerialPortHandshake] [nvarchar](150) NULL,
	[LatestDate] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_PoleDisplayConnector] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[CounterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_POSOption]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_POSOption](
	[Type] [nvarchar](50) NOT NULL,
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Status] [nvarchar](1) NULL,
	[IsDefault] [bit] NULL,
 CONSTRAINT [PK_S_POSOption] PRIMARY KEY CLUSTERED 
(
	[Type] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoBuy]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoBuy](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ValueType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](10) NULL,
	[Value_2] [decimal](19, 6) NULL,
 CONSTRAINT [PK_S_PromoBuy] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoBuyOTGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoBuyOTGroup](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[GroupID] [nvarchar](100) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUoM] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_PromoBuyOTGroup] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC,
	[GroupID] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoCustomer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoCustomer](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[CustomerValue] [nvarchar](50) NULL,
	[CustomerType] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_PromoCustomer] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoGet]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoGet](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUom] [nvarchar](50) NULL,
	[ConditionType] [nvarchar](50) NULL,
	[Condition_1] [nvarchar](10) NULL,
	[Value_1] [decimal](19, 6) NULL,
	[Condition_2] [nvarchar](50) NULL,
	[Value_2] [decimal](19, 6) NULL,
	[ValueType] [nvarchar](50) NULL,
	[GetValue] [decimal](19, 6) NULL,
	[MaxAmtDis] [decimal](19, 6) NULL,
	[MaxQtyDis] [decimal](19, 6) NULL,
 CONSTRAINT [PK_S_PromoGet] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoGetOTGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoGetOTGroup](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[GroupID] [nvarchar](100) NOT NULL,
	[LineNum] [int] NOT NULL,
	[LineType] [nvarchar](50) NULL,
	[LineCode] [nvarchar](50) NULL,
	[LineName] [nvarchar](250) NULL,
	[LineUoM] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_PromoGetOTGroup] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC,
	[GroupID] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoHeader](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PromoType] [int] NULL,
	[PromoName] [nvarchar](250) NULL,
	[CustomerType] [char](1) NULL,
	[ValidDateFrom] [date] NULL,
	[ValidDateTo] [date] NULL,
	[ValidTimeFrom] [int] NULL,
	[ValidTimeTo] [int] NULL,
	[IsMon] [char](1) NULL,
	[IsTue] [char](1) NULL,
	[IsWed] [char](1) NULL,
	[IsThu] [char](1) NULL,
	[IsFri] [char](1) NULL,
	[IsSat] [char](1) NULL,
	[IsSun] [char](1) NULL,
	[TotalBuyFrom] [decimal](19, 6) NULL,
	[TotalBuyTo] [decimal](19, 6) NULL,
	[TotalGetType] [nvarchar](50) NULL,
	[TotalGetValue] [decimal](19, 6) NULL,
	[MaxTotalGetValue] [decimal](19, 6) NULL,
	[IsCombine] [char](1) NULL,
	[IsVoucher] [bit] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[SAPPromoId] [nvarchar](50) NULL,
	[SAPBonusBuyId] [nvarchar](50) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[MaxApplyType] [nvarchar](50) NULL,
	[MaxApplyValue] [decimal](19, 6) NULL,
	[MaxQtyByReceipt] [decimal](19, 6) NULL,
	[MaxQtyByStore] [decimal](19, 6) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_S_PromoHeader] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoSchema]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoSchema](
	[SchemaId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[SchemaName] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[AllowChain] [char](1) NULL,
	[SAPPromoId] [nvarchar](50) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_S_PromoSchema] PRIMARY KEY CLUSTERED 
(
	[SchemaId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_PromoStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_PromoStore](
	[PromoId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[StoreValue] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_PromoStore] PRIMARY KEY CLUSTERED 
(
	[PromoId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_QuickAccessMenu]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_QuickAccessMenu](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Url] [nvarchar](250) NULL,
	[Icon] [nvarchar](250) NULL,
	[Image] [nvarchar](250) NULL,
	[OrderNum] [int] NULL,
	[Status] [nvarchar](5) NULL,
 CONSTRAINT [PK_S_QuickAccessMenu] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_ReleaseNote]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_ReleaseNote](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Version] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ReleaseTime] [datetime] NULL,
	[ReleaseContent] [nvarchar](max) NULL,
	[ReleaseContentForeign] [nvarchar](max) NULL,
	[CustomF1] [nvarchar](max) NULL,
	[CustomF2] [nvarchar](max) NULL,
	[CustomF3] [nvarchar](max) NULL,
	[CustomF4] [nvarchar](max) NULL,
	[CustomF5] [nvarchar](max) NULL,
	[Status] [nvarchar](15) NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_S_ReleaseNote] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_SalesPlan]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_SalesPlan](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](500) NULL,
	[Description] [nvarchar](500) NULL,
	[StoreId] [nvarchar](80) NULL,
	[Type] [nvarchar](150) NULL,
	[Value] [nvarchar](250) NULL,
	[Target] [decimal](19, 6) NULL,
	[Percent] [decimal](19, 6) NULL,
	[Priority] [int] NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_S_SalesPlan] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_SalesPlanType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_SalesPlanType](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Code] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](500) NULL,
	[Status] [nvarchar](50) NULL,
 CONSTRAINT [PK_S_SalesPlanType_1] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_SalesType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_SalesType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](250) NULL,
	[Status] [nvarchar](1) NULL,
 CONSTRAINT [PK_S_SalesType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_SchemaLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_SchemaLine](
	[SchemaId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[PromoId] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
	[Priority] [int] NULL,
	[IsApply] [char](1) NULL,
 CONSTRAINT [PK_S_SchemaLine] PRIMARY KEY CLUSTERED 
(
	[SchemaId] ASC,
	[CompanyCode] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_SerialSetup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_SerialSetup](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[Prefix] [nvarchar](50) NULL,
	[PrefixPosition] [int] NULL,
	[RandomNumber] [int] NULL,
	[RandomCharPosition] [int] NULL,
	[IncrementingNumberPosition] [int] NULL,
	[Status] [nvarchar](10) NULL,
 CONSTRAINT [PK_S_SerialSetup] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_Status]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_Status](
	[Code] [nvarchar](10) NOT NULL,
	[Name] [nvarchar](150) NULL,
 CONSTRAINT [PK_S_Status] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_StoreClient]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_StoreClient](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[LocalIP] [nvarchar](50) NULL,
	[PublicIP] [nvarchar](50) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
	[PoleName] [nvarchar](250) NULL,
	[PoleBaudRate] [nvarchar](50) NULL,
	[PoleParity] [nvarchar](50) NULL,
	[PoleDataBits] [nvarchar](50) NULL,
	[PoleStopBits] [nvarchar](50) NULL,
	[PoleHandshake] [nvarchar](50) NULL,
	[PrintSize] [nvarchar](50) NULL,
	[PrintName] [nvarchar](50) NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[StatusGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_S_StoreDevide] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_ThirdPartyLog]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_ThirdPartyLog](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NULL,
	[CompanyCode] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
	[Type] [nvarchar](50) NULL,
	[Remark] [nvarchar](250) NULL,
 CONSTRAINT [PK_S_ThirdPartyLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_ThirdPartyLogLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_ThirdPartyLogLine](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[HeaderId] [uniqueidentifier] NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[LineId] [int] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[JsonBody] [nvarchar](max) NULL,
	[StartTime] [datetime] NULL,
	[EndTime] [datetime] NULL,
	[Key1] [nvarchar](250) NULL,
	[Key2] [nvarchar](250) NULL,
	[Key3] [nvarchar](250) NULL,
	[Key4] [nvarchar](250) NULL,
	[Key5] [nvarchar](250) NULL,
	[Status] [nvarchar](10) NULL,
	[CustomF1] [nvarchar](max) NULL,
	[CustomF2] [nvarchar](max) NULL,
	[CustomF3] [nvarchar](max) NULL,
	[CustomF4] [nvarchar](max) NULL,
	[CustomF5] [nvarchar](max) NULL,
	[Remark] [nvarchar](max) NULL,
 CONSTRAINT [PK_S_ThirdPartyLogLine] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[HeaderId] ASC,
	[StoreId] ASC,
	[LineId] ASC,
	[TransId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_ToDoList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_ToDoList](
	[Id] [uniqueidentifier] NOT NULL,
	[Code] [nvarchar](250) NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Content] [ntext] NULL,
	[Remark] [nvarchar](250) NULL,
	[Status] [nvarchar](15) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](150) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_S_ToDoList] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_Token]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_Token](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LicenseId] [nvarchar](250) NOT NULL,
	[Type] [nvarchar](50) NULL,
	[Hash] [nvarchar](150) NULL,
	[HardwareKey] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](max) NULL,
	[CustomF2] [nvarchar](max) NULL,
	[CustomF3] [nvarchar](max) NULL,
	[CustomF4] [nvarchar](max) NULL,
	[CustomF5] [nvarchar](max) NULL,
	[CustomF6] [nvarchar](max) NULL,
	[CustomF7] [nvarchar](max) NULL,
	[CustomF8] [nvarchar](max) NULL,
	[CustomF9] [nvarchar](max) NULL,
	[CustomF10] [nvarchar](max) NULL,
	[CustomF11] [nvarchar](max) NULL,
	[CustomF12] [nvarchar](max) NULL,
	[CustomF13] [nvarchar](max) NULL,
	[CustomF14] [nvarchar](max) NULL,
	[CustomF15] [nvarchar](max) NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedBy] [datetime] NULL,
	[CreatedOn] [nvarchar](50) NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_S_Token] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[LicenseId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_Version]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_Version](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ReleaseTime] [datetime] NULL,
	[Version] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](250) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](250) NULL,
	[Description] [nvarchar](50) NULL,
	[Status] [nvarchar](15) NULL,
 CONSTRAINT [PK_S_Version] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[S_VoidOrderSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[S_VoidOrderSetting](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Type] [nvarchar](50) NULL,
	[Code] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
	[Value] [int] NULL,
	[Status] [nvarchar](1) NULL,
	[Custom1] [nvarchar](150) NULL,
	[Custom2] [nvarchar](150) NULL,
	[Custom3] [nvarchar](150) NULL,
 CONSTRAINT [PK_S_OrderOption] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_BankIn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_BankIn](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[DocDate] [datetime] NULL,
	[Currency] [nvarchar](50) NULL,
	[FCAmt] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[BankInAmt] [decimal](19, 6) NULL,
	[RefNum] [nvarchar](150) NULL,
	[RefNum2] [nvarchar](150) NULL,
	[CustomF1] [nvarchar](150) NULL,
	[CustomF2] [nvarchar](150) NULL,
	[CustomF3] [nvarchar](150) NULL,
	[CustomF4] [nvarchar](150) NULL,
	[CustomF5] [nvarchar](150) NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](150) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[SyncLocalStatus] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_BankIn] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[DailyId] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_CapacityRemain]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_CapacityRemain](
	[StoreId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TimeFrameId] [nvarchar](50) NOT NULL,
	[StoreAreaId] [nvarchar](50) NOT NULL,
	[TransDate] [date] NOT NULL,
	[MaxCapacity] [int] NULL,
	[CurrentCapacity] [int] NULL,
	[RemainCapacity] [int] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_CapacityRemain] PRIMARY KEY CLUSTERED 
(
	[StoreId] ASC,
	[CompanyCode] ASC,
	[TimeFrameId] ASC,
	[StoreAreaId] ASC,
	[TransDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_CapacityTransaction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_CapacityTransaction](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreAreaId] [nvarchar](50) NOT NULL,
	[TimeFrameId] [nvarchar](50) NOT NULL,
	[TransDate] [date] NOT NULL,
	[LineId] [nvarchar](50) NULL,
	[ItemCode] [nvarchar](50) NULL,
	[CapacityValue] [int] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModififedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_CapacityTransaction] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[TransId] ASC,
	[StoreId] ASC,
	[StoreAreaId] ASC,
	[TimeFrameId] ASC,
	[TransDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_DeliveryHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_DeliveryHeader](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](20) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesPersonName] [nvarchar](250) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[SalesType] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
	[DataSource] [nvarchar](50) NULL,
	[POSType] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[EInvoice] [nvarchar](10) NULL,
	[SyncJAStatus] [char](1) NULL,
	[SyncJADate] [datetime] NULL,
	[SyncJAMsg] [nvarchar](500) NULL,
	[Phone] [nvarchar](50) NULL,
	[CusName] [nvarchar](250) NULL,
	[CusAddress] [nvarchar](250) NULL,
	[Reason] [nvarchar](250) NULL,
	[CollectedStatus] [nvarchar](50) NULL,
	[OMSId] [nvarchar](50) NULL,
	[Chanel] [nvarchar](50) NULL,
	[StartTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[ShortOrderID] [nvarchar](50) NULL,
	[MerchantId] [nvarchar](50) NULL,
	[OMSStatus] [nvarchar](50) NULL,
	[PromoId] [nvarchar](50) NULL,
	[ApprovalId] [nvarchar](50) NULL,
	[RewardPoints] [decimal](19, 6) NULL,
	[ExpiryDate] [datetime] NULL,
	[DocDate] [datetime] NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
	[LuckyNo] [nvarchar](50) NULL,
	[DeliveryBy] [nvarchar](550) NULL,
	[ReceiptBy] [nvarchar](550) NULL,
	[From] [nvarchar](550) NULL,
	[To] [nvarchar](550) NULL,
	[ToCustom1] [nvarchar](550) NULL,
	[ToCustom2] [nvarchar](550) NULL,
	[ToCustom3] [nvarchar](550) NULL,
	[OrderId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_T_DeliveryHeader] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_DeliveryLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_DeliveryLine](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
	[StoreAreaId] [nvarchar](50) NULL,
	[TimeFrameId] [nvarchar](50) NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](50) NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](1) NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[PrepaidCardNo] [nvarchar](50) NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](15) NULL,
	[Description] [nvarchar](250) NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[SerialNum] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[ItemTypeS4] [nvarchar](15) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
	[PriceListId] [nvarchar](50) NULL,
	[ProductId] [nvarchar](50) NULL,
	[WeightScaleBarcode] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[BookletNo] [nvarchar](50) NULL,
	[OrgQty] [decimal](19, 6) NULL,
	[DeliveryQty] [decimal](19, 6) NULL,
	[ReceiptQty] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_DeliveryLine] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_DeliveryLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_DeliveryLineSerial](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](100) NULL,
	[LineNum] [int] NULL,
	[Description] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[Prefix] [nvarchar](50) NULL,
	[ExpDate] [datetime] NULL,
	[StoreId] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](2500) NULL,
	[CustomF4] [nvarchar](2500) NULL,
	[CustomF5] [nvarchar](2500) NULL,
 CONSTRAINT [PK_T_DeliveryLineSerial] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_DivisionHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_DivisionHeader](
	[Id] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[ContractNo] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](1500) NULL,
	[CustomF2] [nvarchar](1500) NULL,
	[CustomF3] [nvarchar](1500) NULL,
	[CustomF4] [nvarchar](1500) NULL,
	[CustomF5] [nvarchar](1500) NULL,
	[DocDate] [datetime] NULL,
 CONSTRAINT [PK_T_DivisionHeader] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_DivisionLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_DivisionLine](
	[Id] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_DivisionLine_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_EmployeeSalesTargetSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_EmployeeSalesTargetSummary](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[EmployeeId] [nvarchar](50) NULL,
	[Position] [nvarchar](150) NULL,
	[Salary] [decimal](19, 6) NULL,
	[CommisionValue] [decimal](19, 6) NULL,
	[SalesTarget] [nvarchar](50) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[LineTotal1] [decimal](19, 6) NULL,
	[LineTotal2] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](150) NULL,
	[CustomF2] [nvarchar](150) NULL,
	[CustomF3] [nvarchar](150) NULL,
	[CustomF4] [nvarchar](150) NULL,
	[CustomF5] [nvarchar](150) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[SyncMWIStatus] [nvarchar](15) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
 CONSTRAINT [PK_T_EmployeeSalesTargetSumary] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_EndDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_EndDate](
	[CompanyCode] [nvarchar](20) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Id] [nvarchar](50) NOT NULL,
	[Date] [datetime] NULL,
	[Description] [nvarchar](150) NULL,
	[Remark] [nvarchar](250) NULL,
	[Status] [nvarchar](2) NULL,
	[CreateOn] [datetime] NULL,
	[CreateBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[TotalSales] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[TotalCollected] [decimal](19, 6) NULL,
	[TotalBalance] [decimal](19, 6) NULL,
	[TaxTotal] [decimal](19, 6) NULL,
	[DiscountTotal] [decimal](19, 6) NULL,
	[PaymentTotal] [decimal](19, 6) NULL,
	[LineItemCount] [decimal](19, 6) NULL,
	[TaxCount] [decimal](19, 6) NULL,
	[DiscountCount] [decimal](19, 6) NULL,
	[PaymentCount] [decimal](19, 6) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[AmtNotInBank] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_EndDate] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_EndDateDetail]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_EndDateDetail](
	[CompanyCode] [nvarchar](20) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Id] [uniqueidentifier] NOT NULL,
	[EndDateId] [nvarchar](50) NOT NULL,
	[LineId] [int] NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[UoMCode] [nvarchar](10) NOT NULL,
	[Description] [nvarchar](250) NULL,
	[Barcode] [nvarchar](50) NULL,
	[Price] [decimal](19, 6) NULL,
	[Quantity] [decimal](18, 9) NULL,
	[LineTotal] [decimal](18, 6) NULL,
 CONSTRAINT [PK_T_EndDateDetail] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[Id] ASC,
	[EndDateId] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[UoMCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_EndDatePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_EndDatePayment](
	[CompanyCode] [nvarchar](20) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[EndDateId] [nvarchar](50) NOT NULL,
	[Id] [uniqueidentifier] NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[LineId] [int] NULL,
	[PaymentCode] [nvarchar](50) NULL,
	[EOD_Code] [nvarchar](50) NULL,
	[Amount] [decimal](19, 6) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[Balance] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[FCCollectedAmount] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[BankInAmt] [decimal](19, 6) NULL,
	[BankInBalance] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_EndDatePayment] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[EndDateId] ASC,
	[Id] ASC,
	[Currency] ASC,
	[CounterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsIssueHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsIssueHeader](
	[INVTId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remark] [nvarchar](250) NULL,
	[StoreName] [nvarchar](250) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[RefId] [nvarchar](50) NULL,
	[MovementType] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_GoodsIssue] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsIssueLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsIssueLine](
	[INVTId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[CurrencyCode] [nvarchar](50) NULL,
	[CurrencyRate] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[BOMId] [nvarchar](50) NULL,
	[BOMValue] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_GoodsIssueLine] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsIssueLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsIssueLineSerial](
	[INVTId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_GoodsIssueLineSerial] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReceiptHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReceiptHeader](
	[INVTId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remark] [nvarchar](250) NULL,
	[StoreName] [nvarchar](250) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[RefId] [nvarchar](50) NULL,
	[MovementType] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_GoodsReceiptHeader] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReceiptLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReceiptLine](
	[INVTId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[CurrencyCode] [nvarchar](50) NULL,
	[CurrencyRate] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_GoodsReceiptLine] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReceiptLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReceiptLineSerial](
	[INVTId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_GoodsReceiptLineSerial] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReceiptPOHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReceiptPOHeader](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[CardCode] [nvarchar](50) NULL,
	[CardName] [nvarchar](250) NULL,
	[InvoiceAddress] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[VATTotal] [decimal](19, 6) NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[ShiftId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_GoodsReceiptPOHeader] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReceiptPOLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReceiptPOLine](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseTrans] [nvarchar](50) NULL,
	[BaseType] [nvarchar](50) NULL,
	[BaseEntry] [nvarchar](50) NULL,
	[LineStatus] [char](1) NULL,
	[DiscPercent] [decimal](19, 6) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[BaseLine] [int] NULL,
	[BaseTransId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_GoodsReceiptPOLine] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReceiptPOLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReceiptPOLineSerial](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_GoodsReceiptPOLineSerial] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReturnHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReturnHeader](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[CardCode] [nvarchar](50) NULL,
	[CardName] [nvarchar](250) NULL,
	[InvoiceAddress] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[VATTotal] [decimal](19, 6) NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[ShiftId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_GoodsReturnHeader] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReturnLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReturnLine](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseTrans] [nvarchar](50) NULL,
	[BaseType] [nvarchar](50) NULL,
	[BaseEntry] [nvarchar](50) NULL,
	[LineStatus] [char](1) NULL,
	[DiscPercent] [decimal](19, 6) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[BaseLine] [int] NULL,
	[BaseTransId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_GoodsReturnLine] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_GoodsReturnLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_GoodsReturnLineSerial](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_GoodsReturnLineSerial] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryCountingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryCountingHeader](
	[ICId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Name] [nvarchar](250) NULL,
	[Remark] [nvarchar](250) NULL,
	[RefId] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
 CONSTRAINT [PK_T_InventoryCountingHeader] PRIMARY KEY CLUSTERED 
(
	[ICId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryCountingLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryCountingLine](
	[ICId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseRef] [nvarchar](50) NULL,
	[BaseType] [nvarchar](50) NULL,
	[BaseEntry] [nvarchar](50) NULL,
	[LineStatus] [char](1) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[TotalStock] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[TotalDifferent] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_InventoryCountingLine] PRIMARY KEY CLUSTERED 
(
	[ICId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryCountingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryCountingLineSerial](
	[ICId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[TotalStock] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[TotalDifferent] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_InventoryCountingLineSerial] PRIMARY KEY CLUSTERED 
(
	[ICId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryHeader](
	[INVTId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](150) NULL,
	[Remark] [nvarchar](250) NULL,
	[DocType] [nvarchar](50) NULL,
	[RefINVTId] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[FromStore] [nvarchar](50) NULL,
	[FromStoreName] [nvarchar](250) NULL,
	[ToStore] [nvarchar](50) NULL,
	[ToStoreName] [nvarchar](250) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[RefId] [nvarchar](50) NULL,
	[TransitWhs] [nvarchar](50) NULL,
	[FromWhs] [nvarchar](50) NULL,
	[ToWhs] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InventoryHeader] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryLine](
	[INVTId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[FrSLocId] [nvarchar](50) NOT NULL,
	[ToSlocId] [nvarchar](50) NOT NULL,
	[DocType] [nvarchar](50) NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[ShipDate] [datetime] NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[BaseLine] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InventoryLine] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[FrSLocId] ASC,
	[ToSlocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryLineSerial](
	[INVTId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[FrSLocId] [nvarchar](50) NOT NULL,
	[ToSlocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_InventoryLineSerial] PRIMARY KEY CLUSTERED 
(
	[INVTId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[FrSLocId] ASC,
	[ToSlocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryPostingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryPostingHeader](
	[IPId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Name] [nvarchar](250) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[RefId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InventoryPostingHeader] PRIMARY KEY CLUSTERED 
(
	[IPId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryPostingLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryPostingLine](
	[IPId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseRef] [nvarchar](50) NULL,
	[BaseType] [nvarchar](50) NULL,
	[BaseEntry] [nvarchar](50) NULL,
	[LineStatus] [char](1) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_InventoryPostingLine] PRIMARY KEY CLUSTERED 
(
	[IPId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryPostingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryPostingLineSerial](
	[IPId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[TotalStock] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[TotalDifferent] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_InventoryPostingLineSerial] PRIMARY KEY CLUSTERED 
(
	[IPId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryTransferHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryTransferHeader](
	[INVTTransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](150) NULL,
	[Remark] [nvarchar](250) NULL,
	[DocType] [nvarchar](50) NULL,
	[RefINVTId] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[FromSloc] [nvarchar](50) NULL,
	[FromSlocName] [nvarchar](250) NULL,
	[ToSloc] [nvarchar](50) NULL,
	[ToSlocName] [nvarchar](250) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[RefId] [nvarchar](50) NULL,
	[TransitWhs] [nvarchar](50) NULL,
	[FromWhs] [nvarchar](50) NULL,
	[ToWhs] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_InventoryTransferHeader] PRIMARY KEY CLUSTERED 
(
	[INVTTransId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryTransferLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryTransferLine](
	[INVTTransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[FrSLocId] [nvarchar](50) NOT NULL,
	[ToSlocId] [nvarchar](50) NOT NULL,
	[DocType] [nvarchar](50) NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[ShipDate] [datetime] NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[BaseLine] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InventoryTransferLine] PRIMARY KEY CLUSTERED 
(
	[INVTTransId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[FrSLocId] ASC,
	[ToSlocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InventoryTransferLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InventoryTransferLineSerial](
	[INVTTransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[FrSLocId] [nvarchar](50) NOT NULL,
	[ToSlocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_InventoryTransferLineSerial] PRIMARY KEY CLUSTERED 
(
	[INVTTransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[FrSLocId] ASC,
	[ToSlocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InvoiceHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InvoiceHeader](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](20) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[RefId] [nvarchar](50) NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesPersonName] [nvarchar](250) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[SalesType] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
	[DataSource] [nvarchar](50) NULL,
	[POSType] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[InvoiceType] [nvarchar](15) NULL,
	[Image] [varbinary](1500) NULL,
	[Phone] [nvarchar](50) NULL,
	[CusName] [nvarchar](250) NULL,
	[CusAddress] [nvarchar](250) NULL,
	[Reason] [nvarchar](250) NULL,
	[CollectedStatus] [nvarchar](50) NULL,
	[Chanel] [nvarchar](50) NULL,
	[TerminalId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InvoiceHeader] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InvoiceInvoice]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InvoiceInvoice](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[CustomerName] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InvoiceInvoice] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InvoiceLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InvoiceLine](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
	[StoreAreaId] [nvarchar](50) NULL,
	[TimeFrameId] [nvarchar](50) NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](50) NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [int] NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](1) NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[Description] [nvarchar](250) NULL,
	[PrepaidCardNo] [nvarchar](50) NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](15) NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InvoiceLine] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InvoiceLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InvoiceLineSerial](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [int] NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[LineNum] [int] NULL,
	[ItemName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_InvoiceLineSerial] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InvoicePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InvoicePayment](
	[PaymentCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[CardType] [nvarchar](50) NULL,
	[CardHolderName] [nvarchar](250) NULL,
	[CardNo] [nvarchar](50) NULL,
	[VoucherBarCode] [nvarchar](250) NULL,
	[VoucherSerial] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[TerminalId] [nvarchar](50) NULL,
	[Currency] [nvarchar](50) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InvoicePayment] PRIMARY KEY CLUSTERED 
(
	[PaymentCode] ASC,
	[CompanyCode] ASC,
	[TransId] ASC,
	[LineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_InvoicePromo]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_InvoicePromo](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ApplyType] [nvarchar](50) NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Value] [decimal](19, 6) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoTypeLine] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoAmt] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_InvoicePromo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[TransId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ItemSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ItemSerial](
	[SLocId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](250) NOT NULL,
	[StoreId] [nvarchar](50) NULL,
	[InQty] [decimal](19, 6) NULL,
	[OutQty] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[TransType] [nvarchar](50) NULL,
	[TransDate] [date] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
 CONSTRAINT [PK_T_ItemSerial] PRIMARY KEY CLUSTERED 
(
	[SLocId] ASC,
	[CompanyCode] ASC,
	[TransId] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ItemStorage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ItemStorage](
	[SLocId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[UOMCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_ItemStorage] PRIMARY KEY CLUSTERED 
(
	[SLocId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[UOMCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_LoyaltyLog]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_LoyaltyLog](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[CustomerId] [nvarchar](50) NOT NULL,
	[CustomerName] [nvarchar](250) NULL,
	[CardNumber] [nvarchar](50) NOT NULL,
	[TransDate] [datetime] NULL,
	[TransType] [nvarchar](50) NULL,
	[InPoint] [decimal](19, 6) NULL,
	[OutPoint] [decimal](19, 6) NULL,
	[InAmt] [decimal](19, 6) NULL,
	[OutAmt] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[CalcStatus] [char](1) NULL,
	[ExpireDate] [date] NULL,
	[PointRatio] [decimal](19, 6) NULL,
	[AmountRatio] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_LoyaltyLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[CustomerId] ASC,
	[CardNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_OrderHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_OrderHeader](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](15) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [bit] NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
 CONSTRAINT [PK_T_OrderHeader] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[ContractNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_OrderLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_OrderLine](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](15) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_OrderLine] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PaymentHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PaymentHeader](
	[CompanyCode] [nvarchar](150) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[Title] [nvarchar](250) NULL,
	[Remark] [nvarchar](550) NULL,
	[CusId] [nvarchar](50) NULL,
	[Type] [nvarchar](50) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[RefTransId] [nvarchar](50) NULL,
	[Reason] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[Status] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_T_PaymentHeader] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[TransId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PaymentLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PaymentLine](
	[PaymentCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[CardType] [nvarchar](50) NULL,
	[CardHolderName] [nvarchar](250) NULL,
	[CardNo] [nvarchar](50) NULL,
	[VoucherBarCode] [nvarchar](250) NULL,
	[VoucherSerial] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](500) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[DataSource] [nvarchar](50) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[Currency] [nvarchar](50) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CardExpiryDate] [datetime] NULL,
	[AdjudicationCode] [nvarchar](50) NULL,
	[AuthorizationDateTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[FCRoundingOff] [decimal](19, 6) NULL,
	[ForfeitCode] [nvarchar](150) NULL,
	[Forfeit] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_PaymentLine] PRIMARY KEY CLUSTERED 
(
	[PaymentCode] ASC,
	[CompanyCode] ASC,
	[TransId] ASC,
	[LineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PickupAmount]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PickupAmount](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[ShiftId] [nvarchar](50) NULL,
	[PickupBy] [nvarchar](50) NULL,
	[Amount] [decimal](19, 6) NULL,
	[Remarks] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](150) NULL,
	[CustomF2] [nvarchar](150) NULL,
	[CustomF3] [nvarchar](150) NULL,
	[CustomF4] [nvarchar](150) NULL,
	[CustomF5] [nvarchar](150) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[Status] [nvarchar](10) NULL,
	[DailyId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_PickupAmount] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[CounterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PrepaidCardTransaction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PrepaidCardTransaction](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[PrepaidCardNo] [nvarchar](50) NOT NULL,
	[LineNum] [int] NOT NULL,
	[TransType] [nvarchar](50) NULL,
	[MainBalance] [numeric](19, 2) NULL,
	[SubBalance] [numeric](19, 2) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_T_PrepaidCardTrans] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[TransId] ASC,
	[PrepaidCardNo] ASC,
	[LineNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PriorityPrice]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PriorityPrice](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CusGrpId] [nvarchar](50) NOT NULL,
	[CusGrpDesc] [nvarchar](250) NOT NULL,
	[PriceListId] [nvarchar](50) NOT NULL,
	[Priority] [int] NOT NULL,
	[Status] [char](10) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_PriorityPrice] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[CusGrpId] ASC,
	[CusGrpDesc] ASC,
	[PriceListId] ASC,
	[Priority] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PurchaseOrderHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PurchaseOrderHeader](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[CardCode] [nvarchar](50) NULL,
	[CardName] [nvarchar](250) NULL,
	[InvoiceAddress] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[VATTotal] [decimal](19, 6) NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[DocEntry] [nvarchar](50) NULL,
	[DataSource] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_PurchaseOrderHeader] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PurchaseOrderLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PurchaseOrderLine](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseSAPId] [nvarchar](50) NULL,
	[BaseSAPLine] [int] NULL,
	[LineStatus] [char](1) NULL,
	[DiscPercent] [decimal](19, 6) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_PurchaseOrderLine] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PurchaseOrderLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PurchaseOrderLineSerial](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[ItemName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_PurchaseOrderLineSerial] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PurchaseRequestHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PurchaseRequestHeader](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DocStatus] [char](1) NULL,
	[DocDate] [datetime] NULL,
	[DocDueDate] [datetime] NULL,
	[CardCode] [nvarchar](50) NULL,
	[CardName] [nvarchar](250) NULL,
	[InvoiceAddress] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[VATTotal] [decimal](19, 6) NULL,
	[DocTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[DocEntry] [nvarchar](50) NULL,
	[DataSource] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_PurchaseRequestHeader] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PurchaseRequestLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PurchaseRequestLine](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[BaseSAPId] [nvarchar](50) NULL,
	[BaseSAPLine] [int] NULL,
	[LineStatus] [char](1) NULL,
	[DiscPercent] [decimal](19, 6) NULL,
	[VATPercent] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[Comment] [nvarchar](250) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
 CONSTRAINT [PK_T_PurchaseRequestLine] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[CompanyCode] ASC,
	[LineId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_PurchaseRequestLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_PurchaseRequestLineSerial](
	[PurchaseId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[ItemName] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_PurchaseRequestLineSerial] PRIMARY KEY CLUSTERED 
(
	[PurchaseId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SerialNum] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_Sales_Delivery]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_Sales_Delivery](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[DeliveryType] [nvarchar](20) NULL,
	[DeliveryMethod] [nvarchar](250) NULL,
	[DeliveryFee] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_Sales_Delivery] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[TransId] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesDelivery ]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesDelivery ](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[DeliveryPartner] [nvarchar](250) NULL,
	[DeliveryId] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_SalesDelivery] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesHeader](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[ContractNo] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusIdentifier] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[TotalAmount] [decimal](19, 6) NULL,
	[TotalPayable] [decimal](19, 6) NULL,
	[TotalDiscountAmt] [decimal](19, 6) NULL,
	[TotalReceipt] [decimal](19, 6) NULL,
	[AmountChange] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[TotalTax] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](20) NULL,
	[DiscountAmount] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[SalesPerson] [nvarchar](50) NULL,
	[SalesPersonName] [nvarchar](250) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[SalesType] [nvarchar](50) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ManualDiscount] [char](1) NULL,
	[DataSource] [nvarchar](50) NULL,
	[POSType] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[EInvoice] [nvarchar](10) NULL,
	[SyncJAStatus] [char](1) NULL,
	[SyncJADate] [datetime] NULL,
	[SyncJAMsg] [nvarchar](500) NULL,
	[Phone] [nvarchar](50) NULL,
	[CusName] [nvarchar](250) NULL,
	[CusAddress] [nvarchar](250) NULL,
	[Reason] [nvarchar](250) NULL,
	[CollectedStatus] [nvarchar](50) NULL,
	[OMSId] [nvarchar](50) NULL,
	[Chanel] [nvarchar](50) NULL,
	[StartTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[ShortOrderID] [nvarchar](50) NULL,
	[MerchantId] [nvarchar](50) NULL,
	[OMSStatus] [nvarchar](50) NULL,
	[PromoId] [nvarchar](50) NULL,
	[ApprovalId] [nvarchar](50) NULL,
	[RewardPoints] [decimal](16, 9) NULL,
	[ExpiryDate] [datetime] NULL,
	[DocDate] [datetime] NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
	[LuckyNo] [nvarchar](50) NULL,
	[OrderId] [uniqueidentifier] NULL,
	[SyncLocalStatus] [char](1) NULL,
	[SyncLocalDate] [datetime] NULL,
	[LoyaltyId] [nvarchar](150) NULL,
 CONSTRAINT [PK_T_SalesHeader] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesInvoice]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesInvoice](
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[StoreName] [nvarchar](250) NULL,
	[CustomerName] [nvarchar](250) NULL,
	[TaxCode] [nvarchar](150) NULL,
	[Email] [nvarchar](150) NULL,
	[Address] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Remark] [nvarchar](250) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_SalesInvoice] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesLine](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Quantity] [decimal](19, 6) NULL,
	[Price] [decimal](19, 6) NULL,
	[LineTotal] [decimal](19, 6) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[DiscountAmt] [decimal](19, 6) NULL,
	[DiscountRate] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoBaseItem] [nvarchar](50) NULL,
	[SalesMode] [nvarchar](50) NULL,
	[TaxRate] [decimal](19, 6) NULL,
	[TaxAmt] [decimal](19, 6) NULL,
	[TaxCode] [nvarchar](50) NULL,
	[MinDepositAmt] [decimal](19, 6) NULL,
	[MinDepositPercent] [decimal](19, 6) NULL,
	[DeliveryType] [char](1) NULL,
	[POSService] [nvarchar](50) NULL,
	[StoreAreaId] [nvarchar](50) NULL,
	[TimeFrameId] [nvarchar](50) NULL,
	[Duration] [int] NULL,
	[AppointmentDate] [date] NULL,
	[BomID] [nvarchar](50) NULL,
	[PromoPrice] [decimal](19, 6) NULL,
	[PromoLineTotal] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[PromoDisAmt] [decimal](19, 6) NULL,
	[IsPromo] [nvarchar](1) NULL,
	[IsSerial] [bit] NULL,
	[IsVoucher] [bit] NULL,
	[PrepaidCardNo] [nvarchar](50) NULL,
	[MemberDate] [datetime] NULL,
	[MemberValue] [int] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemType] [nvarchar](15) NULL,
	[Description] [nvarchar](250) NULL,
	[LineTotalBefDis] [decimal](19, 6) NULL,
	[LineTotalDisIncludeHeader] [decimal](19, 6) NULL,
	[SerialNum] [nvarchar](250) NULL,
	[Name] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[ItemTypeS4] [nvarchar](15) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
	[PriceListId] [nvarchar](50) NULL,
	[ProductId] [nvarchar](50) NULL,
	[WeightScaleBarcode] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[BookletNo] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_SalesLine] PRIMARY KEY CLUSTERED 
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[SLocId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesLineSerial](
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[SerialNum] [nvarchar](100) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[OpenQty] [decimal](19, 6) NULL,
	[BaseLine] [nvarchar](50) NULL,
	[BaseTransId] [nvarchar](100) NULL,
	[LineNum] [int] NULL,
	[Description] [nvarchar](250) NULL,
	[Phone] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[Prefix] [nvarchar](50) NULL,
	[ExpDate] [datetime] NULL,
	[StoreId] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](2500) NULL,
	[CustomF4] [nvarchar](2500) NULL,
	[CustomF5] [nvarchar](2500) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesLoyalty]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesLoyalty](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ApplyType] [nvarchar](50) NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Value] [decimal](19, 6) NULL,
	[LoyaltyId] [nvarchar](50) NULL,
	[LoyaltyType] [nvarchar](50) NULL,
	[LoyaltyTypeLine] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[LoyaltyPercent] [decimal](19, 6) NULL,
	[LoyaltyPoint] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_SalesLoyalty] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[TransId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesPayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesPayment](
	[PaymentCode] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[TotalAmt] [decimal](19, 6) NULL,
	[ReceivedAmt] [decimal](19, 6) NULL,
	[PaidAmt] [decimal](19, 6) NULL,
	[ChangeAmt] [decimal](19, 6) NULL,
	[PaymentMode] [nvarchar](50) NULL,
	[CardType] [nvarchar](50) NULL,
	[CardHolderName] [nvarchar](250) NULL,
	[CardNo] [nvarchar](50) NULL,
	[VoucherBarCode] [nvarchar](250) NULL,
	[VoucherSerial] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[ChargableAmount] [decimal](19, 6) NULL,
	[PaymentDiscount] [decimal](19, 6) NULL,
	[CollectedAmount] [decimal](19, 6) NULL,
	[RefNumber] [nvarchar](500) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[DataSource] [nvarchar](50) NULL,
	[SyncDate] [datetime] NULL,
	[SyncSource] [nvarchar](50) NULL,
	[Currency] [nvarchar](50) NULL,
	[FCAmount] [decimal](19, 6) NULL,
	[Rate] [decimal](19, 6) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CardExpiryDate] [datetime] NULL,
	[AdjudicationCode] [nvarchar](50) NULL,
	[AuthorizationDateTime] [datetime] NULL,
	[TerminalId] [nvarchar](50) NULL,
	[RoundingOff] [decimal](19, 6) NULL,
	[FCRoundingOff] [decimal](19, 6) NULL,
	[ForfeitCode] [nvarchar](150) NULL,
	[Forfeit] [decimal](19, 6) NULL,
	[CustomF1] [nvarchar](250) NULL,
	[CustomF2] [nvarchar](250) NULL,
	[CustomF3] [nvarchar](250) NULL,
	[CustomF4] [nvarchar](250) NULL,
	[CustomF5] [nvarchar](250) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_SalesPayment] PRIMARY KEY CLUSTERED 
(
	[PaymentCode] ASC,
	[CompanyCode] ASC,
	[TransId] ASC,
	[LineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesPromo]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesPromo](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[BarCode] [nvarchar](250) NULL,
	[RefTransId] [nvarchar](50) NULL,
	[ApplyType] [nvarchar](50) NULL,
	[ItemGroupId] [nvarchar](50) NULL,
	[UOMCode] [nvarchar](50) NULL,
	[Value] [decimal](19, 6) NULL,
	[PromoId] [nvarchar](50) NULL,
	[PromoType] [nvarchar](50) NULL,
	[PromoTypeLine] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[PromoPercent] [decimal](19, 6) NULL,
	[PromoAmt] [decimal](19, 6) NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_SalesPromo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[TransId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesRedeemVoucher]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesRedeemVoucher](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[LineNum] [int] NULL,
	[VoucherCode] [nvarchar](50) NULL,
	[Name] [nvarchar](250) NULL,
	[DiscountCode] [nvarchar](50) NULL,
	[DiscountValue] [nvarchar](50) NULL,
	[DiscountType] [nvarchar](50) NULL,
	[ValidTill] [datetime] NULL,
	[StoreId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_SalesRedeemVoucher] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[TransId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SalesStaff]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SalesStaff](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[ItemLine] [nvarchar](50) NOT NULL,
	[LineId] [int] NOT NULL,
	[Staff] [nvarchar](50) NULL,
	[Position] [nvarchar](50) NULL,
	[Percent] [decimal](19, 6) NULL,
	[Amount] [decimal](19, 6) NULL,
	[Remark] [nvarchar](500) NULL,
	[CreatedBy] [nvarchar](150) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](150) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](500) NULL,
	[CustomF2] [nvarchar](500) NULL,
	[CustomF3] [nvarchar](500) NULL,
	[CustomF4] [nvarchar](500) NULL,
	[CustomF5] [nvarchar](500) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
 CONSTRAINT [PK_T_SalesStaff] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[TransId] ASC,
	[ItemLine] ASC,
	[LineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ShiftHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ShiftHeader](
	[ShiftId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[DeviceId] [nvarchar](50) NOT NULL,
	[OpenAmt] [decimal](19, 6) NULL,
	[EndAmt] [decimal](19, 6) NULL,
	[ShiftTotal] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
	[Id] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_ShiftHeader] PRIMARY KEY CLUSTERED 
(
	[ShiftId] ASC,
	[CompanyCode] ASC,
	[StoreId] ASC,
	[DailyId] ASC,
	[DeviceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ShiftLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ShiftLine](
	[ShiftId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[PaymentCode] [nvarchar](50) NOT NULL,
	[Currency] [nvarchar](50) NOT NULL,
	[CounterId] [nvarchar](50) NOT NULL,
	[Value] [decimal](19, 6) NULL,
	[FCValue] [decimal](19, 6) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [char](1) NULL,
	[CollectAmount] [decimal](19, 6) NULL,
	[FCCollectedAmount] [decimal](19, 6) NULL,
	[BankInAmt] [decimal](19, 6) NULL,
	[CountedBalance] [decimal](19, 6) NULL,
	[BankInBalance] [decimal](19, 6) NULL,
	[Cashier] [nvarchar](50) NULL,
	[CustomF1] [nvarchar](50) NULL,
	[CustomF2] [nvarchar](50) NULL,
	[CustomF3] [nvarchar](50) NULL,
	[CustomF4] [nvarchar](50) NULL,
	[CustomF5] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_ShiftLines] PRIMARY KEY CLUSTERED 
(
	[ShiftId] ASC,
	[CompanyCode] ASC,
	[PaymentCode] ASC,
	[Currency] ASC,
	[CounterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ShiftSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ShiftSummary](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ShiftId] [nvarchar](50) NOT NULL,
	[TerminalId] [nvarchar](50) NOT NULL,
	[SummaryType] [nvarchar](50) NOT NULL,
	[SummaryValue] [nvarchar](50) NOT NULL,
	[SummaryCount] [int] NULL,
	[SummaryAmount] [decimal](19, 6) NULL,
	[Currency] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_ShiftSummary] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[ShiftId] ASC,
	[TerminalId] ASC,
	[SummaryType] ASC,
	[SummaryValue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ShippingDivisionHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ShippingDivisionHeader](
	[Id] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NULL,
	[StoreName] [nvarchar](250) NULL,
	[ContractNo] [nvarchar](50) NULL,
	[ShiftId] [nvarchar](50) NULL,
	[CusId] [nvarchar](50) NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
	[IsCanceled] [char](1) NULL,
	[Remarks] [nvarchar](250) NULL,
	[CustomF1] [nvarchar](1500) NULL,
	[CustomF2] [nvarchar](1500) NULL,
	[CustomF3] [nvarchar](1500) NULL,
	[CustomF4] [nvarchar](1500) NULL,
	[CustomF5] [nvarchar](1500) NULL,
	[DocDate] [datetime] NULL,
 CONSTRAINT [PK_T_ShippingDivisionHeader_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_ShippingDivisionLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_ShippingDivisionLine](
	[Id] [nvarchar](50) NOT NULL,
	[LineId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[CusId] [nvarchar](50) NOT NULL,
	[CusGrpId] [nvarchar](50) NULL,
	[ShippingCode] [nvarchar](150) NOT NULL,
	[Quantity] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nchar](10) NULL,
	[Remark] [nvarchar](250) NULL,
	[Custom1] [nvarchar](250) NULL,
	[Custom2] [nvarchar](250) NULL,
	[Custom3] [nvarchar](250) NULL,
	[Custom4] [nvarchar](250) NULL,
	[Custom5] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_ShippingDivisionLine] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[CusId] ASC,
	[ShippingCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_StoreDaily]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_StoreDaily](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[DeviceId] [nvarchar](50) NOT NULL,
	[CreateDate] [datetime] NULL,
	[TotalSales] [decimal](19, 6) NULL,
	[TotalCount] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [char](1) NULL,
	[TotalCollected] [decimal](19, 6) NULL,
	[TotalBalance] [decimal](19, 6) NULL,
 CONSTRAINT [PK_T_StoreDaily] PRIMARY KEY CLUSTERED 
(
	[StoreId] ASC,
	[DailyId] ASC,
	[CompanyCode] ASC,
	[DeviceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_StoreSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_StoreSummary](
	[CompanyCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[DailyId] [nvarchar](50) NOT NULL,
	[TerminalId] [nvarchar](50) NOT NULL,
	[SummaryType] [nvarchar](50) NOT NULL,
	[SummaryValue] [nvarchar](50) NOT NULL,
	[SummaryCount] [int] NULL,
	[SummaryAmount] [decimal](19, 6) NULL,
	[BusinessDate] [date] NULL,
	[Currency] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[SyncMWIStatus] [char](1) NULL,
	[SyncMWIDate] [datetime] NULL,
	[SyncMWIMsg] [nvarchar](500) NULL,
 CONSTRAINT [PK_T_StoreSummary_1] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[DailyId] ASC,
	[TerminalId] ASC,
	[SummaryType] ASC,
	[SummaryValue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_SyncActionData]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_SyncActionData](
	[ID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[CompanyCode] [nvarchar](50) NULL,
	[TableName] [nvarchar](50) NULL,
	[StoreId] [nvarchar](50) NULL,
	[StatusGuid] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ActionType] [nvarchar](10) NULL,
	[SyncStatus] [char](1) NULL,
	[SyncDate] [datetime] NULL,
	[InQuery] [nvarchar](250) NULL,
 CONSTRAINT [PK_T_SyncActionData] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_TransactionLog]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_TransactionLog](
	[Id] [uniqueidentifier] NOT NULL,
	[TransId] [nvarchar](50) NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[SLocId] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[StoreId] [nvarchar](50) NOT NULL,
	[UOMCode] [nvarchar](50) NOT NULL,
	[TransDate] [datetime] NULL,
	[TransType] [nvarchar](50) NULL,
	[InQty] [decimal](19, 6) NULL,
	[OutQty] [decimal](19, 6) NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[Status] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_TransactionLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[TransId] ASC,
	[CompanyCode] ASC,
	[SLocId] ASC,
	[ItemCode] ASC,
	[StoreId] ASC,
	[UOMCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[T_VoucherTransaction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[T_VoucherTransaction](
	[Id] [uniqueidentifier] NOT NULL,
	[CompanyCode] [nvarchar](50) NOT NULL,
	[ItemCode] [nvarchar](50) NOT NULL,
	[VoucherNo] [nvarchar](50) NOT NULL,
	[VoucherValue] [numeric](19, 6) NULL,
	[VoucherType] [nvarchar](50) NULL,
	[IssueDate] [nvarchar](50) NULL,
	[IssueTransId] [nvarchar](50) NULL,
	[RedeemDate] [nvarchar](50) NULL,
	[RedeemTransId] [nvarchar](50) NULL,
 CONSTRAINT [PK_T_VoucherTransaction] PRIMARY KEY CLUSTERED 
(
	[Id] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[VoucherNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_ExchangeRate_6_1429580131__K2_K3_K4_K5_6_7]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_ExchangeRate_6_1429580131__K2_K3_K4_K5_6_7] ON [dbo].[M_ExchangeRate]
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[Date] ASC,
	[Currency] ASC
)
INCLUDE([Rate],[Status]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K1_K14]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K1_K14] ON [dbo].[M_Item]
(
	[ItemCode] ASC,
	[ItemName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K1_K2_K11_15_16_17_18_24_25_26_27_28_29_30_31_32_33]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K1_K2_K11_15_16_17_18_24_25_26_27_28_29_30_31_32_33] ON [dbo].[M_Item]
(
	[ItemCode] ASC,
	[CompanyCode] ASC,
	[ItemGroupId] ASC
)
INCLUDE([ItemDescription],[ItemCategory_1],[ItemCategory_2],[ItemCategory_3],[CustomField1],[CustomField2],[CustomField3],[CustomField4],[CustomField5],[CustomField6],[CustomField7],[CustomField8],[CustomField9],[CustomField10]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K16]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K16] ON [dbo].[M_Item]
(
	[ItemCategory_1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K16_K17_K18]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K16_K17_K18] ON [dbo].[M_Item]
(
	[ItemCategory_1] ASC,
	[ItemCategory_2] ASC,
	[ItemCategory_3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K17]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K17] ON [dbo].[M_Item]
(
	[ItemCategory_2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K18]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K18] ON [dbo].[M_Item]
(
	[ItemCategory_3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K2_K1_14_15]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K2_K1_14_15] ON [dbo].[M_Item]
(
	[CompanyCode] ASC,
	[ItemCode] ASC
)
INCLUDE([ItemName],[ItemDescription]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K2_K1_K23_K24_K3_4_10_11_12_13_14_15_16_17_18_19_20_21_22_25_26_27_28_29_30_31_32_33_34_35_36_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K2_K1_K23_K24_K3_4_10_11_12_13_14_15_16_17_18_19_20_21_22_25_26_27_28_29_30_31_32_33_34_35_36_] ON [dbo].[M_Item]
(
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[MCId] ASC,
	[CustomField1] ASC,
	[ProductId] ASC
)
INCLUDE([VariantId],[CapacityValue],[ItemGroupId],[SalesTaxCode],[PurchaseTaxCode],[ItemName],[ItemDescription],[ItemCategory_1],[ItemCategory_2],[ItemCategory_3],[ForeignName],[InventoryUOM],[ImageURL],[ImageLink],[CustomField2],[CustomField3],[CustomField4],[CustomField5],[CustomField6],[CustomField7],[CustomField8],[CustomField9],[CustomField10],[DefaultPrice],[IsSerial],[IsBOM],[isVoucher],[ValidFrom],[ValidTo],[RejectPayType],[Returnable],[VoucherCollection],[IsPriceTime]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K24]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K24] ON [dbo].[M_Item]
(
	[CustomField1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K25_26_27_28]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K25_26_27_28] ON [dbo].[M_Item]
(
	[CustomField2] ASC
)
INCLUDE([CustomField3],[CustomField4],[CustomField5]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K25_26_27_28_29]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K25_26_27_28_29] ON [dbo].[M_Item]
(
	[CustomField2] ASC
)
INCLUDE([CustomField3],[CustomField4],[CustomField5],[CustomField6]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K26]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K26] ON [dbo].[M_Item]
(
	[CustomField3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K26_27_28]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K26_27_28] ON [dbo].[M_Item]
(
	[CustomField3] ASC
)
INCLUDE([CustomField4],[CustomField5]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K27_28]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K27_28] ON [dbo].[M_Item]
(
	[CustomField4] ASC
)
INCLUDE([CustomField5]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K27_28_29_30_31_32_33]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K27_28_29_30_31_32_33] ON [dbo].[M_Item]
(
	[CustomField4] ASC
)
INCLUDE([CustomField5],[CustomField6],[CustomField7],[CustomField8],[CustomField9],[CustomField10]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K28]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K28] ON [dbo].[M_Item]
(
	[CustomField5] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K28_29_30]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K28_29_30] ON [dbo].[M_Item]
(
	[CustomField5] ASC
)
INCLUDE([CustomField6],[CustomField7]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K29]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K29] ON [dbo].[M_Item]
(
	[CustomField6] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K29_30_31_32_33]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K29_30_31_32_33] ON [dbo].[M_Item]
(
	[CustomField6] ASC
)
INCLUDE([CustomField7],[CustomField8],[CustomField9],[CustomField10]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K30]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K30] ON [dbo].[M_Item]
(
	[CustomField7] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K30_31]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K30_31] ON [dbo].[M_Item]
(
	[CustomField7] ASC
)
INCLUDE([CustomField8]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K31]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K31] ON [dbo].[M_Item]
(
	[CustomField8] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K31_32_33]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K31_32_33] ON [dbo].[M_Item]
(
	[CustomField8] ASC
)
INCLUDE([CustomField9],[CustomField10]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K32]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K32] ON [dbo].[M_Item]
(
	[CustomField9] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K32_K16_K17_K18_33]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K32_K16_K17_K18_33] ON [dbo].[M_Item]
(
	[CustomField9] ASC,
	[ItemCategory_1] ASC,
	[ItemCategory_2] ASC,
	[ItemCategory_3] ASC
)
INCLUDE([CustomField10]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K33]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K33] ON [dbo].[M_Item]
(
	[CustomField10] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K33_K16_K17_K18]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K33_K16_K17_K18] ON [dbo].[M_Item]
(
	[CustomField10] ASC,
	[ItemCategory_1] ASC,
	[ItemCategory_2] ASC,
	[ItemCategory_3] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Item_6_1142295129__K35_K1_K24_K2_K23_3_4_9_10_11_12_13_14_15_16_17_18_19_20_21_22_25_26_27_28_29_30_31_32_33_34_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Item_6_1142295129__K35_K1_K24_K2_K23_3_4_9_10_11_12_13_14_15_16_17_18_19_20_21_22_25_26_27_28_29_30_31_32_33_34_] ON [dbo].[M_Item]
(
	[IsSerial] ASC,
	[ItemCode] ASC,
	[CustomField1] ASC,
	[CompanyCode] ASC,
	[MCId] ASC
)
INCLUDE([ProductId],[VariantId],[Status],[CapacityValue],[ItemGroupId],[SalesTaxCode],[PurchaseTaxCode],[ItemName],[ItemDescription],[ItemCategory_1],[ItemCategory_2],[ItemCategory_3],[ForeignName],[InventoryUOM],[ImageURL],[ImageLink],[CustomField2],[CustomField3],[CustomField4],[CustomField5],[CustomField6],[CustomField7],[CustomField8],[CustomField9],[CustomField10],[DefaultPrice],[IsBOM],[isVoucher],[ValidFrom],[ValidTo],[RejectPayType],[Returnable],[VoucherCollection],[IsPriceTime]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Permission_6_1909581841__K4_K3_K5_1_6_7]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Permission_6_1909581841__K4_K3_K5_1_6_7] ON [dbo].[M_Permission]
(
	[FunctionId] ASC,
	[RoleId] ASC,
	[ControlId] ASC
)
INCLUDE([CompanyCode],[Permissions],[Status]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_Permission_6_1909581841__K6_3_4]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_Permission_6_1909581841__K6_3_4] ON [dbo].[M_Permission]
(
	[Permissions] ASC
)
INCLUDE([RoleId],[FunctionId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_M_PriceList_6_166291652__K1_K3_K4_K6]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_M_PriceList_6_166291652__K1_K3_K4_K6] ON [dbo].[M_PriceList]
(
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[UOMCode] ASC,
	[PriceListId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_S_GeneralSetting_6_978102525__K2_K3_K1_K4_K13_5_6_8_9_10_11_12_14_15_16_17_18_19]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_S_GeneralSetting_6_978102525__K2_K3_K1_K4_K13_5_6_8_9_10_11_12_14_15_16_17_18_19] ON [dbo].[S_GeneralSetting]
(
	[CompanyCode] ASC,
	[StoreId] ASC,
	[SettingId] ASC,
	[SettingName] ASC,
	[TokenExpired] ASC
)
INCLUDE([SettingValue],[SettingDescription],[Status],[CreatedBy],[CreatedOn],[ModifiedBy],[ModifiedOn],[DefaultValue],[CustomField1],[CustomField2],[CustomField3],[CustomField4],[CustomField5]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_InvoiceHeader_6_78623323__K3_K2_K34_K24_K6_K1_18_46]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_InvoiceHeader_6_78623323__K3_K2_K34_K24_K6_K1_18_46] ON [dbo].[T_InvoiceHeader]
(
	[StoreId] ASC,
	[CompanyCode] ASC,
	[POSType] ASC,
	[IsCanceled] ASC,
	[ShiftId] ASC,
	[TransId] ASC
)
INCLUDE([DiscountRate],[TerminalId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesHeader_6_326292222__K25_K1_K2_K6_K24_K20_K21_K3_11]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesHeader_6_326292222__K25_K1_K2_K6_K24_K20_K21_K3_11] ON [dbo].[T_SalesHeader]
(
	[IsCanceled] ASC,
	[TransId] ASC,
	[CompanyCode] ASC,
	[ShiftId] ASC,
	[Status] ASC,
	[CreatedOn] ASC,
	[CreatedBy] ASC,
	[StoreId] ASC
)
INCLUDE([TotalPayable]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesHeader_6_326292222__K3_K2_K29_K1_K20_K33_K24_K25_K27_4_5_6_7_8_10_11_12_13_14_15_16_17_18_19_21_22_23_26_28_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesHeader_6_326292222__K3_K2_K29_K1_K20_K33_K24_K25_K27_4_5_6_7_8_10_11_12_13_14_15_16_17_18_19_21_22_23_26_28_] ON [dbo].[T_SalesHeader]
(
	[StoreId] ASC,
	[CompanyCode] ASC,
	[SalesMode] ASC,
	[TransId] ASC,
	[CreatedOn] ASC,
	[DataSource] ASC,
	[Status] ASC,
	[IsCanceled] ASC,
	[SalesPerson] ASC
)
INCLUDE([ContractNo],[StoreName],[ShiftId],[CusId],[CusIdentifier],[TotalAmount],[TotalPayable],[TotalDiscountAmt],[TotalReceipt],[AmountChange],[PaymentDiscount],[TotalTax],[DiscountType],[DiscountAmount],[DiscountRate],[CreatedBy],[ModifiedOn],[ModifiedBy],[Remarks],[SalesPersonName],[SalesType],[RefTransId],[ManualDiscount],[POSType],[SyncMWIStatus],[SyncMWIDate],[SyncMWIMsg],[EInvoice],[SyncJAStatus],[SyncJADate],[SyncJAMsg],[Phone],[CusName],[CusAddress],[Reason],[CollectedStatus]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesLine_6_1945773989__K20]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesLine_6_1945773989__K20] ON [dbo].[T_SalesLine]
(
	[PromoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesLine_6_1945773989__K4_K3_K7_K6_K1_2_5_8_9_10_11_12_13_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_35_36_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesLine_6_1945773989__K4_K3_K7_K6_K1_2_5_8_9_10_11_12_13_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_35_36_] ON [dbo].[T_SalesLine]
(
	[ItemCode] ASC,
	[CompanyCode] ASC,
	[UOMCode] ASC,
	[BarCode] ASC,
	[TransId] ASC
)
INCLUDE([LineId],[SLocId],[Quantity],[Price],[LineTotal],[DiscountType],[DiscountAmt],[DiscountRate],[Status],[Remark],[PromoId],[PromoType],[PromoPercent],[PromoBaseItem],[SalesMode],[TaxRate],[TaxAmt],[TaxCode],[MinDepositAmt],[MinDepositPercent],[DeliveryType],[POSService],[StoreAreaId],[TimeFrameId],[AppointmentDate],[BomID],[PromoPrice],[PromoLineTotal],[BaseLine],[BaseTransId],[OpenQty],[PromoDisAmt],[IsPromo],[IsSerial],[IsVoucher],[MemberDate],[MemberValue],[ItemType],[ItemTypeS4],[PriceListId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesLine_6_1945773989__K40_K39_K2_K3_K1_K4_K5_K7_6_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesLine_6_1945773989__K40_K39_K2_K3_K1_K4_K5_K7_6_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_] ON [dbo].[T_SalesLine]
(
	[BaseTransId] ASC,
	[BaseLine] ASC,
	[LineId] ASC,
	[CompanyCode] ASC,
	[TransId] ASC,
	[ItemCode] ASC,
	[SLocId] ASC,
	[UOMCode] ASC
)
INCLUDE([BarCode],[Quantity],[Price],[LineTotal],[DiscountType],[DiscountAmt],[DiscountRate],[CreatedBy],[CreatedOn],[ModifiedBy],[ModifiedOn],[Status],[Remark],[PromoId],[PromoType],[PromoPercent],[PromoBaseItem],[SalesMode],[TaxRate],[TaxAmt],[TaxCode],[MinDepositAmt],[MinDepositPercent],[DeliveryType],[POSService],[StoreAreaId],[TimeFrameId],[AppointmentDate],[BomID],[PromoPrice],[PromoLineTotal],[PromoDisAmt],[IsPromo],[IsSerial],[IsVoucher],[PrepaidCardNo],[MemberDate],[MemberValue],[StartDate],[EndDate],[ItemType],[Description],[SerialNum],[Name],[Phone],[Custom1],[Custom2],[Custom3],[Custom4],[Custom5],[PriceListId],[ProductId]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesPayment_6_1641772906__K3_K2_K1_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesPayment_6_1641772906__K3_K2_K1_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_] ON [dbo].[T_SalesPayment]
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[PaymentCode] ASC
)
INCLUDE([LineId],[TotalAmt],[ReceivedAmt],[PaidAmt],[ChangeAmt],[PaymentMode],[CardType],[CardHolderName],[CardNo],[VoucherBarCode],[VoucherSerial],[CreatedBy],[CreatedOn],[ModifiedBy],[ModifiedOn],[Status],[ChargableAmount],[PaymentDiscount],[CollectedAmount],[RefNumber],[SyncMWIStatus],[SyncMWIDate],[SyncMWIMsg],[DataSource],[SyncDate],[SyncSource],[Currency],[FCAmount],[Rate],[ShiftId],[CardExpiryDate],[AdjudicationCode],[AuthorizationDateTime],[TerminalId],[RoundingOff],[CustomF1],[CustomF2],[CustomF3],[CustomF4],[CustomF5]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesPayment_9_1982630106__K3_K4_K2_1_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_27_30_31_32_33_34_35_36_]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesPayment_9_1982630106__K3_K4_K2_1_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_27_30_31_32_33_34_35_36_] ON [dbo].[T_SalesPayment]
(
	[TransId] ASC,
	[LineId] ASC,
	[CompanyCode] ASC
)
INCLUDE([PaymentCode],[TotalAmt],[ReceivedAmt],[PaidAmt],[ChangeAmt],[PaymentMode],[CardType],[CardHolderName],[CardNo],[VoucherBarCode],[VoucherSerial],[CreatedBy],[CreatedOn],[ModifiedBy],[ModifiedOn],[Status],[ChargableAmount],[PaymentDiscount],[CollectedAmount],[RefNumber],[DataSource],[Currency],[FCAmount],[Rate],[ShiftId],[CardExpiryDate],[AdjudicationCode],[AuthorizationDateTime],[ForfeitCode],[Forfeit],[CustomF1],[CustomF2],[CustomF3],[CustomF4],[CustomF5]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SalesPromo_6_782625831__K2_K3_K4_K9_1_5_6_7_8_10_11_12_13_14_15_16_17_18_19_20]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SalesPromo_6_782625831__K2_K3_K4_K9_1_5_6_7_8_10_11_12_13_14_15_16_17_18_19_20] ON [dbo].[T_SalesPromo]
(
	[TransId] ASC,
	[CompanyCode] ASC,
	[ItemCode] ASC,
	[UOMCode] ASC
)
INCLUDE([Id],[BarCode],[RefTransId],[ApplyType],[ItemGroupId],[Value],[PromoId],[PromoType],[PromoTypeLine],[CreatedBy],[CreatedOn],[ModifiedBy],[ModifiedOn],[Status],[PromoPercent],[PromoAmt]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_ShiftHeader_6_846626059__K2_K3]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_ShiftHeader_6_846626059__K2_K3] ON [dbo].[T_ShiftHeader]
(
	[CompanyCode] ASC,
	[StoreId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [_dta_index_T_SyncActionData_9_1267534528__K5_K4_K3_K2_K8_1]    Script Date: 1/30/2023 9:43:32 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_T_SyncActionData_9_1267534528__K5_K4_K3_K2_K8_1] ON [dbo].[T_SyncActionData]
(
	[StatusGuid] ASC,
	[StoreId] ASC,
	[TableName] ASC,
	[CompanyCode] ASC,
	[SyncStatus] ASC
)
INCLUDE([ID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[M_BOMHeader] ADD  CONSTRAINT [DF_M_BOMHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_BOMLine] ADD  CONSTRAINT [DF_M_BOMLine_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_BOMLine] ADD  CONSTRAINT [DF_M_BOMLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Company] ADD  CONSTRAINT [DF_M_Company_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Control] ADD  CONSTRAINT [DF_M_Control_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Currency] ADD  CONSTRAINT [DF_M_Currency_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Customer] ADD  CONSTRAINT [DF_M_Customer_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_CustomerGroup] ADD  CONSTRAINT [DF_M_CustomerGroup_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_DeliveryInfor] ADD  CONSTRAINT [DF_M_DeliveryInfor_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Denomination] ADD  CONSTRAINT [DF_M_Denomination_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Employee] ADD  CONSTRAINT [DF_M_Employee_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_EmployeeSalary] ADD  CONSTRAINT [DF_M_EmployeeSalary_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_ExchangeRate] ADD  CONSTRAINT [DF_M_ExchangeRate_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_ExchangeRate] ADD  CONSTRAINT [DF_M_ExchangeRate_CreatedOn_1]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Function] ADD  CONSTRAINT [DF_M_Function_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Image] ADD  CONSTRAINT [DF_M_Image_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_InvoiceInfor] ADD  CONSTRAINT [DF_M_InvoiceInfor_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Item] ADD  CONSTRAINT [DF_M_Item_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ItemGroup] ADD  CONSTRAINT [DF_M_ItemGroup_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ItemRejectPayment] ADD  CONSTRAINT [DF_M_ItemRejectPayment_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_ItemSerial] ADD  CONSTRAINT [DF_M_ItemSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ItemSerialStock] ADD  CONSTRAINT [DF_M_ItemSerialStock_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ItemUOM] ADD  CONSTRAINT [DF_M_ItemUOM_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_MerchandiseCategory] ADD  CONSTRAINT [DF_M_MerchandiseCategory_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_PaymentMethod] ADD  CONSTRAINT [DF_M_PaymentMethod_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_PaymentMethod] ADD  CONSTRAINT [DF_M_PaymentMethod_EODShow]  DEFAULT ((1)) FOR [EODApply]
GO
ALTER TABLE [dbo].[M_Peripherals] ADD  CONSTRAINT [DF_M_Peripherals_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Permission] ADD  CONSTRAINT [DF_M_Permission_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_PlaceInfor] ADD  CONSTRAINT [DF_M_PlaceInfor_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_PriceList] ADD  CONSTRAINT [DF_M_PriceList_ValidTo]  DEFAULT (((2999)/(12))/(30)) FOR [ValidTo]
GO
ALTER TABLE [dbo].[M_PriceList] ADD  CONSTRAINT [DF_M_PriceList_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_PriceListName] ADD  CONSTRAINT [DF_M_PriceListName_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_PriorityPriceList] ADD  CONSTRAINT [DF_T_PriorityPriceList_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Product] ADD  CONSTRAINT [DF_M_Product_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption1] ADD  CONSTRAINT [DF_M_ProductOption1_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption10] ADD  CONSTRAINT [DF_M_ProductOption10_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption2] ADD  CONSTRAINT [DF_M_ProductOption2_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption3] ADD  CONSTRAINT [DF_M_ProductOption3_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption4] ADD  CONSTRAINT [DF_M_ProductOption4_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption5] ADD  CONSTRAINT [DF_M_ProductOption5_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption6] ADD  CONSTRAINT [DF_M_ProductOption6_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption7] ADD  CONSTRAINT [DF_M_ProductOption7_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption8] ADD  CONSTRAINT [DF_M_ProductOption8_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductOption9] ADD  CONSTRAINT [DF_M_ProductOption9_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ProductVariant] ADD  CONSTRAINT [DF_M_ProductOption_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Reason] ADD  CONSTRAINT [DF_M_Reason_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Role] ADD  CONSTRAINT [DF_M_Role_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_SalesPlanLine] ADD  CONSTRAINT [DF_M_SalesTarget_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Shipping] ADD  CONSTRAINT [DF_M_Shipping_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_ShortcutKeyboard] ADD  CONSTRAINT [DF_M_ShortcutKeyboard_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_Storage] ADD  CONSTRAINT [DF_M_Storage_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Store] ADD  CONSTRAINT [DF_M_Store_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_StoreArea] ADD  CONSTRAINT [DF_M_StoreArea_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_StoreCapacity] ADD  CONSTRAINT [DF_M_StoreCapacity_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_StoreGroup] ADD  CONSTRAINT [DF_M_StoreGroup_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_TableInfor] ADD  CONSTRAINT [DF_M_TableInfor_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_TablePlace] ADD  CONSTRAINT [DF_M_TablePlace_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Tax] ADD  CONSTRAINT [DF_M_Tax_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_TerminalPeripherals] ADD  CONSTRAINT [DF_M_TerminalPeripherals_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[M_TimeFrame] ADD  CONSTRAINT [DF_M_TimeFrame_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_TransactionType] ADD  CONSTRAINT [DF_M_TransactionType_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_UOM] ADD  CONSTRAINT [DF_M_UOM_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_User] ADD  CONSTRAINT [DF_M_User_UserId]  DEFAULT (newid()) FOR [UserId]
GO
ALTER TABLE [dbo].[M_User] ADD  CONSTRAINT [DF_M_User_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[M_Warehouse] ADD  CONSTRAINT [DF_M_Warehouse_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[S_AC_StoreProcedure] ADD  CONSTRAINT [DF_S_AC_StoreProcedure_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_AC_StoreProcedure] ADD  CONSTRAINT [DF_S_AC_StoreProcedure_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[S_BarcodeSetup] ADD  CONSTRAINT [DF_S_BarcodeSetup_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_CurrencyRoundingOff] ADD  CONSTRAINT [DF_S_CurrencyRoundOff_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_DataSourceEdit] ADD  CONSTRAINT [DF_S_DataSourceEdit_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_FormatConfig] ADD  CONSTRAINT [DF_S_FormatConfig_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[S_GeneralSetting] ADD  CONSTRAINT [DF_S_GeneralSetting_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[S_LocalLog] ADD  CONSTRAINT [DF_S_LocalLog_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_Log] ADD  CONSTRAINT [DF_S_Log_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_PersonalSetting] ADD  CONSTRAINT [DF_S_PersonalSetting_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[S_ReleaseNote] ADD  CONSTRAINT [DF_S_ReleaseNote_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_SalesPlan] ADD  CONSTRAINT [DF_S_SalesPlan_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_SalesPlan] ADD  CONSTRAINT [DF_S_SalesPlan_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[S_SerialSetup] ADD  CONSTRAINT [DF_S_SerialSetup_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_StoreClient] ADD  CONSTRAINT [DF_S_StoreDevide_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_ThirdPartyLog] ADD  CONSTRAINT [DF_S_ThirdPartyLog_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_Token] ADD  CONSTRAINT [DF_S_Token_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[S_Version] ADD  CONSTRAINT [DF_S_Version_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_BankIn] ADD  CONSTRAINT [DF_T_BankIn_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_CapacityRemain] ADD  CONSTRAINT [DF_T_CapacityRemain_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_CapacityTransaction] ADD  CONSTRAINT [DF_T_CapacityTransaction_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_CapacityTransaction] ADD  CONSTRAINT [DF_T_CapacityTransaction_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_DeliveryHeader] ADD  CONSTRAINT [DF_T_DeliveryHeader_OMSId]  DEFAULT (getdate()) FOR [OMSId]
GO
ALTER TABLE [dbo].[T_DivisionHeader] ADD  CONSTRAINT [DF_T_DivisionHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_DivisionLine] ADD  CONSTRAINT [DF_T_DivisionLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_EmployeeSalesTargetSummary] ADD  CONSTRAINT [DF_T_EmployeeSalesTargetSumary_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_EndDate] ADD  CONSTRAINT [DF_T_EndDate_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_EndDateDetail] ADD  CONSTRAINT [DF_T_EndDateDetail_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_GoodsIssueHeader] ADD  CONSTRAINT [DF_T_GoodsIssueHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsIssueLine] ADD  CONSTRAINT [DF_T_GoodsIssueLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsIssueLineSerial] ADD  CONSTRAINT [DF_T_GoodsIssueLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReceiptHeader] ADD  CONSTRAINT [DF_T_GoodsReceiptHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReceiptLine] ADD  CONSTRAINT [DF_T_GoodsReceiptLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReceiptLineSerial] ADD  CONSTRAINT [DF_T_GoodsReceiptLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReceiptPOHeader] ADD  CONSTRAINT [DF_T_GoodsReceiptPOHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReceiptPOLine] ADD  CONSTRAINT [DF_T_GoodsReceiptPOLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReceiptPOLineSerial] ADD  CONSTRAINT [DF_T_GoodsReceiptPOLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReturnHeader] ADD  CONSTRAINT [DF_T_GoodsReturnHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReturnLine] ADD  CONSTRAINT [DF_T_GoodsReturnLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_GoodsReturnLineSerial] ADD  CONSTRAINT [DF_T_GoodsReturnLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryCountingHeader] ADD  CONSTRAINT [DFT_InventoryCountingHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryCountingLine] ADD  CONSTRAINT [DF_T_InventoryCountingLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryCountingLineSerial] ADD  CONSTRAINT [DF_T_InventoryCountingLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryHeader] ADD  CONSTRAINT [DF_T_InventoryHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryLine] ADD  CONSTRAINT [DF_T_InventoryLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryLineSerial] ADD  CONSTRAINT [DF_T_InventoryLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryPostingHeader] ADD  CONSTRAINT [DF_T_InventoryPostingHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryPostingLine] ADD  CONSTRAINT [DF_T_InventoryPostingLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryPostingLineSerial] ADD  CONSTRAINT [DF_T_InventoryPostingLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryTransferHeader] ADD  CONSTRAINT [DF_T_InventoryTransferHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryTransferLine] ADD  CONSTRAINT [DF_T_InventoryTransferLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InventoryTransferLineSerial] ADD  CONSTRAINT [DF_T_InventoryTransferLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InvoiceHeader] ADD  CONSTRAINT [DF_T_InvoiceHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InvoiceLine] ADD  CONSTRAINT [DF_T_InvoiceLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InvoiceLineSerial] ADD  CONSTRAINT [DF_T_InvoiceLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InvoicePayment] ADD  CONSTRAINT [DF_T_InvoicePayment_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_InvoicePromo] ADD  CONSTRAINT [DF_T_InvoicePromo_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_InvoicePromo] ADD  CONSTRAINT [DF_T_InvoicePromo_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_ItemSerial] ADD  CONSTRAINT [DF_T_ItemSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_LoyaltyLog] ADD  CONSTRAINT [DF_T_LoyaltyLog_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_LoyaltyLog] ADD  CONSTRAINT [DF_T_LoyaltyLog_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_OrderHeader] ADD  CONSTRAINT [DF_T_OrderHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_OrderLine] ADD  CONSTRAINT [DF_T_OrderLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PaymentHeader] ADD  CONSTRAINT [DF_T_PaymentHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PaymentLine] ADD  CONSTRAINT [DF_T_PaymentLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PickupAmount] ADD  CONSTRAINT [DF_T_PickupAmount_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_PriorityPrice] ADD  CONSTRAINT [DF_T_PriorityPrice_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PurchaseOrderHeader] ADD  CONSTRAINT [DF_T_PurchaseOrderHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PurchaseOrderLine] ADD  CONSTRAINT [DF_T_PurchaseOrderLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PurchaseOrderLineSerial] ADD  CONSTRAINT [DF_T_PurchaseOrderLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PurchaseRequestHeader] ADD  CONSTRAINT [DF_T_PurchaseRequestHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PurchaseRequestLine] ADD  CONSTRAINT [DF_T_PurchaseRequestLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_PurchaseRequestLineSerial] ADD  CONSTRAINT [DF_T_PurchaseRequestLineSerial_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_SalesHeader] ADD  CONSTRAINT [DF_T_SalesHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_SalesLine] ADD  CONSTRAINT [DF_T_SalesLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_SalesLoyalty] ADD  CONSTRAINT [DF_T_SalesLoyalty_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_SalesLoyalty] ADD  CONSTRAINT [DF_T_SalesLoyalty_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_SalesPayment] ADD  CONSTRAINT [DF_T_SalesPayment_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_SalesPromo] ADD  CONSTRAINT [DF_T_SalesPromo_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_SalesPromo] ADD  CONSTRAINT [DF_T_SalesPromo_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_ShiftHeader] ADD  CONSTRAINT [DF_T_ShiftHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_ShiftLine] ADD  CONSTRAINT [DF_T_ShiftLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_ShiftSummary] ADD  CONSTRAINT [DF_T_ShiftSummary_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_ShippingDivisionHeader] ADD  CONSTRAINT [DF_T_ShippingDivisionHeader_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_ShippingDivisionLine] ADD  CONSTRAINT [DF_T_ShippingDivisionLine_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_StoreDaily] ADD  CONSTRAINT [DF_T_StoreDaily_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_SyncActionData] ADD  CONSTRAINT [DF_T_SyncActionData_ID]  DEFAULT (newsequentialid()) FOR [ID]
GO
ALTER TABLE [dbo].[T_TransactionLog] ADD  CONSTRAINT [DF_T_TransactionLog_Id]  DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [dbo].[T_TransactionLog] ADD  CONSTRAINT [DF_T_TransactionLog_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[T_VoucherTransaction] ADD  CONSTRAINT [DF_T_VoucherTransaction_Id]  DEFAULT (newid()) FOR [Id]
GO
/****** Object:  StoredProcedure [dbo].[CHECK_EODStoreStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 -- [CHECK_EODStoreStatus] 'CP001', '2023-01-03','3022'
 CREATE PROCEDURE [dbo].[CHECK_EODStoreStatus]
	 
	@CompanyCode	nvarchar(50)	, 
	@Date Date,
	@StoreId	nvarchar(50) null
			
AS
BEGIN 
    
	
	--union all

	
	DECLARE @StoreClosedTable AS TABLE (StoreId nvarchar(50), Status nvarchar(50), CreatedOn datetime,  
	TotalShift decimal(19,6),  TotalEoD decimal(19,6),  TotalBalance decimal(19,6),  
	Custom1 nvarchar(150), Custom2 nvarchar(150), Custom3 nvarchar(150))

	--INSERT INTO @StoreClosedTable 
			--VALUES	(PARSENAME(REPLACE(@LineMember, '-', '.'), 4)
			--		, PARSENAME(REPLACE(@LineMember, '-', '.'), 3)
			--		, PARSENAME(REPLACE(@LineMember, '-', '.'), 2)
			--		, PARSENAME(REPLACE(@LineMember, '-', '.'), 1) )
	--select Distinct StoreId, 'Closed' Status, CreateOn CreatedOn , null, null, null, null, null
	--from T_EndDate with (nolock)
	--where CONVERT(date, Date)  = CONVERT(date, @Date) and (ISNULL(@StoreId , '') = '' OR StoreId  = @StoreId )

	declare @DailyId nvarchar(150) ;
	declare @StoreClosedId nvarchar(150) ;
	declare @Status nvarchar(150) ;
	declare @CreatedOn datetime ;
	declare @TotalBalance decimal(19,6) ;
	declare @TotalShift decimal(19,6) ;
	declare @TotalEoD decimal(19,6) ;
	declare @Custom1 nvarchar(150) ;
	declare @Custom2 nvarchar(150) ;
	declare @Custom3 nvarchar(150) ; 

	

	DECLARE StoreCheckCursor CURSOR LOCAL FOR

	SELECT  StoreId  , Status  , CreateOn   
	--from @StoreClosedTable
	from T_EndDate with (nolock)
	where CONVERT(date, Date)  = CONVERT(date, @Date) and (ISNULL(@StoreId , '') = '' OR StoreId  = @StoreId )

	OPEN StoreCheckCursor
	FETCH NEXT FROM StoreCheckCursor
	INTO @StoreClosedId  , @Status  , @CreatedOn  
	--, @TotalShift, @TotalEoD, @Custom1 , @Custom2 ,@Custom3
	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @DailyId = (select dbo.[fnc_GetDailyID](@StoreClosedId, @CompanyCode, @Date))
	 
		
		set @TotalShift = ( select SUM(isnull(EndAmt,0)) from T_ShiftHeader where DailyId = @DailyId and StoreId = @StoreClosedId)

		--set @TotalBalance = (select ISNULL(SUM(ISNULL(CountedBalance, 0)),0) Balance
		--			from T_ShiftLine 
		--			where   ShiftId in (select  distinct ShiftId from T_ShiftHeader where DailyId = @DailyId and StoreId = @StoreClosedId)
 
		--	)
 

		set @TotalEoD = ( select TotalCollected  from T_EndDate where Description = @DailyId and StoreId = @StoreClosedId)

		set @Custom1 = ( select CreateBy  from T_EndDate where Description = @DailyId and StoreId = @StoreClosedId)
		set @Custom2 = ( select top 1 DeviceId  from T_StoreDaily where DailyId = @DailyId and StoreId = @StoreClosedId order by CreateDate desc)
		set @Custom3 =  ( 	SELECT STUFF((
            SELECT ',' + DeviceId
            FROM T_StoreDaily where DailyId = @DailyId and StoreId = @StoreClosedId 
            FOR XML PATH('')
            ), 1, 1, ''))
		if(@Custom2 = @Custom3)
		begin
			set @Custom3 = ''
		end
		
		INSERT INTO @StoreClosedTable Values(@StoreClosedId, @Status, @CreatedOn , isnull( @TotalShift,0) , @TotalEoD, isnull(@TotalBalance, 0)  , @Custom1, @Custom2, @Custom3)

			 
		FETCH NEXT FROM StoreCheckCursor
		INTO @StoreClosedId  , @Status  , @CreatedOn  
		--, @TotalShift, @TotalEoD, @Custom1 , @Custom2 ,@Custom3
	END 
	CLOSE StoreCheckCursor 
	DEALLOCATE StoreCheckCursor

	select * from 
	(

	select Distinct StoreId, 'Open' Status , null CreatedOn, null TotalShift, null TotalEoD, null Result, 
	--null EOSQuery, 
	null EODQuery, null EoDBy, null TermialId, null Custom3
	from T_SalesHeader with (nolock)
	where CONVERT(date, CreatedOn)  = CONVERT(date, @Date) 
	and StoreId not in (select Distinct StoreId
	from T_EndDate with (nolock)
	where CONVERT(date, Date)  = CONVERT(date, @Date)) and (ISNULL(@StoreId , '') = '' OR StoreId  = @StoreId )
	union all
	select StoreId, Status, CreatedOn, TotalShift, TotalEoD, case when TotalShift != TotalEoD then 'Failed' else '' end Result, 
	--'USP_ReCreateEoS N'''+@CompanyCode+''', N'''+StoreId+''', N'''+ ( SELECT FORMAT (@Date, 'yyyy-MM-dd') ) + '''' as  EOSQuery,
	case when (TotalShift - TotalBalance) != TotalEoD 
	then 
		'USP_ReRunEndOfDate N'''+@CompanyCode+''', N'''+StoreId+''', N'''+ ( SELECT FORMAT (@Date, 'yyyy-MM-dd') ) + ''' ,N'''+ isnull(Custom1,'System') +''',N'''+  isnull(Custom2,'Undefined')  +''''
	else 
		'' 
	end 
	as EODQuery, Custom1 EoDBy, Custom2 TermialId, Custom3 from @StoreClosedTable
	) tmp
	order by StoreId



	--[USP_ReRunEndOfDate] 'CP001', '3001' ,'2022-10-21', 'admin','ADMSupport'
	--@StoreClosedTable

	 
end

 



GO
/****** Object:  StoredProcedure [dbo].[CHECK_LASTED_SYNC]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[CHECK_LASTED_SYNC]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	-- Check SALES
	SELECT StoreId,MAX(CreatedOn) LastedSync FROM T_SalesPayment 
	GROUP BY StoreId
	ORDER BY MAX(CreatedOn)

	SELECT StoreId,MAX(CreatedOn) LastedSync FROM T_SalesHeader 
	GROUP BY StoreId
	ORDER BY LastedSync

	-- CHECK EOD
	SELECT StoreId,MAX(CreatedOn) LastedSync FROM T_StoreSummary 
	GROUP BY StoreId
	ORDER BY MAX(CreatedOn)

	-- CHECK SyncItemPrice
	SELECT StoreId,MAX(CreatedOn) LastedSync FROM M_PriceList 
	GROUP BY StoreId
	ORDER BY MAX(CreatedOn)

END
GO
/****** Object:  StoredProcedure [dbo].[CHECK_ORDER_ALL]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[CHECK_ORDER_ALL]
AS
BEGIN
	
	DECLARE @CheckTable AS TABLE
	(
		TransId NVARCHAR(50),
		CusId NVARCHAR(50),
		StoreId NVARCHAR(50),
		CreatedOn NVARCHAR(50),
		TotalPayable Numeric(19,6)
	)

	DECLARE @DupTable AS TABLE
	(
		--TransId NVARCHAR(50),
		CusId NVARCHAR(50),
		StoreId NVARCHAR(50),
		CreatedOn NVARCHAR(50),
		TotalPayable Numeric(19,6),
		C INT
	)

	INSERT INTO @CheckTable
	SELECT TransId,CusId,StoreId,LEFT(CONVERT(NVARCHAR(50),CreatedOn,120),16) CreatedOn,TotalPayable FROM T_SalesHeader
	ORDER BY CusId,StoreId,CreatedOn

	INSERT INTO @DupTable	
	SELECT  CusId,StoreId,CreatedOn ,TotalPayable , COUNT(*)
	FROM @CheckTable
	GROUP BY  CusId,StoreId,CreatedOn ,TotalPayable
	HAVING COUNT(*) > 1

	SELECT 
		C.TransId ,
		C.CusId ,
		C.StoreId ,
		C.CreatedOn ,
		C.TotalPayable 
	FROM @CheckTable C INNER JOIN  @DupTable D ON C.CusId = D.CusId AND C.StoreId = D.StoreId AND C.CreatedOn = D.CreatedOn AND C.TotalPayable = D.TotalPayable
	ORDER BY CreatedOn

END
GO
/****** Object:  StoredProcedure [dbo].[CHECK_SALES]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
-- EXEC [CHECK_SALES]  
-- =============================================
CREATE PROCEDURE [dbo].[CHECK_SALES]

AS
BEGIN

 

	UPDATE T_SalesHeader SET StartTime =  DATEADD(ss,- FLOOR(RAND()*(60-5+1)+5),CreatedOn)
	WHERE StartTime > CreatedOn AND ISNULL(SyncMWIStatus,'N') = 'N'

	UPDATE T_SalesLine SET TaxCode = (SELECT SalesTaxCode FROM M_Item WHERE ItemCode =  T_SalesLine.ItemCode) WHERE ISNULL(TaxCode,'') = ''

	

	DECLARE @Header AS Table
	(
		TransId NVARCHAR(50),
		DocTotal NUMERIC(19,2)
	)

	DECLARE @Line AS Table
	(
		TransId NVARCHAR(50),
		LineTotal NUMERIC(19,2)
	)


	DECLARE @Paym AS Table
	(
		TransId NVARCHAR(50),
		PayTotal NUMERIC(19,2)
	)

 

	INSERT INTO @Header
	SELECT TransId, ISNULL(RoundingOff,0)   
	FROM T_SalesHeader
	WHERE ISNULL(SyncMWIStatus,'N') = 'N'  OR  ISNULL(SyncJAStatus,'N') = 'N' 
	ORDER BY TransId

	INSERT INTO @Line
	SELECT H.TransId,SUM(ISNULL(LineTotal,0)) LineTotal
	FROM T_SalesLine L INNER JOIN T_SalesHeader H ON H.TransId = L.TransId
	WHERE ISNULL(SyncMWIStatus,'N') = 'N'  OR  ISNULL(SyncJAStatus,'N') = 'N' 
	GROUP BY H.TransId
	ORDER BY H.TransId

	INSERT INTO @Paym
	SELECT TransId,SUM(PayTotal) FROM 
	(SELECT P.TransId,CASE WHEN ISNULL(CollectedAmount,0) < 0 THEN  (ISNULL(CollectedAmount,0) + ISNULL(ChangeAmt,0))  ELSE (ISNULL(CollectedAmount,0)- ISNULL(ChangeAmt,0) ) END PayTotal
	FROM T_SalesPayment P  
	WHERE ISNULL(SyncMWIStatus,'N') = 'N'   
	UNION ALL
	SELECT TransId,TotalReceipt
	FROM T_SalesHeader 
	WHERE TotalReceipt = 0 AND (ISNULL(SyncMWIStatus,'N') = 'N' OR  ISNULL(SyncJAStatus,'N') = 'N') ) R
	GROUP BY TransId
	ORDER BY TransId

	SELECT 'DiffAmt' Type,H.TransId, SUM((P.PayTotal) - (H.DocTotal)) AS TotalPay , (L.LineTotal) LineTotal ,SUM((P.PayTotal) - (H.DocTotal)) - (L.LineTotal) AS Diff
	FROM @Header H INNER JOIN @Line L ON H.TransId = L.TransId
					INNER JOIN @Paym P ON  P.TransId = L.TransId

	GROUP BY H.TransId, L.LineTotal
	HAVING SUM((P.PayTotal) - (H.DocTotal)) - (L.LineTotal) <> 0
	UNION ALL

	SELECT DISTINCT 'TaxCodeMiss' Type, TransId,NULL,NULL,NULL FROM T_SalesLine where ISNULL(TaxCode,'') = ''




		
END
GO
/****** Object:  StoredProcedure [dbo].[CHECK_T_StoreSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- EXEC [CHECK_T_StoreSummary] '211203' , 'CP001' , '1001'
CREATE PROCEDURE [dbo].[CHECK_T_StoreSummary]
	@DailyId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	

			
AS
BEGIN
	
	DECLARE @StoreSummay AS TABLE
	(
		CompanyCode  NVARCHAR(50),
		StoreId  NVARCHAR(50),
		DailyId  NVARCHAR(50),
		TerminalId  NVARCHAR(50),
		SummaryType  NVARCHAR(50),
		SummaryValue NVARCHAR(50),
		SummaryCount INT,
		SummaryAmount NUMERIC(19,6),
		Currency  NVARCHAR(50),
		BusinessDate  NVARCHAR(50),
		CreatedOn DATETIME
	)



	DECLARE @ShiftID AS TABLE 
	(
		ShiftID NVARCHAR(50)
	)

	INSERT INTO @ShiftID
	SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND CompanyCode = @CompanyCode AND StoreId = @StoreId



	DECLARE @Curr Nvarchar(50)
	SET @Curr = (SELECT TOP 1 CurrencyCode FROM M_Store WHERE StoreId = @StoreID )

	DECLARE @Date Date
	SET @Date = (SELECT TOP 1 Date  FROM T_EndDate WHERE Description = @DailyId )

	 -- CREATE DISCOUNT
	DECLARE @DetailDiscount AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		CusGrpId NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisAmt NUMERIC(19,6)
	)

	DECLARE @CountDiscount AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailDiscount
	SELECT H.CompanyCode , H.StoreId ,@DailyId ,CASE WHEN (L.DiscountRate <> 0 OR L.DiscountAmt <> 0 ) AND ISNULL(L.PromoId,'') = '' THEN 0 ELSE H.CusGrpId END CusGrpId, H.TerminalId , H.CreatedOn ,  ROUND(ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0),6) 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C' AND H.IsCanceled = 'N'
		AND  ROUND(ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0),6)  <> 0
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountDiscount
	SELECT CusGrpId ,TerminalId, COUNT(*) 
	FROM @DetailDiscount 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY CusGrpId ,TerminalId


	INSERT INTO @StoreSummay ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId , @DailyId ,  H.TerminalId ,'TOTALDISCOUNT', H.CusGrpId, C.CType  , SUM(H.LineTotalDisAmt) DiscountTotal, @Curr ,@Date ,GETDATE()		
	FROM @DetailDiscount H INNER JOIN @CountDiscount C ON H.CusGrpId = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.CusGrpId, C.CType 	


	 -- CREATE Tax
	DECLARE @DetailTax AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		TaxAmt NUMERIC(19,6)
	)

	DECLARE @CountTax AS TABLE 
	(

		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTax
	SELECT H.CompanyCode , H.StoreId , @DailyId , L.TaxCode , H.TerminalId , H.CreatedOn , L.TaxAmt 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C' AND H.IsCanceled = 'N'
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTax
	SELECT TaxCode ,TerminalId, COUNT(*) 
	FROM @DetailTax 
	GROUP BY TaxCode ,TerminalId


	INSERT INTO @StoreSummay ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId , @DailyId ,  H.TerminalId ,'TOTALTAX', H.TaxCode, C.CType  , SUM(H.TaxAmt) TaxAmt , @Curr,@Date ,GETDATE()
	FROM @DetailTax H INNER JOIN @CountTax C ON H.TaxCode = C.TaxCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode  ,  H.TerminalId , H.TaxCode , C.CType


	 -- CREATE Total
	DECLARE @DetailTotal AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisIncludeHeader NUMERIC(19,6)
	)

	DECLARE @CountTotal AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.ItemTypeS4 , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C'  AND ISNULL(L.Quantity,0) > 0 AND H.IsCanceled = 'N'
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId


	INSERT INTO @StoreSummay ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALSALES', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr,@Date ,GETDATE()
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.ItemType, C.CType 		

	DELETE FROM @DetailTotal
	DELETE FROM @CountTotal

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.ItemTypeS4 , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C'  AND ISNULL(L.Quantity,0) < 0 AND H.IsCanceled = 'N'

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId

	INSERT INTO @StoreSummay ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALRETURN', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr,@Date ,GETDATE()
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.ItemType, C.CType 		


	-- CREATE TENDER
	DECLARE @DetailTender AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)
	)

	DECLARE @CountTender AS TABLE 
	(

		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.PaymentCode , H.TerminalId , H.CreatedOn ,  ISNULL(L.CollectedAmount,0)-ISNULL(L.ChangeAmt,0) + ISNULL(L.Forfeit,0) 
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode AND L.CompanyCode = M.CompanyCode
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C'  AND H.IsCanceled = 'N' 

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , M.ForfeitCode , H.TerminalId , H.CreatedOn , - ABS(ISNULL(L.Forfeit,0))
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode AND L.CompanyCode = M.CompanyCode
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C' AND ISNULL(M.ForfeitCode,'') <> '' AND ISNULL(L.Forfeit,0) <> 0 AND H.IsCanceled = 'N'

	-- ZZ00 rouding POS -----
	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , 'ZZ00' RoundingCode , H.TerminalId , H.CreatedOn ,  ISNULL(H.RoundingOff,0)
	FROM T_SalesHeader H --INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C' AND ISNULL(H.RoundingOff,0) <> 0 AND H.IsCanceled = 'N'

	INSERT INTO @CountTender
	SELECT PaymentCode ,TerminalId, COUNT(*) 
	FROM @DetailTender 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY PaymentCode ,TerminalId


	INSERT INTO @StoreSummay ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALTENDER', H.PaymentCode, C.CType  , SUM(H.CollectedAmount) CollectedAmount,@Curr,@Date ,GETDATE()
	FROM @DetailTender H INNER JOIN @CountTender C ON H.PaymentCode = C.PaymentCode AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.PaymentCode, C.CType  



	-- CREATE PAYMENTFINANCE
	DECLARE @DetailFinance AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		EODCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)

	)

	DECLARE @CountFinance AS TABLE 
	(

		EODCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailFinance
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , M.EODCode , H.DeviceId , H.CreatedOn , CASE WHEN L.Currency = @Curr THEN L.CollectAmount ELSE L.FCCollectedAmount END 
	FROM T_ShiftHeader H INNER JOIN T_ShiftLine L On H.CompanyCode = L.CompanyCode AND H.ShiftId = L.ShiftId
						 INNER JOIN @ShiftID SS ON  H.ShiftId = SS.ShiftId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND ISNULL( M.EODCode , '') <> '' 



	INSERT INTO @CountFinance
	SELECT EODCode ,TerminalId, COUNT(*) 
	FROM @DetailFinance 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY EODCode ,TerminalId


	INSERT INTO @StoreSummay ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALFINANCE', H.EODCode, C.CType , SUM(H.CollectedAmount) CollectedAmount,@Curr,@Date ,GETDATE()		
	FROM @DetailFinance H INNER JOIN @CountFinance C ON H.EODCode = C.EODCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode   ,  H.TerminalId, H.EODCode, C.CType   	

	SELECT * FROM @StoreSummay
END
GO
/****** Object:  StoredProcedure [dbo].[InserSaleLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[InserSaleLine]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nchar(10)	,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@DiscountType	nvarchar(15),
	@DiscountAmt	decimal(19, 6)	,
	@DiscountRate	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	,
 
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
    @Status nvarchar(1)	,
    @Remark nvarchar(250)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoPercent	decimal(19, 6)	,
	@PromoBaseItem	nvarchar(50)	,
	@SalesMode	nvarchar(50)	,
	@Remarks	nvarchar(250)	,
	@TaxRate	decimal(19, 6)	,
	@TaxAmt	decimal(19, 6)	,
	@TaxCode	nvarchar(50)	,
	@SlocId	nvarchar(50)	,
	@MinDepositAmt	decimal(19, 6)	,
	@MinDepositPercent	decimal(19, 6)	,
	@DeliveryType	char(1)	,
	@POSService	nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
INSERT INTO [dbo].[T_SalesLine]
           ([TransId]
           ,[LineId]
           ,[CompanyCode]
           ,[ItemCode]
           ,[BarCode]
           ,[UOMCode]
           ,[Quantity]
           ,[Price]
		   ,[DiscountType]
           ,[DiscountAmt]
           ,[DiscountRate]
           ,[CreatedBy]
          
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status]
           ,[Remark]
           ,[PromoId]
           ,[PromoType]
           ,[PromoPercent]
           ,[PromoBaseItem]
           ,[SalesMode]
           ,[TaxRate]
           ,[TaxAmt]
           ,[TaxCode]
           ,[SLocId]
           ,[MinDepositAmt]
           ,[MinDepositPercent]
           ,[DeliveryType]
           ,[POSService])
     VALUES
           (@TransId,
           @LineId, 
           @CompanyCode, 
           @ItemCode,
           @BarCode, 
           @UOMCode, 
           @Quantity, 
           @Price,
		   @DiscountType,
           @DiscountAmt, 
           @DiscountRate, 
           @CreatedBy, 
            
           @ModifiedBy, 
           @ModifiedOn, 
           @Status, 
           @Remark, 
           @PromoId, 
           @PromoType, 
           @PromoPercent, 
           @PromoBaseItem, 
           @SalesMode, 
           @TaxRate, 
           @TaxAmt, 
           @TaxCode,
           @SLocId, 
           @MinDepositAmt, 
           @MinDepositPercent,
           @DeliveryType,
           @POSService)
 

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_M_ExchangeRate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_M_ExchangeRate]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_ExchangeRate M_ExchangeRateType READONLY

AS
BEGIN TRANSACTION
	BEGIN
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.

		--DECLARE @M_ExchangeRate M_ExchangeRateType

		SET NOCOUNT ON;

		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save ExchangeRate successfully.' -- Error message
		DECLARE @RowCount int = 0;

		---- Check data not exist =====================================================================================================
		--SELECT DISTINCT E.CompanyCode, E.Currency INTO #EX_CHECK
		--FROM @M_ExchangeRate E
		--LEFT JOIN M_Currency C ON C.CurrencyCode = E.Currency
		--WHERE C.CurrencyCode IS NULL

		--IF (SELECT COUNT(Currency) FROM #EX_CHECK) > 0
		--	BEGIN
		--		SET @ErrMsg = 'Currency Code ' + (SELECT STRING_AGG(Currency, ', ') AS Currency FROM #EX_CHECK) + ' does not exist.'
		--		GOTO HANDLE_ERROR
		--	END
		----===========================================================================================================================

		SELECT @RowCount = count(StoreId) FROM @M_ExchangeRate;

		-- Get ExchangeRate update
		SELECT I.CompanyCode, I.StoreId, I.[Date], I.Currency INTO #M_ExchangeRate_U
		  FROM @M_ExchangeRate I INNER JOIN M_ExchangeRate M ON M.CompanyCode = I.CompanyCode AND M.StoreId = I.StoreId AND M.Date = I.Date AND M.Currency = I.Currency

		-- Get ExchanegRate Insert
		SELECT I.CompanyCode, I.StoreId, I.[Date], I.Currency INTO #M_ExchangeRate_I
		  FROM @M_ExchangeRate I LEFT JOIN M_ExchangeRate M ON M.CompanyCode = I.CompanyCode AND M.StoreId = I.StoreId AND M.Date = I.Date AND M.Currency = I.Currency
		 WHERE M.StoreId IS NULL

		-- INSERT NEW ITEMS =========================================================================================================
		INSERT INTO [dbo].[M_ExchangeRate]
					   ([CompanyCode]
					   ,[StoreId]
					   ,[Date]
					   ,[Currency]
					   ,[Rate]
					   ,[Status]
					   ,[CreatedBy]
					   ,[CreatedOn]
					   ,[ModifiedBy]
					   ,[ModifiedOn]
					   ,[SyncDate]
					   ,[SyncSource]
		)
		SELECT V.[CompanyCode]
			 , V.[StoreId]
			 , V.[Date]
			 , V.[Currency]
			 , V.[Rate]
			 , V.[Status]
			 , V.[CreatedBy]
			 , V.[CreatedOn]
			 , V.[ModifiedBy]
			 , V.[ModifiedOn]
			 , GetDate()
			 , @UserID
		  FROM @M_ExchangeRate V
		  INNER JOIN #M_ExchangeRate_I I ON V.CompanyCode = I.CompanyCode AND V.StoreId = I.StoreId AND V.Date = I.Date AND V.Currency = I.Currency
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
		-- UPDATE ITEMS =============================================================================================================
		UPDATE [dbo].[M_ExchangeRate]
		   SET [CompanyCode] = V.[CompanyCode]
			  ,[StoreId] = V.[StoreId]
			  ,[Date] = V.[Date]
			  ,[Currency] = V.[Currency]
			  ,[Rate] = V.[Rate]
			  ,[Status] = V.[Status]
			  ,[ModifiedBy] = ISNULL(V.[ModifiedBy], V.[CreatedBy]) 
			  ,[ModifiedOn] = ISNULL(V.[ModifiedOn], V.[CreatedOn])
			  ,[SyncDate] = GetDate()
			  ,[SyncSource] = @UserID
		  FROM @M_ExchangeRate V INNER JOIN #M_ExchangeRate_U U ON V.CompanyCode = U.CompanyCode AND V.StoreId = U.StoreId AND V.Date = U.Date AND V.Currency = U.Currency
		 WHERE V.CompanyCode = [M_ExchangeRate].CompanyCode AND V.StoreId = [M_ExchangeRate].StoreId AND V.Date = [M_ExchangeRate].Date AND V.Currency = [M_ExchangeRate].Currency
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================


GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_M_MaterialMaster]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_M_MaterialMaster]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25) ,
	@M_Items M_ItemsType READONLY,
	@M_ItemUOM M_ItemUOMType READONLY,
	@M_ItemStoreListing M_ItemStoreListingType READONLY

AS
BEGIN TRANSACTION
	BEGIN
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.

		--DECLARE @M_Items M_ItemsType
		--DECLARE @M_ItemUOM M_ItemUOMType
		--DECLARE @M_Tax M_TaxType
		--DECLARE @M_ItemStoreListing M_ItemStoreListingType

		--SET NOCOUNT ON;

		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Items successfully.' -- Error message
		DECLARE @RowCount int = 0;

		DECLARE @StatusGuid uniqueidentifier;
		SET @StatusGuid = NEWID();

		---- CHECK DATA NOT EXIST =====================================================================================================
		--SELECT DISTINCT M.CompanyCode, M.ItemGroupId INTO #IT_CHECK
		--FROM @M_Items M
		--LEFT JOIN M_ItemGroup G ON G.CompanyCode = M.CompanyCode AND G.IGId = M.ItemGroupId
		--WHERE G.IGId IS NULL

		--IF (SELECT COUNT(ItemGroupId) FROM #IT_CHECK) > 0
		--	BEGIN
		--		SET @ErrMsg = 'Item group id ' + (SELECT STRING_AGG(ItemGroupId, ', ') AS Currency FROM #IT_CHECK) + ' does not exist.'
		--		GOTO HANDLE_ERROR
		--	END
		----===========================================================================================================================

		SELECT @RowCount = count(ItemCode)
		  FROM @M_Items;

		-- Get Items update
		SELECT I.ItemCode, I.CompanyCode INTO #M_Item_UPDATE
		  FROM @M_Items I INNER JOIN M_Item M ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode --AND M.ProductId = I.ProductId AND M.VariantId = I.VariantId
		 --WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		-- Get Items Insert
		SELECT I.ItemCode, I.CompanyCode INTO #M_Item_INSERT
		  FROM @M_Items I LEFT JOIN M_Item M ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode --AND M.ProductId = I.ProductId AND M.VariantId = I.VariantId
		 WHERE M.ItemCode IS NULL

		-- INSERT NEW ITEMS =========================================================================================================
		INSERT INTO M_Item ([ItemCode]
							, [CompanyCode]
							, [ProductId]
							, [VariantId]
							, [CreatedBy]
							, [CreatedOn]
							, [ModifiedBy]
							, [ModifiedOn]
							, [Status]
							, [CapacityValue]
							, [ItemGroupId]
							, [SalesTaxCode]
							, [PurchaseTaxCode]
							, [ItemName]
							, [ItemDescription]
							, [ItemCategory_1]
							, [ItemCategory_2]
							, [ItemCategory_3]
							, [ForeignName]
							, [InventoryUOM]
							, [ImageURL]
							, [ImageLink]
							, [MCId]
							, [CustomField1]
							, [CustomField2]
							, [CustomField3]
							, [CustomField4]
							, [CustomField5]
							, [CustomField6]
							, [CustomField7]
							, [CustomField8]
							, [CustomField9]
							, [CustomField10]
							, [DefaultPrice]
							, [IsSerial]
							, [IsBOM]
							, [ValidFrom]
							, [ValidTo]
							, [IsVoucher]
							, [SyncDate]
							, [SyncSource]
							, [Returnable]
							, [IsPriceTime]
							, [RejectPayType]
							--, [AllowSalesNegative]
							, [StatusGuid]
		)
		SELECT V.[ItemCode]
			 , V.[CompanyCode]
			 , V.[ProductId]
			 , V.[VariantId]
			 , V.[CreatedBy]
			 , V.[CreatedOn]
			 , V.[ModifiedBy]
			 , V.[ModifiedOn]
			 , V.[Status]
			 , V.[CapacityValue]
			 , V.[ItemGroupId]
			 , V.[SalesTaxCode]
			 , V.[PurchaseTaxCode]
			 , V.[ItemName]
			 , V.[ItemDescription]
			 , V.[ItemCategory_1]
			 , V.[ItemCategory_2]
			 , V.[ItemCategory_3]
			 , V.[ForeignName]
			 , V.[InventoryUOM]
			 , V.[ImageURL]
			 , V.[ImageLink]
			 , V.[MCId]
			 , V.[CustomField1]
			 , V.[CustomField2]
			 , V.[CustomField3]
			 , V.[CustomField4]
			 , V.[CustomField5]
			 , V.[CustomField6]
			 , V.[CustomField7]
			 , V.[CustomField8]
			 , V.[CustomField9]
			 , V.[CustomField10]
			 , V.[DefaultPrice]
			 , V.[IsSerial]
			 , V.[IsBOM]
			 , V.[ValidFrom]
			 , V.[ValidTo]
			 , V.[IsVoucher]
			 , GetDate()
			 , @UserID
			 , V.[Returnable]
			 --, V.[IsPriceTime]	--, CASE WHEN V.[CustomField1] = 'BP' THEN 1 ELSE 0 END		--Đối với Customfied 1 nếu value là BP => set value cột PriceTime = Y trên tab M_Item
			 , CASE WHEN V.[ItemGroupId] = '6060101' THEN 1 ELSE V.[IsPriceTime] END
			 , CASE WHEN V.[IsVoucher] = 1 THEN 'V' ELSE NULL END
			 --, CASE WHEN RIGHT(V.[ItemCode], 2) = 'NC' THEN 1 ELSE NULL END
			 , @StatusGuid
		  FROM @M_Items V
		  INNER JOIN #M_Item_INSERT I ON V.CompanyCode = I.CompanyCode AND V.ItemCode = I.ItemCode --AND V.ProductId = I.ProductId AND V.VariantId = I.VariantId
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
		-- UPDATE ITEMS =============================================================================================================
		UPDATE M_Item
		   SET [CompanyCode] = V.CompanyCode
			   , [ProductId] = V.ProductId
			   , [VariantId] = V.VariantId
			   , [ModifiedBy] = V.[ModifiedBy]
			   , [ModifiedOn] = V.[ModifiedOn]
			   , [Status] = V.[Status]
			   , [CapacityValue] = V.CapacityValue
			   , [ItemGroupId] = V.ItemGroupId
			   , [SalesTaxCode] = V.SalesTaxCode
			   , [PurchaseTaxCode] = V.PurchaseTaxCode
			   , [ItemName]		   = V.ItemName
			   , [ItemDescription] = V.ItemDescription
			   , [ItemCategory_1]  = V.ItemCategory_1
			   , [ItemCategory_2]  = V.ItemCategory_2
			   , [ItemCategory_3]  = V.ItemCategory_3
			   , [ForeignName]	   = V.ForeignName
			   , [InventoryUOM]	   = V.InventoryUOM
			   , [ImageURL]		   = V.ImageURL
			   , [ImageLink]	   = V.ImageLink
			   , [MCId]			   = V.MCId
			   , [CustomField1]	   = V.CustomField1
			   , [CustomField2]	   = V.CustomField2
			   , [CustomField3]	   = V.CustomField3
			   , [CustomField4]	   = V.CustomField4
			   , [CustomField5]	   = V.CustomField5
			   , [CustomField6]	   = V.CustomField6
			   , [CustomField7]	   = V.CustomField7
			   , [CustomField8]	   = V.CustomField8
			   , [CustomField9]	   = V.CustomField9
			   , [CustomField10]   = V.CustomField10
			   , [DefaultPrice]	   = V.DefaultPrice
			   , [IsSerial]		   = V.IsSerial
			   , [IsBOM]		   = V.IsBOM
			   , [ValidFrom]	   = V.ValidFrom
			   , [ValidTo]		   = V.ValidTo
			   , [IsVoucher] = V.IsVoucher
			   , [SyncDate] = GetDate()
			   , [SyncSource] = @UserID
			   , [Returnable] = V.[Returnable]
			   , [IsPriceTime] = CASE WHEN V.[ItemGroupId] = '6060101' OR V.[ItemGroupId] = '6060102' THEN 1 ELSE V.[IsPriceTime] END--V.[IsPriceTime]
			   --, [RejectPayType] = V.[RejectPayType]
			   --, [AllowSalesNegative] = CASE WHEN RIGHT(V.[ItemCode], 2) = 'NC' THEN 1 ELSE NULL END
			   , [SyncLocalStatus] = 'U'
			   , [StatusGuid] = @StatusGuid
		  FROM @M_Items V INNER JOIN #M_Item_UPDATE U ON V.ItemCode = U.ItemCode AND V.CompanyCode = U.CompanyCode --AND U.ProductId = V.ProductId AND U.VariantId = V.VariantId
		 WHERE V.ItemCode = M_Item.ItemCode AND V.CompanyCode = M_Item.CompanyCode --AND V.ProductId = M_Item.ProductId AND V.VariantId = M_Item.VariantId
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		INSERT INTO [dbo].[T_SyncActionData]
           ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
		SELECT DISTINCT CompanyCode, 'M_Item', StoreId, @StatusGuid, GETDATE(), 'IU' FROM @M_ItemStoreListing

		-- =========================================================================

		--	create item for IsPriceTime
		DELETE P
		FROM M_PriceList P
		INNER JOIN @M_Items MI ON P.CompanyCode = MI.CompanyCode AND P.ItemCode = MI.ItemCode AND (MI.IsPriceTime = 1 OR MI.ItemGroupId = '6060101' OR MI.ItemGroupId = '6060102')

		--INSERT INTO M_PriceList
		INSERT INTO [dbo].[M_PriceList]
           ([CompanyCode]
           ,[StoreId]
           ,[ItemCode]
           ,[UOMCode]
           ,[BarCode]
           ,[PriceListId]
           ,[ValidFrom]
           ,[ValidTo]
           ,[PriceBeforeTax]
           ,[PriceAfterTax]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status]
           ,[SyncDate]
           ,[SyncSource]
		   ,[StatusGuid])
		SELECT DISTINCT I.CompanyCode
			, S.StoreId
			, I.ItemCode
			, UOMCode
			, BarCode
			, 'NP' AS PriceListId
			, ISNULL(I.ValidFrom, GETDATE()) AS ValidFrom
			, ISNULL(I.ValidTo, '9999-12-31') AS ValidTo
			, 1 AS PriceBeforeTax
			, 1 AS PriceAfterTax
			,'MWI' AS CreatedBy
			, GETDATE() AS CreatedOn
			, 'MWI' AS ModifiedBy
			, GETDATE() AS ModifiedOn
			, 'A' AS [Status]
			, GETDATE() AS SyncDate
			, @UserID AS SyncSource
			, @StatusGuid
		FROM M_Item I INNER JOIN M_ItemUOM U ON I.ItemCode = U.ItemCode
			CROSS JOIN M_Store S
			--CROSS JOIN M_PriceListName P 
			INNER JOIN @M_Items MI ON I.CompanyCode = MI.CompanyCode AND I.ItemCode = MI.ItemCode AND (MI.IsPriceTime = 1 OR MI.ItemGroupId = '6060101' OR MI.ItemGroupId = '6060102')
		WHERE I.IsPriceTime = 1 --AND I.ItemCode = IN (SELECT ItemCode FROM @M_Items WHERE ItemGroupId = '6060101')


		INSERT INTO [dbo].[T_SyncActionData]
           ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn])
		SELECT DISTINCT CompanyCode, 'M_PriceList', StoreId, @StatusGuid, GETDATE() FROM @M_ItemStoreListing

		-- ==========================================================================================================================

	--	 Insert Item Uom
		IF (SELECT COUNT(ItemCode) FROM @M_ItemUOM) = 0
			BEGIN
				GOTO CONTI1
			END
	
		UPDATE IU
		SET [ItemCode] = I.ItemCode
			,[UOMCode] = I.UOMCode
			,[CompanyCode] = I.CompanyCode
			,[Factor] = I.Factor
			,[BarCode] = I.BarCode
			,[QRCode] = I.QRCode
			,[PLU] = I.PLU
			,[WeightValue] = I.WeightValue
			,[WeightCount] = I.WeightCount
			,[ModifiedBy] = I.ModifiedBy
			,[ModifiedOn] = I.ModifiedOn
			,[Status] = I.[Status]
			,[SyncLocalStatus] = 'U'
			,[AltFactor] = I.AltFactor
		FROM M_ItemUOM IU
		INNER JOIN @M_ItemUOM I
		ON IU.CompanyCode = I.CompanyCode AND IU.ItemCode = I.ItemCode AND IU.UOMCode = I.UOMCode AND IU.BarCode = I.BarCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End

		INSERT INTO [dbo].[M_ItemUOM]
			   ([ItemCode]
			   ,[UOMCode]
			   ,[CompanyCode]
			   ,[Factor]
			   ,[BarCode]
			   ,[QRCode]
			   ,[PLU_Flag]
			   ,[PLU]
			   ,[WeightValue]
			   ,[WeightCount]
			   ,[WeightUnit]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[AltFactor])
		 SELECT I.ItemCode
			   ,I.UOMCode
			   ,I.CompanyCode
			   ,I.Factor
			   ,I.BarCode
			   ,I.QRCode
			   ,I.PLU_Flag
			   ,I.PLU
			   ,I.WeightValue
			   ,I.WeightCount
			   ,I.WeightUnit
			   ,I.CreatedBy
			   ,I.CreatedOn
			   ,I.ModifiedBy
			   ,I.ModifiedOn
			   ,I.[Status]
			   ,I.AltFactor
		FROM @M_ItemUOM I 
		LEFT JOIN M_ItemUOM IU ON I.CompanyCode = IU.CompanyCode AND I.ItemCode = IU.ItemCode AND I.UOMCode = IU.UOMCode AND I.BarCode = IU.BarCode
		WHERE IU.ItemCode IS NULL AND IU.UOMCode IS NULL AND IU.BarCode IS NULL
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End


		
		DELETE IU
		FROM M_ItemUOM IU 
		LEFT JOIN @M_ItemUOM MI ON IU.CompanyCode = MI.CompanyCode AND IU.ItemCode = MI.ItemCode AND IU.UOMCode = MI.UOMCode AND IU.BarCode = MI.BarCode
		INNER JOIN @M_ItemUOM T ON IU.CompanyCode = T.CompanyCode AND IU.ItemCode = T.ItemCode
		WHERE MI.ItemCode IS NULL AND MI.UOMCode IS NULL AND MI.BarCode IS NULL
		
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End

		---- Get Items update ----------------------------------------------------------------------
		--SELECT V.CompanyCode, V.ItemCode, V.UOMCode, V.BarCode INTO #M_ItemUOM_U
		--  FROM @M_ItemUOM V INNER JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode AND V.BarCode = M.BarCode;
		---- Get Items Insert ----------------------------------------------------------------------
		--SELECT V.CompanyCode, V.ItemCode, V.UOMCode, V.BarCode INTO #M_ItemUOM_I
		--  FROM @M_ItemUOM V LEFT JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode AND V.BarCode = M.BarCode
		-- WHERE M.ItemCode IS NULL;
		---- Count rows -----------------------------------

		--INSERT INTO [dbo].[M_ItemUOM]
		--	   ([ItemCode]
		--	   ,[UOMCode]
		--	   ,[CompanyCode]
		--	   ,[Factor]
		--	   ,[BarCode]
		--	   ,[QRCode]
		--	   ,[PLU_Flag]
		--	   ,[PLU]
		--	   ,[WeightValue]
		--	   ,[WeightCount]
		--	   ,[WeightUnit]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status])
		-- SELECT I.ItemCode
		--	   ,I.UOMCode
		--	   ,I.CompanyCode
		--	   ,I.Factor
		--	   ,I.BarCode
		--	   ,I.QRCode
		--	   ,I.PLU_Flag
		--	   ,I.PLU
		--	   ,I.WeightValue
		--	   ,I.WeightCount
		--	   ,I.WeightUnit
		--	   ,I.CreatedBy
		--	   ,I.CreatedOn
		--	   ,I.ModifiedBy
		--	   ,I.ModifiedOn
		--	   ,I.[Status]
		--FROM @M_ItemUOM I
		----INNER JOIN #M_ItemUOM_I V ON V.CompanyCode = I.CompanyCode AND V.ItemCode = I.ItemCode AND V.UOMCode = I.UOMCode AND V.BarCode = I.BarCode
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		-- ==========================================================================================================================
		---- UPDATE ITEM UOM =============================================================================================================
		--UPDATE [dbo].[M_ItemUOM]
		--   SET [ItemCode] = I.ItemCode
		--	  ,[UOMCode] = I.UOMCode
		--	  ,[CompanyCode] = I.CompanyCode
		--	  ,[Factor] = I.Factor
		--	  ,[BarCode] = I.BarCode
		--	  ,[QRCode] = I.QRCode
		--	  ,[PLU] = I.PLU
		--	  ,[WeightValue] = I.WeightValue
		--	  ,[WeightCount] = I.WeightCount
		--	  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
		--	  --,[CreatedOn] = <CreatedOn, datetime,>
		--	  ,[ModifiedBy] = I.ModifiedBy
		--	  ,[ModifiedOn] = I.ModifiedOn
		--	  ,[Status] = I.[Status]
		-- FROM @M_ItemUOM I INNER JOIN #M_ItemUOM_U V ON I.ItemCode = V.ItemCode AND I.CompanyCode = V.CompanyCode AND I.UOMCode = V.UOMCode AND I.BarCode = V.BarCode
		-- WHERE I.ItemCode = M_ItemUOM.ItemCode AND I.CompanyCode = M_ItemUOM.CompanyCode AND I.UOMCode = M_ItemUOM.UOMCode AND I.BarCode = M_ItemUOM.BarCode
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==================================================================================


		----DELETE FROM M_ItemUOM WHERE CompanyCode IN (SELECT CompanyCode FROM @M_ItemUOM IU) AND ItemCode IN (SELECT ItemCode FROM @M_ItemUOM IU)
		--DELETE IU
		--FROM M_ItemUOM IU 
		--INNER JOIN @M_ItemUOM MI ON IU.CompanyCode = MI.CompanyCode AND IU.ItemCode = MI.ItemCode
		----WHERE IU.ItemCode = MI.ItemCode AND IU.CompanyCode = MI.CompanyCode

		------ Get Items update ----------------------------------------------------------------------
		----SELECT V.CompanyCode, V.ItemCode, V.UOMCode, V.BarCode INTO #M_ItemUOM_U
		----  FROM @M_ItemUOM V INNER JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode AND V.BarCode = M.BarCode;
		------ Get Items Insert ----------------------------------------------------------------------
		----SELECT V.CompanyCode, V.ItemCode, V.UOMCode, V.BarCode INTO #M_ItemUOM_I
		----  FROM @M_ItemUOM V LEFT JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode AND V.BarCode = M.BarCode
		---- WHERE M.ItemCode IS NULL;
		------ Count rows -----------------------------------

		--INSERT INTO [dbo].[M_ItemUOM]
		--	   ([ItemCode]
		--	   ,[UOMCode]
		--	   ,[CompanyCode]
		--	   ,[Factor]
		--	   ,[BarCode]
		--	   ,[QRCode]
		--	   ,[PLU_Flag]
		--	   ,[PLU]
		--	   ,[WeightValue]
		--	   ,[WeightCount]
		--	   ,[WeightUnit]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status])
		-- SELECT I.ItemCode
		--	   ,I.UOMCode
		--	   ,I.CompanyCode
		--	   ,I.Factor
		--	   ,I.BarCode
		--	   ,I.QRCode
		--	   ,I.PLU_Flag
		--	   ,I.PLU
		--	   ,I.WeightValue
		--	   ,I.WeightCount
		--	   ,I.WeightUnit
		--	   ,I.CreatedBy
		--	   ,I.CreatedOn
		--	   ,I.ModifiedBy
		--	   ,I.ModifiedOn
		--	   ,I.[Status]
		--FROM @M_ItemUOM I
		----INNER JOIN #M_ItemUOM_I V ON V.CompanyCode = I.CompanyCode AND V.ItemCode = I.ItemCode AND V.UOMCode = I.UOMCode AND V.BarCode = I.BarCode
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================
		------ UPDATE ITEM UOM =============================================================================================================
		----UPDATE [dbo].[M_ItemUOM]
		----   SET [ItemCode] = I.ItemCode
		----	  ,[UOMCode] = I.UOMCode
		----	  ,[CompanyCode] = I.CompanyCode
		----	  ,[Factor] = I.Factor
		----	  ,[BarCode] = I.BarCode
		----	  ,[QRCode] = I.QRCode
		----	  ,[PLU] = I.PLU
		----	  ,[WeightValue] = I.WeightValue
		----	  ,[WeightCount] = I.WeightCount
		----	  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
		----	  --,[CreatedOn] = <CreatedOn, datetime,>
		----	  ,[ModifiedBy] = I.ModifiedBy
		----	  ,[ModifiedOn] = I.ModifiedOn
		----	  ,[Status] = I.[Status]
		---- FROM @M_ItemUOM I INNER JOIN #M_ItemUOM_U V ON I.ItemCode = V.ItemCode AND I.CompanyCode = V.CompanyCode AND I.UOMCode = V.UOMCode AND I.BarCode = V.BarCode
		---- WHERE I.ItemCode = M_ItemUOM.ItemCode AND I.CompanyCode = M_ItemUOM.CompanyCode AND I.UOMCode = M_ItemUOM.UOMCode AND I.BarCode = M_ItemUOM.BarCode
		----If @@ERROR <> 0 
		----	Begin
		----		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		----		Goto HANDLE_ERROR --> Roll back when execute failed ...
		----	End
		------ ==========================================================================================================================

		CONTI1:


--	 Insert Item Store Listing
		IF (SELECT COUNT(ItemCode) FROM @M_ItemStoreListing) = 0
			BEGIN
				GOTO CONTI2
			END

		
		UPDATE IU
		   SET [CompanyCode] = I.CompanyCode
			  ,[StoreId] = I.StoreId
			  ,[ItemCode] = I.ItemCode
			  ,[Status] = I.[Status]
			  ,[ModifiedBy] = I.ModifiedBy
			  ,[ModifiedOn] = I.ModifiedOn
			  ,[SyncLocalStatus] = 'U'
		  FROM [dbo].[M_ItemStoreListing] IU 
		  INNER JOIN @M_ItemStoreListing I 
		  ON IU.CompanyCode = I.CompanyCode AND IU.StoreId = I.StoreId AND IU.ItemCode = I.ItemCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End

		INSERT INTO [dbo].[M_ItemStoreListing]
           ([CompanyCode]
           ,[StoreId]
           ,[ItemCode]
           ,[Status]
           ,[CreatedBy]
           ,[CreatedOn]
		   ,[ModifiedBy]
           ,[ModifiedOn])
		 SELECT I.CompanyCode
			   ,I.StoreId
			   ,I.ItemCode
			   ,I.[Status]
			   ,I.CreatedBy
			   ,I.CreatedOn
			   ,I.ModifiedBy
			   ,I.ModifiedOn
		FROM @M_ItemStoreListing I
		LEFT JOIN M_ItemStoreListing IU ON I.CompanyCode = IU.CompanyCode AND I.ItemCode = IU.ItemCode AND I.StoreId = IU.StoreId
		WHERE IU.ItemCode IS NULL AND IU.StoreId IS NULL
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End

		DELETE IU
		FROM M_ItemStoreListing IU 
		LEFT JOIN @M_ItemStoreListing MI ON IU.CompanyCode = MI.CompanyCode AND IU.ItemCode = MI.ItemCode AND IU.StoreId = MI.StoreId
		INNER JOIN @M_ItemStoreListing T ON IU.CompanyCode = T.CompanyCode AND IU.ItemCode = T.ItemCode
		WHERE MI.ItemCode IS NULL AND MI.StoreId IS NULL
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End


		---- Get Items update ----------------------------------------------------------------------
		--SELECT S.CompanyCode, S.StoreId, S.ItemCode INTO #T_ItemStoreListing_U
		--  FROM @M_ItemStoreListing S INNER JOIN M_ItemStoreListing M ON S.CompanyCode = M.CompanyCode AND S.StoreId = M.StoreId AND S.ItemCode = M.ItemCode
		---- Get Items Insert ----------------------------------------------------------------------
		--SELECT S.CompanyCode, S.StoreId, S.ItemCode INTO #T_ItemStoreListing_I
		--  FROM @M_ItemStoreListing S LEFT JOIN M_ItemStoreListing M ON S.CompanyCode = M.CompanyCode AND S.StoreId = M.StoreId AND S.ItemCode = M.ItemCode
		-- WHERE M.ItemCode IS NULL;
		---- Count rows -----------------------------------


		
		-- ==========================================================================================================================

		---- UPDATE StoreListing ======================================================================================================
		--UPDATE [dbo].[M_ItemStoreListing]
		--   SET [CompanyCode] = I.CompanyCode
		--	  ,[StoreId] = I.StoreId
		--	  ,[ItemCode] = I.ItemCode
		--	  ,[Status] = I.[Status]
		--	  ,[ModifiedBy] = I.ModifiedBy
		--	  ,[ModifiedOn] = I.ModifiedOn
		--  FROM @M_ItemStoreListing I INNER JOIN #T_ItemStoreListing_U M ON I.CompanyCode = M.CompanyCode AND I.StoreId = M.StoreId AND I.ItemCode = M.StoreId
		-- WHERE I.CompanyCode = M_ItemStoreListing.CompanyCode AND I.StoreId = M_ItemStoreListing.StoreId AND I.ItemCode = M_ItemStoreListing.StoreId
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================

		--	UPDATE Price list status ==================================================================================================

		UPDATE [dbo].[M_PriceList] SET [Status] = 'I', [SyncLocalStatus] = 'U', [StatusGuid] = @StatusGuid
		FROM @M_ItemStoreListing S
		WHERE S.CompanyCode = [M_PriceList].CompanyCode AND S.StoreId = [M_PriceList].StoreId AND S.ItemCode = [M_PriceList].ItemCode
		AND S.[Status] = 'I'

		---- ==========================================================================================================================

		CONTI2:

	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================


GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_M_MaterialMaster_bak]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_M_MaterialMaster_bak]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25) ,
	@M_Items M_ItemsType READONLY,
	@M_ItemUOM M_ItemUOMType READONLY,
	@M_ItemStoreListing M_ItemStoreListingType READONLY

AS
BEGIN TRANSACTION
	BEGIN
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.

		--DECLARE @M_Items M_ItemsType
		--DECLARE @M_ItemUOM M_ItemUOMType
		--DECLARE @M_Tax M_TaxType
		--DECLARE @M_ItemStoreListing M_ItemStoreListingType

		--SET NOCOUNT ON;

		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Items successfully.' -- Error message
		DECLARE @RowCount int = 0;

		---- CHECK DATA NOT EXIST =====================================================================================================
		--SELECT DISTINCT M.CompanyCode, M.ItemGroupId INTO #IT_CHECK
		--FROM @M_Items M
		--LEFT JOIN M_ItemGroup G ON G.CompanyCode = M.CompanyCode AND G.IGId = M.ItemGroupId
		--WHERE G.IGId IS NULL

		--IF (SELECT COUNT(ItemGroupId) FROM #IT_CHECK) > 0
		--	BEGIN
		--		SET @ErrMsg = 'Item group id ' + (SELECT STRING_AGG(ItemGroupId, ', ') AS Currency FROM #IT_CHECK) + ' does not exist.'
		--		GOTO HANDLE_ERROR
		--	END
		----===========================================================================================================================

		SELECT @RowCount = count(ItemCode)
		  FROM @M_Items;

		-- Get Items update
		SELECT I.ItemCode, I.CompanyCode INTO #M_Item_UPDATE
		  FROM @M_Items I INNER JOIN M_Item M ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode --AND M.ProductId = I.ProductId AND M.VariantId = I.VariantId
		 --WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		-- Get Items Insert
		SELECT I.ItemCode, I.CompanyCode INTO #M_Item_INSERT
		  FROM @M_Items I LEFT JOIN M_Item M ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode --AND M.ProductId = I.ProductId AND M.VariantId = I.VariantId
		 WHERE M.ItemCode IS NULL

		-- INSERT NEW ITEMS =========================================================================================================
		INSERT INTO M_Item ([ItemCode]
							, [CompanyCode]
							, [ProductId]
							, [VariantId]
							, [CreatedBy]
							, [CreatedOn]
							, [ModifiedBy]
							, [ModifiedOn]
							, [Status]
							, [CapacityValue]
							, [ItemGroupId]
							, [SalesTaxCode]
							, [PurchaseTaxCode]
							, [ItemName]
							, [ItemDescription]
							, [ItemCategory_1]
							, [ItemCategory_2]
							, [ItemCategory_3]
							, [ForeignName]
							, [InventoryUOM]
							, [ImageURL]
							, [ImageLink]
							, [MCId]
							, [CustomField1]
							, [CustomField2]
							, [CustomField3]
							, [CustomField4]
							, [CustomField5]
							, [CustomField6]
							, [CustomField7]
							, [CustomField8]
							, [CustomField9]
							, [CustomField10]
							, [DefaultPrice]
							, [IsSerial]
							, [IsBOM]
							, [ValidFrom]
							, [ValidTo]
							, [IsVoucher]
							, [SyncDate]
							, [SyncSource]
							, [Returnable]
							, [IsPriceTime]
							, [RejectPayType]
		)
		SELECT V.[ItemCode]
			 , V.[CompanyCode]
			 , V.[ProductId]
			 , V.[VariantId]
			 , V.[CreatedBy]
			 , V.[CreatedOn]
			 , V.[ModifiedBy]
			 , V.[ModifiedOn]
			 , V.[Status]
			 , V.[CapacityValue]
			 , V.[ItemGroupId]
			 , V.[SalesTaxCode]
			 , V.[PurchaseTaxCode]
			 , V.[ItemName]
			 , V.[ItemDescription]
			 , V.[ItemCategory_1]
			 , V.[ItemCategory_2]
			 , V.[ItemCategory_3]
			 , V.[ForeignName]
			 , V.[InventoryUOM]
			 , V.[ImageURL]
			 , V.[ImageLink]
			 , V.[MCId]
			 , V.[CustomField1]
			 , V.[CustomField2]
			 , V.[CustomField3]
			 , V.[CustomField4]
			 , V.[CustomField5]
			 , V.[CustomField6]
			 , V.[CustomField7]
			 , V.[CustomField8]
			 , V.[CustomField9]
			 , V.[CustomField10]
			 , V.[DefaultPrice]
			 , V.[IsSerial]
			 , V.[IsBOM]
			 , V.[ValidFrom]
			 , V.[ValidTo]
			 , V.[IsVoucher]
			 , GetDate()
			 , @UserID
			 , V.[Returnable]
			 , V.[IsPriceTime]	--, CASE WHEN V.[CustomField1] = 'BP' THEN 1 ELSE 0 END		--Đối với Customfied 1 nếu value là BP => set value cột PriceTime = Y trên tab M_Item
			 , CASE WHEN V.[IsVoucher] = 1 THEN 'V' ELSE NULL END
		  FROM @M_Items V
		  INNER JOIN #M_Item_INSERT I ON V.CompanyCode = I.CompanyCode AND V.ItemCode = I.ItemCode --AND V.ProductId = I.ProductId AND V.VariantId = I.VariantId
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
		-- UPDATE ITEMS =============================================================================================================
		UPDATE M_Item
		   SET [CompanyCode] = V.CompanyCode
			   , [ProductId] = V.ProductId
			   , [VariantId] = V.VariantId
			   , [ModifiedBy] = V.[ModifiedBy]
			   , [ModifiedOn] = V.[ModifiedOn]
			   , [Status] = V.[Status]
			   , [CapacityValue] = V.CapacityValue
			   , [ItemGroupId] = V.ItemGroupId
			   , [SalesTaxCode] = V.SalesTaxCode
			   , [PurchaseTaxCode] = V.PurchaseTaxCode
			   , [ItemName]		   = V.ItemName
			   , [ItemDescription] = V.ItemDescription
			   , [ItemCategory_1]  = V.ItemCategory_1
			   , [ItemCategory_2]  = V.ItemCategory_2
			   , [ItemCategory_3]  = V.ItemCategory_3
			   , [ForeignName]	   = V.ForeignName
			   , [InventoryUOM]	   = V.InventoryUOM
			   , [ImageURL]		   = V.ImageURL
			   , [ImageLink]	   = V.ImageLink
			   , [MCId]			   = V.MCId
			   , [CustomField1]	   = V.CustomField1
			   , [CustomField2]	   = V.CustomField2
			   , [CustomField3]	   = V.CustomField3
			   , [CustomField4]	   = V.CustomField4
			   , [CustomField5]	   = V.CustomField5
			   , [CustomField6]	   = V.CustomField6
			   , [CustomField7]	   = V.CustomField7
			   , [CustomField8]	   = V.CustomField8
			   , [CustomField9]	   = V.CustomField9
			   , [CustomField10]   = V.CustomField10
			   , [DefaultPrice]	   = V.DefaultPrice
			   , [IsSerial]		   = V.IsSerial
			   , [IsBOM]		   = V.IsBOM
			   , [ValidFrom]	   = V.ValidFrom
			   , [ValidTo]		   = V.ValidTo
			   , [IsVoucher] = V.IsVoucher
			   , [SyncDate] = GetDate()
			   , [SyncSource] = @UserID
			   , [Returnable] = V.[Returnable]
			   , [IsPriceTime] = V.[IsPriceTime]
			   --, [RejectPayType] = V.[RejectPayType]
		  FROM @M_Items V INNER JOIN #M_Item_UPDATE U ON V.ItemCode = U.ItemCode AND V.CompanyCode = U.CompanyCode --AND U.ProductId = V.ProductId AND U.VariantId = V.VariantId
		 WHERE V.ItemCode = M_Item.ItemCode AND V.CompanyCode = M_Item.CompanyCode --AND V.ProductId = M_Item.ProductId AND V.VariantId = M_Item.VariantId
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

--	 Insert Item Uom
		IF (SELECT COUNT(ItemCode) FROM @M_ItemUOM) = 0
			BEGIN
				GOTO CONTI1
			END

		--DELETE FROM M_ItemUOM WHERE CompanyCode IN (SELECT CompanyCode FROM @M_ItemUOM IU) AND ItemCode IN (SELECT ItemCode FROM @M_ItemUOM IU)
		DELETE IU
		FROM M_ItemUOM IU 
		INNER JOIN @M_ItemUOM MI ON IU.CompanyCode = MI.CompanyCode AND IU.ItemCode = MI.ItemCode
		--WHERE IU.ItemCode = MI.ItemCode AND IU.CompanyCode = MI.CompanyCode

		---- Get Items update ----------------------------------------------------------------------
		--SELECT V.CompanyCode, V.ItemCode, V.UOMCode, V.BarCode INTO #M_ItemUOM_U
		--  FROM @M_ItemUOM V INNER JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode AND V.BarCode = M.BarCode;
		---- Get Items Insert ----------------------------------------------------------------------
		--SELECT V.CompanyCode, V.ItemCode, V.UOMCode, V.BarCode INTO #M_ItemUOM_I
		--  FROM @M_ItemUOM V LEFT JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode AND V.BarCode = M.BarCode
		-- WHERE M.ItemCode IS NULL;
		---- Count rows -----------------------------------

		INSERT INTO [dbo].[M_ItemUOM]
			   ([ItemCode]
			   ,[UOMCode]
			   ,[CompanyCode]
			   ,[Factor]
			   ,[BarCode]
			   ,[QRCode]
			   ,[PLU_Flag]
			   ,[PLU]
			   ,[WeightValue]
			   ,[WeightCount]
			   ,[WeightUnit]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status])
		 SELECT I.ItemCode
			   ,I.UOMCode
			   ,I.CompanyCode
			   ,I.Factor
			   ,I.BarCode
			   ,I.QRCode
			   ,I.PLU_Flag
			   ,I.PLU
			   ,I.WeightValue
			   ,I.WeightCount
			   ,I.WeightUnit
			   ,I.CreatedBy
			   ,I.CreatedOn
			   ,I.ModifiedBy
			   ,I.ModifiedOn
			   ,I.[Status]
		FROM @M_ItemUOM I
		--INNER JOIN #M_ItemUOM_I V ON V.CompanyCode = I.CompanyCode AND V.ItemCode = I.ItemCode AND V.UOMCode = I.UOMCode AND V.BarCode = I.BarCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
		---- UPDATE ITEM UOM =============================================================================================================
		--UPDATE [dbo].[M_ItemUOM]
		--   SET [ItemCode] = I.ItemCode
		--	  ,[UOMCode] = I.UOMCode
		--	  ,[CompanyCode] = I.CompanyCode
		--	  ,[Factor] = I.Factor
		--	  ,[BarCode] = I.BarCode
		--	  ,[QRCode] = I.QRCode
		--	  ,[PLU] = I.PLU
		--	  ,[WeightValue] = I.WeightValue
		--	  ,[WeightCount] = I.WeightCount
		--	  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
		--	  --,[CreatedOn] = <CreatedOn, datetime,>
		--	  ,[ModifiedBy] = I.ModifiedBy
		--	  ,[ModifiedOn] = I.ModifiedOn
		--	  ,[Status] = I.[Status]
		-- FROM @M_ItemUOM I INNER JOIN #M_ItemUOM_U V ON I.ItemCode = V.ItemCode AND I.CompanyCode = V.CompanyCode AND I.UOMCode = V.UOMCode AND I.BarCode = V.BarCode
		-- WHERE I.ItemCode = M_ItemUOM.ItemCode AND I.CompanyCode = M_ItemUOM.CompanyCode AND I.UOMCode = M_ItemUOM.UOMCode AND I.BarCode = M_ItemUOM.BarCode
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================

		CONTI1:


--	 Insert Item Store Listing
		IF (SELECT COUNT(ItemCode) FROM @M_ItemStoreListing) = 0
			BEGIN
				GOTO CONTI2
			END

		DELETE IU
		FROM M_ItemStoreListing IU 
		INNER JOIN @M_ItemStoreListing MI ON IU.CompanyCode = MI.CompanyCode AND IU.ItemCode = MI.ItemCode
		--WHERE IU.ItemCode = MI.ItemCode AND IU.CompanyCode = MI.CompanyCode

		---- Get Items update ----------------------------------------------------------------------
		--SELECT S.CompanyCode, S.StoreId, S.ItemCode INTO #T_ItemStoreListing_U
		--  FROM @M_ItemStoreListing S INNER JOIN M_ItemStoreListing M ON S.CompanyCode = M.CompanyCode AND S.StoreId = M.StoreId AND S.ItemCode = M.ItemCode
		---- Get Items Insert ----------------------------------------------------------------------
		--SELECT S.CompanyCode, S.StoreId, S.ItemCode INTO #T_ItemStoreListing_I
		--  FROM @M_ItemStoreListing S LEFT JOIN M_ItemStoreListing M ON S.CompanyCode = M.CompanyCode AND S.StoreId = M.StoreId AND S.ItemCode = M.ItemCode
		-- WHERE M.ItemCode IS NULL;
		---- Count rows -----------------------------------


		INSERT INTO [dbo].[M_ItemStoreListing]
           ([CompanyCode]
           ,[StoreId]
           ,[ItemCode]
           ,[Status]
           ,[CreatedBy]
           ,[CreatedOn]
		   ,[ModifiedBy]
           ,[ModifiedOn])
		 SELECT I.CompanyCode
			   ,I.StoreId
			   ,I.ItemCode
			   ,I.[Status]
			   ,I.CreatedBy
			   ,I.CreatedOn
			   ,I.ModifiedBy
			   ,I.ModifiedOn
		FROM @M_ItemStoreListing I
		--INNER JOIN #T_ItemStoreListing_I M ON M.CompanyCode = I.CompanyCode AND M.ItemCode = I.ItemCode AND M.StoreId = I.StoreId
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		---- UPDATE StoreListing ======================================================================================================
		--UPDATE [dbo].[M_ItemStoreListing]
		--   SET [CompanyCode] = I.CompanyCode
		--	  ,[StoreId] = I.StoreId
		--	  ,[ItemCode] = I.ItemCode
		--	  ,[Status] = I.[Status]
		--	  ,[ModifiedBy] = I.ModifiedBy
		--	  ,[ModifiedOn] = I.ModifiedOn
		--  FROM @M_ItemStoreListing I INNER JOIN #T_ItemStoreListing_U M ON I.CompanyCode = M.CompanyCode AND I.StoreId = M.StoreId AND I.ItemCode = M.StoreId
		-- WHERE I.CompanyCode = M_ItemStoreListing.CompanyCode AND I.StoreId = M_ItemStoreListing.StoreId AND I.ItemCode = M_ItemStoreListing.StoreId
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================

		--	UPDATE Price list status ==================================================================================================

		UPDATE [dbo].[M_PriceList] SET [Status] = 'I'
		FROM @M_ItemStoreListing S
		WHERE S.CompanyCode = [M_PriceList].CompanyCode AND S.StoreId = [M_PriceList].StoreId AND S.ItemCode = [M_PriceList].ItemCode
		AND S.[Status] = 'I'

		---- ==========================================================================================================================

		CONTI2:

	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================


GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_S_Promotion]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_S_Promotion]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@S_PromoHeader S_PromoHeaderType READONLY,
	@S_PromoBuy S_PromoBuyType READONLY,
	@S_PromoGet S_PromoGetType READONLY,
	@S_PromoStore S_PromoStoreType READONLY,
	@S_PromoCustomer S_PromoCustomerType READONLY,
	@S_PromoBuyOTGroup S_PromoOTGroupType READONLY,
	@S_PromoGetOTGroup S_PromoOTGroupType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @S_PromoHeader S_PromoHeaderType
		--DECLARE @S_PromoBuy S_PromoBuyType
		--DECLARE @S_PromoGet S_PromoGetType
		--DECLARE @S_PromoStore S_PromoStoreType
		--DECLARE @S_PromoCustomer S_PromoCustomerType
		--DECLARE @S_PromoBuyOTGroup S_PromoOTGroupType
		--DECLARE @S_PromoGetOTGroup S_PromoOTGroupType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Promotion successfully.' -- Error message
		DECLARE @RCount int = 0

		DECLARE @StatusGuid uniqueidentifier;
		SET @StatusGuid = NEWID();

		-- PROMOTION HEADER ===========================================================================================================

		-- Get Data Insert
		SELECT H1.PromoId, H1.CompanyCode INTO #S_PromoHeader_I
		FROM @S_PromoHeader H1
		LEFT JOIN S_PromoHeader H2 
			ON H1.PromoId = H2.PromoId AND H1.CompanyCode = H2.CompanyCode
		WHERE H2.PromoId IS NULL

		-- Get Data Update
		SELECT H1.PromoId, H1.CompanyCode INTO #S_PromoHeader_U
		FROM @S_PromoHeader H1
		INNER JOIN S_PromoHeader H2 
			ON H1.PromoId = H2.PromoId AND H1.CompanyCode = H2.CompanyCode

		SELECT @RCount  = COUNT(*) from @S_PromoHeader;
		
		-- INSERT NEW PROMO HEADER ====================================================================================================
		INSERT INTO [dbo].[S_PromoHeader]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[PromoType]
			   ,[PromoName]
			   ,[CustomerType]
			   ,[ValidDateFrom]
			   ,[ValidDateTo]
			   ,[ValidTimeFrom]
			   ,[ValidTimeTo]
			   ,[IsMon]
			   ,[IsTue]
			   ,[IsWed]
			   ,[IsThu]
			   ,[IsFri]
			   ,[IsSat]
			   ,[IsSun]
			   ,[TotalBuyFrom]
			   ,[TotalBuyTo]
			   ,[TotalGetType]
			   ,[TotalGetValue]
			   ,[MaxTotalGetValue]
			   ,[IsCombine]
			   ,[IsVoucher]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[SAPPromoId]
			   ,[SAPBonusBuyId]
			   --,[SchemaId]
			   ,[SyncDate]
			   ,[SyncSource]
			   ,[MaxQtyByReceipt]
			   ,[MaxQtyByStore]
			   ,[StatusGuid])
		SELECT H1.[PromoId]
			   ,H1.[CompanyCode]
			   ,H1.[PromoType]
			   ,H1.[PromoName]
			   ,H1.[CustomerType]
			   ,H1.[ValidDateFrom]
			   ,H1.[ValidDateTo]
			   ,H1.[ValidTimeFrom]
			   ,H1.[ValidTimeTo]
			   ,H1.[IsMon]
			   ,H1.[IsTue]
			   ,H1.[IsWed]
			   ,H1.[IsThu]
			   ,H1.[IsFri]
			   ,H1.[IsSat]
			   ,H1.[IsSun]
			   ,H1.[TotalBuyFrom]
			   ,H1.[TotalBuyTo] --CASE WHEN ISNULL(H1.[TotalBuyFrom], 0) <> 0 AND ISNULL(H1.[TotalBuyTo], 0) = 0 THEN 99999999 ELSE H1.[TotalBuyTo] END AS 'TotalBuyTo'
			   ,H1.[TotalGetType]
			   ,H1.[TotalGetValue]
			   ,H1.[MaxTotalGetValue]
			   ,H1.[IsCombine]
			   ,H1.[IsVoucher]
			   ,H1.[CreatedBy]
			   ,H1.[CreatedOn]
			   ,H1.[ModifiedBy]
			   ,H1.[ModifiedOn]
			   ,H1.[Status]
			   ,H1.[SAPPromoId]
			   ,H1.[SAPBonusBuyId]
			   --,H1.[SchemaId]
			   ,GETDATE()
			   ,@UserID
			   ,H1.[MaxQtyByReceipt]
			   ,H1.[MaxQtyByStore]
			   ,@StatusGuid
		FROM @S_PromoHeader H1
		INNER JOIN #S_PromoHeader_I H2
			ON H1.PromoId = H2.PromoId AND H1.CompanyCode = H2.CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		-- ============================================================================================================================
		-- UPDATE PROMO HEADER ========================================================================================================
		UPDATE [dbo].[S_PromoHeader]
		   SET [PromoId] = H1.[PromoId]
			  ,[CompanyCode] = H1.[CompanyCode]
			  ,[PromoType] = H1.[PromoType]
			  ,[PromoName] = H1.[PromoName]
			  ,[CustomerType] = H1.[CustomerType]
			  ,[ValidDateFrom] = H1.[ValidDateFrom]
			  ,[ValidDateTo] = H1.[ValidDateTo]
			  ,[ValidTimeFrom] = H1.[ValidTimeFrom]
			  ,[ValidTimeTo] = H1.[ValidTimeTo]
			  ,[IsMon] = H1.[IsMon]
			  ,[IsTue] = H1.[IsTue]
			  ,[IsWed] = H1.[IsWed]
			  ,[IsThu] = H1.[IsThu]
			  ,[IsFri] = H1.[IsFri]
			  ,[IsSat] = H1.[IsSat]
			  ,[IsSun] = H1.[IsSun]
			  ,[TotalBuyFrom] = H1.[TotalBuyFrom]
			  ,[TotalBuyTo] = H1.[TotalBuyTo] --CASE WHEN ISNULL(H1.[TotalBuyFrom], 0) <> 0 AND ISNULL(H1.[TotalBuyTo], 0) = 0 THEN 99999999 ELSE H1.[TotalBuyTo] END
			  ,[TotalGetType] = H1.[TotalGetType]
			  ,[TotalGetValue] = H1.[TotalGetValue]
			  ,[MaxTotalGetValue] = H1.[MaxTotalGetValue]
			  ,[IsCombine] = H1.[IsCombine]
			  ,[IsVoucher] = H1.[IsVoucher]
			  --,[CreatedBy] = H1.[CreatedBy]
			  --,[CreatedOn] = H1.[CreatedOn]
			  ,[ModifiedBy] = H1.[ModifiedBy]
			  ,[ModifiedOn] = H1.[ModifiedOn]
			  ,[Status] = H1.[Status]
			  ,[SAPPromoId] = H1.[SAPPromoId]
			  ,[SAPBonusBuyId] = H1.[SAPBonusBuyId]
			  --,[SchemaId] = H1.[SchemaId]
			  ,[SyncDate] = GETDATE()
			  ,[SyncSource] = @UserID
			  ,[MaxQtyByReceipt] = H1.[MaxQtyByReceipt]
			  ,[MaxQtyByStore] = H1.[MaxQtyByStore]
			  ,[StatusGuid] = @StatusGuid
		FROM @S_PromoHeader H1
		INNER JOIN #S_PromoHeader_U H2
			ON H1.PromoId = H2.PromoId AND H1.CompanyCode = H2.CompanyCode
		WHERE H1.PromoId = [S_PromoHeader].PromoId AND H1.CompanyCode = [S_PromoHeader].CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		-- ============================================================================================================================

		IF @RCount > 0
		BEGIN
			INSERT INTO [dbo].[T_SyncActionData]
				([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
			SELECT DISTINCT CompanyCode, 'S_PromoHeader', StoreId, @StatusGuid, GETDATE(), 'IU' FROM M_Store
		END

		-- PROMO BUY ==================================================================================================================

		IF (SELECT COUNT(1) FROM @S_PromoBuy) = 0 --(SELECT COUNT(PromoId) FROM @S_PromoBuy) = 0
			BEGIN
				GOTO CONTI1
			END

		--DELETE S_PromoBuy WHERE PromoId IN (SELECT D.PromoId FROM @S_PromoBuy D)

		DELETE P
		FROM S_PromoBuy P 
		INNER JOIN @S_PromoBuy S ON P.CompanyCode = S.CompanyCode AND P.PromoId = S.PromoId
		WHERE P.PromoId = S.PromoId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW PROMO BUY =======================================================================================================
		INSERT INTO [dbo].[S_PromoBuy]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUom]
			   ,[ValueType]
			   ,[Condition_1]
			   ,[Value_1]
			   ,[Condition_2]
			   ,[Value_2])
		SELECT P.[PromoId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUom]
			   ,P.[ValueType]
			   ,P.[Condition_1]
			   ,P.[Value_1]
			   ,CASE WHEN P.Condition_1 = 'FROM' AND ISNULL(P.[Condition_2], '') = '' THEN 'TO' ELSE P.[Condition_2] END AS 'Condition_2'
			   ,P.[Value_2] --CASE WHEN P.Condition_1 = 'FROM' AND ISNULL(P.[Value_2], 0) = 0 THEN 99999999 ELSE P.[Value_2] END AS 'Value_2'
		FROM @S_PromoBuy P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI1:

		-- PROMO GET ==================================================================================================================

		IF (SELECT COUNT(1) FROM @S_PromoGet) = 0 --(SELECT COUNT(PromoId) FROM @S_PromoGet) = 0
			BEGIN
				GOTO CONTI2
			END

		DELETE P
		FROM S_PromoGet P 
		INNER JOIN @S_PromoGet S ON P.CompanyCode = S.CompanyCode AND P.PromoId = S.PromoId
		WHERE P.PromoId = S.PromoId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW PROMO GET =======================================================================================================
		INSERT INTO [dbo].[S_PromoGet]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUom]
			   ,[ConditionType]
			   ,[Condition_1]
			   ,[Value_1]
			   ,[Condition_2]
			   ,[Value_2]
			   ,[ValueType]
			   ,[GetValue]
			   ,[MaxAmtDis]
			   ,[MaxQtyDis])
		SELECT P.[PromoId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUom]
			   ,P.[ConditionType]
			   ,P.[Condition_1]
			   ,P.[Value_1]
			   ,CASE WHEN P.[Condition_1] = 'FROM' AND ISNULL(P.[Condition_2], '') = '' THEN 'TO' ELSE P.[Condition_2] END AS 'Condition_2'
			   ,P.[Value_2] --CASE WHEN P.[Condition_1] = 'FROM' AND ISNULL(P.[Value_2], 0) = 0 THEN 99999999 ELSE P.[Value_2] END AS 'Value_2'
			   ,P.[ValueType]
			   ,P.[GetValue]
			   ,P.[MaxAmtDis]
			   ,P.[MaxQtyDis]
		FROM @S_PromoGet P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI2:

		-- PROMO STORE ==================================================================================================================

		IF (SELECT COUNT(1) FROM @S_PromoStore) = 0 --(SELECT COUNT(PromoId) FROM @S_PromoStore) = 0
			BEGIN
				GOTO CONTI3
			END

		DELETE P
		FROM S_PromoStore P 
		INNER JOIN @S_PromoStore S ON P.CompanyCode = S.CompanyCode AND P.PromoId = S.PromoId
		WHERE P.PromoId = S.PromoId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW PROMO STORE =======================================================================================================
		INSERT INTO [dbo].[S_PromoStore]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[StoreValue])
		SELECT P.[PromoId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[StoreValue]
		FROM @S_PromoStore P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI3:

		-- PROMO CUSTOMER ==================================================================================================================

		IF (SELECT COUNT(1) FROM @S_PromoCustomer) = 0 --(SELECT COUNT(PromoId) FROM @S_PromoCustomer) = 0
			BEGIN
				GOTO CONTI4
			END

		DELETE P
		FROM S_PromoCustomer P 
		INNER JOIN @S_PromoCustomer S ON P.CompanyCode = S.CompanyCode AND P.PromoId = S.PromoId
		WHERE P.PromoId = S.PromoId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW PROMO CUSTOMER =======================================================================================================
		INSERT INTO [dbo].[S_PromoCustomer]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[CustomerValue]
			   ,[CustomerType])
		SELECT P.[PromoId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[CustomerValue]
			   ,P.[CustomerType]
		FROM @S_PromoCustomer P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI4:

		-- PROMO BUY OT GROUP =========================================================================================================

		IF (SELECT COUNT(1) FROM @S_PromoBuyOTGroup) = 0 --OR (SELECT COUNT(PromoId) FROM @S_PromoBuyOTGroup) = 0
			BEGIN
				GOTO CONTI5
			END

		DELETE P
		FROM S_PromoBuyOTGroup P 
		INNER JOIN @S_PromoBuyOTGroup S ON P.CompanyCode = S.CompanyCode AND P.PromoId = S.PromoId
		WHERE P.PromoId = S.PromoId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW PROMO BUY OT =======================================================================================================
		INSERT INTO [dbo].[S_PromoBuyOTGroup]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[GroupID]
			   ,[LineNum]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUoM])
		SELECT P.[PromoId]
			   ,P.[CompanyCode]
			   ,P.[GroupID]
			   ,P.[LineNum]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUoM]
		FROM @S_PromoBuyOTGroup P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI5:

		-- PROMO GET OT GROUP =========================================================================================================

		IF (SELECT COUNT(1) FROM @S_PromoGetOTGroup) = 0 --OR (SELECT COUNT(PromoId) FROM @S_PromoGetOTGroup) = 0
			BEGIN
				GOTO CONTI6
			END

		DELETE P
		FROM S_PromoGetOTGroup P 
		INNER JOIN @S_PromoGetOTGroup S ON P.CompanyCode = S.CompanyCode AND P.PromoId = S.PromoId
		WHERE P.PromoId = S.PromoId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW PROMO GET OT ====================================================================================================
		INSERT INTO [dbo].[S_PromoGetOTGroup]
			   ([PromoId]
			   ,[CompanyCode]
			   ,[GroupID]
			   ,[LineNum]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUoM])
		SELECT P.[PromoId]
			   ,P.[CompanyCode]
			   ,P.[GroupID]
			   ,P.[LineNum]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUoM]
		FROM @S_PromoGetOTGroup P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI6:

		------ AUTO CREATE SCHEMA DATA==================================================================================================
		----DECLARE @TableSchema AS TABLE
		----(
		----	SAPPromoId NVARCHAR(50) 
		----)

		----DECLARE @TableSchemaTest AS TABLE
		----(
		----	SAPPromoId NVARCHAR(50) 
		----)

		----INSERT INTO @TableSchema
		----SELECT DISTINCT SAPPromoId
		----FROM @S_PromoHeader
		----WHERE ISNULL(SAPPromoId, '') <> ''

		----IF (SELECT COUNT(1) FROM @TableSchema) = 0 --OR (SELECT COUNT(PromoId) FROM @S_PromoGetOTGroup) = 0
		----	BEGIN
		----		GOTO CONTI7
		----	END

		----DECLARE @SAPPromoId NVARCHAR(50) 

		----DECLARE Schema_cursor CURSOR  FOR SELECT DISTINCT SAPPromoId FROM @TableSchema
		----OPEN Schema_cursor  
		----FETCH NEXT FROM Schema_cursor INTO @SAPPromoId

		----WHILE @@FETCH_STATUS = 0 
		----	BEGIN
				
		----		--INSERT INTO @TableSchemaTest (SAPPromoId) 
		----		--SELECT TOP 1 SchemaId 
		----		--FROM S_PromoSchema 
		----		--WHERE SAPPromoId = @SAPPromoId

		----		DECLARE @NewId nvarchar(50) = (SELECT TOP 1 SchemaId FROM S_PromoSchema WHERE SAPPromoId = @SAPPromoId)

		----		IF ISNULL(@NewId, '') = ''
		----			BEGIN 
		----				SET @NewId = dbo.fnc_AutoGenDocumentCode('PS','CP001','')

		----				INSERT INTO [dbo].[S_PromoSchema]
		----					([SchemaId]
		----					,[CompanyCode]
		----					,[SchemaName]
		----					,[CreatedBy]
		----					,[CreatedOn]
		----					--,[ModifiedBy]
		----					--,[ModifiedOn]
		----					,[Status]
		----					,[AllowChain]
		----					,[SAPPromoId])
		----				SELECT DISTINCT @NewId AS 'SchemaId'
		----					,P.CompanyCode
		----					,'SchemaName' AS 'SchemaName'
		----					,@UserID
		----					,GETDATE()
		----					--,P.ModifiedBy
		----					--,P.ModifiedOn
		----					,'Y' AS 'Status'
		----					,'Y' AS 'AllowChain'
		----					,P.SAPPromoId
		----				FROM S_PromoHeader P WITH(NOLOCK)
		----				WHERE P.SAPPromoId = @SAPPromoId

		----			END
		----		ELSE
		----			BEGIN
		----				UPDATE [dbo].[S_PromoSchema]
		----				   SET [SchemaName] = CASE WHEN ISNULL([S_PromoSchema].SchemaName, '') = '' THEN 'SchemaName' ELSE [S_PromoSchema].SchemaName END
		----					  --,[CompanyCode] = P.CompanyCode
		----					  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
		----					  --,[CreatedOn] = <CreatedOn, datetime,>
		----					  ,[ModifiedBy] = @UserID
		----					  ,[ModifiedOn] = GETDATE()
		----					  --,[Status] = 'Y'
		----					  --,[AllowChain] = 'Y'
		----					  ,[SAPPromoId] = @SAPPromoId
		----				--FROM S_PromoHeader P WITH(NOLOCK)
		----				WHERE [S_PromoSchema].SchemaId = @NewId
		----			END

		----		--------

		----		DELETE S_SchemaLine WHERE SchemaId = (SELECT TOP 1 SchemaId FROM S_PromoSchema WHERE SAPPromoId = @SAPPromoId)

		----		INSERT INTO [dbo].[S_SchemaLine]
		----			([SchemaId]
		----			,[CompanyCode]
		----			,[LineNum]
		----			,[PromoId]
		----			,[Description]
		----			,[Priority]
		----			,[IsApply])
		----		SELECT @NewId AS 'SchemaId'
		----			,P.CompanyCode
		----			,ROW_NUMBER() OVER(ORDER BY @NewId, P.CreatedOn DESC) AS 'LineNum'
		----			,P.PromoId
		----			,P.PromoName
		----			,ROW_NUMBER() OVER(ORDER BY @NewId, P.CreatedOn DESC) AS 'Priority'
		----			,'Y' AS 'IsApply'
		----		FROM S_PromoHeader P WITH(NOLOCK) 
		----		WHERE SAPPromoId = @SAPPromoId
		----		ORDER BY P.CreatedOn DESC

		----		UPDATE S_PromoHeader SET IsCombine = 'Y' 
		----		WHERE SAPPromoId = @SAPPromoId

		----		FETCH NEXT FROM Schema_cursor INTO @SAPPromoId
		----	END

		
		----UPDATE S_PromoHeader SET IsCombine = 'N'
		----FROM S_PromoHeader H
		----FULL OUTER JOIN S_SchemaLine L ON L.CompanyCode = H.CompanyCode AND L.PromoId = H.PromoId
		----WHERE L.SchemaId IS NULL

		----CLOSE Schema_cursor  
		----DEALLOCATE Schema_cursor

		------SELECT * FROM @TableSchemaTest
		------RETURN

		----CONTI7:

		------==========================================================================================================================

		-- AUTO CREATE SCHEMA DATA DEFAULT==================================================================================================

		DECLARE @TablePromo AS TABLE
		(
			CompanyCode NVARCHAR(50),
			SAPBonusBuyId NVARCHAR(50) 
		)

		INSERT INTO @TablePromo
		SELECT DISTINCT CompanyCode, SAPBonusBuyId
		FROM S_PromoHeader
		WHERE ISNULL(SAPBonusBuyId, '') <> '' AND [Status] = 'Y'

		IF (SELECT COUNT(1) FROM @TablePromo) = 0 --OR (SELECT COUNT(PromoId) FROM @S_PromoGetOTGroup) = 0
			BEGIN
				GOTO CONTI7
			END

		DECLARE @NewId nvarchar(50) = (SELECT TOP 1 SchemaId FROM S_PromoSchema WHERE SchemaName = 'SchemaDefault')

		IF ISNULL(@NewId, '') = ''
			BEGIN 
				SET @NewId = dbo.fnc_AutoGenDocumentCode('PS','CP001','')

				INSERT INTO [dbo].[S_PromoSchema]
					([SchemaId]
					,[CompanyCode]
					,[SchemaName]
					,[CreatedBy]
					,[CreatedOn]
					--,[ModifiedBy]
					--,[ModifiedOn]
					,[Status]
					,[AllowChain]
					,[SAPPromoId]
					,[StatusGuid])
				SELECT DISTINCT TOP 1 @NewId AS 'SchemaId'
					,P.CompanyCode
					,'SchemaDefault' AS 'SchemaName'
					,@UserID
					,GETDATE()
					--,P.ModifiedBy
					--,P.ModifiedOn
					,'Y' AS 'Status'
					,'Y' AS 'AllowChain'
					,NULL--P.SAPPromoId
					,@StatusGuid
				FROM @TablePromo P --WITH(NOLOCK)
				--WHERE ISNULL(P.SAPBonusBuyId, '') <> ''

			END
		ELSE
			BEGIN
				UPDATE [dbo].[S_PromoSchema]
					SET [SchemaName] = CASE WHEN ISNULL([S_PromoSchema].SchemaName, '') = '' THEN 'SchemaDefault' ELSE [S_PromoSchema].SchemaName END
						--,[CompanyCode] = P.CompanyCode
						--,[CreatedBy] = <CreatedBy, nvarchar(50),>
						--,[CreatedOn] = <CreatedOn, datetime,>
						,[ModifiedBy] = @UserID
						,[ModifiedOn] = GETDATE()
						--,[Status] = 'Y'
						--,[AllowChain] = 'Y'
						--,[SAPPromoId] = @SAPPromoId
						,[StatusGuid] = @StatusGuid
				--FROM S_PromoHeader P WITH(NOLOCK)
				WHERE [S_PromoSchema].SchemaId = @NewId
			END

		--------

		IF @RCount > 0 AND ISNULL(@NewId, '') <> ''
		BEGIN
			INSERT INTO [dbo].[T_SyncActionData]
				([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn])
			SELECT DISTINCT CompanyCode, 'S_PromoSchema', StoreId, @StatusGuid, GETDATE() FROM M_Store
		END

		--------

		DELETE S_SchemaLine WHERE SchemaId = @NewId	--AND PromoId IN (SELECT SAPBonusBuyId FROM @TablePromo)

		INSERT INTO [dbo].[S_SchemaLine]
			([SchemaId]
			,[CompanyCode]
			,[LineNum]
			,[PromoId]
			,[Description]
			,[Priority]
			,[IsApply])
		SELECT @NewId AS 'SchemaId'
			,P.CompanyCode
			,ROW_NUMBER() OVER(ORDER BY @NewId, P.CreatedOn DESC) AS 'LineNum'
			,P.PromoId
			,P.PromoName
			,ROW_NUMBER() OVER(ORDER BY @NewId, P.CreatedOn DESC) AS 'Priority'
			,'Y' AS 'IsApply'
		FROM S_PromoHeader P WITH(NOLOCK) 
		INNER JOIN @TablePromo TP ON P.SAPBonusBuyId = TP.SAPBonusBuyId
		ORDER BY P.CreatedOn DESC

		UPDATE S_PromoHeader SET IsCombine = 'Y' 
		WHERE SAPBonusBuyId IN (SELECT SAPBonusBuyId FROM @TablePromo)
		
		UPDATE S_PromoHeader SET IsCombine = 'N'
		FROM S_PromoHeader H
		FULL OUTER JOIN S_SchemaLine L ON L.CompanyCode = H.CompanyCode AND L.PromoId = H.PromoId
		WHERE L.SchemaId IS NULL


		CONTI7:

		--==========================================================================================================================


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_EndDateFromLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_EndDateFromLocal]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_EndDate T_EndDateType READONLY,
	@T_EndDateDetail T_EndDateDetailType READONLY,
	@T_EndDatePayment T_EndDatePaymentType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_EndDate T_EndDateType
		--DECLARE @T_EndDateDetail T_EndDateDetailType
		--DECLARE @T_EndDatePayment T_EndDatePaymentType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save End Of Day successfully.' -- Error message
		DECLARE @RCount int = 0

--	SO header
		-- Get Data Header Insert
		SELECT H1.Id, H1.CompanyCode, H1.StoreId INTO #T_EndDate_I
		FROM @T_EndDate H1
		LEFT JOIN T_EndDate H2 
			ON H1.Id = H2.Id AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H2.Id IS NULL

		-- Get Data Header Update
		SELECT H1.Id, H1.CompanyCode, H1.StoreId INTO #T_EndDate_U
		FROM @T_EndDate H1
		INNER JOIN T_EndDate H2 
			ON H1.Id = H2.Id AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId

		SELECT @RCount  = COUNT(*) from @T_EndDate;
		
		-- Insert new EndOfDay Header
		INSERT INTO [dbo].[T_EndDate]
			([CompanyCode]
			,[StoreId]
			,[Id]
			,[Date]
			,[Description]
			,[Remark]
			,[Status]
			,[CreateOn]
			,[CreateBy]
			,[ModifiedOn]
			,[ModifiedBy]
			,[TotalSales]
			,[TotalCount]
			,[TotalCollected]
			,[TotalBalance]
			,[TaxTotal]
			,[DiscountTotal]
			,[PaymentTotal]
			,[LineItemCount]
			,[TaxCount]
			,[DiscountCount]
			,[PaymentCount]
			,[AmtNotInBank])
		SELECT H1.[CompanyCode]
			,H1.[StoreId]
			,H1.[Id]
			,H1.[Date]
			,H1.[Description]
			,H1.[Remark]
			,H1.[Status]
			,H1.[CreateOn]
			,H1.[CreateBy]
			,H1.[ModifiedOn]
			,H1.[ModifiedBy]
			,H1.[TotalSales]
			,H1.[TotalCount]
			,H1.[TotalCollected]
			,H1.[TotalBalance]
			,H1.[TaxTotal]
			,H1.[DiscountTotal]
			,H1.[PaymentTotal]
			,H1.[LineItemCount]
			,H1.[TaxCount]
			,H1.[DiscountCount]
			,H1.[PaymentCount]
			,H1.[AmtNotInBank]
		FROM @T_EndDate H1
		INNER JOIN #T_EndDate_I H2
			ON H1.Id = H2.Id AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------
		--	Update EndOfDay Header
		UPDATE [dbo].[T_EndDate]
		   SET [CompanyCode] = H1.CompanyCode
			  ,[StoreId] = H1.StoreId
			  ,[Id] = H1.Id
			  ,[Date] = H1.Date
			  ,[Description] = H1.Description
			  ,[Remark] = H1.Remark
			  ,[Status] = H1.Status
			  --,[CreateOn] = H1.CreateOn
			  --,[CreateBy] = H1.CreateBy
			  ,[ModifiedOn] = H1.ModifiedOn
			  ,[ModifiedBy] = H1.ModifiedBy
			  ,[TotalSales] = H1.TotalSales
			  ,[TotalCount] = H1.TotalCount
			  ,[TotalCollected] = H1.TotalCollected
			  ,[TotalBalance] = H1.TotalBalance
			  ,[TaxTotal] = H1.TaxTotal
			  ,[DiscountTotal] = H1.DiscountTotal
			  ,[PaymentTotal] = H1.PaymentTotal
			  ,[LineItemCount] = H1.LineItemCount
			  ,[TaxCount] = H1.TaxCount
			  ,[DiscountCount] = H1.DiscountCount
			  ,[PaymentCount] = H1.PaymentCount
			  ,[AmtNotInBank] = H1.AmtNotInBank
		FROM @T_EndDate H1
		INNER JOIN #T_EndDate_U H2
			ON H1.Id = H2.Id AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H1.CompanyCode = [T_EndDate].CompanyCode AND H1.Id = [T_EndDate].Id AND H1.StoreId = [T_EndDate].StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

-- EndDate Line
		
		IF (SELECT COUNT(EndDateId) FROM @T_EndDateDetail) = 0
			BEGIN
				GOTO CONTI1
			END

		DELETE T_EndDateDetail WHERE EndDateId IN (SELECT EL.EndDateId FROM @T_EndDateDetail EL)


		-- insert new
		INSERT INTO [dbo].[T_EndDateDetail]
			([CompanyCode]
			,[StoreId]
			,[Id]
			,[EndDateId]
			,[LineId]
			,[ItemCode]
			,[UoMCode]
			,[Description]
			,[Barcode]
			,[Price]
			,[Quantity]
			,[LineTotal])
		SELECT L1.[CompanyCode]
			,L1.[StoreId]
			,L1.[Id]
			,L1.[EndDateId]
			,L1.[LineId]
			,L1.[ItemCode]
			,L1.[UoMCode]
			,L1.[Description]
			,L1.[Barcode]
			,L1.[Price]
			,L1.[Quantity]
			,L1.[LineTotal]
		FROM @T_EndDateDetail L1

		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI1:

-- EndDatePayment LineSerial

		IF (SELECT COUNT(EndDateId) FROM @T_EndDatePayment) = 0
			BEGIN
				GOTO CONTI2
			END

		DELETE T_EndDatePayment WHERE EndDateId IN (SELECT EP.EndDateId FROM @T_EndDatePayment EP)
		
		-- insert new
		INSERT INTO [dbo].[T_EndDatePayment]
			([CompanyCode]
			,[StoreId]
			,[EndDateId]
			,[Id]
			,[Currency]
			,[CounterId]
			,[LineId]
			,[PaymentCode]
			,[EOD_Code]
			,[Amount]
			,[FCAmount]
			,[CollectedAmount]
			,[Balance]
			,[ShiftId]
			,[FCCollectedAmount]
			,[ChangeAmt]
			,[BankInAmt]
			,[BankInBalance])
		SELECT L1.[CompanyCode]
			,L1.[StoreId]
			,L1.[EndDateId]
			,L1.[Id]
			,L1.[Currency]
			,L1.[CounterId]
			,L1.[LineId]
			,L1.[PaymentCode]
			,L1.[EOD_Code]
			,L1.[Amount]
			,L1.[FCAmount]
			,L1.[CollectedAmount]
			,L1.[Balance]
			,L1.[ShiftId]
			,L1.[FCCollectedAmount]
			,L1.[ChangeAmt]
			,L1.[BankInAmt]
			,L1.[BankInBalance]
		FROM @T_EndDatePayment L1
			IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI2:


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_EndShiftFromLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_EndShiftFromLocal]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_ShiftHeader T_ShiftHeaderType READONLY,
	@T_ShiftLine T_ShiftLineType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_ShiftHeader T_ShiftHeaderType
		--DECLARE @T_ShiftLine T_ShiftLineType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save End Of Shift successfully.' -- Error message
		DECLARE @RCount int = 0

--	SO header
		-- Get Data Header Insert
		SELECT H1.ShiftId, H1.CompanyCode, H1.StoreId INTO #T_ShiftHeader_I
		FROM @T_ShiftHeader H1
		LEFT JOIN T_ShiftHeader H2 
			ON H1.ShiftId = H2.ShiftId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H2.ShiftId IS NULL

		-- Get Data Header Update
		SELECT H1.ShiftId, H1.CompanyCode, H1.StoreId INTO #T_ShiftHeader_U
		FROM @T_ShiftHeader H1
		INNER JOIN T_ShiftHeader H2 
			ON H1.ShiftId = H2.ShiftId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId

		SELECT @RCount  = COUNT(*) from @T_ShiftHeader;
		
		-- Insert new EndOfShift Header
		INSERT INTO [dbo].[T_ShiftHeader]
			([ShiftId]
			,[CompanyCode]
			,[StoreId]
			,[DailyId]
			,[DeviceId]
			,[OpenAmt]
			,[EndAmt]
			,[ShiftTotal]
			,[CreatedOn]
			,[CreatedBy]
			,[ModifiedOn]
			,[ModifiedBy]
			,[Status]
			,[Id])
		SELECT H1.[ShiftId]
			,H1.[CompanyCode]
			,H1.[StoreId]
			,H1.[DailyId]
			,H1.[DeviceId]
			,H1.[OpenAmt]
			,H1.[EndAmt]
			,H1.[ShiftTotal]
			,H1.[CreatedOn]
			,H1.[CreatedBy]
			,H1.[ModifiedOn]
			,H1.[ModifiedBy]
			,H1.[Status]
			,H1.[Id]
		FROM @T_ShiftHeader H1
		INNER JOIN #T_ShiftHeader_I H2
			ON H1.ShiftId = H2.ShiftId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------
		--	Update EndOfDay Header
		UPDATE [dbo].[T_ShiftHeader]
			SET [ShiftId] = H1.ShiftId
				,[CompanyCode] = H1.CompanyCode
				,[StoreId] = H1.StoreId
				,[DailyId] = H1.DailyId
				,[DeviceId] = H1.DeviceId
				,[OpenAmt] = H1.OpenAmt
				,[EndAmt] = H1.EndAmt
				,[ShiftTotal] = H1.ShiftTotal
				--,[CreatedOn] = H1.CreatedOn
				--,[CreatedBy] = H1.CreatedBy
				,[ModifiedOn] = H1.ModifiedOn
				,[ModifiedBy] = H1.ModifiedBy
				,[Status] = H1.[Status]
				,[Id] = H1.Id
		FROM @T_ShiftHeader H1
		INNER JOIN #T_ShiftHeader_U H2
			ON H1.ShiftId = H2.ShiftId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H1.CompanyCode = [T_ShiftHeader].CompanyCode AND H1.ShiftId = [T_ShiftHeader].ShiftId AND H1.StoreId = [T_ShiftHeader].StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

-- EndDate Line
		
		IF (SELECT COUNT(ShiftId) FROM @T_ShiftLine) = 0
			BEGIN
				GOTO CONTI1
			END

		DELETE T_ShiftLine WHERE ShiftId IN (SELECT EL.ShiftId FROM @T_ShiftLine EL)


		-- insert new
		INSERT INTO [dbo].[T_ShiftLine]
			([ShiftId]
			,[CompanyCode]
			,[PaymentCode]
			,[Currency]
			,[CounterId]
			,[Value]
			,[FCValue]
			,[CreatedOn]
			,[CreatedBy]
			,[ModifiedOn]
			,[ModifiedBy]
			,[Status]
			,[CollectAmount]
			,[FCCollectedAmount]
			,[BankInAmt]
			,[CountedBalance]
			,[BankInBalance]
			,[Cashier]
			,[CustomF1]
			,[CustomF2]
			,[CustomF3]
			,[CustomF4]
			,[CustomF5])
		SELECT L1.[ShiftId]
			,L1.[CompanyCode]
			,L1.[PaymentCode]
			,L1.[Currency]
			,L1.[CounterId]
			,L1.[Value]
			,L1.[FCValue]
			,[CreatedOn]
			,[CreatedBy]
			,[ModifiedOn]
			,[ModifiedBy]
			,[Status]
			,[CollectAmount]
			,[FCCollectedAmount]
			,[BankInAmt]
			,[CountedBalance]
			,[BankInBalance]
			,[Cashier]
			,[CustomF1]
			,[CustomF2]
			,[CustomF3]
			,[CustomF4]
			,[CustomF5]
		FROM @T_ShiftLine L1

		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI1:

	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_PurchaseOrder]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_PurchaseOrder]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_PurchaseOrderHeader T_PurchaseOrderHeaderType READONLY,
	@T_PurchaseOrderLine T_PurchaseOrderLineType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_PurchaseOrderHeader T_PurchaseOrderHeaderType
		--DECLARE @T_PurchaseOrderLine T_PurchaseOrderLineType
		--DECLARE @T_PurchaseOrderLineSerial T_PurchaseOrderLineSerialType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save PurchaseOrder successfully.' -- Error message
		DECLARE @RCount int = 0

--	SO header
		
		-- Get Data Header Insert
		SELECT H1.PurchaseId, H1.CompanyCode, H1.StoreId, H1.DocEntry INTO #T_PurchaseOrderHeader_I
		FROM @T_PurchaseOrderHeader H1
		LEFT JOIN T_PurchaseOrderHeader H2 
			ON H1.DocEntry = H2.DocEntry AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H2.DocEntry IS NULL

		DECLARE @CompanyCode nvarchar(50) = (SELECT TOP 1 [CompanyCode] FROM #T_PurchaseOrderHeader_I);
		DECLARE @StoreId nvarchar(50) = (SELECT TOP 1 [StoreId] FROM #T_PurchaseOrderHeader_I);
		DECLARE @PurchaseId nvarchar(50) = '';

		IF (SELECT COUNT(PurchaseId) FROM #T_PurchaseOrderHeader_I) > 0 
			BEGIN
				SET @PurchaseId = dbo.fnc_AutoGenDocumentCode('PO', @CompanyCode, @StoreId);
				UPDATE #T_PurchaseOrderHeader_I SET PurchaseId = @PurchaseId

			END

		--DECLARE @PurchaseId nvarchar(50) = dbo.fnc_AutoGenDocumentCode('PO', @CompanyCode, @StoreId);

		-- Get Data Header Update
		SELECT H2.PurchaseId, H1.CompanyCode, H1.StoreId, H1.DocEntry INTO #T_PurchaseOrderHeader_U
		FROM @T_PurchaseOrderHeader H1
		INNER JOIN T_PurchaseOrderHeader H2 
			ON H1.DocEntry = H2.DocEntry AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId

		SELECT @RCount = COUNT(*) from @T_PurchaseOrderHeader;
		
		-- Insert new PurchaseOrder Header
		INSERT INTO [dbo].[T_PurchaseOrderHeader]
			   ([PurchaseId]
			   ,[CompanyCode]
			   ,[StoreId]
			   ,[StoreName]
			   ,[Status]--[DocStatus]
			   ,[DocDate]
			   ,[DocDueDate]
			   ,[CardCode]
			   ,[CardName]
			   ,[InvoiceAddress]
			   ,[TaxCode]
			   ,[VATTotal]
			   ,[DocTotal]
			   ,[Comment]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   --,[Status]
			   ,[IsCanceled]
			   ,[SyncDate]
			   ,[SyncSource]
			   ,[DocEntry]
			   ,[DataSource]
		   )
		SELECT H2.[PurchaseId]
			  ,H1.[CompanyCode]
			  ,H1.[StoreId]
			  ,H1.[StoreName]
			  ,H1.[DocStatus]
			  ,H1.[DocDate]
			  ,H1.[DocDueDate]
			  ,H1.[CardCode]
			  ,H1.[CardName]
			  ,H1.[InvoiceAddress]
			  ,H1.[TaxCode]
			  --,H1.[VATPercent]
			  ,H1.[VATTotal]
			  ,H1.[DocTotal]
			  ,H1.[Comment]
			  ,H1.[CreatedBy]
			  ,H1.[CreatedOn]
			  ,H1.[ModifiedBy]
			  ,H1.[ModifiedOn]
			  ,H1.[IsCanceled]
			  ,GETDATE()
			  ,@UserID
			  ,H1.[DocEntry]
			  ,H1.[DataSource]
		FROM @T_PurchaseOrderHeader H1
		INNER JOIN #T_PurchaseOrderHeader_I H2
			ON H1.DocEntry = H2.DocEntry AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		------
		--	Update PurchaseOrder Header
		UPDATE [dbo].[T_PurchaseOrderHeader]
		   --SET [PurchaseId] = H2.[PurchaseId]
			  --,[CompanyCode] = H1.[CompanyCode]
			  --,[StoreId] = H1.[StoreId]
			  SET [StoreName] = H1.[StoreName]
			  ,[Status] = H1.[DocStatus]
			  ,[DocDate] = H1.[DocDate]
			  ,[DocDueDate] = H1.[DocDueDate]
			  ,[CardCode] = H1.[CardCode]
			  ,[CardName] = H1.[CardName]
			  ,[InvoiceAddress] = H1.[InvoiceAddress]
			  ,[TaxCode] = H1.[TaxCode]
			  ,[VATTotal] = H1.[VATTotal]
			  ,[DocTotal] = H1.[DocTotal]
			  ,[Comment] = H1.[Comment]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = H1.[ModifiedBy]
			  ,[ModifiedOn] = H1.[ModifiedOn]
			  --,[Status] = <Status, char(1),>
			  ,[IsCanceled] = H1.[IsCanceled]
			  ,[SyncDate] = GETDATE()
			  ,[SyncSource] = @UserID
			  ,[DataSource] = H1.[DataSource]
		FROM @T_PurchaseOrderHeader H1
		INNER JOIN #T_PurchaseOrderHeader_U H2
			ON H1.DocEntry = H2.DocEntry AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H1.CompanyCode = [T_PurchaseOrderHeader].CompanyCode AND H1.DocEntry = [T_PurchaseOrderHeader].DocEntry AND H1.StoreId = [T_PurchaseOrderHeader].StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

-- PurchaseOrder Line
		
		IF @PurchaseId = ''
			BEGIN
				SET @PurchaseId = (SELECT TOP 1 PurchaseId FROM #T_PurchaseOrderHeader_U)
			END

		SELECT * INTO #T_PurchaseOrderLine_Temp
		FROM @T_PurchaseOrderLine

		UPDATE #T_PurchaseOrderLine_Temp SET PurchaseId = @PurchaseId

	-- Get Data Header Insert
		SELECT L1.PurchaseId, L1.CompanyCode, L1.ItemCode, L1.LineId, L1.SLocId INTO #T_PurchaseOrderLine_I
		FROM #T_PurchaseOrderLine_Temp L1
		LEFT JOIN T_PurchaseOrderLine L2 
			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SLocId = L2.SLocId
		WHERE L2.PurchaseId IS NULL

		-- Get Data Header Update
		SELECT L1.PurchaseId, L1.CompanyCode, L1.ItemCode, L1.LineId, L1.SLocId INTO #T_PurchaseOrderLine_U
		FROM #T_PurchaseOrderLine_Temp L1
		INNER JOIN T_PurchaseOrderLine L2 
			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SLocId = L2.SLocId

		-- insert new
		INSERT INTO [dbo].[T_PurchaseOrderLine]
			   ([PurchaseId]
			   ,[CompanyCode]
			   ,[LineId]
			   ,[ItemCode]
			   ,[SLocId]
			   ,[BarCode]
			   ,[Description]
			   ,[UOMCode]
			   ,[Quantity]
			   ,[OpenQty]
			   ,[Price]
			   ,[BaseSAPId]
			   ,[BaseSAPLine]
			   ,[LineStatus]
			   ,[DiscPercent]
			   ,[VATPercent]
			   ,[LineTotal]
			   ,[Comment]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			)
		SELECT L1.[PurchaseId]
			  ,L1.[CompanyCode]
			  ,L1.[LineId]
			  ,L1.[ItemCode]
			  ,L1.[SLocId]
			  ,L1.[BarCode]
			  ,L1.[Description]
			  ,L1.[UOMCode]
			  ,L1.[Quantity]
			  ,L1.[OpenQty]
			  ,L1.[Price]
			  ,L1.[BaseEntry]
			  ,L1.[BaseLine]
			  --,L1.[BaseRef]
			  --,L1.[BaseType]
			  ,L1.[LineStatus]
			  ,L1.[DiscPercent]
			  ,L1.[VATPercent]
			  ,L1.[LineTotal]
			  ,L1.[Comment]
			  ,L1.[CreatedBy]
			  ,L1.[CreatedOn]
			  ,L1.[ModifiedBy]
			  ,L1.[ModifiedOn]
			  ,L1.[Status]
		FROM #T_PurchaseOrderLine_Temp L1
		INNER JOIN #T_PurchaseOrderLine_I L2
			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SLocId = L2.SLocId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		--	Update PurchaseOrder Line
		UPDATE [dbo].[T_PurchaseOrderLine]
		   SET [PurchaseId] = L1.[PurchaseId]
			  ,[CompanyCode] = L1.[CompanyCode]
			  ,[LineId] = L1.[LineId]
			  ,[ItemCode] = L1.[ItemCode]
			  ,[SLocId] = L1.[SLocId]
			  ,[BarCode] = L1.[BarCode]
			  ,[Description] = L1.[Description]
			  ,[UOMCode] = L1.[UOMCode]
			  ,[Quantity] = L1.[Quantity]
			  ,[OpenQty] = L1.[OpenQty]
			  ,[Price] = L1.[Price]
			  ,[BaseSAPId] = L1.[BaseEntry]
			  ,[BaseSAPLine] = L1.[BaseLine]
			  ,[LineStatus] = L1.[LineStatus]
			  ,[DiscPercent] = L1.[DiscPercent]
			  ,[VATPercent] = L1.[VATPercent]
			  ,[LineTotal] = L1.[LineTotal]
			  ,[Comment] = L1.[Comment]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = L1.[ModifiedBy]
			  ,[ModifiedOn] = L1.[ModifiedOn]
			  ,[Status] = L1.[Status]
		FROM #T_PurchaseOrderLine_Temp L1
		INNER JOIN #T_PurchaseOrderLine_U L2
			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SLocId = L2.SLocId
		WHERE L1.PurchaseId = T_PurchaseOrderLine.PurchaseId AND L1.CompanyCode = T_PurchaseOrderLine.CompanyCode AND L1.LineId = T_PurchaseOrderLine.LineId AND L1.ItemCode = T_PurchaseOrderLine.ItemCode
			 AND L1.SLocId = T_PurchaseOrderLine.SLocId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

---- PurchaseOrder LineSerial

--		IF (SELECT COUNT(PurchaseId) FROM @T_PurchaseOrderLineSerial) = 0
--			BEGIN
--				GOTO CONTI
--			END
		
--	-- Get Data Header Insert
--		SELECT L1.PurchaseId, L1.CompanyCode, L1.ItemCode, L1.LineId, L1.SLocId INTO #T_PurchaseOrderLineSerial_I
--		FROM @T_PurchaseOrderLineSerial L1
--		LEFT JOIN T_PurchaseOrderLineSerial L2 
--			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SerialNum = L2.SerialNum AND L1.SLocId = L2.SLocId
--		WHERE L2.PurchaseId IS NULL

--		-- Get Data Header Update
--		SELECT L1.PurchaseId, L1.CompanyCode, L1.ItemCode, L1.LineId, L1.FrSLocId, L1.ToSLocId INTO #T_PurchaseOrderLineSerial_U
--		FROM @T_PurchaseOrderLineSerial L1
--		INNER JOIN T_PurchaseOrderLineSerial L2 
--			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SerialNum = L2.SerialNum AND L1.SLocId = L2.SLocId

--		-- insert new
--		INSERT INTO [dbo].[T_PurchaseOrderLineSerial]
--			   ([PurchaseId]
--			   ,[LineId]
--			   ,[CompanyCode]
--			   ,[ItemCode]
--			   ,[SerialNum]
--			   ,[SLocId]
--			   ,[Quantity]
--			   ,[UOMCode]
--			   ,[CreatedBy]
--			   ,[CreatedOn]
--			   ,[ModifiedBy]
--			   ,[ModifiedOn]
--			   ,[OpenQty]
--			   ,[BaseLine]
--			   ,[BaseTransId]
--			   ,[ItemName]
--			   ,[Description]
--			)
--		SELECT L1.[PurchaseId]
--			  ,L1.[LineId]
--			  ,L1.[CompanyCode]
--			  ,L1.[ItemCode]
--			  ,L1.[SerialNum]
--			  ,L1.[SLocId]
--			  ,L1.[Quantity]
--			  ,L1.[UOMCode]
--			  ,L1.[CreatedBy]
--			  ,L1.[CreatedOn]
--			  ,L1.[ModifiedBy]
--			  ,L1.[ModifiedOn]
--		FROM @T_PurchaseOrderLineSerial L1
--		INNER JOIN #T_PurchaseOrderLineSerial_I L2
--			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SerialNum = L2.SerialNum AND L1.SLocId = L2.SLocId
--		IF @@ERROR <> 0 
--			BEGIN
--				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
--				GOTO HANDLE_ERROR --> Roll back when execute failed ...
--			END
--		------

--		--	Update PurchaseOrder LineSerial
--		UPDATE [dbo].[T_PurchaseOrderLineSerial]
--		   SET [PurchaseId] = L1.[PurchaseId]
--			  ,[LineId] = L1.[LineId]
--			  ,[CompanyCode] = L1.[CompanyCode]
--			  ,[ItemCode] = L1.[ItemCode]
--			  ,[SerialNum] = L1.[SerialNum]
--			  ,[FrSLocId] = L1.[FrSLocId]
--			  ,[ToSlocId] = L1.[ToSlocId]
--			  ,[Quantity] = L1.[Quantity]
--			  ,[UOMCode] = L1.[UOMCode]
--			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
--			  --,[CreatedOn] = <CreatedOn, datetime,>
--			  ,[ModifiedBy] = L1.[ModifiedBy]
--			  ,[ModifiedOn] = L1.[ModifiedOn]
--			  ,[Status] = L1.[Status]
--		FROM @T_PurchaseOrderLineSerial L1
--		INNER JOIN #T_PurchaseOrderLineSerial_U L2
--			ON L1.PurchaseId = L2.PurchaseId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SerialNum = L2.SerialNum AND L1.SLocId = L2.SLocId
--		WHERE L1.PurchaseId = [T_PurchaseOrderLineSerial].PurchaseId AND L1.LineId = [T_PurchaseOrderLineSerial].LineId AND L1.CompanyCode = [T_PurchaseOrderLineSerial].CompanyCode 
--			AND L1.ItemCode = [T_PurchaseOrderLineSerial].ItemCode AND L1.SerialNum = [T_PurchaseOrderLineSerial].SerialNum 
--			AND L1.SLocId = [T_PurchaseOrderLineSerial].SLocId
--		IF @@ERROR <> 0 
--			BEGIN
--				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
--				GOTO HANDLE_ERROR --> Roll back when execute failed ...
--			END
--		------
	
--		CONTI:

	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_SalesOrdersFromLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_SalesOrdersFromLocal]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_SalesHeader T_SalesHeaderTableType READONLY,
	@T_SalesLine T_SalesLineTableType READONLY,
	@T_SalesLineSerial T_SalesLineSerialTableType READONLY,
	@T_SalesPayment T_SalesPaymentTableType READONLY,
	@T_SalesPromo T_SalesPromoTableType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_SalesHeader T_SalesHeaderTableType
		--DECLARE @T_SalesLine T_SalesLineTableType
		--DECLARE @T_SalesLineSerial T_SalesLineSerialTableType
		--DECLARE @T_InvoiceAllocation T_InvoiceAllocationType
		--DECLARE @T_InvoiceHeader T_InvoiceHeaderType
		--DECLARE @T_InvoiceLine T_InvoiceLineType
		--DECLARE @T_SalesPayment T_SalesPaymentTableType
		--DECLARE @T_SalesInvoice T_SalesInvoiceType
		--DECLARE @T_SalesPromo T_SalesPromoType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save SO successfully.' -- Error message
		DECLARE @RCount int = 0

--	SO header
		-- Get Data Header Insert
		SELECT H1.TransId, H1.CompanyCode, H1.StoreId INTO #T_SalesHeader_I
		FROM @T_SalesHeader H1
		LEFT JOIN T_SalesHeader H2 
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H2.TransId IS NULL

		-- Get Data Header Update
		SELECT H1.TransId, H1.CompanyCode, H1.StoreId INTO #T_SalesHeader_U
		FROM @T_SalesHeader H1
		INNER JOIN T_SalesHeader H2 
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId

		SELECT @RCount  = COUNT(*) from @T_SalesHeader;
		
		-- Insert new SO Header
		INSERT INTO [dbo].[T_SalesHeader]
			   ([TransId]
			   ,[CompanyCode]
			   ,[StoreId]
			   ,[ContractNo]
			   ,[StoreName]
			   ,[ShiftId]
			   ,[CusId]
			   ,[CusIdentifier]
			   ,[CusGrpId]
			   ,[TotalAmount]
			   ,[TotalPayable]
			   ,[TotalDiscountAmt]
			   ,[TotalReceipt]
			   ,[AmountChange]
			   ,[PaymentDiscount]
			   ,[TotalTax]
			   ,[DiscountType]
			   ,[DiscountAmount]
			   ,[DiscountRate]
			   ,[CreatedOn]
			   ,[CreatedBy]
			   ,[ModifiedOn]
			   ,[ModifiedBy]
			   ,[Status]
			   ,[IsCanceled]
			   ,[Remarks]
			   ,[SalesPerson]
			   ,[SalesPersonName]
			   ,[SalesMode]
			   ,[SalesType]
			   ,[RefTransId]
			   ,[ManualDiscount]
			   ,[DataSource]
			   ,[POSType]
			   ,[SyncMWIStatus]
			   ,[SyncMWIDate]
			   ,[SyncMWIMsg]
			   ,[EInvoice]
			   ,[SyncJAStatus]
			   ,[SyncJADate]
			   ,[SyncJAMsg]
			   ,[Phone]
			   ,[CusName]
			   ,[CusAddress]
			   ,[Reason]
			   ,[CollectedStatus]
			   ,[OMSId]
			   ,[Chanel]
			   ,[StartTime]
			   ,[TerminalId]
			   ,[RoundingOff]
			   ,[ShortOrderID]
			   ,[MerchantId]
			   ,[OMSStatus]
			   ,[PromoId]
			   ,[ApprovalId]
			   ,[RewardPoints]
			   ,[ExpiryDate]
			   ,[DocDate]
			   ,[CustomF1]
			   ,[CustomF2]
			   ,[CustomF3]
			   ,[CustomF4]
			   ,[CustomF5]
			   ,[LuckyNo]
			   ,[OrderId]
		   )
		SELECT H1.[TransId]
			  ,H1.[CompanyCode]
			  ,H1.[StoreId]
			  ,H1.[ContractNo]
			  ,H1.[StoreName]
			  ,H1.[ShiftId]
			  ,H1.[CusId]
			  ,H1.[CusIdentifier]
			  ,H1.[CusGrpId]
			  ,H1.[TotalAmount]
			  ,H1.[TotalPayable]
			  ,H1.[TotalDiscountAmt]
			  ,H1.[TotalReceipt]
			  ,H1.[AmountChange]
			  ,H1.[PaymentDiscount]
			  ,H1.[TotalTax]
			  ,H1.[DiscountType]
			  ,H1.[DiscountAmount]
			  ,H1.[DiscountRate]
			  ,H1.[CreatedOn]
			  ,H1.[CreatedBy]
			  ,H1.[ModifiedOn]
			  ,H1.[ModifiedBy]
			  ,H1.[Status]
			  ,H1.[IsCanceled]
			  ,H1.[Remarks]
			  ,H1.[SalesPerson]
			  ,H1.[SalesPersonName]
			  ,H1.[SalesMode]
			  ,H1.[SalesType]
			  ,H1.[RefTransId]
			  ,H1.[ManualDiscount]
			  ,H1.[DataSource]
			  ,H1.[POSType]
			  ,H1.[SyncMWIStatus]
			  ,H1.[SyncMWIDate]
			  ,H1.[SyncMWIMsg]
			  ,H1.[EInvoice]
			  ,H1.[SyncJAStatus]
			  ,H1.[SyncJADate]
			  ,H1.[SyncJAMsg]
			  ,H1.[Phone]
			  ,H1.[CusName]
			  ,H1.[CusAddress]
			  ,H1.[Reason]
			  ,H1.[CollectedStatus]
			  ,H1.[OMSId]
			  ,H1.[Chanel]
			  ,H1.[StartTime]
			  ,H1.[TerminalId]
			  ,H1.[RoundingOff]
			  ,H1.[ShortOrderID]
			  ,H1.[MerchantId]
			  ,H1.[OMSStatus]
			  ,H1.[PromoId]
			  ,H1.[ApprovalId]
			  ,H1.[RewardPoints]
			  ,H1.[ExpiryDate]
			  ,H1.[DocDate]
			  ,H1.[CustomF1]
			  ,H1.[CustomF2]
			  ,H1.[CustomF3]
			  ,H1.[CustomF4]
			  ,H1.[CustomF5]
			  ,H1.[LuckyNo]
			  ,H1.[OrderId]
		FROM @T_SalesHeader H1
		INNER JOIN #T_SalesHeader_I H2
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------
		--	Update SO Header
		UPDATE [dbo].[T_SalesHeader]
		   SET [TransId] = H1.TransId
			  ,[CompanyCode] = H1.CompanyCode
			  ,[StoreId] = H1.StoreId
			  ,[ContractNo] = H1.ContractNo
			  ,[StoreName] = H1.StoreName
			  ,[ShiftId] = H1.ShiftId
			  ,[CusId] = H1.CusId
			  ,[CusIdentifier] = H1.CusIdentifier
			  ,[CusGrpId] = H1.CusGrpId
			  ,[TotalAmount] = H1.TotalAmount
			  ,[TotalPayable] = H1.TotalPayable
			  ,[TotalDiscountAmt] = H1.TotalDiscountAmt
			  ,[TotalReceipt] = H1.TotalReceipt
			  ,[AmountChange] = H1.AmountChange
			  ,[PaymentDiscount] = H1.PaymentDiscount
			  ,[TotalTax] = H1.TotalTax
			  ,[DiscountType] = H1.DiscountType
			  ,[DiscountAmount] = H1.DiscountAmount
			  ,[DiscountRate] = H1.DiscountRate
			  ,[CreatedOn] = H1.CreatedOn
			  ,[CreatedBy] = H1.CreatedBy
			  ,[ModifiedOn] = H1.ModifiedOn
			  ,[ModifiedBy] = H1.ModifiedBy
			  ,[Status] = H1.[Status]
			  ,[IsCanceled] = H1.IsCanceled
			  ,[Remarks] = H1.Remarks
			  ,[SalesPerson] = H1.SalesPerson
			  ,[SalesPersonName] = H1.SalesPersonName
			  ,[SalesMode] = H1.SalesMode
			  ,[SalesType] = H1.SalesType
			  ,[RefTransId] = H1.RefTransId
			  ,[ManualDiscount] = H1.ManualDiscount
			  ,[DataSource] = H1.DataSource
			  ,[POSType] = H1.POSType
			  ,[SyncMWIStatus] = H1.SyncMWIStatus
			  ,[SyncMWIDate] = H1.SyncMWIDate
			  ,[SyncMWIMsg] = H1.SyncMWIMsg
			  ,[EInvoice] = H1.EInvoice
			  ,[SyncJAStatus] = H1.SyncJAStatus
			  ,[SyncJADate] = H1.SyncJADate
			  ,[SyncJAMsg] = H1.SyncJAMsg
			  ,[Phone] = H1.Phone
			  ,[CusName] = H1.CusName
			  ,[CusAddress] = H1.CusAddress
			  ,[Reason] = H1.Reason
			  ,[CollectedStatus] = H1.CollectedStatus
			  ,[OMSId] = H1.OMSId
			  ,[Chanel] = H1.Chanel
			  ,[StartTime] = H1.StartTime
			  ,[TerminalId] = H1.TerminalId
			  ,[RoundingOff] = H1.RoundingOff
			  ,[ShortOrderID] = H1.ShortOrderID
			  ,[MerchantId] = H1.MerchantId
			  ,[OMSStatus] = H1.OMSStatus
			  ,[PromoId] = H1.PromoId
			  ,[ApprovalId] = H1.ApprovalId
			  ,[RewardPoints] = H1.RewardPoints
			  ,[ExpiryDate] = H1.ExpiryDate
			  ,[DocDate] = H1.DocDate
			  ,[CustomF1] = H1.CustomF1
			  ,[CustomF2] = H1.CustomF2
			  ,[CustomF3] = H1.CustomF3
			  ,[CustomF4] = H1.CustomF4
			  ,[CustomF5] = H1.CustomF5
			  ,[LuckyNo] = H1.LuckyNo
			  ,[OrderId] = H1.OrderId
		FROM @T_SalesHeader H1
		INNER JOIN #T_SalesHeader_U H2
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.StoreId = H2.StoreId
		WHERE H1.TransId = [T_SalesHeader].TransId AND H1.CompanyCode = [T_SalesHeader].CompanyCode AND H1.StoreId = [T_SalesHeader].StoreId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

-- SO Line
		
		DELETE T_SalesLine WHERE TransId IN (SELECT IL.TransId FROM @T_SalesHeader IL)

		IF (SELECT COUNT(TransId) FROM @T_SalesLine) = 0
			BEGIN
				GOTO CONTI1
			END

		-- insert new
		INSERT INTO [dbo].[T_SalesLine]
			   ([TransId]
			   ,[LineId]
			   ,[CompanyCode]
			   ,[ItemCode]
			   ,[SLocId]
			   ,[BarCode]
			   ,[UOMCode]
			   ,[Quantity]
			   ,[Price]
			   ,[LineTotal]
			   ,[DiscountType]
			   ,[DiscountAmt]
			   ,[DiscountRate]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[Remark]
			   ,[PromoId]
			   ,[PromoType]
			   ,[PromoPercent]
			   ,[PromoBaseItem]
			   ,[SalesMode]
			   ,[TaxRate]
			   ,[TaxAmt]
			   ,[TaxCode]
			   ,[MinDepositAmt]
			   ,[MinDepositPercent]
			   ,[DeliveryType]
			   ,[POSService]
			   ,[StoreAreaId]
			   ,[TimeFrameId]
			   ,[Duration]
			   ,[AppointmentDate]
			   ,[BomID]
			   ,[PromoPrice]
			   ,[PromoLineTotal]
			   ,[BaseLine]
			   ,[BaseTransId]
			   ,[OpenQty]
			   ,[PromoDisAmt]
			   ,[IsPromo]
			   ,[IsSerial]
			   ,[IsVoucher]
			   ,[PrepaidCardNo]
			   ,[MemberDate]
			   ,[MemberValue]
			   ,[StartDate]
			   ,[EndDate]
			   ,[ItemType]
			   ,[Description]
			   ,[LineTotalBefDis]
			   ,[LineTotalDisIncludeHeader]
			   ,[SerialNum]
			   ,[Name]
			   ,[Phone]
			   ,[ItemTypeS4]
			   ,[Custom1]
			   ,[Custom2]
			   ,[Custom3]
			   ,[Custom4]
			   ,[Custom5]
			   ,[PriceListId]
			   ,[ProductId]
			   ,[WeightScaleBarcode]
			   ,[StoreId]
			   ,[BookletNo])
		SELECT L1.[TransId]
			   ,L1.[LineId]
			   ,L1.[CompanyCode]
			   ,L1.[ItemCode]
			   ,L1.[SLocId]
			   ,L1.[BarCode]
			   ,L1.[UOMCode]
			   ,L1.[Quantity]
			   ,L1.[Price]
			   ,L1.[LineTotal]
			   ,L1.[DiscountType]
			   ,L1.[DiscountAmt]
			   ,L1.[DiscountRate]
			   ,L1.[CreatedBy]
			   ,L1.[CreatedOn]
			   ,L1.[ModifiedBy]
			   ,L1.[ModifiedOn]
			   ,L1.[Status]
			   ,L1.[Remark]
			   ,L1.[PromoId]
			   ,L1.[PromoType]
			   ,L1.[PromoPercent]
			   ,L1.[PromoBaseItem]
			   ,L1.[SalesMode]
			   ,L1.[TaxRate]
			   ,L1.[TaxAmt]
			   ,L1.[TaxCode]
			   ,L1.[MinDepositAmt]
			   ,L1.[MinDepositPercent]
			   ,L1.[DeliveryType]
			   ,L1.[POSService]
			   ,L1.[StoreAreaId]
			   ,L1.[TimeFrameId]
			   ,L1.[Duration]
			   ,L1.[AppointmentDate]
			   ,L1.[BomID]
			   ,L1.[PromoPrice]
			   ,L1.[PromoLineTotal]
			   ,L1.[BaseLine]
			   ,L1.[BaseTransId]
			   ,L1.[OpenQty]
			   ,L1.[PromoDisAmt]
			   ,L1.[IsPromo]
			   ,L1.[IsSerial]
			   ,L1.[IsVoucher]
			   ,L1.[PrepaidCardNo]
			   ,L1.[MemberDate]
			   ,L1.[MemberValue]
			   ,L1.[StartDate]
			   ,L1.[EndDate]
			   ,L1.[ItemType]
			   ,L1.[Description]
			   ,L1.[LineTotalBefDis]
			   ,L1.[LineTotalDisIncludeHeader]
			   ,L1.[SerialNum]
			   ,L1.[Name]
			   ,L1.[Phone]
			   ,L1.[ItemTypeS4]
			   ,L1.[Custom1]
			   ,L1.[Custom2]
			   ,L1.[Custom3]
			   ,L1.[Custom4]
			   ,L1.[Custom5]
			   ,L1.[PriceListId]
			   ,L1.[ProductId]
			   ,L1.[WeightScaleBarcode]
			   ,L1.[StoreId]
			   ,L1.[BookletNo]
		FROM @T_SalesLine L1
		--INNER JOIN #T_SalesLine_I L2
		--	ON L1.TransId = L2.TransId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.LineSequence = L2.LineSequence
		INNER JOIN @T_SalesHeader H2 ON L1.TransId = H2.TransId AND L1.CompanyCode = H2.CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		--	Update SO Line
		--UPDATE [dbo].[T_SalesLines]
		--   SET [POSTransId] = L1.TransId
		--	  ,[CompanyCode] = L1.CompanyCode
		--	  ,[StoreId] = H2.StoreId
		--	  ,[LineId] = L1.LineId
		--	  ,[LineStatus] = L1.[Status]
		--	  ,[ItemCode] = L1.ItemCode
		--	  ,[UOMCode] = L1.UOMCode
		--	  ,[BarCode] = L1.BarCode
		--	  ,[Quantity] = L1.Quantity
		--	  ,[OpenQty] = L1.OpenQty
		--	  ,[Price] = L1.Price
		--	  ,[WhsCode] = L1.WhsCode
		--	  ,[DiscPrcnt] = L1.[DiscountRate]
		--	  ,[DiscSum] = L1.[DiscountAmt]
		--	  ,[TaxCode] = L1.[TaxCode]
		--	  ,[TaxRate] = L1.[TaxRate]
		--	  ,[TaxAmt] = L1.[TaxAmt]
		--	  ,[Remark] = L1.[Remark]
		--	  ,[PromoId] = L1.[PromoId]
		--	  ,[PromoType] = L1.[PromoType]
		--	  ,[LineTotal] = L1.[LineTotal]
		--	  ,[ItemType] = L1.[ItemType]
		--	  ,[BaseLine] = L1.[BaseLine]
		--	  ,[BaseTransId] = L1.[BaseTransId]
		--	  ,[SyncDate] = GETDATE()
		--	  ,[SyncSource] = @UserID
		--	  ,[LineSequence] = L1.[LineSequence]
		--FROM @T_SalesLine L1
		--INNER JOIN #T_SalesLine_U L2
		--	ON L1.TransId = L2.TransId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.LineSequence = L2.LineSequence
		--LEFT JOIN @T_SalesHeader H2 ON L1.TransId = H2.TransId AND L1.CompanyCode = H2.CompanyCode
		--WHERE L1.TransId = [T_SalesLines].POSTransId AND L1.CompanyCode = [T_SalesLines].CompanyCode AND L1.ItemCode = [T_SalesLines].ItemCode AND L1.LineId = [T_SalesLines].LineId AND L1.LineSequence = [T_SalesLines].LineSequence
		--IF @@ERROR <> 0 
		--	BEGIN
		--		SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
		--		GOTO HANDLE_ERROR --> Roll back when execute failed ...
		--	END
		--------

		CONTI1:

-- SO LineSerial

		DELETE T_SalesLineSerial WHERE TransId IN (SELECT IL.TransId FROM @T_SalesHeader IL)

		IF (SELECT COUNT(TransId) FROM @T_SalesLineSerial) = 0
			BEGIN
				GOTO CONTI2
			END
		
	---- Get Data LineSerial Insert
	--	SELECT L1.TransId, L1.CompanyCode, L1.ItemCode, L1.LineId, L1.SLocId, L1.SerialNum INTO #T_SalesLineSerial_I
	--	FROM @T_SalesLineSerial L1
	--	LEFT JOIN T_SalesLineSerial L2 
	--		ON L1.TransId = L2.TransId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SerialNum = L2.SerialNum
	--	WHERE L2.TransId IS NULL

	--	-- Get Data LineSerial Update
	--	SELECT L1.TransId, L1.CompanyCode, L1.ItemCode, L1.LineId, L1.SLocId, L1.SerialNum INTO #T_SalesLineSerial_U
	--	FROM @T_SalesLineSerial L1
	--	INNER JOIN T_SalesLineSerial L2 
	--		ON L1.TransId = L2.TransId AND L1.CompanyCode = L2.CompanyCode AND L1.ItemCode = L2.ItemCode AND L1.LineId = L2.LineId AND L1.SerialNum = L2.SerialNum

		-- insert new
		INSERT INTO [dbo].[T_SalesLineSerial]
			   ([TransId]
			   ,[LineId]
			   ,[CompanyCode]
			   ,[ItemCode]
			   ,[SerialNum]
			   ,[SLocId]
			   ,[Quantity]
			   ,[UOMCode]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[OpenQty]
			   ,[BaseLine]
			   ,[BaseTransId]
			   ,[LineNum]
			   ,[Description]
			   ,[Phone]
			   ,[Name]
			   ,[CustomF1]
			   ,[CustomF2]
			   ,[Prefix]
			   ,[ExpDate]
			   ,[StoreId]
			   ,[CustomF3]
			   ,[CustomF4]
			   ,[CustomF5])
		SELECT L1.[TransId]
			   ,L1.[LineId]
			   ,L1.[CompanyCode]
			   ,L1.[ItemCode]
			   ,L1.[SerialNum]
			   ,L1.[SLocId]
			   ,L1.[Quantity]
			   ,L1.[UOMCode]
			   ,L1.[CreatedBy]
			   ,L1.[CreatedOn]
			   ,L1.[ModifiedBy]
			   ,L1.[ModifiedOn]
			   ,L1.[Status]
			   ,L1.[OpenQty]
			   ,L1.[BaseLine]
			   ,L1.[BaseTransId]
			   ,L1.[LineNum]
			   ,L1.[Description]
			   ,L1.[Phone]
			   ,L1.[Name]
			   ,L1.[CustomF1]
			   ,L1.[CustomF2]
			   ,L1.[Prefix]
			   ,L1.[ExpDate]
			   ,L1.[StoreId]
			   ,L1.[CustomF3]
			   ,L1.[CustomF4]
			   ,L1.[CustomF5]
		FROM @T_SalesLineSerial L1
		INNER JOIN @T_SalesHeader H2 ON L1.TransId = H2.TransId AND L1.CompanyCode = H2.CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

	
		CONTI2:

------ Invoice Allocate

----		IF (SELECT COUNT(POSTransId) FROM @T_InvoiceAllocation) = 0
----			BEGIN
----				GOTO CONTI2
----			END
		
----	-- Get Data LineSerial Insert
----		DELETE T_InvoiceAllocation WHERE POSTransId IN (SELECT IA.POSTransId FROM @T_InvoiceAllocation IA)

----		-- insert new
----		INSERT INTO [dbo].[T_InvoiceAllocation]
----			([POSTransId]
----			,[CompanyCode]
----			,[StoreId]
----			,[DocEntry]
----			,[ContractNo]
----			,[DocStatus]
----			,[DocDate]
----			,[CardCode]
----			,[CardName]
----			,[DocCur]
----			,[DocRate]
----			,[DiscPrcnt]
----			,[DiscSum]
----			,[VatGroup]
----			,[VatPrcnt]
----			,[VatSum]
----			,[DocTotal]
----			,[Remarks]
----			--,[SAPSyncStatus]
----			--,[SAPSyncMsg]
----			--,[SAPSyncEntry]
----			,[CreatedBy]
----			,[CreatedOn]
----			,[ModifiedBy]
----			,[ModifiedOn]
----			,[IsCanceled]
----			,[POSType]
----			,[AllocationType]
----			,[SyncDate]
----			,[SyncSource]
----			)
----		SELECT [POSTransId]
----			,[CompanyCode]
----			,[StoreId]
----			,[DocEntry]
----			,[ContractNo]
----			,[DocStatus]
----			,[DocDate]
----			,[CardCode]
----			,[CardName]
----			,[DocCur]
----			,[DocRate]
----			,[DiscPrcnt]
----			,[DiscSum]
----			,[VatGroup]
----			,[VatPrcnt]
----			,[VatSum]
----			,[DocTotal]
----			,[Remarks]
----			--,[SAPSyncStatus]
----			--,[SAPSyncMsg]
----			--,[SAPSyncEntry]
----			,[CreatedBy]
----			,[CreatedOn]
----			,[ModifiedBy]
----			,[ModifiedOn]
----			,[IsCanceled]
----			,[POSType]
----			,[AllocationType]
----			,GETDATE()
----			,@UserID
----		FROM @T_InvoiceAllocation H1
----		IF @@ERROR <> 0 
----			BEGIN
----				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
----				GOTO HANDLE_ERROR --> Roll back when execute failed ...
----			END
----		------
	
----		CONTI2:

-------- insert Invoice
----		IF (SELECT COUNT(TransId) FROM @T_InvoiceHeader) = 0
----			BEGIN
----				GOTO CONTI3
----			END

----		DELETE T_InvoiceHeader WHERE POSTransId IN (SELECT I1.TransId FROM @T_InvoiceHeader I1)
----		DELETE T_InvoiceLines WHERE POSTransId IN (SELECT I2.TransId FROM @T_InvoiceLine I2)

----		-- Insert new Invoice Header
----		INSERT INTO [dbo].[T_InvoiceHeader]
----           ([POSTransId]
----           ,[CompanyCode]
----           ,[StoreId]
----           ,[ContractNo]
----           --,[DocEntry]
----           ,[DocStatus]
----           ,[CardCode]
----           ,[CardName]
----           ,[DocCur]
----           ,[DocRate]
----           ,[DiscPrcnt]
----           ,[DiscSum]
----           ,[VatSum]
----           ,[DocTotal]
----           ,[IsCanceled]
----           ,[Remarks]
----		   ,[SalesMode]
----           --,[DocType]
----           --,[SAPSyncStatus]
----           --,[SAPSyncMsg]
----           --,[SAPSyncEntry]
----           ,[CreatedBy]
----           ,[CreatedOn]
----		   ,[ModifiedBy]
----           ,[ModifiedOn]
----           ,[SyncSource]
----           ,[SyncDate]
----		   )
----		SELECT H1.TransId
----           ,H1.CompanyCode
----           ,H1.StoreId
----           ,H1.ContractNo
----           --,<DocEntry, nvarchar(50),>
----           ,H1.[Status]
----           ,H1.CusId
----           ,H1.CusName
----           ,'VND'
----           ,1
----           ,H1.DiscountRate
----           ,H1.DiscountAmount
----           ,H1.TotalTax
----           ,H1.TotalPayable
----           ,H1.IsCanceled
----           ,H1.Remarks
----		   ,H1.SalesMode
----           --,<DocType, nvarchar(50),>
----           --,<SAPSyncStatus, nvarchar(50),>
----           --,<SAPSyncMsg, nvarchar(250),>
----           --,<SAPSyncEntry, int,>
----           ,H1.[CreatedBy]
----           ,H1.[CreatedOn]
----		   ,H1.[ModifiedBy]
----           ,H1.[ModifiedOn]
----		   ,@UserID
----           ,GETDATE()

----		FROM @T_InvoiceHeader H1
----		IF @@ERROR <> 0 
----			BEGIN
----				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
----				GOTO HANDLE_ERROR --> Roll back when execute failed ...
----			END

----	----
----		INSERT INTO [dbo].[T_InvoiceLines]
----			([POSTransId]
----			,[CompanyCode]
----			,[StoreId]
----			,[LineId]
----			,[LineStatus]
----			,[ItemCode]
----			,[UOMCode]
----			,[BarCode]
----			,[Quantity]
----			--,[OpenQty]
----			,[Price]
----			,[WhsCode]
----			,[DiscPrcnt]
----			,[DiscSum]
----			,[TaxCode]
----			,[TaxRate]
----			,[TaxAmt]
----			,[Remark]
----			,[PromoId]
----			,[PromoType]
----			,[LineTotal]
----			--,[SAPSyncStatus]
----			--,[SAPSyncMsg]
----			--,[SAPSyncEntry]
----			,[BaseLine]
----			,[BaseTransId]
----			,[SyncSource]
----			,[SyncDate]
----			)
----		SELECT L1.[TransId]
----			,L1.[CompanyCode]
----			,H2.StoreId--[SLocId]
----			,L1.[LineId]
----			,L1.[Status]
----			,L1.[ItemCode]
----			,L1.[UOMCode]
----			,L1.[BarCode]
----			,L1.[Quantity]
----			--,L1.[OpenQty]
----			,L1.[Price]
----			,L1.[WhsCode]
----			,L1.[DiscountRate]
----			,L1.[DiscountAmt]
----			,L1.[TaxCode]
----			,L1.[TaxRate]
----			,L1.[TaxAmt]
----			,L1.[Remark]
----			,L1.[PromoId]
----			,L1.[PromoType]
----			,L1.[LineTotal]
----			,L1.[BaseLine]
----			,L1.[BaseTransId]
----			,@UserID
----			,GETDATE()
----		FROM @T_InvoiceLine L1
----		LEFT JOIN @T_InvoiceHeader H2 ON L1.TransId = H2.TransId AND L1.CompanyCode = H2.CompanyCode
----		IF @@ERROR <> 0 
----			BEGIN
----				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
----				GOTO HANDLE_ERROR --> Roll back when execute failed ...
----			END

----		CONTI3:

------- insert payment

		DELETE T_SalesPayment WHERE TransId IN (SELECT D.TransId FROM @T_SalesHeader D)

		IF (SELECT COUNT(TransId) FROM @T_SalesPayment) = 0
			BEGIN
				GOTO CONTI4
			END

		-- Insert new SO Header
		INSERT INTO [dbo].[T_SalesPayment]
			   ([PaymentCode]
			   ,[CompanyCode]
			   ,[TransId]
			   ,[LineId]
			   ,[TotalAmt]
			   ,[ReceivedAmt]
			   ,[PaidAmt]
			   ,[ChangeAmt]
			   ,[PaymentMode]
			   ,[CardType]
			   ,[CardHolderName]
			   ,[CardNo]
			   ,[VoucherBarCode]
			   ,[VoucherSerial]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[ChargableAmount]
			   ,[PaymentDiscount]
			   ,[CollectedAmount]
			   ,[RefNumber]
			   --,[SyncMWIStatus]
			   --,[SyncMWIDate]
			   --,[SyncMWIMsg]
			   ,[DataSource]
			   ,[SyncDate]
			   ,[SyncSource]
			   ,[Currency]
			   ,[FCAmount]
			   ,[Rate]
			   ,[ShiftId]
			   ,[CardExpiryDate]
			   ,[AdjudicationCode]
			   ,[AuthorizationDateTime]
			   ,[TerminalId]
			   ,[RoundingOff]
			   ,[FCRoundingOff]
			   ,[ForfeitCode]
			   ,[Forfeit]
			   ,[CustomF1]
			   ,[CustomF2]
			   ,[CustomF3]
			   ,[CustomF4]
			   ,[CustomF5]
			   ,[StoreId])
		SELECT L1.[PaymentCode]
			   ,L1.[CompanyCode]
			   ,L1.[TransId]
			   ,L1.[LineId]
			   ,L1.[TotalAmt]
			   ,L1.[ReceivedAmt]
			   ,L1.[PaidAmt]
			   ,L1.[ChangeAmt]
			   ,L1.[PaymentMode]
			   ,L1.[CardType]
			   ,L1.[CardHolderName]
			   ,L1.[CardNo]
			   ,L1.[VoucherBarCode]
			   ,L1.[VoucherSerial]
			   ,L1.[CreatedBy]
			   ,L1.[CreatedOn]
			   ,L1.[ModifiedBy]
			   ,L1.[ModifiedOn]
			   ,L1.[Status]
			   ,L1.[ChargableAmount]
			   ,L1.[PaymentDiscount]
			   ,L1.[CollectedAmount]
			   ,L1.[RefNumber]
			   --,L1.[SyncMWIStatus]
			   --,L1.[SyncMWIDate]
			   --,L1.[SyncMWIMsg]
			   ,L1.[DataSource]
			   ,GETDATE()
			   ,'StoreLocal'
			   ,L1.[Currency]
			   ,L1.[FCAmount]
			   ,L1.[Rate]
			   ,L1.[ShiftId]
			   ,L1.[CardExpiryDate]
			   ,L1.[AdjudicationCode]
			   ,L1.[AuthorizationDateTime]
			   ,L1.[TerminalId]
			   ,L1.[RoundingOff]
			   ,L1.[FCRoundingOff]
			   ,L1.[ForfeitCode]
			   ,L1.[Forfeit]
			   ,L1.[CustomF1]
			   ,L1.[CustomF2]
			   ,L1.[CustomF3]
			   ,L1.[CustomF4]
			   ,L1.[CustomF5]
			   ,L1.[StoreId]
		FROM @T_SalesPayment L1
		INNER JOIN @T_SalesHeader H2 ON L1.TransId = H2.TransId AND L1.CompanyCode = H2.CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI4:

		---- insert invoice infor
		IF (SELECT COUNT(TransId) FROM @T_SalesPromo) = 0
			BEGIN
				GOTO CONTI5
			END

		DELETE T_SalesPromo WHERE TransId IN (SELECT TransId FROM @T_SalesPromo)

		-- insert new
		INSERT INTO [dbo].[T_SalesPromo]
			([Id]
			,[TransId]
			,[CompanyCode]
			,[ItemCode]
			,[BarCode]
			,[RefTransId]
			,[ApplyType]
			,[ItemGroupId]
			,[UOMCode]
			,[Value]
			,[PromoId]
			,[PromoType]
			,[PromoTypeLine]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[Status]
			,[PromoPercent]
			,[PromoAmt]
			,[StoreId])
		SELECT [Id]
			,[TransId]
			,[CompanyCode]
			,[ItemCode]
			,[BarCode]
			,[RefTransId]
			,[ApplyType]
			,[ItemGroupId]
			,[UOMCode]
			,[Value]
			,[PromoId]
			,[PromoType]
			,[PromoTypeLine]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[Status]
			,[PromoPercent]
			,[PromoAmt]
			,[StoreId]
		FROM @T_SalesPromo H1
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI5:


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_SalesPayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_SalesPayment]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_SalesPayment T_SalesPaymentType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_SalesPayment T_SalesPaymentType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save SalesPayment successfully.' -- Error message
		DECLARE @RCount int = 0

		-- Get Data Header Insert
		SELECT H1.TransId, H1.CompanyCode, H1.PaymentCode, H1.LineId INTO #T_SalesPayment_I
		FROM @T_SalesPayment H1
		LEFT JOIN T_SalesPayment H2 
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.PaymentCode = H2.PaymentCode AND H1.LineId = H2.LineId
		WHERE H2.TransId IS NULL

		-- Get Data Header Update
		SELECT H1.TransId, H1.CompanyCode, H1.PaymentCode, H1.LineId INTO #T_SalesPayment_U
		FROM @T_SalesPayment H1
		INNER JOIN T_SalesPayment H2 
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.PaymentCode = H2.PaymentCode AND H1.LineId = H2.LineId

		SELECT @RCount  = COUNT(*) from @T_SalesPayment;

		
		-- Insert new SO Header
		INSERT INTO [dbo].[T_SalesPayment]
           ([PaymentCode]
           ,[CompanyCode]
           ,[TransId]
           ,[LineId]
           ,[TotalAmt]
           ,[ReceivedAmt]
           ,[PaidAmt]
           ,[ChangeAmt]
           ,[PaymentMode]
           ,[CardType]
           ,[CardHolderName]
           ,[CardNo]
           ,[VoucherBarCode]
           ,[VoucherSerial]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status]
           ,[ChargableAmount]
           ,[PaymentDiscount]
           ,[CollectedAmount]
           ,[RefNumber]
		   ,[SyncDate]
		   ,[SyncSource]
		   ,[DataSource]
		   )
		SELECT H1.[PaymentCode]
		  ,H1.[CompanyCode]
		  ,H1.[TransId]
		  ,H1.[LineId]
		  ,H1.[TotalAmt]
		  ,H1.[ReceivedAmt]
		  ,H1.[PaidAmt]
		  ,H1.[ChangeAmt]
		  ,H1.[PaymentMode]
		  ,H1.[CardType]
		  ,H1.[CardHolderName]
		  ,H1.[CardNo]
		  ,H1.[VoucherBarCode]
		  ,H1.[VoucherSerial]
		  ,H1.[CreatedBy]
		  ,H1.[CreatedOn]
		  ,H1.[ModifiedBy]
		  ,H1.[ModifiedOn]
		  ,H1.[Status]
		  ,H1.[ChargableAmount]
		  ,H1.[PaymentDiscount]
		  ,H1.[CollectedAmount]
		  ,H1.[RefNumber]
		  ,GETDATE()
		  ,@UserID
		  ,H1.[DataSource]
		FROM @T_SalesPayment H1
		INNER JOIN #T_SalesPayment_I H2
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.PaymentCode = H2.PaymentCode AND H1.LineId = H2.LineId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------
		--	Update SO Header
		UPDATE [dbo].[T_SalesPayment]
		   SET [PaymentCode] = H1.[PaymentCode]
			  ,[CompanyCode] = H1.[CompanyCode]
			  ,[TransId] = H1.[TransId]
			  ,[LineId] = H1.[LineId]
			  ,[TotalAmt] = H1.[TotalAmt]
			  ,[ReceivedAmt] = H1.[ReceivedAmt]
			  ,[PaidAmt] = H1.[PaidAmt]
			  ,[ChangeAmt] = H1.[ChangeAmt]
			  ,[PaymentMode] = H1.[PaymentMode]
			  ,[CardType] = H1.[CardType]
			  ,[CardHolderName] = H1.[CardHolderName]
			  ,[CardNo] = H1.[CardNo]
			  ,[VoucherBarCode] = H1.[VoucherBarCode]
			  ,[VoucherSerial] = H1.[VoucherSerial]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = H1.[ModifiedBy]
			  ,[ModifiedOn] = H1.[ModifiedOn]
			  ,[Status] = H1.[Status]
			  ,[ChargableAmount] = H1.[ChargableAmount]
			  ,[PaymentDiscount] = H1.[PaymentDiscount]
			  ,[CollectedAmount] = H1.[CollectedAmount]
			  ,[RefNumber] = H1.[RefNumber]
			  ,[SyncDate] = GETDATE()
			  ,[SyncSource] = @UserID
			  ,[DataSource] = H1.[DataSource]
		FROM @T_SalesPayment H1
		INNER JOIN #T_SalesPayment_U H2
			ON H1.TransId = H2.TransId AND H1.CompanyCode = H2.CompanyCode AND H1.PaymentCode = H2.PaymentCode AND H1.LineId = H2.LineId
		WHERE H1.TransId = [T_SalesPayment].TransId AND H1.CompanyCode = [T_SalesPayment].CompanyCode AND H1.PaymentCode = [T_SalesPayment].PaymentCode AND H1.LineId = [T_SalesPayment].LineId
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_ShiftSummaryFromLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_ShiftSummaryFromLocal]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_ShiftSummary T_ShiftSummaryType readonly
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_ShiftSummary T_ShiftSummaryType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Store Summary successfully.' -- Error message
		DECLARE @RCount int = 0


		IF (SELECT COUNT(ShiftId) FROM @T_ShiftSummary) = 0
			BEGIN
				GOTO CONTI2
			END

		--DELETE T_ShiftSummary WHERE DailyId IN (SELECT DISTINCT EP.DailyId FROM @T_ShiftSummary EP)

		DELETE IU
		FROM T_ShiftSummary IU 
		INNER JOIN @T_ShiftSummary MI ON IU.CompanyCode = MI.CompanyCode AND IU.ShiftId = MI.ShiftId AND IU.TerminalId = MI.TerminalId
		
		-- insert new
		INSERT INTO [dbo].[T_ShiftSummary]
			([CompanyCode]
			,[ShiftId]
			,[TerminalId]
			,[SummaryType]
			,[SummaryValue]
			,[SummaryCount]
			,[SummaryAmount]
			,[Currency]
			,[CreatedOn]
			,[CreatedBy]
			,[ModifiedOn]
			,[ModifiedBy])
		SELECT L1.[CompanyCode]
			,L1.[ShiftId]
			,L1.[TerminalId]
			,L1.[SummaryType]
			,L1.[SummaryValue]
			,L1.[SummaryCount]
			,L1.[SummaryAmount]
			,L1.[Currency]
			,L1.[CreatedOn]
			,L1.[CreatedBy]
			,L1.[ModifiedOn]
			,L1.[ModifiedBy]
		FROM @T_ShiftSummary L1
			IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI2:


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_StoreDaily]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_StoreDaily]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_StoreDaily T_StoreDailyType readonly
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_StoreDaily T_StoreDailyType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Store Daily successfully.' -- Error message
		DECLARE @RCount int = 0


		IF (SELECT COUNT(DailyId) FROM @T_StoreDaily) = 0
			BEGIN
				GOTO CONTI2
			END

		--DELETE T_StoreDaily WHERE DailyId IN (SELECT DISTINCT EP.DailyId FROM @T_StoreDaily EP)

		DELETE IU
		FROM T_StoreDaily IU 
		INNER JOIN @T_StoreDaily MI ON IU.CompanyCode = MI.CompanyCode AND IU.DailyId = MI.DailyId AND IU.StoreId = MI.StoreId AND IU.DeviceId = MI.DeviceId
		
		-- insert new
		INSERT INTO [dbo].[T_StoreDaily]
			([CompanyCode]
			,[StoreId]
			,[DailyId]
			,[DeviceId]
			,[CreateDate]
			,[TotalSales]
			,[TotalCount]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[Status]
			,[TotalCollected]
			,[TotalBalance])
		SELECT L1.[CompanyCode]
			,L1.[StoreId]
			,L1.[DailyId]
			,L1.[DeviceId]
			,L1.[CreateDate]
			,L1.[TotalSales]
			,L1.[TotalCount]
			,L1.[CreatedBy]
			,L1.[CreatedOn]
			,L1.[ModifiedBy]
			,L1.[ModifiedOn]
			,L1.[Status]
			,L1.[TotalCollected]
			,L1.[TotalBalance]
		FROM @T_StoreDaily L1
			IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI2:


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_IU_T_StoreSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_IU_T_StoreSummary]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@T_StoreSummary T_StoreSummaryType readonly
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @T_StoreSummary T_StoreSummaryType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Store Summary successfully.' -- Error message
		DECLARE @RCount int = 0


		IF (SELECT COUNT(DailyId) FROM @T_StoreSummary) = 0
			BEGIN
				GOTO CONTI2
			END

		--DELETE T_StoreSummary WHERE DailyId IN (SELECT DISTINCT EP.DailyId FROM @T_StoreSummary EP)

		DELETE IU
		FROM T_StoreSummary IU 
		INNER JOIN @T_StoreSummary MI ON IU.CompanyCode = MI.CompanyCode AND IU.DailyId = MI.DailyId AND IU.StoreId = MI.StoreId AND IU.TerminalId = MI.TerminalId
		
		-- insert new
		INSERT INTO [dbo].[T_StoreSummary]
			   ([CompanyCode]
				,[StoreId]
				,[DailyId]
				,[TerminalId]
				,[SummaryType]
				,[SummaryValue]
				,[SummaryCount]
				,[SummaryAmount]
				,[BusinessDate]
				,[Currency]
				,[CreatedOn]
				,[CreatedBy]
				,[ModifiedOn]
				,[ModifiedBy]
			)
		SELECT L1.[CompanyCode]
			   ,L1.[StoreId]
			   ,L1.[DailyId]
			   ,L1.[TerminalId]
			   ,L1.[SummaryType]
			   ,L1.[SummaryValue]
			   ,L1.[SummaryCount]
			   ,L1.[SummaryAmount]
			   ,L1.[BusinessDate]
			   ,L1.[Currency]
			   ,L1.[CreatedOn]
			   ,L1.[CreatedBy]
			   ,L1.[ModifiedOn]
			   ,L1.[ModifiedBy]
		FROM @T_StoreSummary L1
			IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		------

		CONTI2:


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_CustomerGroup_Mapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_CustomerGroup_Mwi 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_M_CustomerGroup_Mapping]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT '0' AS 'CusGrpId'
			,'Manual' AS 'CusGrpDesc'

	UNION ALL

	SELECT DISTINCT [CusGrpId] 
			,[CusGrpDesc] 
	FROM [M_CustomerGroup] 
	WHERE (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)
	AND[Status] = 'A'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_ItemGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_ItemGroup 'CP001', '1010101;1010102'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_M_ItemGroup]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@IGId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_ItemGroup TABLE
	(
		IGId nvarchar(50)
	)
	INSERT INTO @TB_ItemGroup
	SELECT DISTINCT Value FROM string_split(@IGId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT G.[IGId]
      ,G.[CompanyCode]
      ,G.[IGName]
      ,G.[IGDescription]
      ,G.[CreatedBy]
      ,G.[CreatedOn]
      ,G.[ModifiedBy]
      ,G.[ModifiedOn]
      ,G.[Status]
	FROM [dbo].[M_ItemGroup] G WITH(NOLOCK)
	LEFT JOIN @TB_ItemGroup T ON T.IGId = G.IGId
	WHERE CompanyCode = @CompanyCode
	--AND (ISNULL(@IGId, '') = '' OR IGId IN (SELECT Value FROM string_split(@IGId, ';') WHERE RTRIM(value) <> ''))
	AND (ISNULL(@IGId, '') = '' OR T.IGId IS NOT NULL)
	AND ISNULL(SyncMWIStatus, '') <> 'Y'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_ItemType_Mapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_CustomerGroup_Mwi 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_M_ItemType_Mapping]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT DISTINCT CustomField1 AS 'ItemType'
	FROM M_Item WITH(NOLOCK)
	WHERE CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_MovementType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_MovementType '', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_M_MovementType]
	-- Add the parameters for the stored procedure here
	@Code nvarchar(50),
	@Status nvarchar(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [Code]
		  ,[Name]
		  --,[Description]
		  --,[Status]
	FROM [dbo].[M_MovementType]
	WHERE (ISNULL(@Code, '') = '' OR [Code] = @Code)
	AND (ISNULL(@Status, '') = '' OR [Status] = @Status)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_PaymentMethod_Mapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_CustomerGroup_Mwi 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_M_PaymentMethod_Mapping]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT M.PaymentCode, M.PaymentDesc, T.[Code], T.[Name] 
	FROM [M_PaymentMethod] M WITH(NOLOCK) 
	INNER JOIN [M_PaymentType] T WITH(NOLOCK) ON M.PaymentType = T.Code 
	WHERE CompanyCode = @CompanyCode 
	--AND M.[Status] = 'A'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_Store]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [SYNC_S_M_Store] 'CP001' , '1001'
CREATE PROCEDURE [dbo].[SYNC_S_M_Store]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT	M_S.CompanyCode,
			M_S.StoreId,
			M_S.StoreName,
			M_W.WhsCode,
			M_W.WhsName,
			M_W.WhsType,
			M_SA.SLocId,
			M_SA.SlocName
	FROM M_Store M_S
		LEFT JOIN M_Warehouse M_W ON M_W.WhsCode = M_S.WhsCode
		LEFT JOIN M_Storage M_SA ON M_W.WhsCode = M_SA.WhsCode
	WHERE	M_S.CompanyCode = @CompanyCode	
	AND		M_S.StoreId = @StoreId

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_M_TransactionType_Mapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_TransactionType_Mwi
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_M_TransactionType_Mapping]
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	CREATE TABLE #TRANS_TYPE
	(
		TransType nvarchar(50),
		TransDesc nvarchar(100)
	)

	INSERT INTO #TRANS_TYPE VALUES ('SALES', 'Retail Sales')
	INSERT INTO #TRANS_TYPE VALUES ('RETURN', 'Sales Return')
	INSERT INTO #TRANS_TYPE VALUES ('EX', 'Exchange')
	INSERT INTO #TRANS_TYPE VALUES ('EOD', 'End Date')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALFINANCE', 'End Cash')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALSALES', 'Retail Totals')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALRETURN', 'Retail Totals Return')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALTAX', 'Tax Totals')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALDISCOUNT', 'Discount Totals')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALTENDER', 'Tender Totals')
	INSERT INTO #TRANS_TYPE VALUES ('TOTALBANKIN', 'Bank-In Totals')

	SELECT * FROM #TRANS_TYPE

	DROP TABLE #TRANS_TYPE

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoBuy]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoBuy]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @TB_PromoId TABLE
	(
		PromoId nvarchar(50)
	)
	INSERT INTO @TB_PromoId
	SELECT Value FROM string_split(@PromoId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT B.[PromoId]
		,B.[CompanyCode]
		,B.[LineNum]
		,B.[LineType]
		,B.[LineCode]
		,B.[LineName]
		,B.[LineUom]
		,B.[ValueType]
		,B.[Condition_1]
		,B.[Value_1]
		,B.[Condition_2]
		,B.[Value_2]
	FROM [dbo].[S_PromoBuy] B WITH (NOLOCK)
	INNER JOIN @TB_PromoId T ON B.PromoId = T.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR B.CompanyCode = @CompanyCode)


END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoBuyOTGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoBuyOTGroup]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_PromoId TABLE
	(
		PromoId nvarchar(50)
	)
	INSERT INTO @TB_PromoId
	SELECT DISTINCT Value FROM string_split(@PromoId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT G.[PromoId]
		,G.[CompanyCode]
		,G.[GroupID]
		,G.[LineNum]
		,G.[LineType]
		,G.[LineCode]
		,G.[LineName]
		,G.[LineUoM]
	FROM [dbo].[S_PromoBuyOTGroup] G WITH (NOLOCK)
	INNER JOIN @TB_PromoId T ON T.PromoId = G.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR G.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoCustomer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoCustomer]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_PromoId TABLE
	(
		PromoId nvarchar(50)
	)
	INSERT INTO @TB_PromoId
	SELECT DISTINCT Value FROM string_split(@PromoId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT C.[PromoId]
		,C.[CompanyCode]
		,C.[LineNum]
		,C.[CustomerValue]
		,C.[CustomerType]
	FROM [dbo].[S_PromoCustomer] C WITH (NOLOCK)
	INNER JOIN @TB_PromoId T ON T.PromoId = C.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR C.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoGet]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoGet]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_PromoId TABLE
	(
		PromoId nvarchar(50)
	)
	INSERT INTO @TB_PromoId
	SELECT DISTINCT Value FROM string_split(@PromoId, ';') WHERE RTRIM(value) <> ''
    -- Insert statements for procedure here
	SELECT G.[PromoId]
		,G.[CompanyCode]
		,G.[LineNum]
		,G.[LineType]
		,G.[LineCode]
		,G.[LineName]
		,G.[LineUom]
		,G.[ConditionType]
		,G.[Condition_1]
		,G.[Value_1]
		,G.[Condition_2]
		,G.[Value_2]
		,G.[ValueType]
		,G.[GetValue]
		,G.[MaxAmtDis]
		,G.[MaxQtyDis]
	FROM [dbo].[S_PromoGet] G WITH (NOLOCK)
	INNER JOIN @TB_PromoId T ON G.PromoId = T.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR G.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoGetOTGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoGetOTGroup]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_PromoId TABLE
	(
		PromoId nvarchar(50)
	)
	INSERT INTO @TB_PromoId
	SELECT DISTINCT Value FROM string_split(@PromoId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT G.[PromoId]
		,G.[CompanyCode]
		,G.[GroupID]
		,G.[LineNum]
		,G.[LineType]
		,G.[LineCode]
		,G.[LineName]
		,G.[LineUoM]
	FROM [dbo].[S_PromoGetOTGroup] G WITH (NOLOCK)
	INNER JOIN @TB_PromoId T ON T.PromoId = G.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR G.CompanyCode = @CompanyCode)


END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoHeader]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	SELECT DISTINCT TOP 1000 P.[PromoId]
		,P.[CompanyCode]
		,P.[PromoType]
		,P.[PromoName]
		,P.[CustomerType]
		,P.[ValidDateFrom]
		,P.[ValidDateTo]
		,P.[ValidTimeFrom]
		,P.[ValidTimeTo]
		,P.[IsMon]
		,P.[IsTue]
		,P.[IsWed]
		,P.[IsThu]
		,P.[IsFri]
		,P.[IsSat]
		,P.[IsSun]
		,P.[TotalBuyFrom]
		,P.[TotalBuyTo]
		,P.[TotalGetType]
		,P.[TotalGetValue]
		,P.[MaxTotalGetValue]
		,P.[IsCombine]
		,P.[IsVoucher]
		,P.[CreatedBy]
		,P.[CreatedOn]
		,P.[ModifiedBy]
		,P.[ModifiedOn]
		,P.[Status]
		,P.[SAPPromoId]
		,P.[SAPBonusBuyId]
		--,P.[SyncDate]
		--,P.[SyncSource]
		--,P.[MaxApplyType]
		--,P.[MaxApplyValue]
		,S.SchemaId
		,P.[MaxQtyByReceipt]
		,P.[MaxQtyByStore]
	FROM [dbo].[S_PromoHeader] P WITH(NOLOCK)
	LEFT JOIN [dbo].[S_SchemaLine] S WITH(NOLOCK) ON S.CompanyCode = P.CompanyCode AND S.PromoId = P.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode)
	AND (ISNULL(@PromoId, '') = '' OR P.PromoId = @PromoId)
	AND ISNULL(P.SyncLocalStatus, 'N') <> 'Y'
	AND ISNULL(P.PromoId, '') <> ''

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoSchema]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_S_PromoSchema '', 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoSchema]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT H.[SchemaId]
		,H.[CompanyCode]
		,H.[SchemaName]
		,H.[CreatedBy]
		,H.[CreatedOn]
		,H.[ModifiedBy]
		,H.[ModifiedOn]
		,H.[Status]
		,H.[AllowChain]
		,H.[SAPPromoId]
	FROM [dbo].[S_PromoSchema] H WITH (NOLOCK)
	INNER JOIN [dbo].[S_SchemaLine] L WITH (NOLOCK) ON H.CompanyCode = L.CompanyCode AND H.SchemaId = L.SchemaId
	WHERE (ISNULL(@SchemaId, '') = '' OR H.SchemaId = @SchemaId) 
	AND H.CompanyCode = @CompanyCode
	AND ISNULL(H.SyncLocalStatus, '') <> 'Y'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_S_PromoStore 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoStore]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_PromoId TABLE
	(
		PromoId nvarchar(50)
	)
	INSERT INTO @TB_PromoId
	SELECT DISTINCT Value FROM string_split(@PromoId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT S.[PromoId]
		  ,S.[CompanyCode]
		  ,S.[LineNum]
		  ,S.[StoreValue]
	FROM [dbo].[S_PromoStore] S WITH (NOLOCK)
	INNER JOIN @TB_PromoId T ON T.PromoId = S.PromoId
	WHERE (ISNULL(@CompanyCode, '') = '' OR S.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_PromoType_Mapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_M_CustomerGroup_Mwi 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_PromoType_Mapping]
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PromoType]
		  ,[TypeName]
	FROM [dbo].[M_PromoType]
	--WHERE [Status] = 'Y'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_S_SchemaLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_S_SchemaLine 'PSCP00100000005;PSCP00100000009;PSCP00100000010;PSCP00100000013;PSCP00100000014;PSCP00100000016;PSCP00100000017', 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_S_SchemaLine]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@SchemaId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT L.[SchemaId]
		,L.[CompanyCode]
		,L.[LineNum]
		,L.[PromoId]
		,L.[Description]
		,L.[Priority]
		,L.[IsApply]
	FROM [dbo].[S_SchemaLine] L WITH (NOLOCK)
	INNER JOIN @TB_TransId T ON T.TransId = L.SchemaId
	WHERE L.CompanyCode = @CompanyCode
	

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_CheckOutHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SYNC_S_T_CheckOutHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT H.[TransId]
      ,H.[CompanyCode]
      ,H.[StoreId]
      ,H.[ContractNo]
      ,H.[StoreName]
      ,H.[ShiftId]
      ,H.[CusId]
	  ,C.CustomerName AS 'CusName'
      ,H.[CusIdentifier]
      ,H.[TotalAmount]
      ,H.[TotalPayable]
      ,H.[TotalDiscountAmt]
      ,H.[TotalReceipt]
      ,H.[AmountChange]
      ,H.[PaymentDiscount]
      ,H.[TotalTax]
      ,H.[DiscountType]
      ,H.[DiscountAmount]
      ,H.[DiscountRate]
      ,H.[CreatedOn]
      ,H.[CreatedBy]
      ,ISNULL(H.[ModifiedOn], H.[CreatedOn]) AS 'ModifiedOn'
      ,ISNULL(H.[ModifiedBy], H.[CreatedBy]) AS 'ModifiedBy'
      ,H.[Status]
      ,H.[IsCanceled]
      ,H.[Remarks]
      ,H.[SalesPerson]
      ,H.[SalesMode]
      ,H.[RefTransId]
      ,H.[ManualDiscount]
	  ,H.[POSType]
	  --,S.*
	FROM [dbo].[T_InvoiceHeader] H WITH (NOLOCK)
		 LEFT JOIN [dbo].[M_Customer] C WITH (NOLOCK) ON C.CustomerId = H.CusId
		INNER JOIN [dbo].[T_InvoiceLine] L WITH (NOLOCK) ON L.TransId = H.TransId AND L.CompanyCode = H.CompanyCode
		LEFT JOIN [dbo].[T_SalesHeader] S WITH (NOLOCK) ON S.TransId = L.BaseTransId AND S.CompanyCode = L.CompanyCode
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId )--IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		--AND S.TransId IS NOT NULL
		AND ISNULL(S.SyncMWIStatus,  'N') = 'Y'
		AND ISNULL(H.POSType, '') = 'E' -- ECOM
		AND ISNULL(H.InvoiceType, '') = 'CheckOut'
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_CheckOutLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SYNC_S_T_CheckOutLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT L.[TransId]
      ,L.[LineId]
      ,L.[CompanyCode]
      ,L.[ItemCode]
      ,L.[SLocId]
      ,L.[BarCode]
      ,L.[UOMCode]
      ,L.[Quantity]
	  ,L.[OpenQty]
      ,L.[Price]
      ,L.[LineTotal]
      ,L.[DiscountType]
      ,L.[DiscountAmt]
      ,L.[DiscountRate]
      --,L.[CreatedBy]
      --,L.[CreatedOn]
      --,L.[ModifiedBy]
      --,L.[ModifiedOn]
      ,L.[Status]
      ,L.[Remark]
      ,L.[PromoId]
      ,L.[PromoType]
      ,L.[PromoPercent]
      ,L.[PromoBaseItem]
      ,L.[SalesMode]
      ,L.[TaxRate]
      ,L.[TaxAmt]
      ,L.[TaxCode]
      ,L.[MinDepositAmt]
      ,L.[MinDepositPercent]
      ,L.[DeliveryType]
      ,L.[POSService]
      ,L.[StoreAreaId]
      ,L.[TimeFrameId]
      --,L.[AppointmentDate]
      ,L.[BomID]
      ,L.[PromoPrice]
      ,L.[PromoLineTotal]
	  ,L.[BaseLine]
      ,L.[BaseTransId]
      ,L.[PromoDisAmt]
      ,L.[IsPromo]
      ,L.[IsSerial]
	  ,S.WhsCode
	FROM [dbo].[T_InvoiceLine] L WITH (NOLOCK)
	INNER JOIN M_Storage S ON L.SLocId = S.SLocId AND L.CompanyCode = S.CompanyCode
	WHERE (ISNULL(@TransId, '') = '' OR L.TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
		AND ISNULL(L.BomID, '') = ''
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_CheckOutLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SYNC_S_T_CheckOutLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [TransId]
      ,[CompanyCode]
      ,[LineId]
      ,[LineNum]
      ,[ItemCode]
      ,[SerialNum]
      ,[SLocId]
      ,[Quantity]
      ,[UOMCode]
	  ,[CreatedBy]
	  ,[CreatedOn]
	  ,ISNULL([ModifiedBy], [CreatedBy]) AS 'ModifiedBy'
      ,ISNULL([ModifiedOn], [CreatedOn]) AS 'ModifiedOn'
      ,[Status]
      ,[OpenQty]
      ,[BaseLine]
      ,[BaseTransId]
	FROM [dbo].[T_InvoiceLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_CreditMemoHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_InvoiceHeader '', 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_CreditMemoHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT H.[TransId]
      ,H.[CompanyCode]
      ,H.[StoreId]
      ,H.[ContractNo]
      ,H.[StoreName]
      ,H.[ShiftId]
      ,H.[CusId]
	  ,C.CustomerName AS 'CusName'
      ,H.[CusIdentifier]
      ,H.[TotalAmount]
      ,H.[TotalPayable]
      ,H.[TotalDiscountAmt]
      ,H.[TotalReceipt]
      ,H.[AmountChange]
      ,H.[PaymentDiscount]
      ,H.[TotalTax]
      ,H.[DiscountType]
      ,H.[DiscountAmount]
      ,H.[DiscountRate]
      ,H.[CreatedOn]
      ,H.[CreatedBy]
      ,ISNULL(H.[ModifiedOn], H.[CreatedOn]) AS 'ModifiedOn'
      ,ISNULL(H.[ModifiedBy], H.[CreatedBy]) AS 'ModifiedBy'
      ,H.[Status]
      ,H.[IsCanceled]
      ,H.[Remarks]
      ,H.[SalesPerson]
      ,H.[SalesMode]
      ,H.[RefTransId]
      ,H.[ManualDiscount]
	  --,L.*
	FROM [dbo].[T_InvoiceHeader] H WITH (NOLOCK)
		LEFT JOIN [dbo].[M_Customer] C WITH (NOLOCK) ON C.CustomerId = H.CusId
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		AND H.SalesMode = 'RETURN'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_EndDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- EXEC SYNC_S_T_EndDate '', 'CP001', ''
-- =============================================
CREATE   PROCEDURE [dbo].[SYNC_S_T_EndDate]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT Distinct [CompanyCode]
      ,[StoreId]
	  ,H.Id AS 'TransId'
      ,[Date]
      ,[Description]
      ,[Remark]
      ,[Status]
      ,[CreateOn] AS 'CreatedOn'
      ,[CreateBy] AS 'CreateBy'
      ,ISNULL([ModifiedOn], [CreateOn]) [ModifiedOn]
      ,ISNULL([ModifiedBy], [CreateBy]) [ModifiedBy]
      ,[TotalSales]
      ,[TotalCount]
      ,[TotalCollected]
      ,[TotalBalance]
      ,[TaxTotal]
      ,[DiscountTotal]
      ,[PaymentTotal]
	  ,[LineItemCount]
	  ,[TaxCount]
	  ,[DiscountCount]
	  ,[PaymentCount]
	FROM [dbo].[T_EndDate] H WITH (NOLOCK)
	WHERE (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@TransId, '') = '' OR H.Id = @TransId)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_EndDateDetail]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_EndDateDetail]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT L.[CompanyCode]
      ,L.[StoreId]
      ,L.[EndDateId] AS 'TransId'
      ,L.[LineId]
      ,L.[ItemCode]
      ,L.[UoMCode]
      ,L.[Description]
      ,L.[Barcode]
      ,L.[Price]
      ,L.[Quantity]
      ,L.[LineTotal]
	FROM [dbo].[T_EndDateDetail] L WITH (NOLOCK)
	LEFT JOIN @TB_TransId T ON T.TransId = L.EndDateId
	--WHERE (ISNULL(@TransId, '') = '' OR L.EndDateId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
	WHERE (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
	AND (ISNULL(@TransId, '') = '' OR T.TransId IS NOT NULL)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_EndDatePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_EndDatePayment]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT P.[CompanyCode]
      ,P.[StoreId]
      ,P.[EndDateId] AS 'TransId'
      ,P.[LineId]
	  ,P.[Currency]
      ,P.[PaymentCode]
	  ,P.[EOD_Code]
      ,P.[Amount]
	  ,P.[FCAmount]
	  ,P.[CollectedAmount]
      ,P.[Balance]
      ,P.[ShiftId]
	  ,P.[FCCollectedAmount]
	  ,P.[ChangeAmt]
	FROM [dbo].[T_EndDatePayment] P WITH (NOLOCK)
	LEFT JOIN @TB_TransId T ON T.TransId = P.EndDateId
	WHERE (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode)
		AND (ISNULL(@TransId, '') = '' OR T.TransId IS NOT NULL)--P.EndDateId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GoodsIssueHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GoodsIssueHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[TotalPayable]
		  ,[TotalDiscountAmt]
		  ,[TotalReceipt]
		  ,[TotalTax]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[IsCanceled]
		  ,[Remark]
		  ,[StoreName]
		  ,[MovementType]
	FROM [dbo].[T_GoodsIssueHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR H.INVTId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GoodsIssueLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GoodsIssueLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT L.[INVTId]
		  ,L.[CompanyCode]
		  ,L.[LineId]
		  ,L.[ItemCode]
		  ,L.[SLocId]
		  ,L.[BarCode]
		  ,L.[Description]
		  ,L.[UOMCode]
		  ,L.[Quantity]
		  ,L.[Price]
		  ,L.[LineTotal]
		  ,L.[CurrencyCode]
		  ,L.[CurrencyRate]
		  ,L.[TaxCode]
		  ,L.[TaxRate]
		  ,L.[TaxAmt]
		  ,L.[Remark]
		  ,L.[CreatedOn]
		  ,L.[CreatedBy]
		  ,L.[ModifiedOn]
		  ,L.[ModifiedBy]
		  ,L.[Status]
	FROM [dbo].[T_GoodsIssueLine] L WITH (NOLOCK)
		INNER JOIN [dbo].[M_Item] I WITH (NOLOCK) ON I.ItemCode = L.ItemCode
	WHERE (ISNULL(@TransId, '') = '' OR L.INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
		AND ISNULL(I.CustomField4, '') = 'I'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GoodsIssueLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GoodsIssueLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[LineId]
		  ,[CompanyCode]
		  ,[ItemCode]
		  ,[SerialNum]
		  ,[SLocId]
		  ,[Quantity]
		  ,[UOMCode]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[Description]
	FROM [dbo].[T_GoodsIssueLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GoodsReceiptHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GoodsReceiptHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[TotalPayable]
		  ,[TotalDiscountAmt]
		  ,[TotalReceipt]
		  ,[TotalTax]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[IsCanceled]
		  ,[Remark]
		  ,[StoreName]
		  ,[MovementType]
	FROM [dbo].[T_GoodsReceiptHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR H.INVTId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		AND ISNULL(H.MovementType, '') <> 'OB'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GoodsReceiptLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GoodsReceiptLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[CompanyCode]
		  ,[LineId]
		  ,[ItemCode]
		  ,[SLocId]
		  ,[BarCode]
		  ,[Description]
		  ,[UOMCode]
		  ,[Quantity]
		  ,[Price]
		  ,[LineTotal]
		  ,[CurrencyCode]
		  ,[CurrencyRate]
		  ,[TaxCode]
		  ,[TaxRate]
		  ,[TaxAmt]
		  ,[Remark]
		  ,[CreatedOn]
		  ,[CreatedBy]
		  ,[ModifiedOn]
		  ,[ModifiedBy]
		  ,[Status]
	FROM [dbo].[T_GoodsReceiptLine] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GoodsReceiptLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GoodsReceiptLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[LineId]
		  ,[CompanyCode]
		  ,[ItemCode]
		  ,[SerialNum]
		  ,[SLocId]
		  ,[Quantity]
		  ,[UOMCode]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[Description]
	FROM [dbo].[T_GoodsReceiptLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GRPOHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GRPOHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PurchaseId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[StoreName]
		  ,[DocStatus]
		  ,[DocDate]
		  ,[DocDueDate]
		  ,[CardCode]
		  ,[CardName]
		  ,[InvoiceAddress]
		  ,[TaxCode]
		  ,[VATPercent]
		  ,[VATTotal]
		  ,[DocTotal]
		  ,[Comment]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[IsCanceled]
		  ,[RefTransId]
	FROM [dbo].[T_GoodsReceiptPOHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR H.PurchaseId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GRPOLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GRPOLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PurchaseId]
		  ,[CompanyCode]
		  ,[LineId]
		  ,[ItemCode]
		  ,[SLocId]
		  ,[BarCode]
		  ,[Description]
		  ,[UOMCode]
		  ,[Quantity]
		  ,[OpenQty]
		  ,[Price]
		  ,[BaseTrans]
		  ,[BaseType]
		  ,[BaseEntry]
		  ,[LineStatus]
		  ,[DiscPercent]
		  ,[VATPercent]
		  ,[LineTotal]
		  ,[Comment]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[BaseLine]
		  ,[BaseTransId]
	FROM [dbo].[T_GoodsReceiptPOLine] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.PurchaseId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_GRPOLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_GRPOLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PurchaseId]
		  ,[LineId]
		  ,[CompanyCode]
		  ,[ItemCode]
		  ,[SerialNum]
		  ,[SLocId]
		  ,[Quantity]
		  ,[UOMCode]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[OpenQty]
		  ,[BaseLine]
		  ,[BaseTransId]
		  ,[Description]
	FROM [dbo].[T_GoodsReceiptPOLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR PurchaseId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryCountingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_InventoryPostingHeader '', 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryCountingHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ICId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[StoreName]
		  ,[DocStatus]
		  ,[DocDate]
		  ,[DocDueDate]
		  ,[DocTotal]
		  ,[Comment]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[IsCanceled]
		  ,[Name]
		  ,[Remark]
		  ,[RefId]
	  FROM [dbo].[T_InventoryCountingHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR H.ICId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryCountingLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryCountingLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ICId]
		  ,[CompanyCode]
		  ,[LineId]
		  ,[ItemCode]
		  ,[SLocId]
		  ,[BarCode]
		  ,[Description]
		  ,[UOMCode]
		  ,[Quantity]
		  ,[Price]
		  ,[BaseRef]
		  ,[BaseType]
		  ,[BaseEntry]
		  ,[LineStatus]
		  ,[LineTotal]
		  ,[Comment]
		  ,[TotalStock]
		  ,[TotalCount]
		  ,[TotalDifferent]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
	  FROM [dbo].[T_InventoryCountingLine] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.ICId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryCountingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryCountingLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ICId]
		  ,[LineId]
		  ,[CompanyCode]
		  ,[ItemCode]
		  ,[SerialNum]
		  ,[SLocId]
		  ,[Quantity]
		  ,[TotalStock]
		  ,[TotalCount]
		  ,[TotalDifferent]
		  ,[UOMCode]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Description]
	  FROM [dbo].[T_InventoryCountingLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR ICId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_InventoryHeader '', 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[CompanyCode]
		  ,[Name]
		  ,[Remark]
		  ,[DocType]
		  ,[RefINVTId]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[IsCanceled]
		  ,[DocDate]
		  ,[DocDueDate]
		  ,[FromStore]
		  ,[FromStoreName]
		  ,[ToStore]
		  ,[ToStoreName]
		  ,[RefId]
		  ,[TransitWhs]
		  ,[FromWhs]
		  ,[ToWhs]
	  FROM [dbo].[T_InventoryHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR H.INVTId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		--AND DocType = 'R' --S = Shipment, R= Receipt
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[CompanyCode]
		  ,[LineId]
		  ,[ItemCode]
		  ,[FrSLocId]
		  ,[ToSlocId]
		  ,[DocType]
		  ,[BarCode]
		  ,[Description]
		  ,[UOMCode]
		  ,[Quantity]
		  ,[ShipDate]
		  ,[OpenQty]
		  ,[Price]
		  ,[LineTotal]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
	  FROM [dbo].[T_InventoryLine] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [INVTId]
		  ,[LineId]
		  ,[CompanyCode]
		  ,[ItemCode]
		  ,[SerialNum]
		  ,[FrSLocId]
		  ,[ToSlocId]
		  ,[Quantity]
		  ,[UOMCode]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[Description]
	FROM [dbo].[T_InventoryLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryPostingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_InventoryPostingHeader '', 'CP001'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryPostingHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [IPId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[StoreName]
		  ,[DocStatus]
		  ,[DocDate]
		  ,[DocDueDate]
		  ,[DocTotal]
		  ,[Comment]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
		  ,[IsCanceled]
		  ,[Name]
	FROM [dbo].[T_InventoryPostingHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR H.IPId = @TransId )
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryPostingLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryPostingLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [IPId]
		  ,[CompanyCode]
		  ,[LineId]
		  ,[ItemCode]
		  ,[SLocId]
		  ,[BarCode]
		  ,[Description]
		  ,[UOMCode]
		  ,[Quantity]
		  ,[Price]
		  ,[BaseRef]
		  ,[BaseType]
		  ,[BaseEntry]
		  ,[LineStatus]
		  ,[LineTotal]
		  ,[Comment]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status]
	FROM [dbo].[T_InventoryPostingLine] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.IPId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InventoryPostingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InventoryPostingLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [IPId]
		  ,[LineId]
		  ,[CompanyCode]
		  ,[ItemCode]
		  ,[SerialNum]
		  ,[SLocId]
		  ,[Quantity]
		  ,[TotalStock]
		  ,[TotalCount]
		  ,[TotalDifferent]
		  ,[UOMCode]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Description]
	FROM [dbo].[T_InventoryPostingLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR IPId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InvoiceHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_InvoiceHeader '', 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InvoiceHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT H.[TransId]
      ,H.[CompanyCode]
      ,H.[StoreId]
      ,H.[ContractNo]
      ,H.[StoreName]
      ,H.[ShiftId]
      ,H.[CusId]
	  ,C.CustomerName AS 'CusName'
      ,H.[CusIdentifier]
      ,H.[TotalAmount]
      ,H.[TotalPayable]
      ,H.[TotalDiscountAmt]
      ,H.[TotalReceipt]
      ,H.[AmountChange]
      ,H.[PaymentDiscount]
      ,H.[TotalTax]
      ,H.[DiscountType]
      ,H.[DiscountAmount]
      ,H.[DiscountRate]
      ,H.[CreatedOn]
      ,H.[CreatedBy]
      ,ISNULL(H.[ModifiedOn], H.[CreatedOn]) AS 'ModifiedOn'
      ,ISNULL(H.[ModifiedBy], H.[CreatedBy]) AS 'ModifiedBy'
      ,H.[Status]
      ,H.[IsCanceled]
      ,H.[Remarks]
      ,H.[SalesPerson]
      ,H.[SalesMode]
      ,H.[RefTransId]
      ,H.[ManualDiscount]
	  ,H.[DataSource]
	  --,S.*
	FROM [dbo].[T_InvoiceHeader] H WITH (NOLOCK)
		 LEFT JOIN [dbo].[M_Customer] C WITH (NOLOCK) ON C.CustomerId = H.CusId
		INNER JOIN [dbo].[T_InvoiceLine] L WITH (NOLOCK) ON L.TransId = H.TransId AND L.CompanyCode = H.CompanyCode
		LEFT JOIN [dbo].[T_SalesHeader] S WITH (NOLOCK) ON S.TransId = L.BaseTransId AND S.CompanyCode = L.CompanyCode
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId )--IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'N') <> 'Y'
		--AND S.TransId IS NULL --ISNULL(S.SyncMWIStatus, 'N') <> 'Y'
		AND ISNULL(H.POSType, '') <> 'E' -- ECOM
		AND ISNULL(H.InvoiceType, '') <> 'CheckOut'
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InvoiceLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InvoiceLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT L.[TransId]
      ,L.[LineId]
      ,L.[CompanyCode]
      ,L.[ItemCode]
      ,L.[SLocId]
      ,L.[BarCode]
      ,L.[UOMCode]
      ,L.[Quantity]
	  ,L.[OpenQty]
      ,L.[Price]
      ,L.[LineTotal]
      ,L.[DiscountType]
      ,L.[DiscountAmt]
      ,L.[DiscountRate]
      --,L.[CreatedBy]
      --,L.[CreatedOn]
      --,L.[ModifiedBy]
      --,L.[ModifiedOn]
      ,L.[Status]
      ,L.[Remark]
      ,L.[PromoId]
      ,L.[PromoType]
      ,L.[PromoPercent]
      ,L.[PromoBaseItem]
      ,L.[SalesMode]
      ,L.[TaxRate]
      ,L.[TaxAmt]
      ,L.[TaxCode]
      ,L.[MinDepositAmt]
      ,L.[MinDepositPercent]
      ,L.[DeliveryType]
      ,L.[POSService]
      ,L.[StoreAreaId]
      ,L.[TimeFrameId]
      --,L.[AppointmentDate]
      ,L.[BomID]
      ,L.[PromoPrice]
      ,L.[PromoLineTotal]
	  ,L.[BaseLine]
      ,L.[BaseTransId]
      ,L.[PromoDisAmt]
      ,L.[IsPromo]
      ,L.[IsSerial]
	  ,S.WhsCode
	FROM [dbo].[T_InvoiceLine] L WITH (NOLOCK)
	INNER JOIN M_Storage S ON L.SLocId = S.SLocId AND L.CompanyCode = S.CompanyCode
	WHERE (ISNULL(@TransId, '') = '' OR L.TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
		AND ISNULL(L.BomID, '') = ''
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InvoiceLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InvoiceLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [TransId]
      ,[CompanyCode]
      ,[LineId]
      ,[LineNum]
      ,[ItemCode]
      ,[SerialNum]
      ,[SLocId]
      ,[Quantity]
      ,[UOMCode]
	  ,[CreatedBy]
	  ,[CreatedOn]
	  ,ISNULL([ModifiedBy], [CreatedBy]) AS 'ModifiedBy'
      ,ISNULL([ModifiedOn], [CreatedOn]) AS 'ModifiedOn'
      ,[Status]
      ,[OpenQty]
      ,[BaseLine]
      ,[BaseTransId]
	FROM [dbo].[T_InvoiceLineSerial] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InvoicePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InvoicePayment]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PaymentCode]
      ,[CompanyCode]
      ,[TransId]
      ,[LineId]
      ,[TotalAmt]
      ,[ReceivedAmt]
      ,[PaidAmt]
      ,[ChangeAmt]
      ,[PaymentMode]
      ,[CardType]
      ,[CardHolderName]
      ,[CardNo]
      ,[VoucherBarCode]
      ,[VoucherSerial]
      ,[CreatedBy]
      ,[CreatedOn]
      ,ISNULL([ModifiedBy], [CreatedBy]) AS 'ModifiedBy'
      ,ISNULL([ModifiedOn], [CreatedOn]) AS 'ModifiedOn'
      ,[Status]
      ,[ChargableAmount]
      ,[PaymentDiscount]
      ,[CollectedAmount]
      ,[RefNumber]
      ,[RefTransId]
	FROM [dbo].[T_InvoicePayment] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_InvoicePromo]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_InvoicePromo]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [TransId]
      ,[CompanyCode]
      ,[ItemCode]
      ,[BarCode]
      ,[RefTransId]
      ,[ApplyType]
      ,[ItemGroupId]
      ,[UOMCode]
      ,[Value]
      ,[PromoId]
      ,[PromoType]
      ,[PromoTypeLine]
      ,[CreatedBy]
      ,[CreatedOn]
      ,ISNULL([ModifiedBy], [CreatedBy]) AS 'ModifiedBy'
      ,ISNULL([ModifiedOn], [CreatedOn]) AS 'ModifiedOn'
      ,[Status]
      ,[PromoPercent]
      ,[PromoAmt]
	FROM [dbo].[T_InvoicePromo] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_PrepaidCardTransaction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_SalesPayment '', 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_PrepaidCardTransaction]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT TOP (1000) [CompanyCode]
      ,[TransId]
      ,[PrepaidCardNo]
      ,[LineNum]
      ,[TransType]
      ,[MainBalance]
      ,[SubBalance]
	FROM [T_PrepaidCardTransaction] WITH (NOLOCK)
	WHERE (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)
		AND (ISNULL(@TransId, '') = '' OR TransId = @TransId)
	ORDER BY TransId
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- EXEC SYNC_S_T_SalesHeader 'SL05201900000415', 'CP001', ''
-- =============================================
CREATE   PROCEDURE [dbo].[SYNC_S_T_SalesHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	
	--UPDATE T_SalesHeader SET RoundingOff = RoundingOff * (- 1) --, SyncMWIStatus = 'N'
	--WHERE TransId IN 
	--(
	--SELECT TransId 
	--FROM T_SalesHeader 
	--WHERE SalesMode = 'EX' AND TotalReceipt <= 0  AND (TotalAmount - TotalPayable) + RoundingOff <> 0 AND TransId = @TransId
	--)

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT L.TransId--, L.ItemCode, S.ItemCode 
	FROM T_SalesLine L WITH(NOLOCK)
	LEFT JOIN T_SalesLineSerial S WITH(NOLOCK) ON L.CompanyCode = S.CompanyCode AND L.TransId = S.TransId AND L.ItemCode = L.ItemCode
	WHERE L.ItemType = 'PN'
	AND S.ItemCode IS NULL

    -- Insert statements for procedure here
	--SELECT DISTINCT TOP 1000 H.[TransId]
 --     ,H.[CompanyCode]
 --     ,H.[StoreId]
 --     ,H.[ContractNo]
 --     ,H.[StoreName]
 --     ,H.[ShiftId]
 --     ,H.[CusId]
	--  ,H.[CusName]--CASE WHEN H.POSType = 'E' THEN H.CusName ELSE C.CustomerName END AS 'CusName'
 --     ,H.[CusIdentifier]
	--  ,ISNULL(H.[CusGrpId], C.CustomerGrpId) AS 'CusGrpId'
	--  ,S.CurrencyCode AS 'DocCurrency'
	--  ,1 AS 'DocRate'
 --     ,H.[TotalAmount]
 --     ,H.[TotalPayable]
 --     ,H.[TotalDiscountAmt]
 --     ,H.[TotalReceipt]
 --     ,H.[AmountChange]
 --     ,H.[PaymentDiscount]
 --     ,H.[TotalTax]
 --     ,H.[DiscountType]
 --     ,H.[DiscountAmount]
 --     ,H.[DiscountRate]
 --     ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
 --     ,H.[CreatedBy]
 --     ,H.[ModifiedOn]
 --     ,H.[ModifiedBy]
 --     ,H.[Status]
 --     ,H.[IsCanceled]
 --     ,H.[Remarks]
 --     ,H.[SalesPerson]
 --     ,H.[SalesMode]
 --     ,H.[RefTransId]
 --     ,H.[ManualDiscount]
	--  ,H.[POSType]
	--  ,H.[EInvoice]
	--  ,H.[DataSource]
	--  ,H.[Phone]
	--  ,H.[CusAddress]
	--  ,H.[Chanel] AS 'SourceChannel'
	--  ,H.[StartTime]
	--  ,H.[RoundingOff]
	--  ,H.[TerminalId]
	--  ,H.[PromoId]
	--  ,H.[ApprovalId]
	--  ,H.[OMSId]
	--  ,H.[SyncMWIStatus]
	--FROM [dbo].[T_SalesHeader] H
	--	INNER JOIN [T_SalesLine] L ON L.CompanyCode = H.CompanyCode AND L.TransId = H.TransId
	--	LEFT JOIN [dbo].[M_Customer] C ON C.CustomerId = H.CusId
	--	LEFT JOIN T_SalesPayment P ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
	--	LEFT JOIN M_Store S ON S.CompanyCode = H.CompanyCode AND S.StoreId = H.StoreId
	--WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
	--	AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
	--	AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
	--	AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
	--	AND ISNULL(H.IsCanceled, 'N') NOT IN ('Y', 'C')
	--	--AND ISNULL(H.IsCanceled, 'N') <> 'Y'
	--	AND H.[Status] <> 'H'	-- không nhận đơn chưa được confirm
	--	AND (H.[Status] = 'N' OR H.[Status] = 'C' OR (H.[Status] = 'O' AND ISNULL(H.POSType, '') = 'E'))
	--	AND (
	--		(ISNULL(H.POSType, '') <> 'E' AND P.TransId IS NOT NULL) 
	--		OR (ISNULL(H.DataSource, '') = 'ECOM' AND ISNULL(H.POSType, '') = 'E')
	--		OR ISNULL(H.TotalPayable, 0) = 0
	--		)
	--	AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
	--	AND H.TotalPayable = 0

	--UNION ALL

	--SELECT DISTINCT TOP 1000 H.[TransId]
 --     ,H.[CompanyCode]
 --     ,H.[StoreId]
 --     ,H.[ContractNo]
 --     ,H.[StoreName]
 --     ,H.[ShiftId]
 --     ,H.[CusId]
	--  ,H.[CusName]--CASE WHEN H.POSType = 'E' THEN H.CusName ELSE C.CustomerName END AS 'CusName'
 --     ,H.[CusIdentifier]
	--  ,ISNULL(H.[CusGrpId], C.CustomerGrpId) AS 'CusGrpId'
	--  ,S.CurrencyCode AS 'DocCurrency'
	--  ,1 AS 'DocRate'
 --     ,H.[TotalAmount]
 --     ,H.[TotalPayable]
 --     ,H.[TotalDiscountAmt]
 --     ,H.[TotalReceipt]
 --     ,H.[AmountChange]
 --     ,H.[PaymentDiscount]
 --     ,H.[TotalTax]
 --     ,H.[DiscountType]
 --     ,H.[DiscountAmount]
 --     ,H.[DiscountRate]
 --     ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
 --     ,H.[CreatedBy]
 --     ,H.[ModifiedOn]
 --     ,H.[ModifiedBy]
 --     ,H.[Status]
 --     ,H.[IsCanceled]
 --     ,H.[Remarks]
 --     ,H.[SalesPerson]
 --     ,H.[SalesMode]
 --     ,H.[RefTransId]
 --     ,H.[ManualDiscount]
	--  ,H.[POSType]
	--  ,H.[EInvoice]
	--  ,H.[DataSource]
	--  ,H.[Phone]
	--  ,H.[CusAddress]
	--  ,H.[Chanel] AS 'SourceChannel'
	--  ,H.[StartTime]
	--  ,H.[RoundingOff]
	--  ,H.[TerminalId]
	--  ,H.[PromoId]
	--  ,H.[ApprovalId]
	--  ,H.[OMSId]
	--  ,H.[SyncMWIStatus]
	--FROM [dbo].[T_SalesHeader] H
	--	INNER JOIN [T_SalesLine] L ON L.CompanyCode = H.CompanyCode AND L.TransId = H.TransId
	--	LEFT JOIN [dbo].[M_Customer] C ON C.CustomerId = H.CusId
	--	INNER JOIN T_SalesPayment P ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
	--	LEFT JOIN M_Store S ON S.CompanyCode = H.CompanyCode AND S.StoreId = H.StoreId
	--WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
	--	AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
	--	AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
	--	AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
	--	AND ISNULL(H.IsCanceled, 'N') NOT IN ('Y', 'C')
	--	--AND ISNULL(H.IsCanceled, 'N') <> 'Y'
	--	AND H.[Status] <> 'H'	-- không nhận đơn chưa được confirm
	--	AND (H.[Status] = 'N' OR H.[Status] = 'C' OR (H.[Status] = 'O' AND ISNULL(H.POSType, '') = 'E'))
	--	AND (
	--		(ISNULL(H.POSType, '') <> 'E' AND P.TransId IS NOT NULL) 
	--		OR (ISNULL(H.DataSource, '') = 'ECOM' AND ISNULL(H.POSType, '') = 'E')
	--		OR ISNULL(H.TotalPayable, 0) = 0
	--		)
	--	AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
	--	AND H.TotalPayable <> 0

	SELECT DISTINCT TOP 1000 H.[TransId]
      ,H.[CompanyCode]
      ,H.[StoreId]
      ,H.[ContractNo]
      ,H.[StoreName]
      ,H.[ShiftId]
      ,H.[CusId]
	  ,H.[CusName]--CASE WHEN H.POSType = 'E' THEN H.CusName ELSE C.CustomerName END AS 'CusName'
      ,H.[CusIdentifier]
	  ,ISNULL(H.[CusGrpId], C.CustomerGrpId) AS 'CusGrpId'
	  ,S.CurrencyCode AS 'DocCurrency'
	  ,1 AS 'DocRate'
      ,H.[TotalAmount]
      ,H.[TotalPayable]
      ,H.[TotalDiscountAmt]
      ,H.[TotalReceipt]
      ,H.[AmountChange]
      ,H.[PaymentDiscount]
      ,H.[TotalTax]
      ,H.[DiscountType]
      ,H.[DiscountAmount]
      ,H.[DiscountRate]
      ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
      ,H.[CreatedBy]
      ,H.[ModifiedOn]
      ,H.[ModifiedBy]
      ,H.[Status]
      ,H.[IsCanceled]
      ,H.[Remarks]
      ,H.[SalesPerson]
      ,H.[SalesMode]
      ,H.[RefTransId]
      ,H.[ManualDiscount]
	  ,H.[POSType]
	  ,H.[EInvoice]
	  ,H.[DataSource]
	  ,H.[Phone]
	  ,H.[CusAddress]
	  ,H.[Chanel] AS 'SourceChannel'
	  ,H.[StartTime]
	  ,H.[RoundingOff]
	  ,H.[TerminalId]
	  ,H.[PromoId]
	  ,H.[ApprovalId]
	  ,H.[OMSId]
	  ,H.[SyncMWIStatus]
	FROM [dbo].[T_SalesHeader] H
		INNER JOIN [T_SalesLine] L WITH(NOLOCK) ON L.CompanyCode = H.CompanyCode AND L.TransId = H.TransId
		LEFT JOIN [dbo].[M_Customer] C WITH(NOLOCK) ON C.CustomerId = H.CusId
		LEFT JOIN T_SalesPayment P WITH(NOLOCK) ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
		LEFT JOIN M_Store S WITH(NOLOCK) ON S.CompanyCode = H.CompanyCode AND S.StoreId = H.StoreId
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
		AND ISNULL(H.IsCanceled, 'N') NOT IN ('Y', 'C')
		--AND ISNULL(H.IsCanceled, 'N') <> 'Y'
		AND H.[Status] <> 'H'	-- không nhận đơn chưa được confirm
		AND (H.[Status] = 'N' OR H.[Status] = 'C' OR (H.[Status] = 'O' AND ISNULL(H.POSType, '') = 'E'))
		AND (
			(ISNULL(H.POSType, '') <> 'E' AND P.TransId IS NOT NULL) 
			OR (ISNULL(H.DataSource, '') = 'ECOM' AND ISNULL(H.POSType, '') = 'E' AND ISNULL(H.SyncLocalStatus, '') = 'Y')
			--OR (ISNULL(H.DataSource, '') <> 'ECOM' AND ISNULL(H.DataSource, '') <> 'POS' AND ISNULL(H.SyncLocalStatus, '') = 'Y')
			OR ISNULL(H.TotalPayable, 0) = 0 
			OR (ISNULL(H.TotalPayable, 0) <> 0 AND P.TransId IS NOT NULL)
			)
		AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
		--AND (ISNULL(H.TotalPayable, 0) = 0 OR (ISNULL(H.TotalPayable, 0) <> 0 AND P.TransId IS NOT NULL))

	-- 2022-12-16: Anh Tuấn confirm với SAP, những đơn cancel sẽ đẩy chứng từ đảo đi SAP
	UNION ALL

	SELECT DISTINCT TOP 100 H.[TransId]
      ,H.[CompanyCode]
      ,H.[StoreId]
      ,H.[ContractNo]
      ,H.[StoreName]
      ,H.[ShiftId]
      ,H.[CusId]
	  ,H.[CusName]--CASE WHEN H.POSType = 'E' THEN H.CusName ELSE C.CustomerName END AS 'CusName'
      ,H.[CusIdentifier]
	  ,ISNULL(H.[CusGrpId], C.CustomerGrpId) AS 'CusGrpId'
	  ,S.CurrencyCode AS 'DocCurrency'
	  ,1 AS 'DocRate'
      ,H.[TotalAmount]
      ,H.[TotalPayable]
      ,H.[TotalDiscountAmt]
      ,H.[TotalReceipt]
      ,H.[AmountChange]
      ,H.[PaymentDiscount]
      ,H.[TotalTax]
      ,H.[DiscountType]
      ,H.[DiscountAmount]
      ,H.[DiscountRate]
      ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
      ,H.[CreatedBy]
      ,H.[ModifiedOn]
      ,H.[ModifiedBy]
      ,H.[Status]
      ,H.[IsCanceled]
      ,H.[Remarks]
      ,H.[SalesPerson]
      ,H.[SalesMode]
      ,H.[RefTransId]
      ,H.[ManualDiscount]
	  ,H.[POSType]
	  ,H.[EInvoice]
	  ,H.[DataSource]
	  ,H.[Phone]
	  ,H.[CusAddress]
	  ,H.[Chanel] AS 'SourceChannel'
	  ,H.[StartTime]
	  ,H.[RoundingOff]
	  ,H.[TerminalId]
	  ,H.[PromoId]
	  ,H.[ApprovalId]
	  ,H.[OMSId]
	  ,H.[SyncMWIStatus]
	FROM [dbo].[T_SalesHeader] H
		INNER JOIN [T_SalesLine] L WITH(NOLOCK) ON L.CompanyCode = H.CompanyCode AND L.TransId = H.TransId
		LEFT JOIN [dbo].[M_Customer] C WITH(NOLOCK) ON C.CustomerId = H.CusId
		LEFT JOIN T_SalesPayment P WITH(NOLOCK) ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
		LEFT JOIN M_Store S WITH(NOLOCK) ON S.CompanyCode = H.CompanyCode AND S.StoreId = H.StoreId
		INNER JOIN T_SalesHeader R ON H.RefTransId = R.TransId AND R.CompanyCode = H.CompanyCode AND R.IsCanceled = 'Y'
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
		AND ISNULL(H.IsCanceled, 'N') = 'C'
		AND H.[Status] <> 'H'	-- không nhận đơn chưa được confirm
		AND (H.[Status] = 'N' OR H.[Status] = 'C' OR (H.[Status] = 'O' AND ISNULL(H.POSType, '') = 'E'))
		AND (
			(ISNULL(H.POSType, '') <> 'E' AND P.TransId IS NOT NULL) 
			OR (ISNULL(H.DataSource, '') = 'ECOM' AND ISNULL(H.POSType, '') = 'E' AND ISNULL(H.SyncLocalStatus, '') = 'Y')
			--OR (ISNULL(H.DataSource, '') <> 'ECOM' AND ISNULL(H.DataSource, '') <> 'POS' AND ISNULL(H.SyncLocalStatus, '') = 'Y')
			OR ISNULL(H.TotalPayable, 0) = 0 
			OR (ISNULL(H.TotalPayable, 0) <> 0 AND P.TransId IS NOT NULL)
			)
		AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
		AND ISNULL(R.SyncMWIStatus, 'A') = 'Y'

	ORDER BY CreatedOn ASC
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesHeaderToLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesHeaderToLocal] 
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT TOP 500 H.[TransId]
		,H.[CompanyCode]
		,H.[StoreId]
		,H.[ContractNo]
		,H.[StoreName]
		,H.[ShiftId]
		,H.[CusId]
		,H.[CusIdentifier]
		,H.[CusGrpId]
		,H.[TotalAmount]
		,H.[TotalPayable]
		,H.[TotalDiscountAmt]
		,H.[TotalReceipt]
		,H.[AmountChange]
		,H.[PaymentDiscount]
		,H.[TotalTax]
		,H.[DiscountType]
		,H.[DiscountAmount]
		,H.[DiscountRate]
		,H.[CreatedOn]
		,H.[CreatedBy]
		,H.[ModifiedOn]
		,H.[ModifiedBy]
		,H.[Status]
		,H.[IsCanceled]
		,H.[Remarks]
		,H.[SalesPerson]
		,H.[SalesPersonName]
		,H.[SalesMode]
		,H.[SalesType]
		,H.[RefTransId]
		,H.[ManualDiscount]
		,H.[DataSource]
		,H.[POSType]
		,H.[SyncMWIStatus]
		,H.[SyncMWIDate]
		,H.[SyncMWIMsg]
		,H.[EInvoice]
		,H.[SyncJAStatus]
		,H.[SyncJADate]
		,H.[SyncJAMsg]
		,H.[Phone]
		,H.[CusName]
		,H.[CusAddress]
		,H.[Reason]
		,H.[CollectedStatus]
		,H.[OMSId]
		,H.[Chanel]
		,H.[StartTime]
		,H.[TerminalId]
		,H.[RoundingOff]
		,H.[ShortOrderID]
		,H.[MerchantId]
		,H.[OMSStatus]
		,H.[PromoId]
		,H.[ApprovalId]
		,H.[RewardPoints]
		,H.[ExpiryDate]
		,H.[DocDate]
		,H.[CustomF1]
		,H.[CustomF2]
		,H.[CustomF3]
		,H.[CustomF4]
		,H.[CustomF5]
		,H.[LuckyNo]
		,H.[OrderId]
	FROM [dbo].[T_SalesHeader] H
	INNER JOIN [T_SalesLine] L ON L.CompanyCode = H.CompanyCode AND L.TransId = H.TransId
	INNER JOIN [T_SalesPayment] P ON P.CompanyCode = H.CompanyCode AND P.TransId = H.TransId
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND H.DataSource <> 'POS'
		AND ISNULL(SyncLocalStatus, '') <> 'Y'
		--AND (H.TotalPayable = 0 OR (H.TotalPayable <> 0 AND P.TransId IS NOT NULL)) 
	ORDER BY CreatedOn DESC

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesHeaderToOMS]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesHeaderToOMS '', 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesHeaderToOMS]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--	check summary bị lệch
	DECLARE @Header AS Table
	(
		TransId NVARCHAR(50),
		DocTotal NUMERIC(19,2)
	)

	DECLARE @Line AS Table
	(
		TransId NVARCHAR(50),
		LineTotal NUMERIC(19,2)
	)


	DECLARE @Paym AS Table
	(
		TransId NVARCHAR(50),
		PayTotal NUMERIC(19,2)
	)

	INSERT INTO @Header
	SELECT TransId, ISNULL(RoundingOff,0) FROM T_SalesHeader WHERE TransId = @TransId
	ORDER BY TransId

	INSERT INTO @Line
	SELECT TransId,SUM(ISNULL(LineTotal,0))
	FROM T_SalesLine
	WHERE TransId = @TransId
	GROUP BY TransId
	ORDER BY TransId

	INSERT INTO @Paym
	SELECT TransId,SUM(PayTotal) FROM 
	(SELECT TransId,CASE WHEN ISNULL(CollectedAmount,0) < 0 THEN  (ISNULL(CollectedAmount,0) + ISNULL(ChangeAmt,0))  ELSE (ISNULL(CollectedAmount,0)- ISNULL(ChangeAmt,0) ) END PayTotal
	FROM T_SalesPayment
	WHERE TransId = @TransId
	UNION ALL
	SELECT TransId,TotalPayable
	FROM T_SalesHeader 
	WHERE TotalPayable = 0 AND ISNULL(SyncJAStatus,'N') = 'N' AND  TransId = @TransId
	
	) R
	GROUP BY TransId
	ORDER BY TransId


	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT H.TransId
	FROM @Header H INNER JOIN @Line L ON H.TransId = L.TransId
					INNER JOIN @Paym P ON  P.TransId = L.TransId
	
	GROUP BY H.TransId, L.LineTotal
	HAVING SUM( P.PayTotal - H.DocTotal) - L.LineTotal <> 0


	
	--UPDATE T_SalesHeader SET RoundingOff = RoundingOff * - 1 , SyncJAStatus = 'N'
	--WHERE TransId IN 
	--(
	--SELECT TransId 
	--FROM T_SalesHeader  
	--WHERE SalesMode = 'EX' AND TotalReceipt <= 0  AND (TotalAmount - TotalPayable) + RoundingOff <> 0 AND TransId = @TransId
	--)

	DECLARE @TB_TransIdSerial TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransIdSerial
	SELECT DISTINCT L.TransId--, L.ItemCode, S.ItemCode 
	FROM T_SalesLine L
	LEFT JOIN T_SalesLineSerial S ON L.CompanyCode = S.CompanyCode AND L.TransId = S.TransId AND L.ItemCode = L.ItemCode
	WHERE L.ItemType = 'PN'
	AND S.ItemCode IS NULL

    -- Insert statements for procedure here
	--SELECT DISTINCT TOP 1000 H.[TransId]
 --     ,H.[CompanyCode]
 --     ,H.[StoreId]
 --     ,H.[ContractNo]
 --     ,H.[StoreName]
 --     ,H.[ShiftId]
 --     ,H.[CusId]
	--  ,H.[CusGrpId]
	--  --,C.CustomerName AS 'CusName'
	--  --,C.Phone AS 'CusPhone'
	--  ,H.[Phone]
 --     ,H.[CusName]
 --     ,H.[CusAddress]
 --     ,H.[CusIdentifier]
 --     ,H.[TotalAmount]
 --     ,H.[TotalPayable]
 --     ,H.[TotalDiscountAmt]
 --     ,H.[TotalReceipt]
 --     ,H.[AmountChange]
 --     ,H.[PaymentDiscount]
 --     ,H.[TotalTax]
 --     ,H.[DiscountType]
 --     ,H.[DiscountAmount]
 --     ,H.[DiscountRate]
 --     ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
 --     ,H.[CreatedBy]
 --     ,ISNULL(H.[ModifiedOn], H.[CreatedOn]) AS ModifiedOn
 --     ,ISNULL(H.[ModifiedBy], H.[CreatedBy]) AS CreatedBy
 --     ,H.[Status]
 --     ,H.[IsCanceled]
 --     ,H.[Remarks]
 --     ,H.[SalesPerson]
	--  ,H.[SalesPersonName]
 --     ,H.[SalesMode]
 --     ,H.[RefTransId]
 --     ,H.[ManualDiscount]
	--  ,H.[POSType]
	--  ,H.[EInvoice]
	--  ,H.[Reason]
	--  ,H.[TerminalId]
	--  --,H.[CreatedOn]
 --  --   ,H.[CreatedBy]
 --  --   ,H.[ModifiedOn]
 --  --   ,H.[ModifiedBy]
	--  ,G.[CusGrpDesc]
	--  ,H.[RoundingOff]
	--  ,'ZZ00' AS 'RoundingOffCode'
	--  ,1 as 'DocRate'
	--FROM [dbo].[T_SalesHeader] H 
	--	--LEFT JOIN [dbo].[M_Customer] C WITH (NOLOCK)
	--		--ON C.CustomerId = H.CusId
	--	INNER JOIN [dbo].[T_SalesLine] L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
	--	LEFT JOIN [M_CustomerGroup] G ON G.CompanyCode = H.CompanyCode AND G.CusGrpId = H.CusGrpId
	--	LEFT JOIN [T_SalesPayment] P ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
	--WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
	--	AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
	--	AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
	--	AND (ISNULL(H.SyncMWIStatus, 'A') = 'Y' OR (H.DataSource = 'POS' AND H.[Status] = 'C'))
	--	AND ISNULL(H.SyncJAStatus, 'A') <> 'Y'
	--	AND H.[Status] <> 'H' -- không nhận đơn chưa được confirm
	--	--AND H.TransId = 'SOCP001W010100000213'
	--	AND ISNULL(H.IsCanceled, 'N') NOT IN ('Y', 'C')
	--	AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
	--	AND H.TransId NOT IN (SELECT S.TransId FROM @TB_TransIdSerial S)
	--	AND H.TotalPayable = 0 --AND P.TransId IS NULL

	--UNION ALL

	--SELECT DISTINCT H.[TransId]
 --     ,H.[CompanyCode]
 --     ,H.[StoreId]
 --     ,H.[ContractNo]
 --     ,H.[StoreName]
 --     ,H.[ShiftId]
 --     ,H.[CusId]
	--  ,H.[CusGrpId]
	--  --,C.CustomerName AS 'CusName'
	--  --,C.Phone AS 'CusPhone'
	--  ,H.[Phone]
 --     ,H.[CusName]
 --     ,H.[CusAddress]
 --     ,H.[CusIdentifier]
 --     ,H.[TotalAmount]
 --     ,H.[TotalPayable]
 --     ,H.[TotalDiscountAmt]
 --     ,H.[TotalReceipt]
 --     ,H.[AmountChange]
 --     ,H.[PaymentDiscount]
 --     ,H.[TotalTax]
 --     ,H.[DiscountType]
 --     ,H.[DiscountAmount]
 --     ,H.[DiscountRate]
 --     ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
 --     ,H.[CreatedBy]
 --     ,ISNULL(H.[ModifiedOn], H.[CreatedOn]) AS ModifiedOn
 --     ,ISNULL(H.[ModifiedBy], H.[CreatedBy]) AS CreatedBy
 --     ,H.[Status]
 --     ,H.[IsCanceled]
 --     ,H.[Remarks]
 --     ,H.[SalesPerson]
	--  ,H.[SalesPersonName]
 --     ,H.[SalesMode]
 --     ,H.[RefTransId]
 --     ,H.[ManualDiscount]
	--  ,H.[POSType]
	--  ,H.[EInvoice]
	--  ,H.[Reason]
	--  ,H.[TerminalId]
	--  --,H.[CreatedOn]
 --  --   ,H.[CreatedBy]
 --  --   ,H.[ModifiedOn]
 --  --   ,H.[ModifiedBy]
	--  ,G.[CusGrpDesc]
	--  ,H.[RoundingOff]
	--  ,'ZZ00' AS 'RoundingOffCode'
	--  ,1 as 'DocRate'
	--FROM [dbo].[T_SalesHeader] H 
	--	--LEFT JOIN [dbo].[M_Customer] C WITH (NOLOCK)
	--		--ON C.CustomerId = H.CusId
	--	INNER JOIN [dbo].[T_SalesLine] L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
	--	INNER JOIN [T_SalesPayment] P ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
	--	LEFT JOIN [M_CustomerGroup] G ON G.CompanyCode = H.CompanyCode AND G.CusGrpId = H.CusGrpId
	--WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
	--	AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
	--	AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
	--	AND (ISNULL(H.SyncMWIStatus, 'A') = 'Y' OR (H.DataSource = 'POS' AND H.[Status] = 'C'))
	--	AND ISNULL(H.SyncJAStatus, 'A') <> 'Y'
	--	AND H.[Status] <> 'H' -- không nhận đơn chưa được confirm
	--	--AND H.TransId = 'SOCP001W010100000213'
	--	AND ISNULL(H.IsCanceled, 'N') NOT IN ('Y', 'C')
	--	AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
	--	AND H.TransId NOT IN (SELECT S.TransId FROM @TB_TransIdSerial S)
	--	AND H.TotalPayable <> 0

	SELECT DISTINCT TOP 1000 H.[TransId]
      ,H.[CompanyCode]
      ,H.[StoreId]
      ,H.[ContractNo]
      ,H.[StoreName]
      ,H.[ShiftId]
      ,H.[CusId]
	  ,H.[CusGrpId]
	  --,C.CustomerName AS 'CusName'
	  --,C.Phone AS 'CusPhone'
	  ,H.[Phone]
      ,H.[CusName]
      ,H.[CusAddress]
      ,H.[CusIdentifier]
      ,H.[TotalAmount]
      ,H.[TotalPayable]
      ,H.[TotalDiscountAmt]
      ,H.[TotalReceipt]
      ,H.[AmountChange]
      ,H.[PaymentDiscount]
      ,H.[TotalTax]
      ,H.[DiscountType]
      ,H.[DiscountAmount]
      ,H.[DiscountRate]
      ,ISNULL(H.[DocDate], H.[CreatedOn]) AS CreatedOn
      ,H.[CreatedBy]
      ,ISNULL(H.[ModifiedOn], H.[CreatedOn]) AS ModifiedOn
      ,ISNULL(H.[ModifiedBy], H.[CreatedBy]) AS CreatedBy
      ,H.[Status]
      ,H.[IsCanceled]
      ,H.[Remarks]
      ,H.[SalesPerson]
	  ,H.[SalesPersonName]
      ,H.[SalesMode]
      ,H.[RefTransId]
      ,H.[ManualDiscount]
	  ,H.[POSType]
	  ,H.[EInvoice]
	  ,H.[Reason]
	  ,H.[TerminalId]
	  --,H.[CreatedOn]
   --   ,H.[CreatedBy]
   --   ,H.[ModifiedOn]
   --   ,H.[ModifiedBy]
	  ,G.[CusGrpDesc]
	  ,H.[RoundingOff]
	  ,'ZZ00' AS 'RoundingOffCode'
	  ,1 as 'DocRate'
	FROM [dbo].[T_SalesHeader] H 
		--LEFT JOIN [dbo].[M_Customer] C WITH (NOLOCK)
			--ON C.CustomerId = H.CusId
		INNER JOIN [dbo].[T_SalesLine] L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
		LEFT JOIN [M_CustomerGroup] G ON G.CompanyCode = H.CompanyCode AND G.CusGrpId = H.CusGrpId
		LEFT JOIN [T_SalesPayment] P ON H.CompanyCode = P.CompanyCode AND H.TransId = P.TransId
	WHERE (ISNULL(@TransId, '') = '' OR H.TransId = @TransId)
		AND (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND (ISNULL(H.SyncMWIStatus, 'A') = 'Y' OR (H.DataSource = 'POS' AND H.[Status] = 'C'))
		AND ISNULL(H.SyncJAStatus, 'A') <> 'Y'
		AND H.[Status] <> 'H' -- không nhận đơn chưa được confirm
		--AND H.TransId = 'SOCP001W010100000213'
		AND ISNULL(H.IsCanceled, 'N') NOT IN ('Y', 'C')
		AND H.TransId NOT IN (SELECT C.TransId FROM @TB_TransId C)
		AND H.TransId NOT IN (SELECT S.TransId FROM @TB_TransIdSerial S)
		--AND H.TotalPayable = 0 --AND P.TransId IS NULL
		AND (ISNULL(H.TotalPayable, 0) = 0 OR (ISNULL(H.TotalPayable, 0) <> 0 AND P.TransId IS NOT NULL))
		--AND (ISNULL(H.DataSource, '') <> 'POS' AND ISNULL(H.SyncLocalStatus, '') = 'Y' AND H.[Status] = 'C')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesInvoice]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesInvoice( 'ST00012011220003', 'CP001')
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesInvoice]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [TransId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[StoreName]
		  ,[CustomerName]
		  ,[TaxCode]
		  ,[Email]
		  ,[Address]
		  ,[Phone]
		  ,[Remark]
		  ,[CreatedOn]
		  ,[CreatedBy]
		  ,[ModifiedOn]
		  ,[ModifiedBy]
	  FROM [dbo].[T_SalesInvoice] WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesLines]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- EXEC SYNC_S_T_SalesLines 'SOCP001100100000252' , 'CP001'
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesLines]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT L.[TransId]
      ,L.[LineId]
      ,L.[CompanyCode]
      ,L.[ItemCode]
      ,L.[SLocId]
      ,L.[BarCode]
      ,L.[UOMCode]
      ,L.[Quantity]
	  ,L.[OpenQty]
      ,L.[Price]
      ,L.[LineTotal]
      ,L.[DiscountType]
      ,L.[DiscountAmt]
      ,L.[DiscountRate]
      --,L.[CreatedBy]
      --,L.[CreatedOn]
      --,L.[ModifiedBy]
      --,L.[ModifiedOn]
      ,L.[Status]
      ,L.[Remark]
      ,L.[PromoId]
      ,L.[PromoType]
      ,L.[PromoPercent]
      ,L.[PromoBaseItem]
      ,L.[SalesMode]
      ,L.[TaxRate]
      ,L.[TaxAmt]
      ,L.[TaxCode]
      ,L.[MinDepositAmt]
      ,L.[MinDepositPercent]
      ,L.[DeliveryType]
      ,L.[POSService]
      ,L.[StoreAreaId]
      ,L.[TimeFrameId]
      ,L.[AppointmentDate]
      ,L.[BomID]
      ,L.[PromoPrice]
      ,L.[PromoLineTotal]
	  ,L.[BaseLine]
      ,L.[BaseTransId]
      ,L.[PromoDisAmt]
      ,L.[IsPromo]
      ,L.[IsSerial]
	  ,L.[IsVoucher]
	  ,S.WhsCode
	  ,L.[ItemType]
	  ,L.[MemberDate]
	  ,L.[MemberValue]
	  ,L.[ItemTypeS4]
	  ,L.[Custom1]
	  ,L.[Custom2]
	  ,L.[Custom3]
	  ,L.[Custom4]
	  ,L.[Custom5]
	  ,L.[PriceListId]
	  --,L.[LineTotal] * (100-L.[DiscountRate]) / 100  * (100-H.[DiscountRate])/100 FinalLineTotal
 	FROM [dbo].[T_SalesLine] L
	INNER JOIN [dbo].[T_SalesHeader] H ON H.TransId = L.TransId
	INNER JOIN @TB_TransId T ON T.TransId = L.TransId
	LEFT JOIN M_Storage S ON L.SLocId = S.SLocId AND L.CompanyCode = S.CompanyCode
	LEFT JOIN M_ItemUOM U ON U.CompanyCode = L.CompanyCode AND U.ItemCode = L.ItemCode AND U.UOMCode = L.UOMCode AND U.BarCode = L.BarCode
	--WHERE (ISNULL(@TransId, '') = '' OR T.TransId IS NOT NULL)--L.TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		WHERE (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
		--AND ISNULL(L.BomID, '') = ''

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesLineSerial]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT L.[TransId]
      ,L.[LineNum] AS 'LineId'
      ,L.[CompanyCode]
      ,L.[ItemCode]
      ,L.[SerialNum]
      ,L.[SLocId]
      ,L.[Quantity]
      ,L.[UOMCode]
      ,L.[CreatedBy]
      ,L.[CreatedOn]
      ,L.[ModifiedBy]
      ,L.[ModifiedOn]
      ,L.[Status]
	  ,L.[OpenQty]
      ,L.[BaseLine]
      ,L.[BaseTransId]
      ,L.[LineNum]
      ,L.[Description]
      ,L.[Phone]
      ,L.[Name]
      ,L.[CustomF1]
      ,L.[CustomF2]
      ,L.[Prefix]
      ,L.[ExpDate]
	FROM [dbo].[T_SalesLineSerial] L WITH (NOLOCK)
	INNER JOIN @TB_TransId T ON T.TransId = L.TransId
	--WHERE (ISNULL(@TransId, '') = '' OR T.TransId IS NOT NULL)--TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		WHERE (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesLineSerialToLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesLineSerialToLocal]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

	SELECT L.[TransId]
		,L.[LineId]
		,L.[CompanyCode]
		,L.[ItemCode]
		,L.[SerialNum]
		,L.[SLocId]
		,L.[Quantity]
		,L.[UOMCode]
		,L.[CreatedBy]
		,L.[CreatedOn]
		,L.[ModifiedBy]
		,L.[ModifiedOn]
		,L.[Status]
		,L.[OpenQty]
		,L.[BaseLine]
		,L.[BaseTransId]
		,L.[LineNum]
		,L.[Description]
		,L.[Phone]
		,L.[Name]
		,L.[CustomF1]
		,L.[CustomF2]
		,L.[Prefix]
		,L.[ExpDate]
		,L.[StoreId]
		,L.[CustomF3]
		,L.[CustomF4]
		,L.[CustomF5]
	FROM [dbo].[T_SalesLineSerial] L WITH (NOLOCK)
	INNER JOIN @TB_TransId T ON T.TransId = L.TransId
	WHERE (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesLinesToLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesLinesToLocal] 
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

	SELECT L.[TransId]
		,L.[LineId]
		,L.[CompanyCode]
		,L.[ItemCode]
		,L.[SLocId]
		,L.[BarCode]
		,L.[UOMCode]
		,L.[Quantity]
		,L.[Price]
		,L.[LineTotal]
		,L.[DiscountType]
		,L.[DiscountAmt]
		,L.[DiscountRate]
		,L.[CreatedBy]
		,L.[CreatedOn]
		,L.[ModifiedBy]
		,L.[ModifiedOn]
		,L.[Status]
		,L.[Remark]
		,L.[PromoId]
		,L.[PromoType]
		,L.[PromoPercent]
		,L.[PromoBaseItem]
		,L.[SalesMode]
		,L.[TaxRate]
		,L.[TaxAmt]
		,L.[TaxCode]
		,L.[MinDepositAmt]
		,L.[MinDepositPercent]
		,L.[DeliveryType]
		,L.[POSService]
		,L.[StoreAreaId]
		,L.[TimeFrameId]
		,L.[Duration]
		,L.[AppointmentDate]
		,L.[BomID]
		,L.[PromoPrice]
		,L.[PromoLineTotal]
		,L.[BaseLine]
		,L.[BaseTransId]
		,L.[OpenQty]
		,L.[PromoDisAmt]
		,L.[IsPromo]
		,L.[IsSerial]
		,L.[IsVoucher]
		,L.[PrepaidCardNo]
		,L.[MemberDate]
		,L.[MemberValue]
		,L.[StartDate]
		,L.[EndDate]
		,L.[ItemType]
		,L.[Description]
		,L.[LineTotalBefDis]
		,L.[LineTotalDisIncludeHeader]
		,L.[SerialNum]
		,L.[Name]
		,L.[Phone]
		,L.[ItemTypeS4]
		,L.[Custom1]
		,L.[Custom2]
		,L.[Custom3]
		,L.[Custom4]
		,L.[Custom5]
		,L.[PriceListId]
		,L.[ProductId]
		,L.[WeightScaleBarcode]
		,L.[StoreId]
		,L.[BookletNo]
	FROM [dbo].[T_SalesLine] L WITH (NOLOCK)
	INNER JOIN [dbo].[T_SalesHeader] H ON H.TransId = L.TransId
	INNER JOIN @TB_TransId T ON T.TransId = L.TransId
	WHERE (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesLinesToOMS]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- EXEC SYNC_S_T_SalesLines 'SL300600009353' , 'CP001'
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesLinesToOMS]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT L.[TransId]
      ,L.[LineId]
      ,L.[CompanyCode]
      ,L.[ItemCode]
	  ,I.[ItemName]
	  ,I.[ItemDescription]
      ,L.[SLocId]
      ,L.[BarCode]
      ,L.[UOMCode]
      ,L.[Quantity]
	  ,L.[OpenQty]
      ,L.[Price]
      ,L.[LineTotal]
      ,L.[DiscountType]
      ,L.[DiscountAmt]
      ,L.[DiscountRate]
      --,L.[CreatedBy]
      --,L.[CreatedOn]
      --,L.[ModifiedBy]
      --,L.[ModifiedOn]
      ,L.[Status]
      ,L.[Remark]
      ,L.[PromoId]
      ,L.[PromoType]
      ,L.[PromoPercent]
      ,L.[PromoBaseItem]
      ,L.[SalesMode]
      ,L.[TaxRate]
      ,L.[TaxAmt]
      ,L.[TaxCode]
      ,L.[MinDepositAmt]
      ,L.[MinDepositPercent]
      ,L.[DeliveryType]
      ,L.[POSService]
      ,L.[StoreAreaId]
      ,L.[TimeFrameId]
      ,L.[AppointmentDate]
      ,L.[BomID]
      ,L.[PromoPrice]
      ,L.[PromoLineTotal]
	  ,L.[BaseLine]
      ,L.[BaseTransId]
      ,L.[PromoDisAmt]
      ,L.[IsPromo]
      ,L.[IsSerial]
	  ,L.[IsVoucher]
	  ,S.WhsCode
	  ,L.[ItemType]
	  ,L.[MemberDate]
	  ,L.[MemberValue]
	  ,L.[ItemTypeS4]
	  ,L.[PriceListId]
	  ,U.[Factor]
	  ,0 AS 'UnitCost'
	  --,L.[LineTotal] * (100-L.[DiscountRate]) / 100  * (100-H.[DiscountRate])/100 FinalLineTotal
 	FROM [dbo].[T_SalesLine] L
	INNER JOIN [dbo].[T_SalesHeader] H ON H.TransId = L.TransId
	INNER JOIN @TB_TransId T ON T.TransId = L.TransId
	LEFT JOIN M_Storage S ON L.SLocId = S.SLocId AND L.CompanyCode = S.CompanyCode
	LEFT JOIN M_ItemUOM U ON U.CompanyCode = L.CompanyCode AND U.ItemCode = L.ItemCode AND U.UOMCode = L.UOMCode AND U.BarCode = L.BarCode
	LEFT JOIN M_Item I ON I.CompanyCode = L.CompanyCode AND I.ItemCode = L.ItemCode
	--WHERE (ISNULL(@TransId, '') = '' OR T.TransId IS NOT NULL)--L.TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		WHERE (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)
		--AND ISNULL(L.BomID, '') = ''

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesPayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_SalesPayment '', 'CP001', ''
-- =============================================
CREATE   PROCEDURE [dbo].[SYNC_S_T_SalesPayment]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50),
	@PaymentCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT P.[CompanyCode]
		  ,P.[TransId]
		  ,P.[LineId]
		  ,P.[PaymentCode]
		  ,ISNULL(P.[TotalAmt], P.[ChargableAmount]) AS 'TotalAmt'
		  ,ISNULL(P.[ReceivedAmt], P.[CollectedAmount]) AS 'ReceivedAmt'
		  ,P.[PaidAmt]
		  ,P.[ChangeAmt]
		  ,P.[PaymentMode]
		  ,P.[CardType]
		  ,P.[CardHolderName]
		  ,P.[CardNo]
		  ,P.[VoucherBarCode]
		  ,P.[VoucherSerial]
		  ,P.[CreatedBy]
		  ,P.[CreatedOn]
		  ,P.[ModifiedBy]
		  ,P.[ModifiedOn]
		  ,P.[Status]
		  ,P.[ChargableAmount]
		  ,P.[PaymentDiscount]
		  ,P.[CollectedAmount]
		  ,P.[RefNumber]
		  ,P.[DataSource]
		  ,P.[Currency]
		  ,P.[FCAmount]
		  ,P.[Rate]
		  ,P.[ShiftId]
		  ,P.[CardExpiryDate]
		  ,P.[AdjudicationCode]
		  ,P.[AuthorizationDateTime]
		  --,H.*
	FROM [dbo].[T_SalesPayment] P WITH (NOLOCK)
	LEFT JOIN [dbo].[T_SalesHeader] H WITH (NOLOCK) ON P.TransId = H.TransId
	WHERE (ISNULL(@TransId, '') = '' OR P.TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode)
		AND (ISNULL(@PaymentCode, '') = '' OR P.PaymentCode = @PaymentCode)
		AND (H.TransId IS NULL 
			OR (ISNULL(H.DataSource, '') = 'ECOM' AND ISNULL(H.POSType, '') = 'E'))
		AND ISNULL(P.SyncMWIStatus, 'N') <> 'Y'
		AND ISNULL(P.DataSource, '') <> 'SAP'
	ORDER BY P.TransId, P.LineId
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesPaymentSO]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SYNC_S_T_SalesPaymentSO]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT P.[CompanyCode]
		  ,P.[TransId]
		  ,P.[LineId]
		  ,P.[PaymentCode]
		  ,ISNULL(P.[TotalAmt], P.[ChargableAmount]) AS 'TotalAmt'
		  ,ISNULL(P.[ReceivedAmt], P.[CollectedAmount]) AS 'ReceivedAmt'
		  ,P.[PaidAmt]
		  ,P.[ChangeAmt]
		  ,P.[PaymentMode]
		  ,P.[CardType]
		  ,P.[CardHolderName]
		  ,P.[CardNo]
		  ,P.[VoucherBarCode]
		  ,P.[VoucherSerial]
		  ,P.[CreatedBy]
		  ,P.[CreatedOn]
		  ,P.[ModifiedBy]
		  ,P.[ModifiedOn]
		  ,P.[Status]
		  ,P.[ChargableAmount]
		  ,P.[PaymentDiscount]
		  ,P.[CollectedAmount]
		  ,P.[RefNumber]
		  ,P.[DataSource]
		  ,P.[Currency]
		  ,P.[FCAmount]
		  ,P.[Rate]
		  ,P.[ShiftId]
		  ,P.[CardExpiryDate]
		  ,P.[AdjudicationCode]
		  ,P.[AuthorizationDateTime]
		  ,P.[ForfeitCode]
		  ,P.[Forfeit]
		  ,M.[PaymentType]
		  ,P.[CustomF1]
		  ,P.[CustomF2]
		  ,P.[CustomF3]
		  ,P.[CustomF4]
		  ,P.[CustomF5]
	FROM [dbo].[T_SalesPayment] P
	LEFT JOIN [dbo].[M_PaymentMethod] M ON M.CompanyCode = P.CompanyCode AND M.PaymentCode = P.PaymentCode
	LEFT JOIN @TB_TransId T ON T.TransId = P.TransId
	WHERE (ISNULL(@TransId, '') = '' OR T.TransId IS NOT NULL)--P.TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode)
		AND ISNULL(P.DataSource, '') <> 'SAP'
	ORDER BY P.TransId, P.LineId
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesPaymentToLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesPaymentToLocal]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50),
	@PaymentCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

	SELECT P.[PaymentCode]
		,P.[CompanyCode]
		,P.[TransId]
		,P.[LineId]
		,P.[TotalAmt]
		,P.[ReceivedAmt]
		,P.[PaidAmt]
		,P.[ChangeAmt]
		,P.[PaymentMode]
		,P.[CardType]
		,P.[CardHolderName]
		,P.[CardNo]
		,P.[VoucherBarCode]
		,P.[VoucherSerial]
		,P.[CreatedBy]
		,P.[CreatedOn]
		,P.[ModifiedBy]
		,P.[ModifiedOn]
		,P.[Status]
		,P.[ChargableAmount]
		,P.[PaymentDiscount]
		,P.[CollectedAmount]
		,P.[RefNumber]
		--,P.[SyncMWIStatus]
		--,P.[SyncMWIDate]
		--,P.[SyncMWIMsg]
		,P.[DataSource]
		--,P.[SyncDate]
		--,P.[SyncSource]
		,P.[Currency]
		,P.[FCAmount]
		,P.[Rate]
		,P.[ShiftId]
		,P.[CardExpiryDate]
		,P.[AdjudicationCode]
		,P.[AuthorizationDateTime]
		,P.[TerminalId]
		,P.[RoundingOff]
		,P.[FCRoundingOff]
		,P.[ForfeitCode]
		,P.[Forfeit]
		,P.[CustomF1]
		,P.[CustomF2]
		,P.[CustomF3]
		,P.[CustomF4]
		,P.[CustomF5]
		,P.[StoreId]
	FROM [dbo].[T_SalesPayment] P WITH (NOLOCK)
	INNER JOIN @TB_TransId T ON T.TransId = P.TransId
	WHERE (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_SalesPromoToLocal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_SalesPromoToLocal]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

	SELECT L.[Id]
		,L.[TransId]
		,L.[CompanyCode]
		,L.[ItemCode]
		,L.[BarCode]
		,L.[RefTransId]
		,L.[ApplyType]
		,L.[ItemGroupId]
		,L.[UOMCode]
		,L.[Value]
		,L.[PromoId]
		,L.[PromoType]
		,L.[PromoTypeLine]
		,L.[CreatedBy]
		,L.[CreatedOn]
		,L.[ModifiedBy]
		,L.[ModifiedOn]
		,L.[Status]
		,L.[PromoPercent]
		,L.[PromoAmt]
		,L.[StoreId]
	FROM [dbo].[T_SalesPromo] L WITH (NOLOCK)
	INNER JOIN [dbo].[T_SalesHeader] H ON H.TransId = L.TransId
	INNER JOIN @TB_TransId T ON T.TransId = L.TransId
	WHERE (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_ShiftHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- EXEC SYNC_S_T_ShiftHeader '', 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_ShiftHeader]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ShiftId]
		,[CompanyCode]
		,[StoreId]
		,[DailyId]
		,[DeviceId]
		,[OpenAmt]
		,[EndAmt]
		,[ShiftTotal]
		,[CreatedOn]
		,[CreatedBy]
		,[ModifiedOn]
		,[ModifiedBy]
		,[Status]
	FROM [dbo].[T_ShiftHeader] H WITH (NOLOCK)
	WHERE (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@TransId, '') = '' OR H.ShiftId = @TransId)
		AND (ISNULL(@StoreId, '') = '' OR H.StoreId = @StoreId)
		AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_ShiftLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_ShiftLine]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ShiftId]
		,[CompanyCode]
		,[PaymentCode]
		,[Currency]
		,[Value]
		,[FCValue]
		,[CreatedOn]
		,[CreatedBy]
		,[ModifiedOn]
		,[ModifiedBy]
		,[Status]
		,[CollectAmount]
		,[FCCollectedAmount]
	FROM [dbo].[T_ShiftLine] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.ShiftId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_ShiftSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_ShiftSummary]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(4000),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [CompanyCode]
      ,[ShiftId]
      ,[TerminalId]
      ,[SummaryType]
      ,[SummaryValue]
      ,[SummaryCount]
      ,[SummaryAmount]
      ,[Currency]
      ,[CreatedOn]
      ,[CreatedBy]
      ,[ModifiedOn]
      ,[ModifiedBy]
  FROM [dbo].[T_ShiftSummary] L WITH (NOLOCK)
	WHERE (ISNULL(@TransId, '') = '' OR L.ShiftId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''))
		AND (ISNULL(@CompanyCode, '') = '' OR L.CompanyCode = @CompanyCode)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_StoreSummaryDetails]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_S_T_StoreSummaryDetails 'CP001', '211101;211101'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_StoreSummaryDetails]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@DailyId nvarchar(50),
	@StoreId nvarchar(50),
	@TerminalId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE @TB_TransId TABLE
	--(
	--	TransId nvarchar(50)
	--)
	--INSERT INTO @TB_TransId
	--SELECT DISTINCT Value FROM string_split(@DailyId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	SELECT T.[CompanyCode]
		,T.[StoreId]
		,T.[DailyId]
		,T.[TerminalId]
		,T.[SummaryType]
		,T.[SummaryValue]
		,T.[SummaryCount]
		,T.[SummaryAmount]
		,T.[BusinessDate]
		,T.[Currency]
		,T.[CreatedOn]
		,T.[CreatedBy]
		,T.[ModifiedOn]
		,T.[ModifiedBy]
	FROM [dbo].[T_StoreSummary] T --WITH (NOLOCK)
	WHERE (T.DailyId = @DailyId)--L.DailyId IN (SELECT Value FROM string_split(@DailyId, ';') WHERE RTRIM(value) <> ''))
		AND (T.CompanyCode = @CompanyCode)
		AND (T.StoreId = @StoreId)
		AND (T.TerminalId = @TerminalId)

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_S_T_StoreSummaryHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- EXEC SYNC_S_T_StoreSummaryHeader 'CP001', ''
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_S_T_StoreSummaryHeader]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@DailyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT [CompanyCode]
		,[StoreId]
		,[DailyId]
		,[TerminalId]
		,[BusinessDate]
		,CONVERT(VARCHAR(10), [CreatedOn], 105) AS [CreatedOn]
	FROM [dbo].[T_StoreSummary] H WITH (NOLOCK)
	WHERE (ISNULL(@CompanyCode, '') = '' OR H.CompanyCode = @CompanyCode)
		AND (ISNULL(@DailyId, '') = '' OR H.DailyId = @DailyId)
		AND ISNULL(H.SyncMWIStatus, 'A') <> 'Y'
		
END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_TransactionCheck]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_TransactionCheck 'CP001', 'SL02300300000504'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_TransactionCheck] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	DECLARE @CheckHeader int
	SET @CheckHeader = (SELECT COUNT(*) FROM T_SalesHeader WHERE CompanyCode = @CompanyCode AND TransId = @TransId)
	IF @CheckHeader IS NULL OR @CheckHeader <= 0
	BEGIN
		SELECT 'Header' AS 'Type', 0 AS 'Code'
		RETURN
	END

	DECLARE @CheckLine int
	SET @CheckLine = (SELECT COUNT(*) FROM T_SalesLine WHERE CompanyCode = @CompanyCode AND TransId = @TransId)
	IF @CheckLine IS NULL OR @CheckLine <= 0
	BEGIN
		SELECT 'Line' AS 'Type', 0 AS 'Code'
		RETURN
	END

	DECLARE @TotalPayable decimal(19, 6)
	SET @TotalPayable = (SELECT TOP 1 TotalPayable FROM T_SalesHeader WHERE CompanyCode = @CompanyCode AND TransId = @TransId)

	DECLARE @CheckPayment int
	SET @CheckPayment = (SELECT COUNT(*) FROM T_SalesPayment WHERE CompanyCode = @CompanyCode AND TransId = @TransId)

	IF @CheckPayment IS NULL OR @CheckPayment <= 0
	BEGIN
		IF @TotalPayable IS NOT NULL AND @TotalPayable > 0
		BEGIN
			SELECT 'Payment' AS 'Type', 0 AS 'Code'
			RETURN
		END
	END

	SELECT 'Transaction' AS 'Type', 1 AS 'Code'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_BOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_BOM]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_BOMDetailsType M_BOMDetailsType READONLY
AS
BEGIN TRANSACTION
	BEGIN
		SET nocount ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Bill of Materials successfully.' -- Error message

		-- Get BOM Header update
		SELECT DISTINCT V.ItemCode, V.CompanyCode INTO #M_BOMHeader_UPDATE
		  FROM @M_BOMDetailsType V LEFT JOIN M_BOMHeader M ON V.ItemCode = M.ItemCode AND V.CompanyCode = M.CompanyCode
		 WHERE M.ItemCode IS NOT NULL;
		-- Get BOM Header Insert
		SELECT DISTINCT V.ItemCode, V.CompanyCode INTO #M_BOMHeader_INSERT
		  FROM @M_BOMDetailsType V LEFT JOIN M_BOMHeader M ON V.ItemCode = M.ItemCode AND V.CompanyCode = M.CompanyCode
		 WHERE M.ItemCode IS NULL;

		-- INSERT NEW BOM HEADER =========================================================================================================
		INSERT INTO M_BOMHeader ([ItemCode]
				,[CompanyCode]
				,[ItemName]
				,[Quantity]
				,[UOMCode]
				,[CreatedBy]
				,[CreatedOn]
				,[Status]
		)

		SELECT DISTINCT V.[ItemCode]
			 , V.[CompanyCode]
			 , V.[ItemName]
			 , V.[Quantity]
			 , V.[UOMCode]
			 , @UserID
			 , GETDATE()
			 , V.[Status]
		  FROM @M_BOMDetailsType V INNER JOIN #M_BOMHeader_INSERT M ON V.[ItemCode] = M.[ItemCode] AND V.[CompanyCode] = M.[CompanyCode];
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ===============================================================================================================================
		-- UPDATE BOM HEADER =============================================================================================================
		UPDATE [dbo].[M_BOMHeader]
		   SET [ItemCode] = V.[ItemCode]
			  ,[CompanyCode] = V.[CompanyCode]
			  ,[ItemName] = V.[ItemName]
			  ,[Quantity] = V.[Quantity]
			  ,[UOMCode] = V.[UOMCode]
			  ,[ModifiedBy] = @UserID
			  ,[ModifiedOn] = GETDATE()
			  ,[Status] = V.[Status]
		  FROM @M_BOMDetailsType V INNER JOIN #M_BOMHeader_UPDATE M ON V.ItemCode = M.ItemCode AND V.CompanyCode = M.CompanyCode
		 WHERE V.CompanyCode = M_BOMHeader.CompanyCode AND V.ItemCode = M_BOMHeader.ItemCode;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- =============================================================================================================================
		DELETE M_BOMLine FROM M_BOMLine M INNER JOIN @M_BOMDetailsType V ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.BOMId;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- INSERT NEW BOM LINE =========================================================================================================
		INSERT INTO M_BOMLine ([CompanyCode]
			   ,[BOMId]
			   ,[ItemCode]
			   ,[ItemName]
			   ,[UOMCode]
			   ,[Quantity]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[Status]
			   ,[IsOption]
			   ,[OptionGroup]
			   ,[TriggerStatus]
			   ,[TriggerSystem]
		)
		SELECT V.[CompanyCode]
			 ,V.[ItemCode]
			 ,V.[SubItemCode]
			 ,V.[SubItemName]
			 ,V.[SubUOMCode]
			 ,V.[SubQuantity]
			 ,@UserID
			 ,GETDATE()
			 ,V.[SubStatus]
			 ,V.[IsOption]
			 ,V.[OptionGroup]
			 ,V.[TriggerStatus]
			 ,V.[TriggerSystem]
		  FROM @M_BOMDetailsType V;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- =============================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_Customer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_Customer]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_CustomerType M_CustomerType READONLY
AS
BEGIN TRANSACTION
	BEGIN
		SET NOCOUNT ON;

		--DECLARE @M_CustomerType M_CustomerType

		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Customer list successfully.' -- Error message
		DECLARE @RCount int = 0

		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.CustomerId INTO #M_CUSTOMER_UPDATE
		  FROM @M_CustomerType V INNER JOIN M_Customer M ON V.CompanyCode = M.CompanyCode AND V.CustomerId = M.CustomerId

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.CustomerId INTO #M_CUSTOMER_INSERT
		  FROM @M_CustomerType V LEFT OUTER JOIN M_Customer M ON V.CompanyCode = M.CompanyCode AND V.CustomerId = M.CustomerId
		 WHERE M.CustomerId IS NULL
		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_CustomerType

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO [dbo].[M_Customer]
			   ([CompanyCode]
			   ,[CustomerId]
			   ,[CustomerGrpId]
			   ,[CustomerName]
			   ,[Address]
			   ,[Phone]
			   ,[DOB]
			   ,[JoinedDate]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[CusType]
			   ,[SyncDate]
			   ,[SyncSource]
			)
		SELECT V.[CompanyCode]
			 , V.[CustomerId]
			 , V.[CustomerGrpId]
			 , V.[CustomerName]
			 , V.[Address]
			 , V.[Phone]
			 , V.[DOB]
			 , V.[JoinedDate]
			 , V.[CreatedBy]
			 , V.[CreatedOn]
			 , V.[ModifiedBy]
			 , V.[ModifiedOn]
			 , V.[Status]
			 , V.[CusType]
			 , GETDATE()
			 , @UserID
		  FROM @M_CustomerType V INNER JOIN #M_CUSTOMER_INSERT M ON V.CompanyCode = M.CompanyCode AND V.CustomerId = M.CustomerId;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		-- UPDATE OWHS ==============================================================================================================
		UPDATE [dbo].[M_Customer]
		   SET [CompanyCode] = V.[CompanyCode]
			  ,[CustomerId] = V.[CustomerId]
			  ,[CustomerGrpId] = V.[CustomerGrpId]
			  ,[CustomerName] = V.[CustomerName]
			  ,[Address] = V.[Address]
			  ,[Phone] = V.[Phone]
			  ,[DOB] = V.[DOB]
			  ,[JoinedDate] = V.[JoinedDate]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = V.[ModifiedBy]
			  ,[ModifiedOn] = V.[ModifiedOn]
			  ,[Status] = V.[Status]
			  ,[CusType] = V.[CusType]
			  ,[SyncDate] = GETDATE()
			  ,[SyncSource] = @UserID
		  FROM @M_CustomerType V INNER JOIN #M_CUSTOMER_UPDATE M ON V.CompanyCode = M.CompanyCode AND V.CustomerId = M.CustomerId
		  WHERE V.CustomerId = [M_Customer].CustomerId AND V.CompanyCode = [M_Customer].CompanyCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_Items]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_Items]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_ItemsType M_ItemsType READONLY
AS

    -- Insert statements for procedure here
BEGIN TRANSACTION
	BEGIN
		SET nocount ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Items successfully.' -- Error message

		--DECLARE @M_ItemsType M_ItemsType

		-- Get Items update
		SELECT ItemCode INTO #M_Item_UPDATE
		  FROM @M_ItemsType
		 WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		-- Get Items Insert
		SELECT ItemCode INTO #M_Item_INSERT
		  FROM @M_ItemsType
		 WHERE ItemCode NOT IN (SELECT ItemCode FROM M_Item);

		-- INSERT NEW ITEMS =========================================================================================================
		INSERT INTO M_Item ([ItemCode]
							, [CompanyCode]
							, [ProductId]
							, [VariantId]
							, [CreatedBy]
							, [CreatedOn]
							--, [ModifiedBy]
							--, [ModifiedOn]
							, [Status]
							, [CapacityValue]
							, [ItemGroupId]
							, [SalesTaxCode]
							, [PurchaseTaxCode]
							, [ItemName]
							, [ItemDescription]
							, [ItemCategory_1]
							, [ItemCategory_2]
							, [ItemCategory_3]
							, [ForeignName]
							, [InventoryUOM]
							, [ImageURL]
							, [ImageLink]
							, [MCId]
							, [CustomField1]
							, [CustomField2]
							, [CustomField3]
							, [CustomField4]
							, [CustomField5]
							, [CustomField6]
							, [CustomField7]
							, [CustomField8]
							, [CustomField9]
							, [CustomField10]
							, [DefaultPrice]
							, [IsSerial]
							, [IsBOM]
							, [isVoucher]
							, [ValidFrom]
							, [ValidTo]
							, [Returnable]
							, [IsPriceTime]
		)
		SELECT [ItemCode]
			 , CompanyCode
			 , [ProductId]
			 , [VariantId]
			 , @UserID
			 , GetDate()
			 --, [ModifiedBy]
			 --, [ModifiedOn]
			 , [Status]
			 , [CapacityValue]
			 , [ItemGroupId]
			 , [SalesTaxCode]
			 , [PurchaseTaxCode]
			 , [ItemName]
			 , [ItemDescription]
			 , [ItemCategory_1]
			 , [ItemCategory_2]
			 , [ItemCategory_3]
			 , [ForeignName]
			 , [InventoryUOM]
			 , [ImageURL]
			 , [ImageLink]
			 , [MCId]
			 , [CustomField1]
			 , [CustomField2]
			 , [CustomField3]
			 , [CustomField4]
			 , [CustomField5]
			 , [CustomField6]
			 , [CustomField7]
			 , [CustomField8]
			 , [CustomField9]
			 , [CustomField10]
			 , [DefaultPrice]
			 , [IsSerial] --CASE WHEN [IsSerial] = 'Y' THEN 1 ELSE 0 END
			 , [IsBOM] --CASE WHEN [IsBOM] = 'Y' THEN 1 ELSE 0 END
			 , [IsVoucher]
			 , [ValidFrom]
			 , [ValidTo]
			 , [Returnable]
			 , [IsPriceTime]
		  FROM @M_ItemsType 
		 WHERE [ItemCode] IN (SELECT [ItemCode] FROM #M_Item_INSERT);
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
		-- UPDATE ITEMS =============================================================================================================
		UPDATE M_Item
		   SET [CompanyCode] = V.CompanyCode
			   , [ProductId] = V.ProductId
			   , [VariantId] = V.VariantId
			   , [ModifiedBy] = @UserID
			   , [ModifiedOn] = GetDate()
			   , [Status] = V.[Status]
			   , [CapacityValue] = V.CapacityValue
			   , [ItemGroupId] = V.ItemGroupId
			   , [SalesTaxCode] = V.SalesTaxCode
			   , [PurchaseTaxCode] = V.PurchaseTaxCode
			   , [ItemName]		   = V.ItemName
			   , [ItemDescription] = V.ItemDescription
			   , [ItemCategory_1]  = V.ItemCategory_1
			   , [ItemCategory_2]  = V.ItemCategory_2
			   , [ItemCategory_3]  = V.ItemCategory_3
			   , [ForeignName]	   = V.ForeignName
			   , [InventoryUOM]	   = V.InventoryUOM
			   , [ImageURL]		   = V.ImageURL
			   , [ImageLink]	   = V.ImageLink
			   , [MCId]			   = V.MCId
			   , [CustomField1]	   = V.CustomField1
			   , [CustomField2]	   = V.CustomField2
			   , [CustomField3]	   = V.CustomField3
			   , [CustomField4]	   = V.CustomField4
			   , [CustomField5]	   = V.CustomField5
			   , [CustomField6]	   = V.CustomField6
			   , [CustomField7]	   = V.CustomField7
			   , [CustomField8]	   = V.CustomField8
			   , [CustomField9]	   = V.CustomField9
			   , [CustomField10]   = V.CustomField10
			   , [DefaultPrice]	   = V.DefaultPrice
			   , [IsSerial]		   = V.IsSerial-- CASE WHEN V.IsSerial = 'Y' THEN 1 ELSE 0 END
			   , [IsBOM]		   = V.IsBOM --CASE WHEN V.IsBOM = 'Y' THEN 1 ELSE 0 END
			   , [isVoucher]		= V.IsVoucher
			   , [ValidFrom]	   = V.ValidFrom
			   , [ValidTo]		   = V.ValidTo
			   , [Returnable]	   = V.[Returnable]
			   , [IsPriceTime]     = V.[IsPriceTime]
		  FROM @M_ItemsType V INNER JOIN M_Item M ON V.ItemCode = M.ItemCode
		 WHERE V.ItemCode IN (SELECT ItemCode FROM #M_Item_UPDATE);
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_ItemUOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_ItemUOM]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_ItemUomType M_ItemUomType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		SET NOCOUNT ON;
		
		--DECLARE @M_ItemUomType M_ItemUomType
		
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save ItemUOM list successfully.' -- Error message
		DECLARE @RCount int = 0
		/*
		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.ItemCode, V.UOMCode INTO #M_ItemUOM_UPDATE
		  FROM @M_ItemUomType V INNER JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode;

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.ItemCode, V.UOMCode INTO #M_ItemUOM_INSERT
		  FROM @M_ItemUomType V LEFT OUTER JOIN M_ItemUOM M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode
		 WHERE M.ItemCode IS NULL;
		 */

		--DECLARE @M_ItemUomType M_ItemUomType

		DELETE M_ItemUOM;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End

		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_ItemUomType;

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO M_ItemUOM([ItemCode]
						   ,[UOMCode]
						   ,[CompanyCode]
						   ,[Factor]
						   ,[BarCode]
						   ,[QRCode]
						   ,[CreatedBy]
						   ,[CreatedOn]
						   --,[ModifiedBy]
						   --,[ModifiedOn]
						   ,[Status]
		)
		SELECT V.[ItemCode]
			 , V.[UOMCode]
			 , V.[CompanyCode]
			 , V.[Factor]
			 , V.[BarCode]
			 , V.[QRCode]
			 , @UserID
			 , GetDate()
			 , V.[Status]
		  FROM @M_ItemUomType V -- INNER JOIN #M_ItemUOM_INSERT M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		/*
		-- UPDATE OWHS ==============================================================================================================
		UPDATE M_ItemUOM
		   SET [ItemCode] = V.[ItemCode]
			  ,[UOMCode] = V.[UOMCode]
			  ,[CompanyCode] = V.[CompanyCode]
			  ,[Factor] = V.[Factor]
			  ,[BarCode] = V.[BarCode]
			  ,[QRCode] = V.[QRCode]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = @UserID
			  ,[ModifiedOn] = GETDATE()
			  ,[Status] = V.[Status]
		  FROM @M_ItemUomType V INNER JOIN #M_ItemUOM_UPDATE M ON V.CompanyCode = M.CompanyCode AND V.ItemCode = M.ItemCode AND V.UOMCode = M.UOMCode
		  WHERE V.CompanyCode = M_ItemUOM.CompanyCode AND V.ItemCode = M_ItemUOM.ItemCode AND M_ItemUOM.UOMCode = M.UOMCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
		*/

	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_ITMGRPS]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_ITMGRPS]
(	
	@UserID NVARCHAR(25),
	@M_ITMGRPSType M_ITMGRPSType READONLY
)
AS
BEGIN TRANSACTION
	BEGIN
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Item Group(s) successfully.' -- Error message
		DECLARE @RCount int = 0

		

		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.IGId INTO #M_ITMGRPS_UPDATE
		  FROM @M_ITMGRPSType V INNER JOIN M_ItemGroup M ON V.CompanyCode = M.CompanyCode AND V.IGId = M.IGId;

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.IGId INTO #M_ITMGRPS_INSERT
		  FROM @M_ITMGRPSType V LEFT OUTER JOIN M_ItemGroup M ON V.CompanyCode = M.CompanyCode AND V.IGId = M.IGId
		 WHERE M.IGId IS NULL;
		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_ITMGRPSType;

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO M_ItemGroup( [CompanyCode]
							  , [IGId]
							  , [IGName]
							  , [Status]
							  , [CreatedBy]
							  , [CreatedOn]
		)
		SELECT V.[CompanyCode]
			 , V.[IGId]
			 , V.[IGName]
			 , V.[Status]
			 , @UserID
			 , GetDate()
		  FROM @M_ITMGRPSType V INNER JOIN #M_ITMGRPS_INSERT M ON V.CompanyCode = M.CompanyCode AND V.IGId = M.IGId;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		-- UPDATE OWHS ==============================================================================================================
		UPDATE M_ItemGroup
		   SET [IGName] = V.[IGName]
			 , [Status] = V.[Status]
			 , [ModifiedBy] = @UserID
			 , [ModifiedOn] = GetDate()
		  FROM @M_ITMGRPSType V INNER JOIN #M_ITMGRPS_UPDATE M ON V.CompanyCode = M.CompanyCode AND V.IGId = M.IGId
		 WHERE V.CompanyCode = M.CompanyCode AND V.IGId = M.IGId;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_PriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_PriceList]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_PriceList M_PriceListType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @M_PriceList M_PriceListType

		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save PriceList list successfully.' -- Error message
		DECLARE @RCount int = 0

		SELECT @RCount = count(ItemCode)
		FROM @M_PriceList;

		IF @RCount > 0
			BEGIN
				--DELETE I
				--FROM M_PriceList I
				--INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode AND I.StoreId = M.StoreId

				DECLARE @StatusGuid uniqueidentifier;
				SET @StatusGuid = NEWID();

				-- UPDATE PRICE LIST ==============================================================================================================
				UPDATE IU
				   SET [CompanyCode] = I.[CompanyCode]
					  ,[StoreId] = I.[StoreId]
					  ,[ItemCode] = I.[ItemCode]
					  ,[UOMCode] = I.[UOMCode]
					  ,[BarCode] = I.[BarCode]
					  ,[PriceListId] = I.[PriceListId]
					  ,[PriceBeforeTax] = I.[PriceBeforeTax]
					  ,[PriceAfterTax] = I.[PriceAfterTax]
					  ,[ValidFrom] = I.[ValidFrom]
					  ,[ValidTo] = I.[ValidFrom]
					  --,[CreatedBy] = V.[CreatedBy]
					  --,[CreatedOn] = V.[CreatedOn]
					  ,[ModifiedBy] = I.[ModifiedBy]
					  ,[ModifiedOn] = I.[ModifiedOn]
					  ,[Status] = I.[Status]
					  ,[SyncDate] = GETDATE()
					  ,[SyncSource] = @UserID
					  ,[StatusGuid] = @StatusGuid
				  FROM M_PriceList IU
					INNER JOIN @M_PriceList I 
						ON IU.CompanyCode = I.CompanyCode  
						AND IU.StoreId = I.StoreId 
						AND IU.ItemCode = I.ItemCode 
						AND IU.UOMCode = I.UOMCode
						AND IU.BarCode = I.BarCode
						AND IU.PriceListId = I.PriceListId
						AND IU.ValidTo = I.ValidTo
				WHERE ISNULL(I.CompanyCode, '') <> ''
					AND ISNULL(I.StoreId, '') <> ''
					AND ISNULL(I.ItemCode, '') <> ''
					AND ISNULL(I.UOMCode, '') <> ''
					AND ISNULL(I.BarCode, '') <> ''
					AND ISNULL(I.PriceListId, '') <> ''
					AND ISNULL(I.ValidTo, '') <> ''
				If @@ERROR <> 0 
					Begin
						Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
						Goto HANDLE_ERROR --> Roll back when execute failed ...
					End
				-- ==========================================================================================================================
				
				-- INSERT NEW PRICE LIST ====================================================================================================
				INSERT INTO [dbo].[M_PriceList]
						([CompanyCode]
						,[StoreId]
						,[ItemCode]
						,[UOMCode]
						,[BarCode]
						,[PriceListId]
						,[PriceBeforeTax]
						,[PriceAfterTax]
						,[ValidFrom]
						,[ValidTo]
						,[CreatedBy]
						,[CreatedOn]
						,[ModifiedBy]
						,[ModifiedOn]
						,[Status]
						,[SyncDate]
						,[SyncSource]
						,[StatusGuid]
				)
				SELECT I.[CompanyCode]
						,I.[StoreId]
						,I.[ItemCode]
						,I.[UOMCode]
						,I.[BarCode]
						,I.[PriceListId]
						,I.[PriceBeforeTax]
						,I.[PriceAfterTax]
						,I.[ValidFrom]
						,I.[ValidTo]
						,I.[CreatedBy]
						,I.[CreatedOn]
						,I.[ModifiedBy]
						,I.[ModifiedOn]
						,I.[Status]
						,GETDATE()
						,@UserID
						,@StatusGuid
				FROM @M_PriceList I 
				LEFT JOIN [M_PriceList] IU
					ON I.CompanyCode = IU.CompanyCode  
						AND I.StoreId = IU.StoreId 
						AND I.ItemCode = IU.ItemCode 
						AND I.UOMCode = IU.UOMCode
						AND I.BarCode = IU.BarCode
						AND I.PriceListId = IU.PriceListId
						AND I.ValidTo = IU.ValidTo
				WHERE ISNULL(I.CompanyCode, '') <> ''
					AND ISNULL(I.StoreId, '') <> ''
					AND ISNULL(I.ItemCode, '') <> ''
					AND ISNULL(I.UOMCode, '') <> ''
					AND ISNULL(I.BarCode, '') <> ''
					AND ISNULL(I.PriceListId, '') <> ''
					AND ISNULL(I.ValidTo, '') <> ''
					AND IU.StoreId IS NULL
					AND IU.ItemCode IS NULL
					AND IU.UOMCode IS NULL
					AND IU.BarCode IS NULL
					AND IU.PriceListId IS NULL
					AND IU.ValidTo IS NULL

				If @@ERROR <> 0 
					Begin
						Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
						Goto HANDLE_ERROR --> Roll back when execute failed ...
					End
				-- ==========================================================================================================================

				---- DELETE PRICE LIST ====================================================================================================
				DELETE IU
				FROM M_PriceList IU 
				LEFT JOIN @M_PriceList I --ON IU.CompanyCode = MI.CompanyCode AND IU.ItemCode = MI.ItemCode AND IU.UOMCode = MI.UOMCode AND IU.BarCode = MI.BarCode 
					ON IU.CompanyCode = I.CompanyCode  
						AND IU.StoreId = I.StoreId 
						AND IU.ItemCode = I.ItemCode 
						AND IU.UOMCode = I.UOMCode
						AND IU.BarCode = I.BarCode
						AND IU.PriceListId = I.PriceListId
						AND IU.ValidTo = I.ValidTo
				INNER JOIN @M_PriceList T
					ON IU.CompanyCode = T.CompanyCode  
						AND IU.StoreId = T.StoreId 
						AND IU.ItemCode = T.ItemCode 
				WHERE I.StoreId IS NULL
					AND I.ItemCode IS NULL
					AND I.UOMCode IS NULL
					AND I.BarCode IS NULL
					AND I.PriceListId IS NULL
					AND I.ValidTo IS NULL
				If @@ERROR <> 0 
					Begin
						Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
						Goto HANDLE_ERROR --> Roll back when execute failed ...
					End
				-- ==========================================================================================================================

				INSERT INTO [dbo].[T_SyncActionData]
				   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
				SELECT DISTINCT CompanyCode, 'M_PriceList', StoreId, @StatusGuid, GETDATE(), 'IU' FROM @M_PriceList

			END

		---- INSERT NEW OWHS ====================================================================================================
		--INSERT INTO [dbo].[M_PriceList]
		--	   ([CompanyCode]
		--	   ,[StoreId]
		--	   ,[ItemCode]
		--	   ,[UOMCode]
		--	   ,[BarCode]
		--	   ,[PriceListId]
		--	   ,[PriceBeforeTax]
		--	   ,[PriceAfterTax]
		--	   ,[ValidFrom]
		--	   ,[ValidTo]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status]
		--	   ,[SyncDate]
		--	   ,[SyncSource]
		--)
		--SELECT V.[CompanyCode]
		--	  ,V.[StoreId]
		--	  ,V.[ItemCode]
		--	  ,V.[UOMCode]
		--	  ,V.[BarCode]
		--	  ,V.[PriceListId]
		--	  ,V.[PriceBeforeTax]
		--	  ,V.[PriceAfterTax]
		--	  ,V.[ValidFrom]
		--	  ,V.[ValidTo]
		--	  ,V.[CreatedBy]
		--	  ,V.[CreatedOn]
		--	  ,V.[ModifiedBy]
		--	  ,V.[ModifiedOn]
		--	  ,V.[Status]
		--	  ,GETDATE()
		--	  ,@UserID
		--FROM @M_PriceList V 
		--WHERE ISNULL(V.CompanyCode, '') <> ''
		--	AND ISNULL(V.StoreId, '') <> ''
		--	AND ISNULL(V.ItemCode, '') <> ''
		--	AND ISNULL(V.UOMCode, '') <> ''
		--	AND ISNULL(V.BarCode, '') <> ''
		--	AND ISNULL(V.PriceListId, '') <> ''
		--	AND ISNULL(V.ValidTo, '') <> ''

		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================



		--IF @RCount > 0
		--	BEGIN
		--		DELETE I
		--		FROM M_PriceList I
		--		INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode --AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.BarCode = M.BarCode --AND I.ValidTo = M.ValidTo
		--		WHERE ISNULL(I.PriceListId, '') <> ISNULL(M.PriceListId, '') OR ISNULL(I.ValidTo, '') <> ISNULL(M.ValidTo, '') --OR ISNULL(I.BarCode, '') <> ISNULL(M.BarCode, '')
		--	END

		---- Get Items update
		--SELECT DISTINCT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_U
		--FROM @M_PriceList I INNER JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		--WHERE ISNULL(I.PriceListId, '') <> ''

		-- --WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		---- Get Items Insert
		--SELECT DISTINCT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_I
		--  FROM @M_PriceList I LEFT JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		-- WHERE ISNULL(I.PriceListId, '') <> '' AND M.ItemCode IS NULL

		---- INSERT NEW OWHS ====================================================================================================
		--INSERT INTO [dbo].[M_PriceList]
		--	   ([CompanyCode]
		--	   ,[StoreId]
		--	   ,[ItemCode]
		--	   ,[UOMCode]
		--	   ,[BarCode]
		--	   ,[PriceListId]
		--	   ,[PriceBeforeTax]
		--	   ,[PriceAfterTax]
		--	   ,[ValidFrom]
		--	   ,[ValidTo]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status]
		--	   ,[SyncDate]
		--	   ,[SyncSource]
		--)
		--SELECT V.[CompanyCode]
		--	  ,V.[StoreId]
		--	  ,V.[ItemCode]
		--	  ,V.[UOMCode]
		--	  ,V.[BarCode]
		--	  ,V.[PriceListId]
		--	  ,V.[PriceBeforeTax]
		--	  ,V.[PriceAfterTax]
		--	  ,V.[ValidFrom]
		--	  ,V.[ValidTo]
		--	  ,V.[CreatedBy]
		--	  ,V.[CreatedOn]
		--	  ,V.[ModifiedBy]
		--	  ,V.[ModifiedOn]
		--	  ,V.[Status]
		--	  ,GETDATE()
		--	  ,@UserID
		--  FROM @M_PriceList V 
		--	INNER JOIN #M_PriceList_I M 
		--		ON V.CompanyCode = M.CompanyCode  
		--		AND V.StoreId = M.StoreId 
		--		AND V.ItemCode = M.ItemCode 
		--		AND V.UOMCode = M.UOMCode
		--		AND V.BarCode = M.BarCode
		--		AND V.PriceListId = M.PriceListId
		--		AND V.ValidTo = M.ValidTo;
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================


		----SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		----FROM M_PriceList I
		----INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode --AND I.BarCode = M.BarCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.ValidTo = M.ValidTo
		------WHERE I.PriceListId <> M.PriceListId OR I.ValidTo <> M.ValidTo

		----RETURN

		--IF @RCount > 0
		--	BEGIN
		--		DELETE I--.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		--		FROM M_PriceList I
		--		INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode --AND I.BarCode = M.BarCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.ValidTo = M.ValidTo
		--		--WHERE I.PriceListId <> M.PriceListId OR I.ValidTo <> M.ValidTo
		--	END

		------ Get Items update ----------------------------------------------------------------------
		----SELECT V.CompanyCode, V.StoreId, V.ItemCode, V.UOMCode, V.BarCode, V.PriceListId, V.ValidTo INTO #M_PriceList_UPDATE
		----  FROM @M_PriceList V INNER JOIN M_PriceList M 
		----	ON V.CompanyCode = M.CompanyCode  
		----		AND V.StoreId = M.StoreId 
		----		AND V.ItemCode = M.ItemCode 
		----		AND V.UOMCode = M.UOMCode
		----		AND V.PriceListId = M.PriceListId
		----		AND V.ValidTo = M.ValidTo;

		---- Get Items update
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_UPDATE
		--FROM @M_PriceList I INNER JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		--WHERE ISNULL(I.PriceListId, '') <> ''

		------ Get Items Insert ----------------------------------------------------------------------
		----SELECT V.CompanyCode, V.StoreId, V.ItemCode, V.UOMCode, V.BarCode, V.PriceListId, V.ValidTo INTO #M_PriceList_INSERT
		----  FROM @M_PriceList V 
		----	LEFT OUTER JOIN M_PriceList M 
		----		ON V.CompanyCode = M.CompanyCode 
		----		AND V.StoreId = M.StoreId 
		----		AND V.ItemCode = M.ItemCode 
		----		AND V.UOMCode = M.UOMCode
		----		AND V.PriceListId = M.PriceListId
		----		AND V.ValidTo = M.ValidTo
		---- WHERE M.ItemCode IS NULL;
		------ Count rows -----------------------------------
		----SELECT @RCount  = count(*) from @M_PriceList;

		---- Get Items Insert
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_INSERT
		--  FROM @M_PriceList I LEFT JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		-- WHERE ISNULL(I.PriceListId, '') <> '' AND M.ItemCode IS NULL

		-- ====================================================================================================================

		--SELECT I.*--.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		--FROM M_PriceList I
		--INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.BarCode = M.BarCode-- AND I.ValidTo = M.ValidTo
		--WHERE ISNULL(I.BarCode, '') <> ISNULL(M.BarCode, '') OR ISNULL(I.PriceListId, '') <> ISNULL(M.PriceListId, '') OR ISNULL(I.ValidTo, '') <> ISNULL(M.ValidTo, '')

		--Return

		--IF @RCount > 0
		--	BEGIN
		--		DELETE I--.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		--		FROM M_PriceList I
		--		INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.BarCode = M.BarCode --AND I.ValidTo = M.ValidTo
		--		WHERE ISNULL(I.PriceListId, '') <> ISNULL(M.PriceListId, '') OR ISNULL(I.ValidTo, '') <> ISNULL(M.ValidTo, '') OR ISNULL(I.BarCode, '') <> ISNULL(M.BarCode, '')
		--	END

		---- Get Items update
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_U
		--FROM @M_PriceList I INNER JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		--WHERE ISNULL(I.BarCode, '') <> '' AND ISNULL(I.PriceListId, '') <> ''

		-- --WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		---- Get Items Insert
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_I
		--  FROM @M_PriceList I LEFT JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		-- WHERE ISNULL(I.BarCode, '') <> '' AND ISNULL(I.PriceListId, '') <> '' AND M.ItemCode IS NULL

		---- INSERT NEW OWHS ====================================================================================================
		--INSERT INTO [dbo].[M_PriceList]
		--	   ([CompanyCode]
		--	   ,[StoreId]
		--	   ,[ItemCode]
		--	   ,[UOMCode]
		--	   ,[BarCode]
		--	   ,[PriceListId]
		--	   ,[PriceBeforeTax]
		--	   ,[PriceAfterTax]
		--	   ,[ValidFrom]
		--	   ,[ValidTo]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status]
		--	   ,[SyncDate]
		--	   ,[SyncSource]
		--)
		--SELECT V.[CompanyCode]
		--	  ,V.[StoreId]
		--	  ,V.[ItemCode]
		--	  ,V.[UOMCode]
		--	  ,V.[BarCode]
		--	  ,V.[PriceListId]
		--	  ,V.[PriceBeforeTax]
		--	  ,V.[PriceAfterTax]
		--	  ,V.[ValidFrom]
		--	  ,V.[ValidTo]
		--	  ,V.[CreatedBy]
		--	  ,V.[CreatedOn]
		--	  ,V.[ModifiedBy]
		--	  ,V.[ModifiedOn]
		--	  ,V.[Status]
		--	  ,GETDATE()
		--	  ,@UserID
		--  FROM @M_PriceList V 
		--	INNER JOIN #M_PriceList_I M 
		--		ON V.CompanyCode = M.CompanyCode  
		--		AND V.StoreId = M.StoreId 
		--		AND V.ItemCode = M.ItemCode 
		--		AND V.UOMCode = M.UOMCode
		--		AND V.BarCode = M.BarCode
		--		AND V.PriceListId = M.PriceListId
		--		AND V.ValidTo = M.ValidTo;
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================

		---- UPDATE OWHS ==============================================================================================================
		--UPDATE [dbo].[M_PriceList]
		--   SET [CompanyCode] = V.[CompanyCode]
		--	  ,[StoreId] = V.[StoreId]
		--	  ,[ItemCode] = V.[ItemCode]
		--	  ,[UOMCode] = V.[UOMCode]
		--	  ,[BarCode] = V.[BarCode]
		--	  ,[PriceListId] = V.[PriceListId]
		--	  ,[PriceBeforeTax] = V.[PriceBeforeTax]
		--	  ,[PriceAfterTax] = V.[PriceAfterTax]
		--	  ,[ValidFrom] = V.[ValidFrom]
		--	  ,[ValidTo] = V.[ValidFrom]
		--	  --,[CreatedBy] = V.[CreatedBy]
		--	  --,[CreatedOn] = V.[CreatedOn]
		--	  ,[ModifiedBy] = V.[ModifiedBy]
		--	  ,[ModifiedOn] = V.[ModifiedOn]
		--	  ,[Status] = V.[Status]
		--	  ,[SyncDate] = GETDATE()
		--	  ,[SyncSource] = @UserID
		--  FROM @M_PriceList V 
		--	INNER JOIN #M_PriceList_U M 
		--		ON V.CompanyCode = M.CompanyCode  
		--		AND V.StoreId = M.StoreId 
		--		AND V.ItemCode = M.ItemCode 
		--		AND V.UOMCode = M.UOMCode
		--		AND V.BarCode = M.BarCode
		--		AND V.PriceListId = M.PriceListId
		--		AND V.ValidTo = M.ValidTo
		--  WHERE V.CompanyCode = M_PriceList.CompanyCode AND V.StoreId = M_PriceList.StoreId AND M_PriceList.ItemCode = M.ItemCode AND M_PriceList.UOMCode = M.UOMCode
		--		AND M_PriceList.BarCode = M.BarCode AND M_PriceList.PriceListId = M.PriceListId AND M_PriceList.ValidTo = M.ValidTo
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_PriceList_bak]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_PriceList_bak]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_PriceList M_PriceListType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @M_PriceList M_PriceListType

		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save PriceList list successfully.' -- Error message
		DECLARE @RCount int = 0

		SELECT @RCount = count(ItemCode)
		FROM @M_PriceList;

		IF @RCount > 0
			BEGIN
				DELETE I
				FROM M_PriceList I
				INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode AND I.StoreId = M.StoreId
				
			END

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO [dbo].[M_PriceList]
			   ([CompanyCode]
			   ,[StoreId]
			   ,[ItemCode]
			   ,[UOMCode]
			   ,[BarCode]
			   ,[PriceListId]
			   ,[PriceBeforeTax]
			   ,[PriceAfterTax]
			   ,[ValidFrom]
			   ,[ValidTo]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[SyncDate]
			   ,[SyncSource]
		)
		SELECT V.[CompanyCode]
			  ,V.[StoreId]
			  ,V.[ItemCode]
			  ,V.[UOMCode]
			  ,V.[BarCode]
			  ,V.[PriceListId]
			  ,V.[PriceBeforeTax]
			  ,V.[PriceAfterTax]
			  ,V.[ValidFrom]
			  ,V.[ValidTo]
			  ,V.[CreatedBy]
			  ,V.[CreatedOn]
			  ,V.[ModifiedBy]
			  ,V.[ModifiedOn]
			  ,V.[Status]
			  ,GETDATE()
			  ,@UserID
		FROM @M_PriceList V 
		WHERE ISNULL(V.CompanyCode, '') <> ''
			AND ISNULL(V.StoreId, '') <> ''
			AND ISNULL(V.ItemCode, '') <> ''
			AND ISNULL(V.UOMCode, '') <> ''
			AND ISNULL(V.BarCode, '') <> ''
			AND ISNULL(V.PriceListId, '') <> ''
			AND ISNULL(V.ValidTo, '') <> ''

		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================



		--IF @RCount > 0
		--	BEGIN
		--		DELETE I
		--		FROM M_PriceList I
		--		INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode --AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.BarCode = M.BarCode --AND I.ValidTo = M.ValidTo
		--		WHERE ISNULL(I.PriceListId, '') <> ISNULL(M.PriceListId, '') OR ISNULL(I.ValidTo, '') <> ISNULL(M.ValidTo, '') --OR ISNULL(I.BarCode, '') <> ISNULL(M.BarCode, '')
		--	END

		---- Get Items update
		--SELECT DISTINCT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_U
		--FROM @M_PriceList I INNER JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		--WHERE ISNULL(I.PriceListId, '') <> ''

		-- --WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		---- Get Items Insert
		--SELECT DISTINCT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_I
		--  FROM @M_PriceList I LEFT JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		-- WHERE ISNULL(I.PriceListId, '') <> '' AND M.ItemCode IS NULL

		---- INSERT NEW OWHS ====================================================================================================
		--INSERT INTO [dbo].[M_PriceList]
		--	   ([CompanyCode]
		--	   ,[StoreId]
		--	   ,[ItemCode]
		--	   ,[UOMCode]
		--	   ,[BarCode]
		--	   ,[PriceListId]
		--	   ,[PriceBeforeTax]
		--	   ,[PriceAfterTax]
		--	   ,[ValidFrom]
		--	   ,[ValidTo]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status]
		--	   ,[SyncDate]
		--	   ,[SyncSource]
		--)
		--SELECT V.[CompanyCode]
		--	  ,V.[StoreId]
		--	  ,V.[ItemCode]
		--	  ,V.[UOMCode]
		--	  ,V.[BarCode]
		--	  ,V.[PriceListId]
		--	  ,V.[PriceBeforeTax]
		--	  ,V.[PriceAfterTax]
		--	  ,V.[ValidFrom]
		--	  ,V.[ValidTo]
		--	  ,V.[CreatedBy]
		--	  ,V.[CreatedOn]
		--	  ,V.[ModifiedBy]
		--	  ,V.[ModifiedOn]
		--	  ,V.[Status]
		--	  ,GETDATE()
		--	  ,@UserID
		--  FROM @M_PriceList V 
		--	INNER JOIN #M_PriceList_I M 
		--		ON V.CompanyCode = M.CompanyCode  
		--		AND V.StoreId = M.StoreId 
		--		AND V.ItemCode = M.ItemCode 
		--		AND V.UOMCode = M.UOMCode
		--		AND V.BarCode = M.BarCode
		--		AND V.PriceListId = M.PriceListId
		--		AND V.ValidTo = M.ValidTo;
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================


		----SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		----FROM M_PriceList I
		----INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode --AND I.BarCode = M.BarCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.ValidTo = M.ValidTo
		------WHERE I.PriceListId <> M.PriceListId OR I.ValidTo <> M.ValidTo

		----RETURN

		--IF @RCount > 0
		--	BEGIN
		--		DELETE I--.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		--		FROM M_PriceList I
		--		INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode --AND I.BarCode = M.BarCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.ValidTo = M.ValidTo
		--		--WHERE I.PriceListId <> M.PriceListId OR I.ValidTo <> M.ValidTo
		--	END

		------ Get Items update ----------------------------------------------------------------------
		----SELECT V.CompanyCode, V.StoreId, V.ItemCode, V.UOMCode, V.BarCode, V.PriceListId, V.ValidTo INTO #M_PriceList_UPDATE
		----  FROM @M_PriceList V INNER JOIN M_PriceList M 
		----	ON V.CompanyCode = M.CompanyCode  
		----		AND V.StoreId = M.StoreId 
		----		AND V.ItemCode = M.ItemCode 
		----		AND V.UOMCode = M.UOMCode
		----		AND V.PriceListId = M.PriceListId
		----		AND V.ValidTo = M.ValidTo;

		---- Get Items update
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_UPDATE
		--FROM @M_PriceList I INNER JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		--WHERE ISNULL(I.PriceListId, '') <> ''

		------ Get Items Insert ----------------------------------------------------------------------
		----SELECT V.CompanyCode, V.StoreId, V.ItemCode, V.UOMCode, V.BarCode, V.PriceListId, V.ValidTo INTO #M_PriceList_INSERT
		----  FROM @M_PriceList V 
		----	LEFT OUTER JOIN M_PriceList M 
		----		ON V.CompanyCode = M.CompanyCode 
		----		AND V.StoreId = M.StoreId 
		----		AND V.ItemCode = M.ItemCode 
		----		AND V.UOMCode = M.UOMCode
		----		AND V.PriceListId = M.PriceListId
		----		AND V.ValidTo = M.ValidTo
		---- WHERE M.ItemCode IS NULL;
		------ Count rows -----------------------------------
		----SELECT @RCount  = count(*) from @M_PriceList;

		---- Get Items Insert
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_INSERT
		--  FROM @M_PriceList I LEFT JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		-- WHERE ISNULL(I.PriceListId, '') <> '' AND M.ItemCode IS NULL

		-- ====================================================================================================================

		--SELECT I.*--.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		--FROM M_PriceList I
		--INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.BarCode = M.BarCode-- AND I.ValidTo = M.ValidTo
		--WHERE ISNULL(I.BarCode, '') <> ISNULL(M.BarCode, '') OR ISNULL(I.PriceListId, '') <> ISNULL(M.PriceListId, '') OR ISNULL(I.ValidTo, '') <> ISNULL(M.ValidTo, '')

		--Return

		--IF @RCount > 0
		--	BEGIN
		--		DELETE I--.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo
		--		FROM M_PriceList I
		--		INNER JOIN @M_PriceList M ON I.CompanyCode = M.CompanyCode AND I.ItemCode = M.ItemCode AND I.StoreId = M.StoreId AND I.UOMCode = M.UOMCode --AND I.BarCode = M.BarCode --AND I.ValidTo = M.ValidTo
		--		WHERE ISNULL(I.PriceListId, '') <> ISNULL(M.PriceListId, '') OR ISNULL(I.ValidTo, '') <> ISNULL(M.ValidTo, '') OR ISNULL(I.BarCode, '') <> ISNULL(M.BarCode, '')
		--	END

		---- Get Items update
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_U
		--FROM @M_PriceList I INNER JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		--WHERE ISNULL(I.BarCode, '') <> '' AND ISNULL(I.PriceListId, '') <> ''

		-- --WHERE ItemCode IN (SELECT ItemCode FROM M_Item);
		---- Get Items Insert
		--SELECT I.ItemCode, I.CompanyCode, I.BarCode, I.StoreId, I.UOMCode, I.PriceListId, I.ValidTo INTO #M_PriceList_I
		--  FROM @M_PriceList I LEFT JOIN M_PriceList M 
		--	ON M.ItemCode = I.ItemCode AND M.CompanyCode = I.CompanyCode AND M.BarCode = I.BarCode AND M.StoreId = I.StoreId AND M.UOMCode = I.UOMCode AND M.PriceListId = I.PriceListId
		--	AND M.ValidTo = I.ValidTo
		-- WHERE ISNULL(I.BarCode, '') <> '' AND ISNULL(I.PriceListId, '') <> '' AND M.ItemCode IS NULL

		---- INSERT NEW OWHS ====================================================================================================
		--INSERT INTO [dbo].[M_PriceList]
		--	   ([CompanyCode]
		--	   ,[StoreId]
		--	   ,[ItemCode]
		--	   ,[UOMCode]
		--	   ,[BarCode]
		--	   ,[PriceListId]
		--	   ,[PriceBeforeTax]
		--	   ,[PriceAfterTax]
		--	   ,[ValidFrom]
		--	   ,[ValidTo]
		--	   ,[CreatedBy]
		--	   ,[CreatedOn]
		--	   ,[ModifiedBy]
		--	   ,[ModifiedOn]
		--	   ,[Status]
		--	   ,[SyncDate]
		--	   ,[SyncSource]
		--)
		--SELECT V.[CompanyCode]
		--	  ,V.[StoreId]
		--	  ,V.[ItemCode]
		--	  ,V.[UOMCode]
		--	  ,V.[BarCode]
		--	  ,V.[PriceListId]
		--	  ,V.[PriceBeforeTax]
		--	  ,V.[PriceAfterTax]
		--	  ,V.[ValidFrom]
		--	  ,V.[ValidTo]
		--	  ,V.[CreatedBy]
		--	  ,V.[CreatedOn]
		--	  ,V.[ModifiedBy]
		--	  ,V.[ModifiedOn]
		--	  ,V.[Status]
		--	  ,GETDATE()
		--	  ,@UserID
		--  FROM @M_PriceList V 
		--	INNER JOIN #M_PriceList_I M 
		--		ON V.CompanyCode = M.CompanyCode  
		--		AND V.StoreId = M.StoreId 
		--		AND V.ItemCode = M.ItemCode 
		--		AND V.UOMCode = M.UOMCode
		--		AND V.BarCode = M.BarCode
		--		AND V.PriceListId = M.PriceListId
		--		AND V.ValidTo = M.ValidTo;
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================

		---- UPDATE OWHS ==============================================================================================================
		--UPDATE [dbo].[M_PriceList]
		--   SET [CompanyCode] = V.[CompanyCode]
		--	  ,[StoreId] = V.[StoreId]
		--	  ,[ItemCode] = V.[ItemCode]
		--	  ,[UOMCode] = V.[UOMCode]
		--	  ,[BarCode] = V.[BarCode]
		--	  ,[PriceListId] = V.[PriceListId]
		--	  ,[PriceBeforeTax] = V.[PriceBeforeTax]
		--	  ,[PriceAfterTax] = V.[PriceAfterTax]
		--	  ,[ValidFrom] = V.[ValidFrom]
		--	  ,[ValidTo] = V.[ValidFrom]
		--	  --,[CreatedBy] = V.[CreatedBy]
		--	  --,[CreatedOn] = V.[CreatedOn]
		--	  ,[ModifiedBy] = V.[ModifiedBy]
		--	  ,[ModifiedOn] = V.[ModifiedOn]
		--	  ,[Status] = V.[Status]
		--	  ,[SyncDate] = GETDATE()
		--	  ,[SyncSource] = @UserID
		--  FROM @M_PriceList V 
		--	INNER JOIN #M_PriceList_U M 
		--		ON V.CompanyCode = M.CompanyCode  
		--		AND V.StoreId = M.StoreId 
		--		AND V.ItemCode = M.ItemCode 
		--		AND V.UOMCode = M.UOMCode
		--		AND V.BarCode = M.BarCode
		--		AND V.PriceListId = M.PriceListId
		--		AND V.ValidTo = M.ValidTo
		--  WHERE V.CompanyCode = M_PriceList.CompanyCode AND V.StoreId = M_PriceList.StoreId AND M_PriceList.ItemCode = M.ItemCode AND M_PriceList.UOMCode = M.UOMCode
		--		AND M_PriceList.BarCode = M.BarCode AND M_PriceList.PriceListId = M.PriceListId AND M_PriceList.ValidTo = M.ValidTo
		--If @@ERROR <> 0 
		--	Begin
		--		Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
		--		Goto HANDLE_ERROR --> Roll back when execute failed ...
		--	End
		---- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_Store]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_Store]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_StoreType M_StoreType READONLY
AS
BEGIN TRANSACTION
	BEGIN
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Store list successfully.' -- Error message
		DECLARE @RCount int = 0

		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.StoreId INTO #M_Store_UPDATE
		  FROM @M_StoreType V INNER JOIN M_Store M 
			ON V.CompanyCode = M.CompanyCode  
				AND V.StoreId = M.StoreId;

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.StoreId INTO #M_Store_INSERT
		  FROM @M_StoreType V 
			LEFT OUTER JOIN M_Store M 
				ON V.CompanyCode = M.CompanyCode 
				AND V.StoreId = M.StoreId
		 WHERE M.StoreId IS NULL;
		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_StoreType;

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO [dbo].[M_Store]
			   ([StoreId]
			   ,[CompanyCode]
			   ,[StoreName]
			   ,[StoreDescription]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   --,[ModifiedBy]
			   --,[ModifiedOn]
			   ,[Status]
			   --,[ForeignName]
			   --,[Address]
			   --,[Phone]
			   --,[DefaultCusId]
			   --,[StoreGroupId]
			   --,[ProvinceId]
			   --,[DistrictId]
			   --,[WardId]
			   --,[CountryCode]
			   --,[CustomField1]
			   --,[CustomField2]
			   --,[CustomField3]
			   --,[CustomField4]
			   --,[CustomField5]
			   --,[AreaCode]
			   --,[CurrencyCode]
			   --,[StoreType]
			   --,[ListType]
			   --,[FormatConfigId]
			   ,[WhsCode]
			   --,[RegionCode]
		)
		SELECT V.[StoreId]
			  ,V.[CompanyCode]
			  ,V.[StoreName]
			  ,V.[StoreDescription]
			  ,@UserID
			  ,GETDATE()
			  ,V.[Status]
			  ,V.[WhsCode]
		  FROM @M_StoreType V 
			INNER JOIN #M_Store_INSERT M 
				ON V.CompanyCode = M.CompanyCode  
				AND V.StoreId = M.StoreId;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		-- UPDATE OWHS ==============================================================================================================
		UPDATE [dbo].[M_Store]
		   SET [StoreId] = V.[StoreId]
			  ,[CompanyCode] = V.[CompanyCode]
			  ,[StoreName] = V.[StoreName]
			  ,[StoreDescription] = V.[StoreDescription]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = @UserID
			  ,[ModifiedOn] = GETDATE()
			  ,[Status] = V.[Status]
			  --,[ForeignName] = <ForeignName, nvarchar(250),>
			  --,[Address] = <Address, nvarchar(250),>
			  --,[Phone] = <Phone, nvarchar(50),>
			  --,[DefaultCusId] = <DefaultCusId, nvarchar(50),>
			  --,[StoreGroupId] = <StoreGroupId, nvarchar(50),>
			  --,[ProvinceId] = <ProvinceId, nvarchar(50),>
			  --,[DistrictId] = <DistrictId, nvarchar(50),>
			  --,[WardId] = <WardId, nvarchar(50),>
			  --,[CountryCode] = <CountryCode, nvarchar(50),>
			  --,[CustomField1] = <CustomField1, nvarchar(250),>
			  --,[CustomField2] = <CustomField2, nvarchar(250),>
			  --,[CustomField3] = <CustomField3, nvarchar(250),>
			  --,[CustomField4] = <CustomField4, nvarchar(250),>
			  --,[CustomField5] = <CustomField5, nvarchar(250),>
			  --,[AreaCode] = <AreaCode, nvarchar(50),>
			  --,[CurrencyCode] = <CurrencyCode, nvarchar(50),>
			  --,[StoreType] = <StoreType, nvarchar(50),>
			  --,[ListType] = <ListType, nvarchar(50),>
			  --,[FormatConfigId] = <FormatConfigId, nvarchar(50),>
			  ,[WhsCode] = V.[WhsCode]
			  --,[RegionCode] = <RegionCode, nvarchar(50),>
		  FROM @M_StoreType V 
			INNER JOIN #M_Store_UPDATE M 
				ON V.CompanyCode = M.CompanyCode  
				AND V.StoreId = M.StoreId
		  WHERE V.CompanyCode = M_Store.CompanyCode AND V.StoreId = M_Store.StoreId
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_Tax]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_Tax]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_TaxType M_TaxType READONLY
AS
BEGIN TRANSACTION
	BEGIN
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Tax list successfully.' -- Error message
		DECLARE @RCount int = 0

		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.TaxCode INTO #M_Tax_UPDATE
		  FROM @M_TaxType V INNER JOIN M_Tax M 
			ON V.CompanyCode = M.CompanyCode  
				AND V.TaxCode = M.TaxCode;

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.TaxCode INTO #M_Tax_INSERT
		  FROM @M_TaxType V 
			LEFT OUTER JOIN M_Tax M 
				ON V.CompanyCode = M.CompanyCode 
				AND V.TaxCode = M.TaxCode
		 WHERE M.TaxCode IS NULL;
		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_TaxType;

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO [dbo].[M_Tax]
			   ([TaxCode]
			   ,[CompanyCode]
			   ,[TaxName]
			   ,[TaxPercent]
			   ,[TaxType]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
		)
		SELECT V.[TaxCode]
			  ,V.[CompanyCode]
			  ,V.[TaxName]
			  ,V.[TaxPercent]
			  ,V.[TaxType]
			  ,V.[CreatedBy]
			  ,V.[CreatedOn]
			  ,ISNULL(V.[ModifiedBy], V.[CreatedBy])
			  ,ISNULL(V.[ModifiedOn], V.[CreatedOn])
			  ,V.[Status]
		  FROM @M_TaxType V 
			INNER JOIN #M_Tax_INSERT M 
				ON V.CompanyCode = M.CompanyCode AND V.TaxCode = M.TaxCode;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		-- UPDATE OWHS ==============================================================================================================
		UPDATE [dbo].[M_Tax]
		   SET [TaxCode] = V.[TaxCode]
			  ,[CompanyCode] = V.[CompanyCode]
			  ,[TaxName] = V.[TaxName]
			  ,[TaxPercent] = V.[TaxPercent]
			  ,[TaxType] = V.[TaxType]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = V.[ModifiedBy]
			  ,[ModifiedOn] = V.[ModifiedOn]
			  ,[Status] = V.[Status]
		  FROM @M_TaxType V 
			INNER JOIN #M_Tax_UPDATE M 
				ON V.CompanyCode = M.CompanyCode AND V.TaxCode = M.TaxCode
		  WHERE V.CompanyCode = M_Tax.CompanyCode AND V.TaxCode = M_Tax.TaxCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_UOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_UOM]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_UOM M_UOMType READONLY
AS
BEGIN TRANSACTION
	BEGIN
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save UOM list successfully.' -- Error message
		DECLARE @RCount int = 0

		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.UOMCode INTO #M_UOM_UPDATE
		  FROM @M_UOM V INNER JOIN M_UOM M ON V.CompanyCode = M.CompanyCode AND V.UOMCode = M.UOMCode;

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.UOMCode INTO #M_UOM_INSERT
		  FROM @M_UOM V LEFT OUTER JOIN M_UOM M ON V.CompanyCode = M.CompanyCode AND V.UOMCode = M.UOMCode
		 WHERE M.UOMCode IS NULL;
		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_UOM;

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO [dbo].[M_UOM]
           ([UOMCode]
           ,[CompanyCode]
           ,[UOMName]
           ,[CreatedBy]
           ,[CreatedOn]
           --,[ModifiedBy]
           --,[ModifiedOn]
           ,[Status]
		)
		SELECT V.[UOMCode]
			 , V.[CompanyCode]
			 , V.[UOMName]
			 , @UserID
			 , GetDate()
			 , V.[Status]
		  FROM @M_UOM V INNER JOIN #M_UOM_INSERT M ON V.CompanyCode = M.CompanyCode AND V.UOMCode = M.UOMCode;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		-- UPDATE OWHS ==============================================================================================================
		UPDATE [dbo].[M_UOM]
		   SET [UOMCode] = V.[UOMCode]
			  ,[CompanyCode] = V.[CompanyCode]
			  ,[UOMName] = V.[UOMName]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = @UserID
			  ,[ModifiedOn] = GETDATE()
			  ,[Status] = V.[Status]
		  FROM @M_UOM V INNER JOIN #M_UOM_UPDATE M ON V.CompanyCode = M.CompanyCode AND V.UOMCode = M.UOMCode
		  WHERE V.CompanyCode = M_UOM.CompanyCode AND M_UOM.UOMCode = M.UOMCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UI_M_Warehouse]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UI_M_Warehouse]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@M_WarehouseType M_WarehouseType READONLY
AS
BEGIN TRANSACTION
	BEGIN
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Warehouse list successfully.' -- Error message
		DECLARE @RCount int = 0

		-- Get Items update ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.WhsCode INTO #M_Warehouse_UPDATE
		  FROM @M_WarehouseType V INNER JOIN M_Warehouse M 
			ON V.CompanyCode = M.CompanyCode  
				AND V.WhsCode = M.WhsCode;

		-- Get Items Insert ----------------------------------------------------------------------
		SELECT V.CompanyCode, V.WhsCode INTO #M_Warehouse_INSERT
		  FROM @M_WarehouseType V 
			LEFT OUTER JOIN M_Warehouse M 
				ON V.CompanyCode = M.CompanyCode 
				AND V.WhsCode = M.WhsCode
		 WHERE M.WhsCode IS NULL;
		-- Count rows -----------------------------------
		SELECT @RCount  = count(*) from @M_WarehouseType;

		-- INSERT NEW OWHS ====================================================================================================
		INSERT INTO [dbo].[M_Warehouse]
			   ([WhsCode]
			   ,[CompanyCode]
			   ,[WhsName]
			   ,[StoreId]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   --,[ModifiedBy]
			   --,[ModifiedOn]
			   ,[Status]
			   ,[WhsType]
		)
		SELECT V.[WhsCode]
			  ,V.[CompanyCode]
			  ,V.[WhsName]
			  ,V.[StoreId]
			  ,@UserID
			  ,GETDATE()
			  --,[ModifiedBy]
			  --,[ModifiedOn]
			  ,V.[Status]
			  ,V.[WhsType]
		  FROM @M_WarehouseType V 
			INNER JOIN #M_Warehouse_INSERT M 
				ON V.CompanyCode = M.CompanyCode  
				AND V.WhsCode = M.WhsCode;
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================

		-- UPDATE OWHS ==============================================================================================================
		UPDATE [dbo].[M_Warehouse]
		   SET [WhsCode] = V.[WhsCode]
			  ,[CompanyCode] = V.[CompanyCode]
			  ,[WhsName] = V.[WhsName]
			  ,[StoreId] = V.[StoreId]
			  --,[CreatedBy] = <CreatedBy, nvarchar(50),>
			  --,[CreatedOn] = <CreatedOn, datetime,>
			  ,[ModifiedBy] = @UserID
			  ,[ModifiedOn] = GETDATE()
			  ,[Status] = V.[Status]
			  ,[WhsType] = V.[WhsType]
		  FROM @M_WarehouseType V 
			INNER JOIN #M_Warehouse_UPDATE M 
				ON V.CompanyCode = M.CompanyCode  
				AND V.WhsCode = M.WhsCode
		  WHERE V.CompanyCode = M_Warehouse.CompanyCode AND V.WhsCode = M_Warehouse.WhsCode
		If @@ERROR <> 0 
			Begin
				Set @ErrCode = @@ERROR; Set @ErrMsg = ERROR_MESSAGE();
				Goto HANDLE_ERROR --> Roll back when execute failed ...
			End
		-- ==========================================================================================================================
	END 
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateCheckOutSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SYNC_UpdateCheckOutSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_InvoiceHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')
	AND ISNULL(POSType, '') = 'E' -- ECOM
		AND ISNULL(InvoiceType, '') = 'CheckOut'

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateEndDateSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- 
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateEndDateSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_EndDate SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND Id IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateGoodsIssueSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- 
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateGoodsIssueSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_GoodsIssueHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateGoodsReceiptSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- 
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateGoodsReceiptSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_GoodsReceiptHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateGRPOSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- 
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateGRPOSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_GoodsReceiptPOHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND PurchaseId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateInventoryCountingSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_UpdateInventorySyncMWIStatus 'CP001', 'IVCP001ST00100000001', 'Y'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateInventoryCountingSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_InventoryCountingHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND ICId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateInventoryPostingSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_UpdateInventorySyncMWIStatus 'CP001', 'IVCP001ST00100000001', 'Y'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateInventoryPostingSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_InventoryPostingHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND IPId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateInventorySyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- SYNC_UpdateInventorySyncMWIStatus 'CP001', 'IVCP001ST00100000001', 'Y'
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateInventorySyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_InventoryHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND INVTId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateInvoiceSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateInvoiceSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_InvoiceHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateItemGroupSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateItemGroupSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@IGId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_ItemGroup TABLE
	(
		IGId nvarchar(50)
	)
	INSERT INTO @TB_ItemGroup
	SELECT DISTINCT Value FROM string_split(@IGId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	UPDATE M_ItemGroup SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	FROM @TB_ItemGroup T
	WHERE CompanyCode = @CompanyCode --AND IGId IN (SELECT Value FROM string_split(@IGId, ';') WHERE RTRIM(value) <> '')
	AND M_ItemGroup.IGId = T.IGId

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateOrdersSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateOrdersSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @TB_TransId TABLE
	(
		TransId nvarchar(50)
	)
	INSERT INTO @TB_TransId
	SELECT DISTINCT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> ''

    -- Insert statements for procedure here
	UPDATE T_SalesHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	FROM @TB_TransId T
	WHERE CompanyCode = @CompanyCode --AND TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')
	AND T_SalesHeader.TransId = T.TransId

	--UPDATE T_InvoiceHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	--WHERE CompanyCode = @CompanyCode AND TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

	UPDATE T_SalesPayment SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	FROM @TB_TransId T
	WHERE CompanyCode = @CompanyCode --AND TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')
	AND T_SalesPayment.TransId = T.TransId

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateOrdersSyncOMSStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateOrdersSyncOMSStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1),
	@Msg nvarchar(254)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_SalesHeader SET SyncJAStatus = @Status, SyncJADate = GETDATE(), SyncJAMsg = @Msg
	WHERE CompanyCode = @CompanyCode AND TransId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateSalesPaymentSyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateSalesPaymentSyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(50),
	@LineId nvarchar(50),
	@PaymentCode nvarchar(50),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_SalesPayment SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND TransId = @TransId AND LineId = @LineId AND PaymentCode = @PaymentCode

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateShiftSyncMWIStatus_del]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- 
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateShiftSyncMWIStatus_del]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@TransId nvarchar(4000),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_ShiftHeader SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode AND ShiftId IN (SELECT Value FROM string_split(@TransId, ';') WHERE RTRIM(value) <> '')

END
GO
/****** Object:  StoredProcedure [dbo].[SYNC_UpdateStoreSummarySyncMWIStatus]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- 
-- =============================================
CREATE PROCEDURE [dbo].[SYNC_UpdateStoreSummarySyncMWIStatus]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@DailyId nvarchar(50),
	@StoreId nvarchar(50),
	@TerminalId nvarchar(50),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE T_StoreSummary SET SyncMWIStatus = @Status, SyncMWIDate = GETDATE()
	WHERE CompanyCode = @CompanyCode 
		AND DailyId = @DailyId
		AND StoreId = @StoreId
		AND TerminalId = @TerminalId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetPriceList_PriceCheck]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_API_GetPriceList_PriceCheck 'CP001', '1001', '', '', '2850022000000', '2021-09-27'
-- USP_API_GetPriceList_PriceCheck 'CP001', '3009', '', '', '2000780097243', NULL
-- =============================================
CREATE PROCEDURE [dbo].[USP_API_GetPriceList_PriceCheck]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode nvarchar(50),
	@UomCode nvarchar(50),
	@Barcode nvarchar(50),
	@DateTime datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF @DateTime IS NULL
	BEGIN
		SET @DateTime = GETDATE()
	END

	--------------
	DECLARE @PriceListMem AS TABLE
	(
		StoreId nvarchar(50),
		ItemCode nvarchar(50),
		UOMCode nvarchar(50),
		Barcode nvarchar(50),
		PriceBeforTax decimal(19, 6),
		PriceAfterTax decimal(19, 6),
		Validfrom datetime,
		ValidTo datetime,
		PriceListId nvarchar(50),
		[Status] char(1),
		CustomerGroup nvarchar(10)
	)

	-- Price list for Normal
	INSERT INTO @PriceListMem
	SELECT StoreId,
		ItemCode,
		UOMCode,
		Barcode,
		PriceBeforeTAx,
		PriceAfterTax,
		Validfrom,
		ValidTo,
		PriceListId,
		[Status],
		'1'
	FROM [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '1')

	DECLARE @PromoTableMem AS TABLE
	(
		PromoId Nvarchar(50),
		PromoName Nvarchar(250),
		PromoType Nvarchar(50),
		CustomerGroup Nvarchar(50),
		ValidDateFrom Date,
		ValidDateTo Date,
		StoreId Nvarchar(50),
		ItemCode Nvarchar(50),
		UOMCode Nvarchar(50),
		BarCode Nvarchar(50),
		OfferPrice Numeric(19,6),
		PromoCode Nvarchar(50)
	)

	--	ItemCode, BarCode
	INSERT INTO @PromoTableMem
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		,PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode 
		,CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
		END OfferPrice 
		,PH.SAPBonusBuyId
	FROM S_PromoHeader PH
		INNER JOIN S_PromoStore PS WITH(NOLOCK) ON PH.PromoId = PS.PromoId AND PH.CompanyCode = PS.CompanyCode
		LEFT JOIN S_PromoCustomer PC WITH(NOLOCK) ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
		INNER JOIN S_PromoGet PG WITH(NOLOCK) ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PG.CompanyCode
		INNER JOIN @PriceListMem PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
	WHERE PH.PromoType = 1
		AND PH.Status = 'Y'
		AND PL.Status = 'A'
		AND PS.StoreValue = @StoreId
		AND PL.StoreId = @StoreId
		AND ((PL.ItemCode = @ItemCode AND PL.UOMCode = @UomCode) OR PL.Barcode = @Barcode)
		AND PC.CustomerValue = '1'
		AND PG.LineType IN ('ItemCode','BarCode')
		AND @DateTime BETWEEN PH.ValidDateFrom AND PH.ValidDateTo 


	--	ItemGroup
	INSERT INTO @PromoTableMem
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		,PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode 
		,CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
		END OfferPrice 
		,PH.SAPBonusBuyId
	FROM S_PromoHeader PH
		INNER JOIN S_PromoStore PS WITH(NOLOCK) ON PH.PromoId = PS.PromoId AND PH.CompanyCode = PS.CompanyCode
		LEFT JOIN S_PromoCustomer PC WITH(NOLOCK) ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
		INNER JOIN S_PromoGet PG WITH(NOLOCK) ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PG.CompanyCode
		INNER JOIN @PriceListMem PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
		INNER JOIN M_Item IM WITH(NOLOCK) ON IM.ItemCode = PL.ItemCode AND PG.CompanyCode = IM.CompanyCode
		INNER JOIN M_ItemGroup IG WITH(NOLOCK) ON IM.ItemGroupId = IG.IGId AND PG.CompanyCode = IG.CompanyCode
	WHERE PH.PromoType = 1
		AND PH.Status = 'Y'
		AND PL.Status = 'A'
		AND PS.StoreValue = @StoreId
		AND PL.StoreId = @StoreId
		AND ((PL.ItemCode = @ItemCode AND PL.UOMCode = @UomCode) OR PL.Barcode = @Barcode)
		AND PC.CustomerValue = '1'
		AND PG.LineType = 'ItemGroup'
		AND @DateTime BETWEEN PH.ValidDateFrom AND PH.ValidDateTo 


	--	OneTimeGroup
	INSERT INTO @PromoTableMem
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		,PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode 
		,CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
		END OfferPrice 
		,PH.SAPBonusBuyId
	FROM S_PromoHeader PH
		INNER JOIN S_PromoStore PS WITH(NOLOCK) ON PH.PromoId = PS.PromoId AND PH.CompanyCode = PS.CompanyCode
		LEFT JOIN S_PromoCustomer PC WITH(NOLOCK) ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
		INNER JOIN S_PromoGet PG WITH(NOLOCK) ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PG.CompanyCode
		INNER JOIN S_PromoGetOTGroup PT WITH(NOLOCK) ON PG.PromoId = PT.PromoId AND PG.CompanyCode = PT.CompanyCode AND PG.LineCode = PT.GroupID
		INNER JOIN @PriceListMem PL ON PT.LineCode = PL.ItemCode AND PT.LineUom = PL.UOMCode
	WHERE PH.PromoType = 1
		AND PH.Status = 'Y'
		AND PL.Status = 'A'
		AND PS.StoreValue = @StoreId
		AND PL.StoreId = @StoreId
		AND ((PL.ItemCode = @ItemCode AND PL.UOMCode = @UomCode) OR PL.Barcode = @Barcode)
		AND PC.CustomerValue = '1'
		AND PG.LineType = 'OneTimeGroup'
		AND	PT.LineType IN ('ItemCode','BarCode')
		AND @DateTime BETWEEN PH.ValidDateFrom AND PH.ValidDateTo 

	----------

	DECLARE @PriceListNor AS TABLE
	(
		StoreId nvarchar(50),
		ItemCode nvarchar(50),
		UOMCode nvarchar(50),
		Barcode nvarchar(50),
		PriceBeforTax decimal(19, 6),
		PriceAfterTax decimal(19, 6),
		Validfrom datetime,
		ValidTo datetime,
		PriceListId nvarchar(50),
		[Status] char(1),
		CustomerGroup nvarchar(10)
	)

	INSERT INTO @PriceListNor
	SELECT StoreId,
		ItemCode,
		UOMCode,
		Barcode,
		PriceBeforeTAx,
		PriceAfterTax,
		Validfrom,
		ValidTo,
		PriceListId,
		[Status],
		'2'
	FROM [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '2')

	DECLARE @PromoTableNor AS TABLE
	(
		PromoId Nvarchar(50),
		PromoName Nvarchar(250),
		PromoType Nvarchar(50),
		CustomerGroup Nvarchar(50),
		ValidDateFrom Date,
		ValidDateTo Date,
		StoreId Nvarchar(50),
		ItemCode Nvarchar(50),
		UOMCode Nvarchar(50),
		BarCode Nvarchar(50),
		OfferPrice Numeric(19,6),
		PromoCode Nvarchar(50)
	)

	--	ItemCode, BarCode
	INSERT INTO @PromoTableNor
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		,PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode 
		,CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
		END OfferPrice 
		,PH.SAPBonusBuyId
	FROM S_PromoHeader PH
		INNER JOIN S_PromoStore PS WITH(NOLOCK) ON PH.PromoId = PS.PromoId AND PH.CompanyCode = PS.CompanyCode
		LEFT JOIN S_PromoCustomer PC WITH(NOLOCK) ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
		INNER JOIN S_PromoGet PG WITH(NOLOCK) ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PG.CompanyCode
		INNER JOIN @PriceListNor PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
	WHERE PH.PromoType = 1
		AND PH.Status = 'Y'
		AND PL.Status = 'A'
		AND PS.StoreValue = @StoreId
		AND PL.StoreId = @StoreId
		AND ((PL.ItemCode = @ItemCode AND PL.UOMCode = @UomCode) OR PL.Barcode = @Barcode)
		AND (PC.CustomerValue = '2' OR PH.CustomerType = 'A')
		AND PG.LineType IN ('ItemCode','BarCode')
		AND @DateTime BETWEEN PH.ValidDateFrom AND PH.ValidDateTo 


	--	ItemGroup
	INSERT INTO @PromoTableNor
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		,PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode 
		,CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
		END OfferPrice 
		,PH.SAPBonusBuyId
	FROM S_PromoHeader PH
		INNER JOIN S_PromoStore PS WITH(NOLOCK) ON PH.PromoId = PS.PromoId AND PH.CompanyCode = PS.CompanyCode
		LEFT JOIN S_PromoCustomer PC WITH(NOLOCK) ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
		INNER JOIN S_PromoGet PG WITH(NOLOCK) ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PG.CompanyCode
		INNER JOIN @PriceListNor PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
		INNER JOIN M_Item IM WITH(NOLOCK) ON IM.ItemCode = PL.ItemCode AND PG.CompanyCode = IM.CompanyCode
		INNER JOIN M_ItemGroup IG WITH(NOLOCK) ON IM.ItemGroupId = IG.IGId AND PG.CompanyCode = IG.CompanyCode
	WHERE PH.PromoType = 1
		AND PH.Status = 'Y'
		AND PL.Status = 'A'
		AND PS.StoreValue = @StoreId
		AND PL.StoreId = @StoreId
		AND ((PL.ItemCode = @ItemCode AND PL.UOMCode = @UomCode) OR PL.Barcode = @Barcode)
		AND (PC.CustomerValue = '2' OR PH.CustomerType = 'A')
		AND PG.LineType = 'ItemGroup'
		AND @DateTime BETWEEN PH.ValidDateFrom AND PH.ValidDateTo 


	--	OneTimeGroup
	INSERT INTO @PromoTableNor
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		,PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode 
		,CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
		END OfferPrice 
		,PH.SAPBonusBuyId
	FROM S_PromoHeader PH
		INNER JOIN S_PromoStore PS WITH(NOLOCK) ON PH.PromoId = PS.PromoId AND PH.CompanyCode = PS.CompanyCode
		LEFT JOIN S_PromoCustomer PC WITH(NOLOCK) ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
		INNER JOIN S_PromoGet PG WITH(NOLOCK) ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PG.CompanyCode
		INNER JOIN S_PromoGetOTGroup PT WITH(NOLOCK) ON PG.PromoId = PT.PromoId AND PG.CompanyCode = PT.CompanyCode AND PG.LineCode = PT.GroupID
		INNER JOIN @PriceListNor PL ON PT.LineCode = PL.ItemCode AND PT.LineUom = PL.UOMCode
	WHERE PH.PromoType = 1
		AND PH.Status = 'Y'
		AND PL.Status = 'A'
		AND PS.StoreValue = @StoreId
		AND PL.StoreId = @StoreId
		AND ((PL.ItemCode = @ItemCode AND PL.UOMCode = @UomCode) OR PL.Barcode = @Barcode)
		AND (PC.CustomerValue = '2' OR PH.CustomerType = 'A')
		AND PG.LineType = 'OneTimeGroup'
		AND	PT.LineType IN ('ItemCode','BarCode')
		AND @DateTime BETWEEN PH.ValidDateFrom AND PH.ValidDateTo 

	----------------
	
	SELECT DISTINCT P.[CompanyCode]
      ,P.[StoreId]
      ,P.[ItemCode]
	  ,I.[ItemName]
      ,P.[UOMCode]
      ,P.[BarCode]
      --,P.[PriceListId]
	  --,M.PriceAfterTax AS 'MemberPrice' -- PSM
	  ,CASE WHEN (M.PriceAfterTax = N.PriceAfterTax OR N.PriceAfterTax <=0 )
		THEN ISNULL((SELECT MIN(OfferPrice) FROM @PromoTableMem),0)
		ELSE M.PriceAfterTax
		END 'MemberPrice'
	  ,N.PriceAfterTax AS 'NormalPrice' -- NP
	  ,ISNULL((SELECT MIN(OfferPrice) FROM @PromoTableNor),0) OfferPrice
      --,P.[PriceBeforeTax]
      --,P.[PriceAfterTax]
      --,P.[ValidFrom]
      --,P.[ValidTo]
      ,P.[Status]
	  --,ISNULL((SELECT TOP 1 PromoCode FROM @PromoTable ORDER BY OfferPrice ),0) SAPBonusBuyId
	FROM [dbo].[M_PriceList] P WITH(NOLOCK)
	LEFT JOIN [M_Item] I WITH(NOLOCK) ON I.CompanyCode = P.CompanyCode AND I.ItemCode = P.ItemCode
	--LEFT JOIN [M_PriceList] M ON M.CompanyCode = P.CompanyCode AND M.StoreId = P.StoreId AND M.ItemCode = P.ItemCode AND M.BarCode = P.BarCode AND M.PriceListId = 'PSM'
	--LEFT JOIN [M_PriceList] N ON N.CompanyCode = P.CompanyCode AND N.StoreId = P.StoreId AND N.ItemCode = P.ItemCode AND N.BarCode = P.BarCode AND N.PriceListId = 'NP'
	--LEFT JOIN [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '1') M ON M.ItemCode = P.ItemCode AND M.BarCode = P.BarCode
	--LEFT JOIN [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '2') N ON N.ItemCode = P.ItemCode AND N.BarCode = P.BarCode
	RIGHT JOIN @PriceListMem M ON M.ItemCode = P.ItemCode AND M.BarCode = P.BarCode
	RIGHT JOIN @PriceListNor N ON N.ItemCode = P.ItemCode AND N.BarCode = P.BarCode
	WHERE P.CompanyCode = @CompanyCode
	AND P.StoreId = @StoreId
	AND CONVERT(varchar, @DateTime, 112) >= CONVERT(varchar, ISNULL(P.ValidFrom, '1900-01-01'), 112)
	AND CONVERT(varchar, @DateTime, 112) <= CONVERT(varchar, ISNULL(P.ValidTo, '2100-12-31'), 112)
	AND ((P.ItemCode = @ItemCode AND (P.UOMCode = @UomCode OR ISNULL(@UomCode, '') = '')) 
			OR P.BarCode = @Barcode)
	AND ISNULL(P.PriceListId, '') <> ''
	AND CONVERT(varchar, @DateTime, 112) >= CONVERT(varchar, ISNULL(M.ValidFrom, '1900-01-01'), 112)
	AND CONVERT(varchar, @DateTime, 112) <= CONVERT(varchar, ISNULL(M.ValidTo, '2100-12-31'), 112)
	AND CONVERT(varchar, @DateTime, 112) >= CONVERT(varchar, ISNULL(N.ValidFrom, '1900-01-01'), 112)
	AND CONVERT(varchar, @DateTime, 112) <= CONVERT(varchar, ISNULL(N.ValidTo, '2100-12-31'), 112)
	
	--SELECT DISTINCT P.[CompanyCode]
 --     ,P.[StoreId]
 --     ,P.[ItemCode]
	--  ,I.[ItemName]
 --     ,P.[UOMCode]
 --     ,P.[BarCode]
 --     --,P.[PriceListId]
	--  ,M.PriceAfterTax AS 'MemberPrice' -- PSM
	--  ,N.PriceAfterTax AS 'NormalPrice' -- NP
	--  --,ISNULL((SELECT MIN(OfferPrice) FROM @PromoTable),0) OfferPrice
 --     --,P.[PriceBeforeTax]
 --     --,P.[PriceAfterTax]
 --     --,P.[ValidFrom]
 --     --,P.[ValidTo]
 --     ,P.[Status]
	--  --,ISNULL((SELECT TOP 1 PromoCode FROM @PromoTable ORDER BY OfferPrice ),0) SAPBonusBuyId
	--FROM [dbo].[M_PriceList] P WITH(NOLOCK)
	--LEFT JOIN [M_Item] I  WITH(NOLOCK) ON I.CompanyCode = P.CompanyCode AND I.ItemCode = P.ItemCode
	----LEFT JOIN [M_PriceList] M ON M.CompanyCode = P.CompanyCode AND M.StoreId = P.StoreId AND M.ItemCode = P.ItemCode AND M.BarCode = P.BarCode AND M.PriceListId = 'PSM'
	----LEFT JOIN [M_PriceList] N ON N.CompanyCode = P.CompanyCode AND N.StoreId = P.StoreId AND N.ItemCode = P.ItemCode AND N.BarCode = P.BarCode AND N.PriceListId = 'NP'
	--RIGHT JOIN [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '1') M ON M.ItemCode = P.ItemCode AND M.BarCode = P.BarCode
	--RIGHT JOIN [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '2') N ON N.ItemCode = P.ItemCode AND N.BarCode = P.BarCode
	--WHERE P.CompanyCode = @CompanyCode
	--AND P.StoreId = @StoreId
	--AND CONVERT(varchar, @DateTime, 112) >= CONVERT(varchar, ISNULL(P.ValidFrom, '1900-01-01'), 112)
	--AND CONVERT(varchar, @DateTime, 112) <= CONVERT(varchar, ISNULL(P.ValidTo, '2100-12-31'), 112)
	--AND ((P.ItemCode = @ItemCode AND (P.UOMCode = @UomCode OR ISNULL(@UomCode, '') = '')) 
	--		OR P.BarCode = @Barcode)
	--AND ISNULL(P.PriceListId, '') <> ''
	--AND CONVERT(varchar, @DateTime, 112) >= CONVERT(varchar, ISNULL(M.ValidFrom, '1900-01-01'), 112)
	--AND CONVERT(varchar, @DateTime, 112) <= CONVERT(varchar, ISNULL(M.ValidTo, '2100-12-31'), 112)
	--AND CONVERT(varchar, @DateTime, 112) >= CONVERT(varchar, ISNULL(N.ValidFrom, '1900-01-01'), 112)
	--AND CONVERT(varchar, @DateTime, 112) <= CONVERT(varchar, ISNULL(N.ValidTo, '2100-12-31'), 112)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetPromotion_PriceCheck]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_API_GetPromotion_PriceCheck 'CP001', '3001', '10003516', 'EA', '', '2022-09-15'
-- USP_API_GetPromotion_PriceCheck 'CP001', '3009', '', '', '2000780097243', '2022-11-06'
-- =============================================
CREATE PROCEDURE [dbo].[USP_API_GetPromotion_PriceCheck]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode nvarchar(50),
	@UomCode nvarchar(50),
	@Barcode nvarchar(50),
	@DateTime datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	--SELECT DISTINCT ItemCode INTO #M_Item
	--FROM M_PriceList
	--WHERE StoreId = @StoreId AND ((ItemCode = @ItemCode AND (UOMCode = @UomCode OR ISNULL(@UomCode, '') = '')) OR BarCode = @Barcode)

	DECLARE @PriceList AS TABLE
	(
		StoreId nvarchar(50),
		ItemCode nvarchar(50),
		UOMCode nvarchar(50),
		Barcode nvarchar(50),
		PriceBeforTax decimal(19, 6),
		PriceAfterTax decimal(19, 6),
		Validfrom datetime,
		ValidTo datetime,
		PriceListId nvarchar(50),
		[Status] char(1)
	)

	INSERT INTO @PriceList
	SELECT StoreId,
		ItemCode,
		UOMCode,
		Barcode,
		PriceBeforeTAx,
		PriceAfterTax,
		Validfrom,
		ValidTo,
		PriceListId,
		[Status]
	FROM [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, '2')

	DECLARE @PromoTable AS TABLE
	(
		PromoId Nvarchar(50),
		PromoName Nvarchar(350),
		PromoType Nvarchar(50),
		CustomerGroup Nvarchar(50),
		ValidDateFrom Date,
		ValidDateTo Date,
		StoreId Nvarchar(50),
		ItemCode Nvarchar(50),
		UOMCode Nvarchar(50),
		BarCode Nvarchar(50),
		OfferPrice Numeric(19,6),
		PromoCode Nvarchar(50)
	)
	-- ItemCode + UOM
	INSERT INTO @PromoTable
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		--,CASE WHEN PC.CustomerValue = '1' THEN 'SM-Member' 
		--		WHEN PC.CustomerValue = '2' THEN 'N-Member' 
		--		WHEN PC.CustomerValue = '6' THEN 'SS-StoreStaff' END  AS CustomerGroup
		, PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode , 
	CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
	END OfferPrice ,PH.SAPBonusBuyId

	FROM S_PromoHeader PH 
						--INNER JOIN M_MapPromoType MP ON PH.PromoType = MP.BonusBuyCode AND PH.CompanyCode = MP.CompanyCode
						INNER JOIN S_PromoCustomer PC ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PC.CompanyCode
						INNER JOIN S_PromoGet PG ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PC.CompanyCode
						--INNER JOIN M_PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode AND PG.CompanyCode = PL.CompanyCode
						INNER JOIN @PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
						--LEFT JOIN M_MapDiscountType MT ON PH.CompanyCode = MT.CompanyCode AND PC.CustomerValue = MT.CusPromoCode
	WHERE PH.PromoType = 1 AND PH.Status = 'Y' AND 
		PL.Status = 'A' AND 
		@DateTime BETWEEN ValidDateFrom AND ValidDateTo AND 
		PC.CustomerValue IN ('2','1','6') AND 
		PL.PriceListId = 'NP' AND
		PL.ItemCode = @ItemCode AND
		PL.UOMCode = @UomCode AND
		PL.StoreId = @StoreId AND
		PG.LineType IN ('ItemCode','BarCode')

	-- BarCode
	INSERT INTO @PromoTable
	SELECT  PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		--,CASE WHEN PC.CustomerValue = '1' THEN 'SM-Member' 
		--		WHEN PC.CustomerValue = '2' THEN 'N-Member' 
		--		WHEN PC.CustomerValue = '6' THEN 'SS-StoreStaff' END  AS CustomerGroup
		, PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode , 
	CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
	END OfferPrice,PH.SAPBonusBuyId
	FROM S_PromoHeader PH 
						--INNER JOIN M_MapPromoType MP ON PH.PromoType = MP.BonusBuyCode AND PH.CompanyCode = MP.CompanyCode
						  INNER JOIN S_PromoCustomer PC ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PH.CompanyCode
						  INNER JOIN S_PromoGet PG ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PH.CompanyCode
						  --INNER JOIN M_PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode AND PG.CompanyCode = PL.CompanyCode
						  INNER JOIN @PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
						  --LEFT JOIN M_MapDiscountType MT ON PH.CompanyCode = MT.CompanyCode AND PC.CustomerValue = MT.CusPromoCode
	WHERE PH.PromoType = 1 AND PH.Status = 'Y' AND 
		PL.Status = 'A' AND 
		@DateTime BETWEEN ValidDateFrom AND ValidDateTo AND 
		PC.CustomerValue IN ('2','1','6') AND 
		PL.PriceListId = 'NP' AND
		PL.BarCode = @Barcode AND
		PL.StoreId = @StoreId AND
		PG.LineType IN ('ItemCode','BarCode')

	-- ItemGroup ItemCode + UOM
	INSERT INTO @PromoTable
	SELECT  PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		--,CASE WHEN PC.CustomerValue = '1' THEN 'SM-Member' 
		--		WHEN PC.CustomerValue = '2' THEN 'N-Member' 
		--		WHEN PC.CustomerValue = '6' THEN 'SS-StoreStaff' END  AS CustomerGroup
		, PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo 
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode , 
	CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
	END OfferPrice,PH.SAPBonusBuyId
	FROM S_PromoHeader PH 
						--INNER JOIN M_MapPromoType MP ON PH.PromoType = MP.BonusBuyCode AND PH.CompanyCode = MP.CompanyCode
						  INNER JOIN S_PromoCustomer PC ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PH.CompanyCode
						  INNER JOIN S_PromoGet PG ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PH.CompanyCode
						  --INNER JOIN M_PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode AND PG.CompanyCode = PL.CompanyCode
						  INNER JOIN @PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
						  INNER JOIN M_Item IM ON IM.ItemCode = PL.ItemCode AND PG.CompanyCode = IM.CompanyCode
						  INNER JOIN M_ItemGroup IG ON IM.ItemGroupId = IG.IGId AND PG.CompanyCode = IM.CompanyCode
						  --LEFT JOIN M_MapDiscountType MT ON PH.CompanyCode = MT.CompanyCode AND PC.CustomerValue = MT.CusPromoCode
	WHERE PH.PromoType = 1 AND PH.Status = 'Y' AND 
		PL.Status = 'A' AND 
		@DateTime BETWEEN ValidDateFrom AND ValidDateTo AND 
		PC.CustomerValue IN ('2','1','6') AND 
		PL.PriceListId = 'NP' AND
		PL.ItemCode = @ItemCode AND
		PL.UOMCode = @UomCode AND
		PL.StoreId = @StoreId AND
		PG.LineType = 'ItemGroup'


	-- ItemGroup BarCode
	INSERT INTO @PromoTable
	SELECT PH.PromoId AS 'PromoId'
		,PH.PromoName
		,'SingleDiscount' AS 'PromoType'
		--,CASE WHEN PC.CustomerValue = '1' THEN 'SM-Member' 
		--		WHEN PC.CustomerValue = '2' THEN 'N-Member' 
		--		WHEN PC.CustomerValue = '6' THEN 'SS-StoreStaff' END  AS CustomerGroup
		, PC.CustomerValue AS CustomerGroup
		,PH.ValidDateFrom
		,PH.ValidDateTo
		,PL.StoreId , PL.ItemCode , PL.UOMCode , PL.BarCode , 
	CASE WHEN PG.ValueType = 'Discount Percent' THEN ( ISNULL(PL.PriceAfterTax,0) * ( 100 - ISNULL(PG.GetValue,0)) / 100 ) 
		 WHEN PG.ValueType = 'Discount Amount' THEN ( ISNULL(PL.PriceAfterTax,0) - ISNULL(PG.GetValue,0)) 
		 WHEN PG.ValueType = 'Fixed Price' THEN ISNULL(PG.GetValue,0)
	END OfferPrice,PH.SAPBonusBuyId
	FROM S_PromoHeader PH 
						--INNER JOIN M_MapPromoType MP ON PH.PromoType = MP.BonusBuyCode AND PH.CompanyCode = MP.CompanyCode
						  INNER JOIN S_PromoCustomer PC ON PH.PromoId = PC.PromoId AND PH.CompanyCode = PH.CompanyCode
						  INNER JOIN S_PromoGet PG ON PH.PromoId = PG.PromoId AND PH.CompanyCode = PH.CompanyCode
						  --INNER JOIN M_PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode AND PG.CompanyCode = PL.CompanyCode
						  INNER JOIN @PriceList PL ON PG.LineCode = PL.ItemCode AND PG.LineUom = PL.UOMCode
						  INNER JOIN M_Item IM ON IM.ItemCode = PL.ItemCode AND PG.CompanyCode = IM.CompanyCode
						  INNER JOIN M_ItemGroup IG ON IM.ItemGroupId = IG.IGId AND PG.CompanyCode = IM.CompanyCode
						  --LEFT JOIN M_MapDiscountType MT ON PH.CompanyCode = MT.CompanyCode AND PC.CustomerValue = MT.CusPromoCode
	WHERE PH.PromoType = 1 AND PH.Status = 'Y' AND 
		PL.Status = 'A' AND 
		@DateTime BETWEEN ValidDateFrom AND ValidDateTo AND 
		PC.CustomerValue IN ('2','1','6') AND 
		PL.PriceListId = 'NP' AND
		PL.BarCode = @Barcode AND
		PL.StoreId = @StoreId AND
		PG.LineType = 'ItemGroup'


	DECLARE @PromoResultTable AS TABLE
	(
		PromoId Nvarchar(50),
		PromoName Nvarchar(350),
		PromoType Nvarchar(50),
		CustomerGroup Nvarchar(50),
		ValidDateFrom Date,
		ValidDateTo Date,
		StoreId Nvarchar(50),
		ItemCode Nvarchar(50),
		UOMCode Nvarchar(50),
		BarCode Nvarchar(50),
		OfferPrice Numeric(19,6),
		PromoCode Nvarchar(50)
	)

	INSERT INTO @PromoResultTable
	SELECT TOP 1
	PromoId,PromoName,PromoType,CustomerGroup,ValidDateFrom,ValidDateTo,StoreId,ItemCode,UOMCode,BarCode,OfferPrice,PromoCode
	FROM @PromoTable
	WHERE CustomerGroup = 1
	ORDER BY OfferPrice

	INSERT INTO @PromoResultTable
	SELECT TOP 1
	PromoId,PromoName,PromoType,CustomerGroup,ValidDateFrom,ValidDateTo,StoreId,ItemCode,UOMCode,BarCode,OfferPrice,PromoCode
	FROM @PromoTable
	WHERE CustomerGroup = 2
	ORDER BY OfferPrice

	INSERT INTO @PromoResultTable
	SELECT TOP 1
	PromoId,PromoName,PromoType,CustomerGroup,ValidDateFrom,ValidDateTo,StoreId,ItemCode,UOMCode,BarCode,OfferPrice,PromoCode
	FROM @PromoTable
	WHERE CustomerGroup = 6
	ORDER BY OfferPrice

	DELETE @PriceList;
	DELETE @PromoTable;

	SELECT * FROM @PromoResultTable


END
GO
/****** Object:  StoredProcedure [dbo].[USP_API_GetWeighingScale]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_API_GetWeighingScale 'CP001', '3001', '', '2022-05-01', '2022-09-30'
-- =============================================
CREATE PROCEDURE [dbo].[USP_API_GetWeighingScale]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode nvarchar(50),
	@FromDate datetime,
	@ToDate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT U.PLU AS 'PLU_Code'
		,I.ItemCode AS 'SKU_Code'
		,I.ItemName AS 'Description'
		,P.PriceAfterTax AS 'Price'
		,U.UOMCode
		,U.Factor PackSize
		--,P.UOMCode
		--,P.PriceListId
		,null AS 'ExpiryDay'
		,CASE WHEN ISNULL(U.PLU_Flag,'I') = 'I' THEN '1' ELSE '2' END AS 'ItemType'
		--,I.ModifiedOn
	FROM [M_Item] I WITH(NOLOCK)
	INNER JOIN [M_ItemUOM] U WITH(NOLOCK) ON U.CompanyCode = I.CompanyCode AND U.ItemCode = I.ItemCode
	INNER JOIN [M_ItemStoreListing] S WITH(NOLOCK) ON S.CompanyCode = U.CompanyCode AND S.ItemCode = U.ItemCode AND (ISNULL(@StoreId, '') = '' OR S.StoreId = @StoreId)
	LEFT JOIN [M_PriceList] P WITH(NOLOCK) ON P.CompanyCode = U.CompanyCode AND P.ItemCode = U.ItemCode AND P.UOMCode = U.UOMCode AND P.StoreId = S.StoreId AND P.PriceListId = 'NP'
	--INNER JOIN [M_MapStoreCode] M WITH(NOLOCK) ON M.CompanyCode = P.CompanyCode AND M.StoreId = P.StoreId AND M.PriceListId = P.PriceListId AND M.PartnerType = 'WGSC' -- Weighing Scale
	WHERE (ISNULL(@CompanyCode, '') = '' OR I.CompanyCode = @CompanyCode)
	--AND (ISNULL(@StoreId, '') = '' OR S.StoreId = @StoreId)
	AND (ISNULL(@ItemCode, '') = '' OR I.ItemCode = @ItemCode)
	AND ISNULL(U.PLU, '') <> ''
	AND P.[Status] = 'A' AND I.[Status] = 'A' AND U.[Status] = 'A' AND S.[Status] = 'A'
	AND CONVERT(varchar, ISNULL(P.ModifiedOn, P.CreatedOn), 112) >= CONVERT(varchar, ISNULL(@FromDate, '1900-01-01'), 112)
	AND CONVERT(varchar, ISNULL(P.ModifiedOn, P.CreatedOn), 112) <= CONVERT(varchar, ISNULL(@ToDate, '2100-12-31'), 112)
	AND CONVERT(varchar, GETDATE(), 112) BETWEEN CONVERT(varchar, ISNULL(P.ValidFrom, '1900-01-01'), 112) AND CONVERT(varchar, ISNULL(P.ValidTo, '2100-12-31'), 112)

END
GO
/****** Object:  StoredProcedure [dbo].[USP_C_Promotion_CheckIsUsed]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_C_Promotion_CheckIsUsed] 'CP001','PICP00100000004'
CREATE PROCEDURE [dbo].[USP_C_Promotion_CheckIsUsed]
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;

     SELECT distinct LTRIM(RTRIM(value)) promoCode FROM  STRING_SPLIT ( stuff(( 
           select distinct '' + PromoId from T_SalesLine where ISNULL( PromoId,'')<>'' and CompanyCode = @CompanyCode 
           FOR XML PATH('')),1,1,'')  , ',' )   where isnull(LTRIM(RTRIM(value)),'')<>'' and LTRIM(RTRIM(value)) = @PromoId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CancelSO]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_CancelSO]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TransId	nvarchar(50),
	@Reason		nvarchar(250)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Update T_SalesHeader set Status='C', IsCanceled='1', Reason = @Reason where TransId= @TransId and CompanyCode = @CompanyCode and StoreId = @StoreId

	Update T_InvoiceHeader  set Status='C', IsCanceled='1'  where RefTransId= @TransId and CompanyCode = @CompanyCode and StoreId = @StoreId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_Check_ApprovalFunction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_Check_ApprovalFunction 'CP001','admin','','Spc_CancelOrder', '','I'
CREATE PROCEDURE [dbo].[USP_Check_ApprovalFunction]
     
	@CompanyCode	nvarchar(50)	,
	@UserName nvarchar(50)	,
	@Password nvarchar(50) ,
	@FunctionId nvarchar(50) ,
	@ControlId nvarchar(50) ,
	@Permission nvarchar(50) 
AS	 
begin
	
	if((select COUNT(t1.Permissions)
	from M_Permission t1 with (nolock)
	left join M_UserRole t2 with (nolock) on t1.RoleId = t2.RoleId 
	left join M_User t3 with (nolock) on t1.CompanyCode = t3.CompanyCode and t3.UserId= t2.UserId
	where t1.CompanyCode = @CompanyCode and t3.Username = @UserName
	and t1.Permissions = @Permission
	and t1.Status = 'A'  
	and (t1.FunctionId = @FunctionId  or ISNULL( @FunctionId, '')='') 
	and (t1.ControlId =@ControlId  or ISNULL(@ControlId, '')='')) <> 0)
		select 1;
	else 
		select 0;
end
GO
/****** Object:  StoredProcedure [dbo].[USP_Check_ItemMasterData]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[USP_Check_ItemMasterData] 'CP001','2019', '9924390',''
 
CREATE PROCEDURE [dbo].[USP_Check_ItemMasterData]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50), 
	@Keyword nvarchar(50), 
	@CustomerGroupId nvarchar(50) = null
AS
begin
	--Declare @Message nvarchar(Max);
	Declare @Fromdate nvarchar(50);
	Declare @Todate nvarchar(50);
	Declare @ItemCode nvarchar(50);
	Declare @ModifiedBy nvarchar(50);
	Declare @ModifiedOn datetime;

	DECLARE @ResultTable AS TABLE
	(
		Type NVARCHAR(50),
		Message NVARCHAR(500),
		Result nvarchar(10),
		Remarks NVARCHAR(Max)  null,
		ModifiedBy nvarchar(150),
		ModifiedOn datetime  null
	)
	-- DECLARE @BarcodeTable AS TABLE
	--(
	--	Barcode NVARCHAR(50),
	--	UoM NVARCHAR(500),
	--	Status NVARCHAR(500)
	--)

	--set @Message = '';
	 if (select count(t1.ItemCode) from M_Item t1 with (nolock) 
	 left join  M_ItemUOM t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode

	 where t1.ItemCode like  N'%' +@Keyword+ '%' or t2.BarCode like N'%' +@Keyword+ '%' ) <= 0
	 begin
		INSERT INTO @ResultTable
		select 'Item Master', 'Item Master does not exist' , 'Failed' , 'select * from M_Item where  t1.ItemCode like  N''%' +@Keyword + '%'' or t2.BarCode like N''%' +@Keyword+ '%''', '', null
	 end
	 else
	 begin
		
	 
		
		select @ItemCode = ItemCode, @ModifiedBy = ModifiedBy, @ModifiedOn = ModifiedOn
		from (select top 1 t1.ItemCode, t1.ModifiedBy, t1.ModifiedOn from M_Item t1 with (nolock) 
		 left join  M_ItemUOM t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode

		 where t1.ItemCode like  N'%' +@Keyword+ '%' or t2.BarCode like N'%' +@Keyword+ '%' )  tmpx
	 
		INSERT INTO @ResultTable 

		select 'Item Master', 'Item Master exists ' , 'Success' , @ItemCode , @ModifiedBy, @ModifiedOn

	
	 end

	 if (select count(*) from M_ItemUOM with (nolock) 
	 where  ItemCode like  N'%'+@Keyword+'%' or BarCode = @Keyword) <= 0
	 begin
		INSERT INTO @ResultTable
		select 'Item Uom', 'Item Uom does not exist' , 'Failed' , 'select * from M_ItemUOM where ItemCode like  N''%' +@Keyword+ '%''  or BarCode like N''%' +@Keyword + '%''' ,'',null
	 end
	 else
	 begin
		INSERT INTO @ResultTable
		select 'Item Uom', 'Item Uom exists', 'Success', '' ,'',null;

		 
		--INSERT INTO @ResultTable
		--select '+', UOMCode, '','','', null from M_ItemUOM where ItemCode = @ItemCode
		
		--select '+', '', 'Success', '' ,'',null
	 end
	 INSERT INTO @ResultTable
		select 'Barcode Of Item ' , '' , '', '' ,'',null
	 INSERT INTO @ResultTable
		SELECT '+', BarCode + ' UoM: ' + UOMCode,'','' ,'',null
		--AS 'data()'
		from M_ItemUOM WITH (NOLOCK)  
		where ISNULL( BarCode,'')<>'' and ItemCode = @ItemCode
		 
		--INSERT INTO @ResultTable
		--select 'Price Of Item ' , '' , '', '' ,'',null

		-- INSERT INTO @ResultTable
		-- select '+', BarCode + ' UoM: ' + UOMCode,'','' ,'',null from M_PriceList where ItemCode = @ItemCode and StoreId = @StoreId
		 --INSERT INTO @BarcodeTable
		 --SELECT BarCode, UOMCode, Status
			--from M_ItemUOM WITH (NOLOCK)  
			--where ISNULL( BarCode,'')<>'' and ItemCode = @ItemCode
		 
		-- ( Select SUBSTRING( 
		--( 
		--	 SELECT ',' + BarCode AS 'data()'
		--		  from M_ItemUOM WITH (NOLOCK)  
		--		   where ISNULL( BarCode,'')<>'' and ItemCode = @ItemCode
		--		   --and  BarCode like  N'%' +@Keyword+ '%'
		--		   FOR XML PATH('') 
		--), 2 , 9999))
	 INSERT INTO @ResultTable 
		select 'Price List Of Item', '', '','' ,'',null

		INSERT INTO @ResultTable 

		select '+', 'Price Id: ' + PriceListId + char(32) + ' | Price Bf: ' + CONVERT( nvarchar(150), PriceBeforeTax) 
		+  ' | Price Af: ' + CONVERT(nvarchar(150),  PriceAfterTax) + ' | BarCode: ' + BarCode + ' UoM: ' + UOMCode
		, '', 'Valid On: ' + (SELECT FORMAT (ValidFrom, 'dd/MM/yyyy ')) + ' - '  + (SELECT FORMAT (ValidTo, 'dd/MM/yyyy '))  ,'', null
		from M_PriceList with (nolock) 
		where ItemCode = @ItemCode and StoreId = @StoreId
	
	--- Kiểm tra UoM và Barcode 

	if(  select COUNT(* )
		from M_PriceList t1 with (nolock)
		where t1.ItemCode = @ItemCode and t1.UOMCode  not in (select UOMCode  from M_ItemUOM with (nolock)  where ItemCode = @ItemCode  ) and StoreId = @StoreId
	 ) > 0
	 begin
		 INSERT INTO @ResultTable 
		select 'Price List with Barcode', '', '','' ,'',null

		INSERT INTO @ResultTable 
		select '+', t1.UOMCode, 'Failed' ,'','', null
			from M_PriceList t1 with (nolock)
			where t1.ItemCode = @ItemCode and t1.UOMCode  not in (select UOMCode  from M_ItemUOM with (nolock)  where ItemCode = @ItemCode  ) and StoreId = @StoreId

	 end
	
	 if (select count(*) from M_ItemStoreListing with (nolock) 
	 where  (   ItemCode like  N'%'+@ItemCode+'%')  and StoreId like  N'%'+@StoreId+'%') <= 0
	 begin
		INSERT INTO @ResultTable
		select 'Item Listing', 'Item Listing does not exist', 'Failed' , 'select * from M_ItemStoreListing where ItemCode like N''%' + @ItemCode + '%'' and StoreId like N''%' + @StoreId  + '%''' ,'',null
	 end
	 else
	 begin
		INSERT INTO @ResultTable
		select 'Item Listing', 'Item Listing exists', 'Success','' ,'',null

		
	
	 end

	  if ( select count(*) from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)  where  ItemCode like  N'%'+@Keyword+'%' or BarCode like  N'%'+@Keyword+'%') <=0
	  begin
		INSERT INTO @ResultTable 
		select 'Item Price For Sales', 'Item Price does not exist', 'Failed' , '' ,'',null
	  end
	  else
	  begin
		 INSERT INTO @ResultTable 
		 select 'Item Price For Sales', 'Item Price exists', '','' ,'',null

		  INSERT INTO @ResultTable 
		 --select 'Item price', 'Item price exists value ' + @Keyword , 'Success'

		  select '+' , 
		  'Id:' +  PriceListId + ' ,Status:' +  tmp.Status + ', Uom: ' +  UOMCode + ', Price Bf:' + CONVERT(nvarchar(50), PriceBeforeTax)  + ', Price Af:' + CONVERT(nvarchar(50), PriceAfterTax) + ' || From ' + (SELECT FORMAT (ValidFrom, 'dd/MM/yyyy '))  + ' To ' + (SELECT FORMAT (ValidTo, 'dd/MM/yyyy ')) , 
		   case when tmp.status = 'I' then 'Failed' 
			else case when CONVERT(date, ValidTo)  < CONVERT(date, GETDATE()) then 'Failed'
				else case when CONVERT(date, ValidFrom)  > CONVERT(date, GETDATE()) then 'Failed' 
				--+ (SELECT FORMAT (ValidTo, 'dd/MM/yyyy ')) 
				else ''  
			end   
			end
		   end
		  , case when tmp.status = 'I' then 'Inactive' 
			else case when CONVERT(date, ValidTo)  < CONVERT(date, GETDATE()) then 'Expired ' + (SELECT FORMAT (ValidTo, 'dd/MM/yyyy ')) 
				else case when CONVERT(date, ValidFrom)  > CONVERT(date, GETDATE()) then 'Not applicable for today (' + (SELECT FORMAT ( GETDATE(), 'dd/MM/yyyy ')) +')'
				--+ (SELECT FORMAT (ValidTo, 'dd/MM/yyyy ')) 
				else ''  
			end   
			end
		   end
		   , '',null
		  from (  select *  from [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, @CustomerGroupId) ) tmp
		  
		  where ItemCode like  N'%'+@Keyword+'%' or tmp.BarCode like  N'%'+@Keyword+'%' 





	  end
	   
		

	 select * from @ResultTable
end 
 
 

 
GO
/****** Object:  StoredProcedure [dbo].[USP_Check_ItemMasterData_Check]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[USP_Check_ItemMasterData_Check] 'CP001','3014', '24000163022',''

CREATE PROCEDURE [dbo].[USP_Check_ItemMasterData_Check]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50), 
	@Keyword nvarchar(50), 
	@CustomerGroupId nvarchar(50) = null
AS
begin
	--Declare @Message nvarchar(Max);
	Declare @Fromdate nvarchar(50);
	Declare @Todate nvarchar(50);
	Declare @ItemCode nvarchar(50);
	
	DECLARE @ResultTable AS TABLE
	(
		Type NVARCHAR(50),
		Message NVARCHAR(500),
		Result nvarchar(10),
		Remarks NVARCHAR(Max)  null
	)
	 

	--set @Message = '';
	 if (select count(t1.ItemCode) from M_Item t1 with (nolock) 
	 left join  M_ItemUOM t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode

	 where t1.ItemCode like  N'%' +@Keyword+ '%' or t2.BarCode like N'%' +@Keyword+ '%' ) <= 0
	 begin
		INSERT INTO @ResultTable
		select 'Item Master', 'Item Master doesn''t existed' , 'Failed' , 'select * from M_Item where  t1.ItemCode like  N''%' +@Keyword + '%'' or t2.BarCode like N''%' +@Keyword+ '%'''
	 end
	 else
	 begin
		INSERT INTO @ResultTable
		select 'Item Master', 'Item Master has existed ' , 'Success' , (select top 1 t1.ItemCode from M_Item t1 with (nolock) 
		 left join  M_ItemUOM t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode

		 where t1.ItemCode like  N'%' +@Keyword+ '%' or t2.BarCode like N'%' +@Keyword+ '%' )

		 set @ItemCode = (select top 1 t1.ItemCode from M_Item t1 with (nolock) 
		 left join  M_ItemUOM t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode

		 where t1.ItemCode like  N'%' +@Keyword+ '%' or t2.BarCode like N'%' +@Keyword+ '%' )
	 end

	 if (select count(*) from M_ItemUOM with (nolock) 
	 where  ItemCode like  N'%'+@Keyword+'%' or BarCode = @Keyword) <= 0
	 begin
		INSERT INTO @ResultTable
		select 'Item Uom', 'Item Uom doesn''t existed' , 'Failed' , 'select * from M_ItemUOM where ItemCode like  N''%' +@Keyword+ '%''  or BarCode like N''%' +@Keyword + '%'''
	 end
	 else
	 begin
		INSERT INTO @ResultTable
		select 'Item Uom', 'Item Uom has existed', 'Success', ''
	 end
	 INSERT INTO @ResultTable
		select 'Barcode Of Item ' , '' , '', ''
	 INSERT INTO @ResultTable
		SELECT '+', BarCode,'',''
		--AS 'data()'
		from M_ItemUOM WITH (NOLOCK)  
		where ISNULL( BarCode,'')<>'' and ItemCode = @ItemCode
		 
		-- ( Select SUBSTRING( 
		--( 
		--	 SELECT ',' + BarCode AS 'data()'
		--		  from M_ItemUOM WITH (NOLOCK)  
		--		   where ISNULL( BarCode,'')<>'' and ItemCode = @ItemCode
		--		   --and  BarCode like  N'%' +@Keyword+ '%'
		--		   FOR XML PATH('') 
		--), 2 , 9999))
	 
	 if (select count(*) from M_ItemStoreListing with (nolock) 
	 where  (   ItemCode like  N'%'+@ItemCode+'%')  and StoreId like  N'%'+@StoreId+'%') <= 0
	 begin
		INSERT INTO @ResultTable
		select 'Item Listing', 'Item Listing doesn''t existed', 'Failed' , 'select * from M_ItemStoreListing where ItemCode like N''%' + @ItemCode + '%'' and StoreId like N''%' + @StoreId  + '%'''
	 end
	 else
	 begin
		INSERT INTO @ResultTable
		select 'Item Listing', 'Item Listing has existed', 'Success',''
	 end

	  if ( select count(*) from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)  where  ItemCode like  N'%'+@Keyword+'%' or BarCode like  N'%'+@Keyword+'%') <=0
	  begin
		INSERT INTO @ResultTable 
		select 'Item Price', 'Item Price doesn''t existed', 'Failed' , ''
	  end
	  else
	  begin
		 INSERT INTO @ResultTable 
		 select 'Item Price', 'Item Price has existed', 'Success',''

		  INSERT INTO @ResultTable 
		 --select 'Item price', 'Item price has existed value ' + @Keyword , 'Success'

		  select '+' , 
		  'Id:' +  PriceListId + ' ,Status:' +  Status + ', Uom: ' +  UOMCode + ', Price Bf:' + CONVERT(nvarchar(50), PriceBeforeTax)  + ', Price Af:' + CONVERT(nvarchar(50), PriceAfterTax) + ' || From ' + (SELECT FORMAT (ValidFrom, 'dd/MM/yyyy '))  + ' To ' + (SELECT FORMAT (ValidTo, 'dd/MM/yyyy ')) , case when status = 'I' then 'Failed' else '' end
		  , case when status = 'I' then 'Inactive' else case when CONVERT(date, ValidTo)  < CONVERT(date, GETDATE()) then 'Expired ' + (SELECT FORMAT (ValidTo, 'dd/MM/yyyy ')) else '' end   end
		  
		  from (  select *  from [fn_GetPriceListByCustomerGroup](@CompanyCode, @StoreId, @CustomerGroupId) ) tmp
		  where ItemCode like  N'%'+@Keyword+'%' or BarCode like  N'%'+@Keyword+'%' 
	  end
	   
	 select * from @ResultTable
end 
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_Check_ReturnOrder]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_Check_ReturnOrder 'CP001','W0101','SOCP001W010100000002','Retail'
CREATE PROCEDURE [dbo].[USP_Check_ReturnOrder]
     
	@CompanyCode	nvarchar(50)	,
	@StoreId nvarchar(50)	,
	@TransId nvarchar(50) ,
	@SalesType nvarchar(50) ,
	@SalesMode nvarchar(50) 
AS	
if @SalesMode='Return'
begin
	declare @Vl decimal(19,6)  = ( select Value from S_VoidOrderSetting where Type = Ltrim(RTRIM(@SalesType)) and Code= Ltrim(RTRIM('SOReturnDay')) )
	declare @Vl2 decimal(19,6)  = (select DATEDIFF(Day ,CreatedOn , GETDATE())  from T_SalesHeader where TransId = @TransId and CompanyCode = @CompanyCode and StoreId = @StoreId)
	if(@Vl> @Vl2)
		select 1;
	else 
		select 0;
end
else
	select 1;



 
GO
/****** Object:  StoredProcedure [dbo].[USP_CheckAndCreateTableType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_CheckAndCreateTableType] @TableName nvarchar(250), @IsDropAndCreate bit AS  begin   if ((select count(*) from dbo.[fn_GetTableInfor] ( @TableName , 0)) <> 0)   begin declare @Result varchar(max)  = ''; declare @NumOfTable int; declare @NumOfTableType int; declare @NamTableType varchar(450)  = ''; set @NamTableType =  QUOTENAME(@TableName + 'TableType'); set 	@TableName = QUOTENAME(@TableName)  IF EXISTS (SELECT * FROM   [sys].[table_types]  WHERE  user_type_id = Type_id(@NamTableType))  BEGIN if (@IsDropAndCreate = 1) begin set @NumOfTable = (select count(column_name) as Number from information_schema.columns with (nolock)  where table_name= @TableName) set @NumOfTableType = ( Select COUNT( c.name ) as Number From sys.table_types t  with (nolock)  Inner join sys.columns c with (nolock) on c.object_id = t.type_table_object_id WHERE t.is_user_defined = 1 AND t.is_table_type = 1 and t.name = @NamTableType)  if(@NamTableType <> @NumOfTable) begin   declare @Drop  varchar(max);  set @Drop = N'DROP TYPE ' + @NamTableType + ' ;'; set @Result = @Drop + ' CREATE TYPE dbo.' + @NamTableType + ' AS TABLE(' select @Result = @Result + '' + QUOTENAME(ColumnName) +   ' ' +  QUOTENAME( ColumnType ) +   ''+ isnull(ColumnLength ,'')  +  ' ' + case  when   NullableSign = '?' then 'null' else 'not null' end + ',' from ( select * from dbo.[fn_GetTableInfor] ( @TableName , 0) ) t order by ColumnId set @Result = (SELECT LEFT(@Result, NULLIF(LEN(@Result)-1,-1)))   + ')'				select  @Result end else begin select  '-1' end  end  else begin select '-1' end END  else begin set @Result  = N'CREATE TYPE dbo.' + @NamTableType + ' AS TABLE( '  select @Result = @Result + '' + QUOTENAME(ColumnName) +   ' ' +  QUOTENAME( ColumnType ) +   ''+ isnull(ColumnLength ,'')  +  ' ' + case  when   NullableSign = '?' then 'null' else 'not null' end + ',' from ( select * from dbo.[fn_GetTableInfor] ( @TableName , 0) ) t order by ColumnId set @Result =  (SELECT LEFT(@Result, NULLIF(LEN(@Result)-1,-1)))   + ')'  set @Result = N'' + @Result +''; select  @Result  end end else begin select  '-1' end end
GO
/****** Object:  StoredProcedure [dbo].[USP_CheckStoreAreaInStoreCapacity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_CheckStoreAreaInStoreCapacity]
 
	@CompanyCode	nchar(10)	, 
	@StoreId	nvarchar(50)	,
	@StoreAreaId		nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select COUNT(*)  from M_StoreCapacity with (nolock)
	--where StoreId = 'JAOF001' and StoreAreaId = 'A'
       where   [CompanyCode]= @CompanyCode and
            StoreId = @StoreId and
           StoreAreaId=  @StoreAreaId 
	 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_ClearHoldBillByDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_ClearHoldBillByDate]  
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@ModifiedBy nvarchar(50) 
AS	

begin 

	update t1 set Status = 'C' 
	, IsCanceled = 'Y' 
	, CollectedStatus = 'Cancled' 
	, ModifiedBy = @ModifiedBy
	, ModifiedOn = GETDATE()
	, Remarks = 'Clear hold bill by EOD' 
	from T_SalesHeader t1
	left join T_ShiftHeader t2 on t1.ShiftId = t2.ShiftId and t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId
	where t2.DailyId = @DailyId and t1.StoreId=@StoreId and t1.CompanyCode = @CompanyCode 
	and t1.Status = 'H'
end
     
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_ClearHoldBillByShift]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_ClearHoldBillByShift] 'CP001','1001','100121122700002','System'
create PROCEDURE [dbo].[USP_ClearHoldBillByShift]  
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ShiftId	nvarchar(50),
	@ModifiedBy nvarchar(50) 
AS	

begin 

	update T_SalesHeader set Status = 'C' 
	, IsCanceled = 'Y' 
	, CollectedStatus = 'Cancled' 
	, ModifiedBy = @ModifiedBy
	, ModifiedOn = GETDATE()
	, Remarks = 'Clear hold bill by EOS' 
	where ShiftId = @ShiftId and Status = 'H' and StoreId=@StoreId and CompanyCode = @CompanyCode 
end
     
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_CopyPermision]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
--select * from M_ItemUOM
-- select * from [fn_GetPriceListByCustomerGroup]('CP001', 'FM01', '')
 --[USP_GetItem_Filter_CheckData] 'CP001','FM02', '', '', '','','','','','', '', '','','','','','', '','','','','','',null,null,null,null,'','', null,null, '290101'
	
CREATE   PROCEDURE [dbo].[USP_CopyPermision]
	@CompanyCode nvarchar(50),
	@FrRole nvarchar(50),
	@ToRole	nvarchar(50),
	@By	nvarchar(50) 
AS
begin

	delete M_Permission 
    where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and CompanyCode = @CompanyCode  
	AND  RoleId = @ToRole;
	 

    INSERT INTO M_Permission ([CompanyCode]
      ,[PermissionId]
      ,[RoleId]
      ,[FunctionId]
      ,[ControlId]
      ,[Permissions]
      ,[Status]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn],
	  SyncLocalStatus)
    select [CompanyCode]
      ,[PermissionId]
      ,@ToRole
      ,[FunctionId]
      ,[ControlId]
      ,[Permissions]
      ,[Status]
      ,@By
      ,GETDATE()
	, null, null, 'U'
	from M_Permission t1    
    where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND  t1.RoleId = @FrRole
 
 
	 
end 
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_CreateDOFromDivision]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_CreateDOFromDivision] 'CP001','2022-11-02','','3001'
CREATE PROCEDURE [dbo].[USP_CreateDOFromDivision]
	@CompanyCode nvarchar(50),
	@Date datetime,
	@DivisionCode nvarchar(50),
	@CustomerId nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;
	Declare @CusId  nvarchar(150)
	Declare @TransId  nvarchar(150)
	Declare @StoreId  nvarchar(150)


	DECLARE Customer_Lines cursor local FOR
	select t1.CusId 
	from T_ShippingDivisionLine t1 with (nolock) 
	where isnull(@CustomerId,'') = '' or t1.CusId = @CustomerId
	--where CONVERT(date, CreatedOn) =  CONVERT(date, @Date)  
					
					 

	OPEN Customer_Lines   
	FETCH NEXT FROM Customer_Lines 
	INTO @CusId
	WHILE @@FETCH_STATUS = 0 
	BEGIN
        set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] ('DO', @CompanyCode, @CusId))

		insert into T_DeliveryHeader(
		[TransId] ,[CompanyCode] ,[StoreId] ,[ContractNo], [CusId] ,[TotalAmount] ,[TotalPayable] ,[TotalDiscountAmt] ,[TotalReceipt] 
		,[AmountChange] ,[PaymentDiscount] ,[TotalTax],[DiscountType] ,[DiscountAmount] ,[DiscountRate] ,[CreatedOn],[CreatedBy] ,[Status]
		,[IsCanceled],[Remarks] ,[SalesMode],[SalesType],[RefTransId],[ManualDiscount],[DataSource],[POSType],[SyncMWIStatus]
		,[SyncMWIDate],[SyncMWIMsg],[EInvoice],[SyncJAStatus],[SyncJADate],[SyncJAMsg],[Phone],[CusName],[CusAddress],[Reason],[CollectedStatus]
		,[OMSId],[Chanel],[StartTime],[TerminalId],[RoundingOff],[ShortOrderID],[MerchantId],[OMSStatus],[PromoId],[ApprovalId],[RewardPoints],
		[ExpiryDate],[DocDate],[CustomF1],[CustomF2],[CustomF3],[CustomF4],[CustomF5],[LuckyNo],[DeliveryBy],[ReceiptBy],[From],[To],[ToCustom1], [ToCustom2],[ToCustom3],[OrderId])

		select @TransId TransId, t1.CompanyCode, @CusId StoreId, '' ContractNo, t1.CusId, 0 ,0 ,0 ,0
		,0 ,0, 0 TotalTax, '' DiscountType, 0, 0, GETDATE(), t2.CreatedBy, 'C',
		'N' IsCanceled, t1.Remark Remarks, '' SalesMode,'' SalesType,'' RefTransId,'' ManualDiscount,'' [DataSource],'' POSType,'' SyncMWIStatus
		, null, '' SyncMWIMsg, '' EInvoice, '' SyncJAStatus, null SyncJADate, '' SyncJAMsg,'' Phone,'' CusName,'' CusAddress,'' Reason ,'' CollectedStatus
		,'','', null, '',0, '', '', '' ,'','',0,
		null, GETDATE(), '','','','','','' LuckyNo, ShippingCode ,'', null, null ,'','','', NEWID()
		from T_ShippingDivisionLine t1 with (nolock) 
		left join T_ShippingDivisionHeader t2 with (nolock)  on t1.Id = t2.Id and t1.CompanyCode= t2.CompanyCode
		where t1.CusId = @CusId and CONVERT(date, t2.DocDate ) =  CONVERT(date, @Date )  ;
	 
	  
		
			declare @ItemCode nvarchar(100);
			declare @ItemUOM nvarchar(100);
			declare @ItemQuantity nvarchar(100);
			declare @Barcode nvarchar(100);
			declare @SOTransId nvarchar(100);
			--Declare @SQL varchar(1255);
			--Declare @randomNumber varchar(10);

			
			 --select *  from  [fn_GetDivisionItemByCus](@CompanyCode, @CusId , @Date)  
	 
		    

			DECLARE Division_Lines@CusId  cursor local FOR
			select top 1000 t1.TransId,  t1.ItemCode, t1.BarCode, t1.UOMCode, t1.Quantity
					from T_SalesLine t1 with (nolock) 
						--join ( select *  from  [fn_GetDivisionItemByCus](@CompanyCode, @CusId , @Date) ) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode = t1.UOMCode
					left join T_SalesHeader t2 with (nolock)  on t1.TransId = t2.TransId and t1.CompanyCode= t2.CompanyCode
			 
					where  t2.CusId = @CusId  and CONVERT(date, t2.CreatedOn) = @Date
					 
			OPEN Division_Lines@CusId   
			FETCH NEXT FROM Division_Lines@CusId 
			INTO @SOTransId, @ItemCode, @Barcode, @ItemUOM, @ItemQuantity
			WHILE @@FETCH_STATUS = 0 
			BEGIN
					 
					--select @SOTransId, @ItemCode, @Barcode, @ItemUOM, @ItemQuantity
					declare @RemainDivisionQty decimal(19,6);
					declare @RequestDivisionQty decimal(19,6);
					declare @DivisionQty decimal(19,6);
					select @RemainDivisionQty = isnull((isnull(Quantity,0) - isnull(DivisionQty,0)),0) 
					from ( select *  from  [fn_GetDivisionItemByCus](@CompanyCode, @CusId , @Date)) t1
					where t1.ItemCode = @ItemCode and t1.UOMCode = @ItemUOM 
					select @RequestDivisionQty = @ItemQuantity
					--isnull(Quantity,0)  from T_SalesLine with (nolock) where ItemCode = @ItemCode and UOMCode = @ItemUOM and TransId = @SOTransId
					 
					 --select @RemainDivisionQty

					if(@RemainDivisionQty >= @RequestDivisionQty)
					begin
						set @DivisionQty = @RequestDivisionQty
					end
					else
					begin
						set @DivisionQty =  @RequestDivisionQty - @RemainDivisionQty
					end
					if(ISNULL(@remainDivisionQty , 0) > 0)
					begin

							
						-- select  t1.* , 
						-- from T_SalesLine t1 with (nolock) 
						-- left join T_SalesHeader t2 with (nolock)  on t1.TransId = t2.TransId and t1.CompanyCode= t2.CompanyCode
						--where t2.CusId = @CusId and CONVERT(date, t2.CreatedOn) = @Date  and ItemCode = @ItemCode and UOMCode = @ItemUOM and t2.TransId = @SOTransId


						insert into T_DeliveryLine(
						 [TransId],[LineId],[CompanyCode],[ItemCode],[SLocId],[BarCode],[UOMCode],[Quantity],[Price],[LineTotal],[DiscountType],[DiscountAmt],[DiscountRate]
						,[CreatedBy],[CreatedOn], [Status],[Remark],[PromoId],[PromoType],[PromoPercent],[PromoBaseItem],[SalesMode],[TaxRate],[TaxAmt],[TaxCode]
						,[MinDepositAmt],[MinDepositPercent],[DeliveryType],[POSService],[StoreAreaId],[TimeFrameId],[Duration],[AppointmentDate],[BomID],[PromoPrice],[PromoLineTotal]
						,[BaseLine],[BaseTransId],[OpenQty],[PromoDisAmt],[IsPromo],[IsSerial],[IsVoucher],[PrepaidCardNo],[MemberDate],[MemberValue],[StartDate],[EndDate],[ItemType]
						,[Description],[LineTotalBefDis],[LineTotalDisIncludeHeader],[SerialNum],[Name],[Phone],[ItemTypeS4],[Custom1],[Custom2],[Custom3],[Custom4],[Custom5]
						,[PriceListId],[ProductId],[WeightScaleBarcode],[StoreId],[BookletNo],[OrgQty],[DeliveryQty],[ReceiptQty])

						select  @TransId TransId, (ROW_NUMBER() OVER(ORDER BY ItemCode ASC)) AS LineId, t1.CompanyCode, t1.ItemCode, t1.SLocId, t1.BarCode, t1.UOMCode, t1.Quantity, 0,0, '', 0, 0,
						t2.CreatedBy, GETDATE(), 'C' Status, '' Remark,'' PromoId,'' PromoType, null PromoPercent,'' PromoBaseItem,'' SalesMode, 0,0 ,'' TaxCode
						,0 MinDepositAmt,0 MinDepositPercent,'' DeliveryType,'' POSService,'' StoreAreaId,'' TimeFrameId,null Duration,'' AppointmentDate,'' BomID,null PromoPrice,null PromoLineTotal
						,null BaseLine,null BaseTransId, 0, 0, 0, 0, 0, '' PrepaidCardNo,'' MemberDate,'' MemberValue,'' StartDate,'' EndDate,'' ItemType
						,'' Description,0 LineTotalBefDis,0 LineTotalDisIncludeHeader, '' SerialNum,'' Name,'' Phone,'' ItemTypeS4,'' Custom1,'' Custom2,'' Custom3,'' Custom4,'' Custom5
						,'' PriceListId,'' ProductId,'' WeightScaleBarcode,'' StoreId, t2.TransId BookletNo, t1.Quantity, @DivisionQty  , 0
					 
						from T_SalesLine t1
						left join T_SalesHeader t2 with (nolock)  on t1.TransId = t2.TransId and t1.CompanyCode= t2.CompanyCode
						where t2.CusId = @CusId and CONVERT(date, t2.CreatedOn) = @Date  and ItemCode = @ItemCode and UOMCode = @ItemUOM and t2.TransId = @SOTransId
         
						update #DivisionTable set DivisionQty = ( DivisionQty +  @DivisionQty)
					end
					 
					FETCH NEXT FROM Division_Lines@CusId 
					INTO @SOTransId, @ItemCode, @Barcode, @ItemUOM, @ItemQuantity
			End
			CLOSE Division_Lines@CusId 
			DEALLOCATE Division_Lines@CusId


			--drop table #DivisionTable@CusId 

			 
		FETCH NEXT FROM Customer_Lines
		INTO @CusId
	End
	CLOSE Customer_Lines 
	DEALLOCATE Customer_Lines
	
	 

END


--delete from T_DeliveryHeader

--delete from  T_DeliveryLine
GO
/****** Object:  StoredProcedure [dbo].[USP_D_GoodsReturn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[USP_D_GoodsReturn] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@PurchaseId	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_GoodsReturnHeader   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode and StoreId=@StoreId;
	delete T_GoodsReturnLine   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode;
	delete T_GoodsReturnLineSerial   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode ;
	 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_GRPO]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_GRPO] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@PurchaseId	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_GoodsReceiptPOHeader   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode and StoreId=@StoreId;
	delete T_GoodsReceiptPOLine   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode;
	delete T_GoodsReceiptPOLineSerial   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode ;
	 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_InvoiceHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_InvoiceHeader] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@TransId	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InvoiceHeader   where TransId = @TransId and CompanyCode=@CompanyCode and StoreId=@StoreId;
	delete T_InvoiceLine   where TransId = @TransId and CompanyCode=@CompanyCode;
	delete T_InvoiceLineSerial   where TransId = @TransId and CompanyCode=@CompanyCode ;
	delete T_InvoicePayment   where TransId = @TransId and CompanyCode=@CompanyCode ;
	delete T_InvoicePromo   where TransId = @TransId and CompanyCode=@CompanyCode ;
	
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_BOMHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_BOMHeader]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
AS	
begin 
	DELETE 
	FROM [dbo].[M_BOMHeader]
    WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode;
	
	DELETE 
	FROM [dbo].[M_BOMLine]
    WHERE BOMId = @ItemCode AND CompanyCode = @CompanyCode
end
	 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_BOMLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_BOMLine]
    @Id nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@BOMId	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_BOMLine]
    WHERE Id=@Id and  CompanyCode = @CompanyCode AND BOMId = @BOMId 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Company]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Company]
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[M_Company]
    WHERE CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Control]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Control]
	@ControlId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[M_Control]
    WHERE CompanyCode = @CompanyCode AND ControlId = @ControlId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Currency]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_D_M_Currency] 
@CurrencyCode	nvarchar(50)
 
	 
AS	
delete M_Currency  
 where CurrencyCode = @CurrencyCode
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Customer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Customer]
	@CustomerId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_Customer
    WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_CustomerGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_CustomerGroup]
	@CusGrpId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_CustomerGroup
    WHERE CompanyCode = @CompanyCode AND CusGrpId = @CusGrpId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Employee]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Employee]
	@EmployeeId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_Employee
    WHERE CompanyCode = @CompanyCode AND EmployeeId = @EmployeeId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_EmployeeStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_EmployeeStore]
	@EmployeeId	nvarchar(50)	,
	@StoreId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_EmployeeStore
    WHERE StoreId = @StoreId AND EmployeeId = @EmployeeId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ExchangeRate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_D_M_ExchangeRate]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)
 
	
AS	delete M_ExchangeRate
          
where Id = @Id and
CompanyCode = @CompanyCode and
StoreId = @StoreId 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Function]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Function]
	@FunctionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_Function
    WHERE FunctionId = @FunctionId AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Item]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Item]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ProductId	nvarchar(50)	,
	@VariantId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_Item
    WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode AND ProductId = @ProductId AND VariantId = @VariantId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ItemGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ItemGroup]
	@IGId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_ItemGroup
    WHERE IGId = @IGId AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ItemSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ItemSerial]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50),
	@SerialNum nvarchar(50) = null
	AS	DELETE 
	FROM [dbo].M_ItemSerial
    WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode and SerialNum = @SerialNum
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ItemSerialStock]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ItemSerialStock]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@SerialNum	nvarchar(250)	
	AS	DELETE 
	FROM [dbo].M_ItemSerialStock
    WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode AND SLocId = @SLocId AND SerialNum = @SerialNum
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ItemStoreListing]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_D_M_ItemStoreListing] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ItemCode	nvarchar(50) 
AS	
delete M_ItemStoreListing  
where  CompanyCode =@CompanyCode and 
StoreId= @StoreId and
ItemCode =@ItemCode 
 
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ItemUOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ItemUOM]
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].M_ItemUOM
    WHERE ItemCode = @ItemCode AND UOMCode = @UOMCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_KeyCap]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_D_M_KeyCap] 
	@Id	nvarchar(50) 
AS	
delete  M_KeyCap  
where Id=@Id 
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_MerchandiseCategory]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_MerchandiseCategory]
	@MCId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
	AS	DELETE 
	FROM [dbo].M_MerchandiseCategory
    WHERE MCId = @MCId AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_MovementType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_D_M_MovementType]
	 
	@Code	nvarchar(50)	 
AS	
delete  [dbo].[M_MovementType]  
where Code = @Code
       

GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_PaymentMethod]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_PaymentMethod]
	@PaymentCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_PaymentMethod]
    WHERE CompanyCode = @CompanyCode AND PaymentCode = @PaymentCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_PaymentMethodMapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_PaymentMethodMapping] @CompanyCode nvarchar(50), @PaymentCode	nvarchar(150) AS begin DELETE  FROM [dbo].M_PaymentMethodMapping  WHERE CompanyCode = @CompanyCode AND PaymentCode = @PaymentCode end 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Permission]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Permission]
	@PermissionId	nvarchar(250)	,
	@CompanyCode	nvarchar(50)	,
	@RoleId	nvarchar(250) = null,
	@FunctionId	nvarchar(250) = null,
	@ControlId	nvarchar(250) = null
AS	DELETE 
	FROM [dbo].[M_Permission]
    WHERE CompanyCode = @CompanyCode AND Permissions = @PermissionId 
	and ( RoleId = @RoleId  or ISNULL(@RoleId, '') = '')  
	and ( FunctionId = @FunctionId  or ISNULL(@FunctionId, '') = '')  
	and ( ControlId = @ControlId  or ISNULL(@ControlId, '') = '')  
	 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_PriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_PriceList] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@UOMCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_PriceList]
    WHERE CompanyCode = @CompanyCode  AND StoreId = @StoreId and ItemCode= @ItemCode and UOMCode=@UOMCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_PriceListName]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_D_M_PriceListName] 
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50) 
 
	 
AS	delete [dbo].[M_PriceListName]
          where Id = @Id and CompanyCode = @CompanyCode
        
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_PriorityPriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_D_M_PriorityPriceList]
	 
	@CompanyCode	nvarchar(50),
	@Id	nvarchar(50)
 
AS	 
 
	
delete M_PriorityPriceList  where CompanyCode = @CompanyCode
	 
	and  Id = @Id   
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Product]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Product]
	@CompanyCode	nvarchar(50)	,
	@ProductId	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_Product]
    WHERE CompanyCode = @CompanyCode AND ProductId = @ProductId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption1]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption1]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption1]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption10]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption10]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption10]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption2]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption2]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption2]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption3]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption3]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption3]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption4]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption4]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption4]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption5]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption5]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption5]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption6]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption6]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption6]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption7]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption7]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption7]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption8]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption8]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption8]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductOption9]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductOption9]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
AS	DELETE 
	FROM [dbo].[M_ProductOption9]
    WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ProductVariant]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_ProductVariant]
	@ProductId	nvarchar(50)	,
	@VariantId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_ProductVariant]
    WHERE CompanyCode = @CompanyCode AND ProductId = @ProductId AND VariantId = @VariantId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Reason]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_D_M_Reason]
	@Id nvarchar(50),
	@CompanyCode	nvarchar(50) 
	 
	
AS	delete [dbo].[M_Reason]
       
		where Id= @Id and CompanyCode = @CompanyCode
  
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Role]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Role]
	@RoleId	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_Role]
    WHERE CompanyCode = @CompanyCode AND RoleId = @RoleId 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Serial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_D_M_Serial]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50) 
 
 

AS	Delete [dbo].[M_Serial]
   
 WHERE Id = @Id  AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_ShortcutKeyboard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesInvoice( 'SOCP001JAOF00100000452;', 'CP001')
-- =============================================
CREATE   PROCEDURE [dbo].[USP_D_M_ShortcutKeyboard]
	-- Add the parameters for the stored procedure here
	 
	@CompanyCode nvarchar(50),
	@Id nvarchar(50)
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	delete M_ShortcutKeyboard  
	where CompanyCode = @CompanyCode and @Id = @Id
 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Storage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Storage]
	@SLocId	nvarchar(50),
	@WhsCode	nvarchar(50),
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_Storage]
    WHERE CompanyCode = @CompanyCode AND SLocId = @SLocId and WhsCode=@WhsCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Store]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Store]
	@StoreId	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_Store]
    WHERE CompanyCode = @CompanyCode AND StoreId = @StoreId 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_StoreArea]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_D_M_StoreArea]
	@CompanyCode	nvarchar(50)	,
	@StoreAreaId	nvarchar(50)
	 
AS	
	delete [dbo].M_StoreArea
    where CompanyCode = @CompanyCode and StoreAreaId= @StoreAreaId
      
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_StoreCapacity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_StoreCapacity]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50)
     
AS	
 delete [dbo].[M_StoreCapacity]  
 where  CompanyCode= @CompanyCode and StoreId = @StoreId and StoreAreaId = @StoreAreaId  and TimeFrameId = @TimeFrameId 

GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_StoreCurrency]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_D_M_StoreCurrency] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@Currency  nvarchar(50)
	  
AS	
delete M_StoreCurrency  where  
 
	CompanyCode =@CompanyCode and
	StoreId =@StoreId and Currency = @Currency
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_StoreGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_StoreGroup]
	@StoreGroupId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_StoreGroup]
    WHERE CompanyCode = @CompanyCode AND StoreGroupId = @StoreGroupId 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_StorePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_StorePayment]
	@StoreId	nvarchar(50)	,
	@PaymentCode	nvarchar(50)	
AS	
BEGIN 
	
	DELETE 
	FROM [dbo].[M_StorePayment]
    WHERE StoreId = @StoreId AND PaymentCode = @PaymentCode 

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType], [InQuery])
	SELECT DISTINCT 'CP001', 'M_StorePayment', @StoreId, NEWID(), GETDATE(), 'D', 'DELETE FROM [M_StorePayment] WHERE StoreId = ''' + @StoreId + ''' AND PaymentCode = ''' + @PaymentCode + '''';

END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Tax]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Tax]
	@TaxCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_Tax]
    WHERE TaxCode = @TaxCode AND CompanyCode = @CompanyCode 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_TransactionType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_TransactionType]
	@TransType	nvarchar(50)	
AS	DELETE 
	FROM [dbo].[M_TransactionType]
    WHERE TransType = @TransType 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_UOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_UOM]
	@CompanyCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[M_UOM]
    WHERE CompanyCode = @CompanyCode AND UOMCode = @UOMCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_User]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_User]
	@CompanyCode	nvarchar(50)	,
	@UserId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[M_User]
    WHERE CompanyCode = @CompanyCode AND UserId = @UserId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_UserLicense]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_UserLicense]
	@LicenseId	nvarchar(50)	,
	@UserId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[M_UserLicense]
    WHERE LicenseId = @LicenseId AND UserId = @UserId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_UserRole]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_UserRole]
	@RoleId	nvarchar(50)	,
	@UserId	nvarchar(50)	
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	DELETE 
	FROM [dbo].[M_UserRole]
    WHERE RoleId = @RoleId AND UserId = @UserId

	UPDATE M_User SET StatusGuid = @StatusGuid WHERE UserId = @UserId
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_UserStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_UserStore]
	@StoreId	nvarchar(50)	,
	@UserId	nvarchar(50)	
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	DELETE 
	FROM [dbo].[M_UserStore]
    WHERE StoreId = @StoreId AND UserId = @UserId

	UPDATE M_User SET StatusGuid = @StatusGuid WHERE UserId = @UserId
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_M_Warehouse]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_M_Warehouse]
	@CompanyCode	nvarchar(50)	,
	@WhsCode	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[M_Warehouse]
    WHERE CompanyCode = @CompanyCode AND WhsCode = @WhsCode
GO
/****** Object:  StoredProcedure [dbo].[USP_D_Promotion]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--USP_D_Promotion 'CP001','PICP00100000013'
CREATE PROCEDURE [dbo].[USP_D_Promotion]
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	 
		 
	
	delete [S_PromoHeader] WHERE CompanyCode = @CompanyCode AND PromoId = @PromoId ;
	  
	delete S_PromoCustomer WHERE CompanyCode = @CompanyCode AND PromoId = @PromoId ;
	
	delete S_PromoBuy WHERE CompanyCode = @CompanyCode AND PromoId = @PromoId ;
		 
	 
	delete S_PromoGet WHERE CompanyCode = @CompanyCode AND PromoId = @PromoId ;

END
--select * from [S_PromoHeader] where PromoId= 'PICP00100000013'
GO
/****** Object:  StoredProcedure [dbo].[USP_D_PurchaseOrderHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_PurchaseOrderHeader] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@PurchaseId	nvarchar(50)
AS
--BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
	--delete T_PurchaseOrderHeader   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode and StoreId=@StoreId;
	--delete T_PurchaseOrderLine   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode;
	--delete T_PurchaseOrderLineSerial   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode ;
 
	 
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_PurchaseRequestHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[USP_D_PurchaseRequestHeader] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@PurchaseId	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_PurchaseRequestHeader   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode and StoreId=@StoreId;
	delete T_PurchaseRequestLine   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode;
	delete T_PurchaseRequestLineSerial   where PurchaseId = @PurchaseId and CompanyCode=@CompanyCode ;
 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_BarcodeSetup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_D_S_BarcodeSetup]
	@CompanyCode [nvarchar](50) ,
	@Id [uniqueidentifier]  
	 
AS	
Delete S_BarcodeSetup   

where  (CompanyCode =@CompanyCode  or ISNULL(@CompanyCode, '')='')     and  (Id =@Id  or ISNULL(@Id, '')='')     
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_CurrencyRoundingOff]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_D_S_CurrencyRoundingOff] 
	@Id	nvarchar(50), 
	@CompanyCode	nvarchar(50)
	 
AS	


Delete  [dbo].[S_CurrencyRoundingOff]
        
		where Id= @Id and CompanyCode= @CompanyCode
           
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_DataSourceEdit]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create   PROCEDURE [dbo].[USP_D_S_DataSourceEdit]
	 
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	 
	 
	 
AS
 
	 
delete [dbo].[S_DataSourceEdit]
      
          where CompanyCode=  @CompanyCode and Id = @Id
          
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_FormatConfig]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_S_FormatConfig]
	@CompanyCode	nvarchar(50)	,
	@FormatId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[S_FormatConfig]
    WHERE CompanyCode = @CompanyCode AND FormatId = @FormatId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_GeneralSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_S_GeneralSetting]
	@CompanyCode	nvarchar(50)	,
	@SettingId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[S_GeneralSetting]
    WHERE CompanyCode = @CompanyCode AND SettingId = @SettingId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_License]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_D_S_License]
	@CompanyCode	nvarchar(50)	,
	@LicenseId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[S_License]
    WHERE CompanyCode = @CompanyCode AND LicenseId = @LicenseId;

GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_LicenseType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_S_LicenseType]
	@CompanyCode	nvarchar(50)	,
	@LicenseType	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[S_LicenseType]
    WHERE CompanyCode = @CompanyCode AND LicenseType = @LicenseType
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_LoyaltyContent]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_S_LoyaltyContent]
	-- Add the parameters for the stored procedure here
	@LoyaltyId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	DELETE S_LoyaltyCustomer WHERE LoyaltyId = @LoyaltyId AND CompanyCode = @CompanyCode

	DELETE S_LoyaltyStore WHERE LoyaltyId = @LoyaltyId AND CompanyCode = @CompanyCode

	DELETE S_LoyaltyEarn WHERE LoyaltyId = @LoyaltyId AND CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_LoyaltyExclude]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_S_LoyaltyExclude] 
	-- Add the parameters for the stored procedure here
    @CompanyCode nvarchar(50),
    @LineType nvarchar(50),
    @LineCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE FROM [dbo].[S_LoyaltyExclude]
    WHERE CompanyCode = @CompanyCode AND LineCode = @LineCode AND LineType = @LineType


END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_LoyaltyRank]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_D_S_LoyaltyRank]
	@RankId	nvarchar(10) 
	
AS	
begin
	Delete [dbo].[S_LoyaltyRank]
          where RankId	=@RankId 
	 
end
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_PersonalSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_D_S_PersonalSetting]
	@CompanyCode	nvarchar(50)	,
	@SettingId	nvarchar(50)	
	AS	DELETE 
	FROM [dbo].[S_PersonalSetting]
    WHERE CompanyCode = @CompanyCode AND SettingId = @SettingId
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_PromoContent]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_S_PromoContent]
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	DELETE S_PromoCustomer WHERE PromoId = @PromoId AND CompanyCode = @CompanyCode

	DELETE S_PromoStore WHERE PromoId = @PromoId AND CompanyCode = @CompanyCode

	DELETE S_PromoBuy WHERE PromoId = @PromoId AND CompanyCode = @CompanyCode

	DELETE S_PromoGet WHERE PromoId = @PromoId AND CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_QuickAccessMenu]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_S_QuickAccessMenu]
	@Id	int	
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Delete S_QuickAccessMenu 
	 
	where  Id= @Id
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_ReleaseNote]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   PROCEDURE [dbo].[USP_D_S_ReleaseNote]
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@Version	nvarchar(250)	 
	 
AS	

delete [dbo].S_ReleaseNote
        
     
     where Id = @Id
     and CompanyCode = @CompanyCode
     and Version = @Version




GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_SchemaContent]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_S_SchemaContent]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
    @CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DELETE S_SchemaLine WHERE SchemaId = @SchemaId AND CompanyCode = @CompanyCode


END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_StoreClient]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_D_S_StoreClient]
	@CompanyCode nvarchar(50), 
	@StoreId	nvarchar(50),  
	@Id	nvarchar(50)
	 
AS
begin
	delete S_StoreClient   
	where 
	CompanyCode = @CompanyCode and StoreId = @StoreId and Id = @Id

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType], [InQuery])
	SELECT DISTINCT 'CP001', 'S_StoreClient', @StoreId, NEWID(), GETDATE(), 'D', 'DELETE FROM [S_StoreClient] WHERE StoreId = ''' + @StoreId + ''' AND Id = ''' + @Id + ''' AND CompanyCode = '''+ @CompanyCode + '''';
 
end 

 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_S_VoidOrderSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_S_VoidOrderSetting]
	@Id	nvarchar(50)	,
	@Type	nvarchar(50)	,
	@Code	nvarchar(50)
	 
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
delete  [dbo].S_VoidOrderSetting
           
			where Id	= @Id and  Type= @Type and  Code= @Code
     
 

END

--select * from S_VoidOrderSetting
GO
/****** Object:  StoredProcedure [dbo].[USP_D_SalesHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_D_SalesHeader] 'CP001','3001','SL01300100074962'

CREATE PROCEDURE [dbo].[USP_D_SalesHeader]
	
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@TransId	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @Status nvarchar(50) ;
	declare @CollectedStatus nvarchar(250) ;
	declare @Message nvarchar(500) ;
	select @Status = Status, @CollectedStatus = CollectedStatus
	from T_SalesHeader with (nolock)
	where CompanyCode = @CompanyCode and StoreId = @StoreId and TransId = @TransId


	if(@Status = 'H')
	begin 
		delete T_SalesHeader   where TransId = @TransId and CompanyCode=@CompanyCode and StoreId=@StoreId;
		delete T_SalesLine   where TransId = @TransId and CompanyCode=@CompanyCode;
		delete T_SalesLineSerial   where TransId = @TransId and CompanyCode=@CompanyCode ;
		delete T_SalesPayment   where TransId = @TransId and CompanyCode=@CompanyCode ;
		delete T_SalesPromo   where TransId = @TransId and CompanyCode=@CompanyCode ;
		delete T_SalesInvoice   where TransId = @TransId and CompanyCode=@CompanyCode ;
	
	end
	else 
	begin
	  	set @Message =  'Can''t clear Order with Status Is ' + @CollectedStatus + '. Please check you action';

		--N'Số lượng không được nhỏ hơn : '+ convert(nvarchar(max), @SalesMinQty);
		raiserror(@Message, 16, 1)
	end
	
	 
END

--select top 10 * from T_SalesHeader
 
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_BankIn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_D_T_BankIn] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@Id	nvarchar(50)
	 
												
AS	
delete [dbo].[T_BankIn]
         
			where CompanyCode = @CompanyCode and
			StoreId= @StoreId and 
			DailyId = @DailyId and 
			Id= @Id
     
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_GoodsReceiptHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_GoodsReceiptHeader]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_GoodsReceiptHeader 
	 
	 where  [INVTId]=@INVTId and [CompanyCode]=@CompanyCode and [StoreId]=@StoreId
	   
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_GoodsReceiptLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_GoodsReceiptLine]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@LineId	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_GoodsReceiptLine 
	 
	where INVTId=@INVTId and  CompanyCode= @CompanyCode and LineId= @LineId
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_GoodsReceiptLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_GoodsReceiptLineSerial]
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@ItemCode	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_GoodsReceiptLineSerial 
	 
	where INVTId	=@INVTId and
		LineId = @LineId and
		CompanyCode = @CompanyCode and
		ItemCode= @ItemCode
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryCountingAndLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryCountingAndLine]
	@ICId	nvarchar(50)	, 
	@CompanyCode	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryCountingLineSerial 
	 
	where ICId	=@ICId and CompanyCode=@CompanyCode;

	delete T_InventoryCountingLine
	 
	where ICId	=@ICId and CompanyCode=@CompanyCode

	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryCountingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryCountingHeader]
	@ICId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryCountingHeader 
 
	  where ICId = @ICId and
	    CompanyCode =@CompanyCode and
		StoreId =@StoreId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryCountingLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryCountingLine]
	@ICId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryCountingLine
	 
	 where ICId	=@ICId and
		CompanyCode=@CompanyCode and 
		LineId	=@LineId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryCountingLineAndSerialLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryCountingLineAndSerialLine]
	@ICId	nvarchar(50)	, 
	@CompanyCode	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryCountingLineSerial 
	 
	where ICId	=@ICId and CompanyCode=@CompanyCode;

	delete T_InventoryCountingLine
	 
	where ICId	=@ICId and CompanyCode=@CompanyCode

	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryCountingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryCountingLineSerial]
	@ICId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryCountingLineSerial 
	 
	where ICId	=@ICId and
		LineId	=@LineId and
		CompanyCode=@CompanyCode

	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryHeader]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryHeader 
	 
	where INVTId = @INVTId and CompanyCode=@CompanyCode 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryLine]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryLine
	 
	where   INVTId=@INVTId and CompanyCode= @CompanyCode and LineId	=@LineId and
		ItemCode=@ItemCode and
		FrSLocId =@FrSLocId and
		ToSlocId=@ToSlocId 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryLineAndSerialLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_D_T_InventoryLineAndSerialLine]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryLine
	 
	where   INVTId=@INVTId and CompanyCode= @CompanyCode ;
	 
	delete T_InventoryLineSerial
	 
	where   INVTId=@INVTId and CompanyCode= @CompanyCode ;
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[USP_D_T_InventoryLineSerial]
	@INVTId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryLineSerial
	 
	 where INVTId = @INVTId and
		LineId= @LineId  and
		CompanyCode = @CompanyCode
	  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_InventoryTransferLineAndSerialLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_T_InventoryTransferLineAndSerialLine]
	@INVTTransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	delete T_InventoryTransferLine
	 
	where   INVTTransId=@INVTTransId and CompanyCode= @CompanyCode ;
	 
	delete T_InventoryTransferLineSerial
	 
	where   INVTTransId=@INVTTransId and CompanyCode= @CompanyCode ;
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_ItemStorage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_D_T_ItemStorage] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@SLocId	nvarchar(50),
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Delete T_ItemStorage where CompanyCode=@CompanyCode and StoreId= @StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_Payment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_D_T_Payment]
	@CompanyCode nvarchar(150),
	@TransId nvarchar(50) 
AS	
begin

  delete T_PaymentHeader   where TransId = @TransId and CompanyCode = @CompanyCode;
   
  delete T_PaymentLine   where TransId = @TransId and CompanyCode = @CompanyCode;


  --update T_PaymentHeader set Status = 'N' where TransId = @TransId and CompanyCode = @CompanyCode;
   
  --update T_PaymentLine set Status = 'N'  where TransId = @TransId and CompanyCode = @CompanyCode;

 
 end
GO
/****** Object:  StoredProcedure [dbo].[USP_D_T_PickupAmount]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create   PROCEDURE [dbo].[USP_D_T_PickupAmount] 
	@CompanyCode	nvarchar(50),
	@Id	nvarchar(50)
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Delete T_PickupAmount   
	where CompanyCode = @CompanyCode and Id = @Id 
 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_EndShift]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_EndShift] '100121100400001', 'CP001' ,'12341','admin'
CREATE PROCEDURE [dbo].[USP_EndShift]
	@ShiftId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@EndAmt	decimal(19,6),
	@CreateBy	nvarchar(50)	
AS
begin

	 insert into T_ShiftLine (ShiftId, CompanyCode ,PaymentCode, Value, CreatedOn, CreatedBy, Status)

	 --declare @ShiftId	nvarchar(50);  declare @CompanyCode	nvarchar(50);
	 --declare @CreateBy	nvarchar(50);
	 --set @ShiftId = 'W01012103300021'
	 --set @CreateBy = 'admin'; set @CreateBy = 'CP001'
	 select distinct @ShiftId, t1.CompanyCode, PaymentCode, SUM(CollectedAmount), GETDATE(), @CreateBy, 'C'
	 from T_SalesPayment t1 with (nolock) 
	 left join T_SalesHeader t2 with (nolock) on t1.TransId = t2.TransId and t1.CompanyCode = t2.CompanyCode  
	 left join T_ShiftHeader t3 with (nolock) on t2.ShiftId = t3.ShiftId and t2.CompanyCode = t3.CompanyCode
 
	 where  t2.ShiftId = @ShiftId and t2.CompanyCode = @CompanyCode  and t3.StoreId = t2.StoreId AND t1.shiftId = @ShiftId
	 group by t1.CompanyCode, PaymentCode

	 update T_ShiftHeader set EndAmt = @EndAmt, ShiftTotal = (select SUM(isnull(Value, 0)) as value from T_ShiftLine  with (nolock)  where  ShiftId = @ShiftId and CompanyCode = @CompanyCode), Status = 'C'
	 where ShiftId = @ShiftId and CompanyCode = @CompanyCode
	 
	 





 end

 --select * from T_ShiftHeader where ShiftId = 'ST00012012010009'
 --select * from T_ShiftLine

 
GO
/****** Object:  StoredProcedure [dbo].[USP_F_CancelSO]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_F_CancelSO]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@TransId	nvarchar(50)	 ,
	@Reason	nvarchar(250)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Update T_SalesHeader set Status='C', IsCanceled='1', Reason = @Reason where TransId= @TransId and CompanyCode= @CompanyCode and StoreId = @StoreId

	Update T_InvoiceHeader  set Status='C', IsCanceled='1'  where RefTransId= @TransId and CompanyCode= @CompanyCode and StoreId = @StoreId
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_FNC_ReCalc_Item_Storage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_FNC_ReCalc_Item_Storage]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;








	

    -- Insert statements for procedure here
	DELETE FROM T_ItemStorage

	INSERT INTO T_ItemStorage 
	(
		CompanyCode,
		StoreId,
		SLocId,
		ItemCode,
		UOMCode,
		Quantity
	)
	SELECT  	  
		  S.CompanyCode,	
		  S.StoreId,
		  S.SLocId,
		  S.ItemCode,	
		  S.UOMCode ,
		  SUM(ISNULL(S.InQty,0) - ISNULL(S.OutQty,0)) BlcQty
	FROM	T_TransactionLog S 

	GROUP BY 		  
		  S.CompanyCode,	
		  S.StoreId,
		  S.ItemCode,	
		  S.UOMCode,
		  S.SLocId




END
GO
/****** Object:  StoredProcedure [dbo].[USP_FNC_ReCreate_EODSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- EXEC [USP_FNC_ReCreate_EODSummary] '211203' , 'CP001' , '3017' , '301721120300002'
CREATE PROCEDURE [dbo].[USP_FNC_ReCreate_EODSummary]
	@DailyId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Shift_ID nvarchar(50)

		
AS
BEGIN
	
	
	DECLARE @ShiftID AS TABLE 
	(
		ShiftID NVARCHAR(50)
	)

	INSERT INTO @ShiftID
	SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND CompanyCode = @CompanyCode AND StoreId = @StoreId AND ShiftId = ISNULL(@Shift_ID,ShiftID)

	DECLARE @Curr Nvarchar(50)
	SET @Curr = (SELECT TOP 1 CurrencyCode FROM M_Store WHERE StoreId = @StoreID )

	DECLARE @Date Date
	SET @Date = (SELECT TOP 1 Date  FROM T_EndDate WHERE Description = @DailyId )

	 -- CREATE DISCOUNT
	DECLARE @DetailDiscount AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		CusGrpId NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisAmt NUMERIC(19,6)
	)

	DECLARE @CountDiscount AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailDiscount
	SELECT H.CompanyCode , H.StoreId ,@DailyId ,CASE WHEN (L.DiscountRate <> 0 OR L.DiscountAmt <> 0 ) AND ISNULL(L.PromoId,'') = '' THEN 0 ELSE H.CusGrpId END CusGrpId, H.TerminalId , H.CreatedOn ,  ROUND(ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0),6) 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C' AND H.IsCanceled = 'N'
		AND  ROUND(ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0),6)  <> 0
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountDiscount
	SELECT CusGrpId ,TerminalId, COUNT(*) 
	FROM @DetailDiscount 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY CusGrpId ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId , @DailyId ,  H.TerminalId ,'TOTALDISCOUNT', H.CusGrpId, C.CType  , SUM(H.LineTotalDisAmt) DiscountTotal, @Curr ,@Date ,GETDATE()		
	FROM @DetailDiscount H INNER JOIN @CountDiscount C ON H.CusGrpId = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.CusGrpId, C.CType 	


	 -- CREATE Tax
	DECLARE @DetailTax AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		TaxAmt NUMERIC(19,6)
	)

	DECLARE @CountTax AS TABLE 
	(

		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTax
	SELECT H.CompanyCode , H.StoreId , @DailyId , L.TaxCode , H.TerminalId , H.CreatedOn , L.TaxAmt 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C' AND H.IsCanceled = 'N'
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTax
	SELECT TaxCode ,TerminalId, COUNT(*) 
	FROM @DetailTax 
	GROUP BY TaxCode ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId , @DailyId ,  H.TerminalId ,'TOTALTAX', H.TaxCode, C.CType  , SUM(H.TaxAmt) TaxAmt , @Curr,@Date ,GETDATE()
	FROM @DetailTax H INNER JOIN @CountTax C ON H.TaxCode = C.TaxCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode  ,  H.TerminalId , H.TaxCode , C.CType


	 -- CREATE Total
	DECLARE @DetailTotal AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisIncludeHeader NUMERIC(19,6)
	)

	DECLARE @CountTotal AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.ItemTypeS4 , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C'  AND ISNULL(L.Quantity,0) > 0 AND H.IsCanceled = 'N'
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALSALES', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr,@Date ,GETDATE()
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.ItemType, C.CType 		

	DELETE FROM @DetailTotal
	DELETE FROM @CountTotal

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.ItemTypeS4 , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C'  AND ISNULL(L.Quantity,0) < 0 AND H.IsCanceled = 'N'

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId

	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALRETURN', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr,@Date ,GETDATE()
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.ItemType, C.CType 		


	-- CREATE TENDER
	DECLARE @DetailTender AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)
	)

	DECLARE @CountTender AS TABLE 
	(

		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.PaymentCode , H.TerminalId , H.CreatedOn ,  ISNULL(L.CollectedAmount,0)-ISNULL(L.ChangeAmt,0) + ISNULL(L.Forfeit,0) 
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode AND L.CompanyCode = M.CompanyCode
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C'  AND H.IsCanceled = 'N' 

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , M.ForfeitCode , H.TerminalId , H.CreatedOn , - ABS(ISNULL(L.Forfeit,0))
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode AND L.CompanyCode = M.CompanyCode
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C' AND ISNULL(M.ForfeitCode,'') <> '' AND ISNULL(L.Forfeit,0) <> 0 AND H.IsCanceled = 'N'

	-- ZZ00 rouding POS -----
	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , 'ZZ00' RoundingCode , H.TerminalId , H.CreatedOn ,  ISNULL(H.RoundingOff,0)
	FROM T_SalesHeader H --INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C' AND ISNULL(H.RoundingOff,0) <> 0 AND H.IsCanceled = 'N'

	INSERT INTO @CountTender
	SELECT PaymentCode ,TerminalId, COUNT(*) 
	FROM @DetailTender 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY PaymentCode ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALTENDER', H.PaymentCode, C.CType  , SUM(H.CollectedAmount) CollectedAmount,@Curr,@Date ,GETDATE()
	FROM @DetailTender H INNER JOIN @CountTender C ON H.PaymentCode = C.PaymentCode AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.PaymentCode, C.CType  



	-- CREATE PAYMENTFINANCE
	DECLARE @DetailFinance AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		EODCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)

	)

	DECLARE @CountFinance AS TABLE 
	(

		EODCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailFinance
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , M.EODCode , H.DeviceId , H.CreatedOn , CASE WHEN L.Currency = @Curr THEN L.CollectAmount ELSE L.FCCollectedAmount END 
	FROM T_ShiftHeader H INNER JOIN T_ShiftLine L On H.CompanyCode = L.CompanyCode AND H.ShiftId = L.ShiftId
						 INNER JOIN @ShiftID SS ON  H.ShiftId = SS.ShiftId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND ISNULL( M.EODCode , '') <> '' 



	INSERT INTO @CountFinance
	SELECT EODCode ,TerminalId, COUNT(*) 
	FROM @DetailFinance 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY EODCode ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALFINANCE', H.EODCode, C.CType , SUM(H.CollectedAmount) CollectedAmount,@Curr,@Date ,GETDATE()		
	FROM @DetailFinance H INNER JOIN @CountFinance C ON H.EODCode = C.EODCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode   ,  H.TerminalId, H.EODCode, C.CType   	



END
GO
/****** Object:  StoredProcedure [dbo].[USP_FNC_ReCreate_Transaction_log_data]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_FNC_ReCreate_Transaction_log_data]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Delete table T_TransactionLog
	DELETE T_TransactionLog ;
		
	-- Goods Issue
	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'GOODS_ISSUE'
		  , CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,A.[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_GoodsIssueLine AS A
		INNER JOIN T_GoodsIssueHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode

	--Goods Receipt
	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'GOODS_RECEIPT'
		  , CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,A.[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_GoodsReceiptLine AS A
		INNER JOIN T_GoodsReceiptHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode

	--Goods Receipt PO
	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[PurchaseId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'GOODS_RECEIPT_PO'
		  , CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,A.[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_GoodsReceiptPOLine AS A
		INNER JOIN T_GoodsReceiptPOHeader AS B ON A.PurchaseId = B.PurchaseId AND A.CompanyCode = B.CompanyCode

	--Transfer Shipment
		INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[FrSLocId]
		  ,A.[ItemCode]
		  ,B.[FromStore]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , 0
		  ,	ISNULL(Quantity,0)
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_InventoryLine AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'S'
	UNION ALL
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,B.[TransitWhs] [SLocId]
		  ,A.[ItemCode]
		  ,B.[FromStore] [StoreId]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , ISNULL(Quantity,0)
		  ,	0
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_InventoryLine AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'S'

	--Transfer Receipt
	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[ToSLocId]
		  ,A.[ItemCode]
		  ,B.[ToStore]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , ISNULL(Quantity,0)
		  ,	0
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_InventoryLine AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'R'
	UNION ALL
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,B.[TransitWhs]  
		  ,A.[ItemCode]
		  ,B.[ToStore]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , 0
		  ,	ISNULL(Quantity,0)
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_InventoryLine AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'R'

	--Invoice
	INSERT INTO [dbo].[T_TransactionLog]
			([TransId]
			,[CompanyCode]
			,[SLocId]
			,[ItemCode]
			,[StoreId]
			,[TransDate]
			,[TransType]
			,[InQty]
			,[OutQty]
			,[UOMCode]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[Status])
		SELECT 
			A.[TransId]
			,A.[CompanyCode]
			,A.[SLocId]
			,A.[ItemCode]
			,B.[StoreId]
			,A.[CreatedOn]
			,'INVOICE'
			, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
			,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
			,A.[UOMCode]
			,A.[CreatedBy]
			,GETDATE()
			,A.[ModifiedBy]
			,A.[ModifiedOn]
			,A.[Status]
		FROM T_InvoiceLine AS A INNER JOIN T_InvoiceHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
								INNER JOIN M_Item AS C ON A.ItemCode = C.ItemCode AND A.CompanyCode = C.CompanyCode
	WHERE B.Status <> 'H' AND ISNULL(C.IsBOM,0) = 0 AND B.POSType = 'E'
		UNION ALL
		SELECT 
			A.[TransId]
			,A.[CompanyCode]
			,A.[SLocId]
			,A.[ItemCode]
			,B.[StoreId]
			,A.[CreatedOn]
			,'INVOICE'
			, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
			,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
			,[UOMCode]
			,A.[CreatedBy]
			,GETDATE()
			,A.[ModifiedBy]
			,A.[ModifiedOn]
			,A.[Status]
		FROM T_InvoiceLine AS A
					INNER JOIN T_InvoiceHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
					INNER JOIN M_Item AS C ON A.ItemCode = C.ItemCode AND A.CompanyCode = C.CompanyCode
		WHERE B.Status <> 'H' AND ISNULL(C.IsBOM,0) = 0 AND B.POSType = 'R' AND B.InvoiceType = 'CheckIn'

	-- Sales
	INSERT INTO [dbo].[T_TransactionLog]
			([TransId]
			,[CompanyCode]
			,[SLocId]
			,[ItemCode]
			,[StoreId]
			,[TransDate]
			,[TransType]
			,[InQty]
			,[OutQty]
			,[UOMCode]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[Status])
		SELECT 
			A.[TransId]
			,A.[CompanyCode]
			,A.[SLocId]
			,A.[ItemCode]
			,B.[StoreId]
			,A.[CreatedOn]
			,'SALES'
			, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
			,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
			,[UOMCode]
			,A.[CreatedBy]
			,GETDATE()
			,A.[ModifiedBy]
			,A.[ModifiedOn]
			,A.[Status]
		FROM T_SalesLine AS A
							INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
							INNER JOIN M_Item AS C ON A.ItemCode = C.ItemCode AND A.CompanyCode = C.CompanyCode
	 WHERE B.Status <> 'H' AND B.POSType <> 'E' AND ISNULL(C.IsBOM,0) = 0

	-- Inventory posting
	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[IPId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'INVENTORY_POSTING'
		  , CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM T_InventoryPostingLine AS A
		INNER JOIN T_InventoryPostingHeader AS B ON A.[IPId] = B.[IPId] AND A.CompanyCode = B.CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetAllItemInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_GetAllItemInfor] 'CP001','', '',''
CREATE PROCEDURE [dbo].[USP_GetAllItemInfor]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50), 
	@Keyword nvarchar(50)
 
AS
begin
 
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [ItemCode]
      ,t1.[CompanyCode]
      ,[ProductId]
      ,[VariantId]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,[CapacityValue]
      ,[ItemGroupId]
	   ,isnull(t5.IGName, [ItemGroupId]) ItemGroupName  
      ,[SalesTaxCode]
	  ,isnull(t2.TaxName, PurchaseTaxCode) SalesTaxName
	  ,t2.TaxPercent SalesTaxRate

      ,[PurchaseTaxCode]
	  ,isnull(t3.TaxName, PurchaseTaxCode) PurchaseTaxName
	  ,t3.TaxPercent PurchaseTaxRate
      ,[ItemName]
      ,[ItemDescription]
      ,[ItemCategory_1]
      ,[ItemCategory_2]
      ,[ItemCategory_3]
      ,[ForeignName]
      ,[InventoryUOM] UOMCode
	  ,t4.UOMName
      ,[ImageURL]
      ,[ImageLink]
      ,t1.[MCId]
	  ,isnull(t6.MCName, t1.[MCId]) MCName
      ,[CustomField1]
      ,[CustomField2]
      ,[CustomField3]
      ,case [CustomField4] when 'I' then 'Inventory' else 'Service' end CustomField4
      ,[CustomField5]
      ,[CustomField6]
      ,[CustomField7]
      ,[CustomField8]
      ,[CustomField9]
      ,[CustomField10]
      ,[DefaultPrice]
      ,[IsSerial]
      ,[IsBOM]
      ,[isVoucher]
      ,[ValidFrom]
      ,[ValidTo]
      ,[RejectPayType]
      ,[SyncDate]
      ,[SyncSource]
	  , t1.RejectPayType
	   ,isnull(t1.Returnable, 1) Returnable
	  , ''   PriceListId
	  , t1.VoucherCollection
	  ,t1.IsPriceTime
  FROM [M_Item] t1 with (nolock)
  left join M_Tax t2 with (nolock) on t1.SalesTaxCode = t2.TaxCode and t1.CompanyCode =t2.CompanyCode
  left join M_Tax t3 with (nolock) on t1.SalesTaxCode = t3.TaxCode and t1.CompanyCode =t3.CompanyCode
  left join M_UOM t4 with (nolock) on t1.InventoryUOM = t4.UOMCode 
  left join M_ItemGroup t5 with (nolock) on t1.ItemGroupId = t5.IGId
  left join M_MerchandiseCategory t6 with (nolock) on t1.MCId = t6.MCId and t1.CompanyCode = t6.CompanyCode
  where t1.CompanyCode = @CompanyCode 	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
  and (t1.ItemCode like  N'%'+@Keyword+'%'  or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	  
end 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetByStoreWExchangeRate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[USP_GetByStoreWExchangeRate] 'CP001','1001',''
CREATE PROCEDURE [dbo].[USP_GetByStoreWExchangeRate] 
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@Currency	nvarchar(50) 
AS	
	select distinct t1.Id, t1.CompanyCode, t1.StoreId, t1.Currency, t1.Status, t2.CurrencyName,isnull( t3.Rate, 1) Rate 
	, t2.Rounding RoundingMethod
	
	from M_StoreCurrency t1 with (nolock)
	left join M_Currency t2 with (nolock) on t1.Currency = t2.CurrencyCode
	left join M_ExchangeRate t3 with (nolock) on t1.CompanyCode = t3.CompanyCode and t1.StoreId = t3.StoreId and t3.Currency = t1.Currency
	where  t1.CompanyCode = @CompanyCode
	and (t1.StoreId = @StoreId  or ISNULL(@StoreId, '') = '')  
	and (t1.Currency = @Currency  or ISNULL(@Currency, '') = '')
	and t3.Date = (select top 1 Date from M_ExchangeRate with (nolock) where CompanyCode = @CompanyCode and StoreId = @StoreId and Currency = t1.Currency and CONVERT(date, Date) <= CONVERT(date, GETDATE()) order by Date desc)
	and t2.Status = 'A' and t1.Status = 'A'
	--and t3.Status = 'A'

-- select * from M_ExchangeRate



	--select * from M_ExchangeRate
 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCapacity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetCapacity] 'CP001', '2021-01-27',0,'', '', ''

--SELECT (DATEPART(hour, Col1) * 3600) + (DATEPART(minute, Col1) * 60) + DATEPART(second, Col1) as SecondsFromMidnight FROM T1;
CREATE PROCEDURE [dbo].[USP_GetCapacity]
	 
	@CompanyCode	nvarchar(50),
	@TransDate	datetime,
	@Quantity int = 0,
	@StoreId	nvarchar(50), 
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50)
	 
 
AS
BEGIN


  --select  t2.CompanyCode, t2.StoreId, t2.StoreAreaId, t1.TimeFrameId, t3.TransDate as 'TransDate', t1.StartTime, t1.EndTime, CONVERT(INT, SUBSTRING( REPLACE( CONVERT(VARCHAR(8), t1.StartTime, 108), ':', '' ), 0,  Len(REPLACE( CONVERT(VARCHAR(8),  t1.StartTime, 108), ':', '' )) - 1 ) ) as StartTimeNum, CONVERT(INT, SUBSTRING( REPLACE( CONVERT(VARCHAR(8), t1.EndTime, 108), ':', '' ), 0,  Len(REPLACE( CONVERT(VARCHAR(8),  t1.EndTime, 108), ':', '' )) - 1 ) ) as EndTimeNum, t1.Duration , 
  --ISNULL( t3.MaxCapacity, t2.MaxCapacity ) MaxCapacity, 
  --ISNULL( t3.CurrentCapacity, 0 )/ISNULL( t3.MaxCapacity, t2.MaxCapacity ) as CurrentCapacity,
  --ISNULL( t3.RemainCapacity,t2.MaxCapacity ) as RemainCapacity
  --from M_TimeFrame t1 with (nolock)
  --left join M_StoreCapacity t2 with (nolock) on  t1.CompanyCode = t2.CompanyCode
  --left join T_CapacityRemain t3 with (nolock) on  t3.CompanyCode = t2.CompanyCode and t3.StoreId = t2.StoreId 
  --and t3.StoreAreaId = t2.StoreAreaId   and t3.TransDate = @TransDate
  --where t2.Status = 'A' and (t2.CompanyCode= @CompanyCode or @CompanyCode='')

  --and (t2.StoreId=@StoreId or @StoreId='')  
  --and (t2.StoreAreaId in (select * from string_split(@StoreAreaId, ',')) or @StoreAreaId='')  
  --and (t1.TimeFrameId in (select * from string_split(@TimeFrameId, ',')) or @TimeFrameId='')  
  --and (ISNULL( t3.RemainCapacity, t2.MaxCapacity ) > @Quantity or @Quantity is null)
  

  --select  t1.CompanyCode, t1.StoreId, t1.StoreAreaId, t1.TimeFrameId, t3.StartTime, t3.EndTime, t3.Duration , 
  --ISNULL( t2.RemainCapacity, t1.MaxCapacity ) Capacity, t1.CreatedBy, t1.CreatedOn, t1.ModifiedBy, t1.ModifiedOn ,t1.Status
  --from M_StoreCapacity t1 
  --left join T_CapacityRemain t2 on t1.CompanyCode = t2.CompanyCode 
  --and t1.StoreId = t2.StoreId and t1.StoreAreaId = t2.StoreAreaId 
  --left join M_TimeFrame t3 on t1.TimeFrameId = t3.TimeFrameId and t1.CompanyCode = t3.CompanyCode and t3.Status ='A'

  --where t1.Status = 'a' 
  -- AND (t1.CompanyCode= @CompanyCode or @CompanyCode='')
  
  --and (t1.StoreId=@StoreId or @StoreId='')  
  --and (t1.StoreAreaId in (select * from string_split(@StoreAreaId, ',')) or @StoreAreaId='')  
  -- and (t1.TimeFrameId in (select * from string_split(@TimeFrameId, ',')) or @TimeFrameId='')  

 	IF @CompanyCode	= '' BEGIN SET @CompanyCode = NULL END 
	IF @TransDate = '' BEGIN SET @TransDate = NULL END 
	IF @Quantity = '' BEGIN SET @Quantity = NULL END 
	IF @StoreId	= '' BEGIN SET @StoreId = NULL END 
	IF @StoreAreaId	= '' BEGIN SET @StoreAreaId = NULL END 
	IF @TimeFrameId	= '' BEGIN SET @TimeFrameId = NULL END 

   SELECT S.CompanyCode,S.StoreId,S.StoreAreaId,S.TimeFrameId,ISNULL(R.TransDate,@TransDate) TransDate , T.StartTime , T.EndTime ,
	CONVERT(INT, SUBSTRING( REPLACE( CONVERT(VARCHAR(8), T.StartTime, 108), ':', '' ), 0,  Len(REPLACE( CONVERT(VARCHAR(8),  T.StartTime, 108), ':', '' )) - 1 ) ) as StartTimeNum, 
	CONVERT(INT, SUBSTRING( REPLACE( CONVERT(VARCHAR(8), T.EndTime, 108), ':', '' ), 0,  Len(REPLACE( CONVERT(VARCHAR(8),  T.EndTime, 108), ':', '' )) - 1 ) ) as EndTimeNum, T.Duration ,
	S.MaxCapacity ,
	ISNULL(R.CurrentCapacity,0)  CurrentCapacity, 
	ISNULL(R.RemainCapacity, S.MaxCapacity) RemainCapacity ,
	Z.TotalCapacity
   FROM M_StoreCapacity S 
	INNER JOIN (SELECT CompanyCode,StoreAreaId,SUM(MaxCapacity) TotalCapacity FROM M_StoreCapacity GROUP BY CompanyCode,StoreAreaId) Z ON S.CompanyCode = Z.CompanyCode AND S.StoreAreaId = Z.StoreAreaId
    LEFT JOIN M_TimeFrame T On S.CompanyCode = T.CompanyCode AND S.TimeFrameId = T.TimeFrameId
    LEFT JOIN T_CapacityRemain R ON S.CompanyCode = R.CompanyCode AND S.StoreId = R.StoreId AND R.TransDate = @TransDate AND S.StoreAreaId = R.StoreAreaId AND S.TimeFrameId = R.TimeFrameId
   WHERE 1= 1 
		and S.Status = 'A' 
		AND S.CompanyCode = @CompanyCode 
		--AND ISNULL(R.TransDate, @TransDate) = @TransDate
		AND S.StoreId = ISNULL(@StoreId,S.StoreId) 
		AND S.StoreAreaId = ISNULL(@StoreAreaId,S.StoreAreaId) 
		AND S.TimeFrameId = ISNULL(@TimeFrameId,S.TimeFrameId)  
	

END
--select * from T_CapacityRemain
--[USP_GetCapacity] 'CP001', '2021-04-27', '0','W0101','',''

 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCapacityAreaStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetCapacityAreaStore] 'CP001', 'ST001' 
 
CREATE PROCEDURE [dbo].[USP_GetCapacityAreaStore]
	 
	@CompanyCode	nvarchar(50), 
	@StoreId	nvarchar(50) 
AS
 Select 'TimeFrameId' dataField, 'Time Frame' caption , 'timeTemplate' cellTemplate 
 Union all
 SELECT distinct t1.StoreAreaId dataField, t2.StoreAreaName  caption , 'appointTemplate' cellTemplate 
FROM  M_StoreCapacity t1 with (nolock) 
left join M_StoreArea t2  with (nolock) on t1.StoreAreaId = t2.StoreAreaId
where  t1.CompanyCode = @CompanyCode and t1.StoreId = @StoreId


 --select * from M_StoreCapacity
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCapacityByAreaStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetCapacityByAreaStore] 'CP001', 'ST001' 
 
CREATE PROCEDURE [dbo].[USP_GetCapacityByAreaStore]
	 
	@CompanyCode	nvarchar(50), 
	@StoreId	nvarchar(50) ,
	@StoreAreaId	nvarchar(50) 
AS
	 
	SELECT distinct t1.*, 
	 SUBSTRING( CONVERT(VARCHAR(8), t3.StartTime, 108) , 0,  Len( CONVERT(VARCHAR(8),  t3.StartTime, 108) ) - 2 )  + ' ~ ' +
	 SUBSTRING( CONVERT(VARCHAR(8), t3.EndTime, 108) , 0,  Len( CONVERT(VARCHAR(8),  t3.EndTime, 108) ) - 2 )  as Remarks 
	--CONVERT(VARCHAR(8), t3.StartTime, 108) + ' ~ ' + CONVERT(VARCHAR(8), t3.EndTime, 108)   as Remarks 
		FROM  M_StoreCapacity t1 with (nolock) 
		left join M_StoreArea t2  with (nolock) on t1.StoreAreaId = t2.StoreAreaId
		left join M_TimeFrame t3  with (nolock) on t1.TimeFrameId = t3.TimeFrameId
	where  t1.CompanyCode = @CompanyCode and t1.StoreId = @StoreId  
	 and (t1.StoreAreaId=@StoreAreaId or @StoreAreaId='')  

 --select * from M_StoreCapacity
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCapacityByStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetCapacityByStore] 'CP001', '2020-12-22', '0','ST001' 
 
CREATE PROCEDURE [dbo].[USP_GetCapacityByStore]
	 
	@CompanyCode	nvarchar(50),
	@TransDate	nvarchar(50),
	@Quantity nvarchar(50),
	@StoreId	nvarchar(50)
	 
 
AS
 

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '';
if @Quantity is null set @Quantity = '0';
-- select the category names
--select StoreAreaId from M_StoreCapacity where  CompanyCode = @CompanyCode and StoreId = @StoreId
SELECT 
    @columns+=QUOTENAME(t.StoreAreaId) + ','
FROM  (SELECT distinct StoreAreaId 
FROM  M_StoreCapacity with (nolock)
where  CompanyCode = @CompanyCode and StoreId = @StoreId) t   
 
ORDER BY  t.StoreAreaId;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);
 
 -- construct dynamic SQL and t3.TransDate = ' +@TransDate + '
SET @sql ='
SELECT * FROM   
(
	  
     select distinct  '''+ @TransDate+'''+  t2.StoreAreaId + t1.TimeFrameId Id,'''+ @TransDate+''' TransDate 
	 --isnull(t3.RemainCapacity, t2.MaxCapacity) RemainCapacity
     , t1.TimeFrameId ,   t2.StoreAreaId , t1.StartTime, t1.EndTime, t1.Duration 
     from  M_TimeFrame t1  
     left join M_StoreCapacity t2 on  t2.CompanyCode = t1.CompanyCode and t2.TimeFrameId = t1.TimeFrameId
      left join T_CapacityRemain t3 on  t3.CompanyCode = t2.CompanyCode and t3.StoreId = t2.StoreId 
	  and t3.StoreAreaId = t2.StoreAreaId   and  t3.TransDate = '''+ @TransDate+'''
	  and t3.TimeFrameId = t2.TimeFrameId
 
	  where t2.Status = ''A''  
	  and (t2.CompanyCode= '''+@CompanyCode+ ''' or isnull(''' + @CompanyCode +''', '''') = '''')
	  and (t2.StoreId= '''+@StoreId+'''or isnull(''' + @StoreId +''', '''') = ''''  )  
	  and isnull(t3.RemainCapacity, t2.MaxCapacity) > ''' + @Quantity + ''' 
 ) t 

PIVOT(
    Count(Id)
    FOR StoreAreaId IN ('+ @columns +') 
) AS pivot_table;';
 
EXECUTE sp_executesql @sql;
--EXECUTE sp_executesql @sql;
--''2020-12-12'' + t2.StoreAreaId + t1.TimeFrameId Id, 
-- [USP_GetCapacityByStore] 'CP001', '2020-12-22', null,'ST001' 
   --ISNULL( t3.MaxCapacity, t2.MaxCapacity ) MaxCapacity, 
	  --ISNULL( t3.CurrentCapacity, 0 )/ISNULL( t3.MaxCapacity, t2.MaxCapacity ) as CurrentCapacity,
	  --ISNULL( t3.RemainCapacity,t2.MaxCapacity ) as RemainCapacity
	   --and ISNULL( t3.RemainCapacity, t2.MaxCapacity ) > '''+ @Quantity+'''
  --where t2.Status = ''''A'''' and (t2.CompanyCode= '+@CompanyCode+ ' or @CompanyCode='''')
  -- and (t2.StoreId= '+@StoreId+' or @StoreId='''')  
 
  --and (ISNULL( t3.RemainCapacity, t2.MaxCapacity ) > '+@Quantity+ ' or '+@Quantity+ ' is null)


  
	  -- select distinct ''' + @Date+ ''' t2.StoreAreaId Id, ''' + @Date+ ''' TransDate, t2.StoreAreaId, t1.TimeFrameId,  t1.StartTime, t1.EndTime, t1.Duration
	
	  --from M_TimeFrame t1
	  --left join M_StoreCapacity t2 on  t1.CompanyCode = t2.CompanyCode
	  --left join T_CapacityRemain t3 on  t3.CompanyCode = t2.CompanyCode and t3.StoreId = t2.StoreId 
	  --and t3.StoreAreaId = t2.StoreAreaId   
	  
	  --select distinct t3.TransDate TransDate, t2.StoreAreaId, t1.TimeFrameId,  t1.StartTime, t1.EndTime, t1.Duration
	
	  --from M_TimeFrame t1
	  --left join M_StoreCapacity t2 on  t1.CompanyCode = t2.CompanyCode
	  --left join T_CapacityRemain t3 on  t3.CompanyCode = t2.CompanyCode and t3.StoreId = t2.StoreId 
	  --and t3.StoreAreaId = t2.StoreAreaId  
	  --where t3.TransDate = ''' + @Date+ '''

	  --union all


--select distinct  '''+ @TransDate+''' +  t2.StoreAreaId + t1.TimeFrameId Id,
--	  '''+ @TransDate+''' TransDate, t1.TimeFrameId, 
--	  t2.StoreAreaId,  t1.StartTime, t1.EndTime, t1.Duration 
	
--	  from M_TimeFrame t1
--	  left join M_StoreCapacity t2 on  t1.CompanyCode = t2.CompanyCode
--	  join T_CapacityRemain t3 on  t3.CompanyCode = t2.CompanyCode and t3.StoreId = t2.StoreId 
--	  and t3.StoreAreaId = t2.StoreAreaId   and  t3.TransDate = '''+ @TransDate+''' 
--	  and t3.TimeFrameId = t2.TimeFrameId
GO
/****** Object:  StoredProcedure [dbo].[USP_GetControlPermissionListByFunction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--[USP_GetControlPermissionListByFunction]   'Adm_Warehouse', 'B03F1D02-7F3D-4A16-91D1-2196C6A7D2B7'

--select * from M_Control where FunctionId = 'Adm_Warehouse'
--select * from M_Control
CREATE PROCEDURE [dbo].[USP_GetControlPermissionListByFunction]   
	 @FunctionId nvarchar(50),
	 @RoleId nvarchar(50)
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '' ;

-- select the category names
SELECT 
    @columns+=QUOTENAME(Id) + ','
FROM 
    S_Permission
where Status= 1
ORDER BY 
    Id;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);
 --left join M_Permission p  with (nolock)  on p.FunctionId = c.FunctionId and p.ControlId = c.ControlId 
-- construct dynamic SQL
SET @sql ='
SELECT * FROM   
(
     
	 select distinct ControlId, ControlName, ControlType , OrderNum, FunctionId, Permissions, Custom1 ,Custom2 
	 from(
		  SELECT 
				c.ControlId, 
				c.ControlName,
				c.ControlType,
				c.Custom1 ,c.Custom2  ,
				c.OrderNum,
				c.FunctionId,
				'''' Permissions 
				
			FROM 
				M_Control c with (nolock)
				
				where c.FunctionId = '''+@FunctionId+ ''' and c.Status <> ''I''
		   union all 
		   SELECT 
				c.ControlId, 
				c.ControlName,
				c.ControlType,
				c.Custom1 ,c.Custom2  ,
				c.OrderNum,
				p.FunctionId,
				p.Permissions
				
			FROM 
				M_Control c with (nolock)
				left join M_Permission p  with (nolock)  on p.FunctionId = c.FunctionId and p.ControlId = c.ControlId
				 
			where p.FunctionId= '''+@FunctionId+ ''' and p.RoleId = '''+@RoleId+ ''' and c.Status <> ''I''
	  ) a
	  
) t 

PIVOT(
    Count(FunctionId)
    FOR Permissions IN ('+ @columns +') 
) AS pivot_table;';
--where isnull(p.ControlId , '''' ) != '''' 
-- execute the dynamic SQL
EXECUTE sp_executesql @sql;
 
 --select case when Count(2) > 1 then 1 else 0 end

--select * from M_Control

 --SELECT 
 --       c.ControlId,  
	--	p.FunctionId,
 --       p.Permissions 
 --   FROM 
 --       M_Control c with (nolock)
	--	left join M_Permission p  with (nolock) on p.ControlId = c.ControlId
		
 --       --left join S_Permission s  ON s.Id = p.Permissions
	--	where c.FunctionId='Adm_OUTLETGROUPSETUP' and p.RoleId =
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCounterSalesInDay]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetCounterSalesInDay] 'CP001', '1001', '2021-11-23'
create PROCEDURE [dbo].[USP_GetCounterSalesInDay]
	@CompanyCode nvarchar(50), 
	@StoreId	nvarchar(50),    
	@Date	DateTime
	 
	 
AS
begin



select * from S_StoreClient  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode ) 
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')    
   and PublicIP in (	select distinct DeviceId from T_ShiftHeader 
	where Convert(date, CreatedOn) = @Date)
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_GetCustomerForCalcPoint]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetCustomerForCalcPoint]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@CustomerId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT T0.* 
	FROM M_Customer T0 
	--INNER JOIN T_SalesHeader T1 ON T0.CustomerId = T1.CusId 
	WHERE T0.CompanyCode = @CompanyCode
	AND (T0.CustomerId = @CustomerId OR ISNULL(@CustomerId,  '') = '')
	--AND T0.CustomerId LIKE 'C%' 
	AND ISNULL(T0.DoNotAccumPoints, 0) <> 1 
	AND ISNULL(T0.CustomF5, '') <> 'Y'
	AND ISNULL(NULLIF(T0.CustomF4, ''), 0) <> 0

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetDivisionToShip]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetDivisionToShip] 'CP001','',''
CREATE PROCEDURE [dbo].[USP_GetDivisionToShip]
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@Date	Datetime
 
AS	
	 

	select t1.StoreId CusId, t3.StoreName, Sum(Quantity) Quantity 
	from T_DivisionLine t1 with (nolock)  
	left join T_DivisionHeader t2 with (nolock) on t1.Id = t2.Id
	left join M_Store t3 with (nolock)  on t1.SLocId = t3.StoreId

	where t1.CompanyCode = @CompanyCode
	and (ISNULL(@Id, '') = '' OR t1.Id = @Id)
	and (ISNULL(@Date, '') = '' OR CONVERT(date, t2.DocDate) = CONVERT(date,  @Date))

	group by t1.StoreId, t3.StoreName
GO
/****** Object:  StoredProcedure [dbo].[USP_GetDOLineFromDivisionBy]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- [USP_GetDOLineFromDivisionBy] 'CP001','3001','2022-11-02'
CREATE PROCEDURE [dbo].[USP_GetDOLineFromDivisionBy]
	@CompanyCode nvarchar(50),
	@CusId	nvarchar(50), 
	@DocDate	datetime = null
	 
AS
begin
  
	 select * 
	 from
	 (
		select  '' TransId,  (ROW_NUMBER() OVER(ORDER BY t1.ItemCode ASC)) AS LineId, t1.CompanyCode, t1.ItemCode, t1.SLocId, t1.BarCode, t1.UOMCode, t1.Quantity, 0 [Price],0 [LineTotal], '' [DiscountType], 0 [DiscountAmt], 0 [DiscountRate],
 
							t2.CreatedBy, GETDATE() CreatedOn, 'C' Status, '' Remark,'' PromoId,'' PromoType, null PromoPercent,'' PromoBaseItem,'' SalesMode, 0 [TaxRate],0 [TaxAmt],'' TaxCode
							,0 MinDepositAmt,0 MinDepositPercent,'' DeliveryType,'' POSService,'' StoreAreaId,'' TimeFrameId,null Duration,null AppointmentDate,'' BomID ,null PromoPrice,null PromoLineTotal
							,null BaseLine,null BaseTransId, 0 [OpenQty], 0 [PromoDisAmt], 0 [IsPromo], 0 [IsSerial], 0 [IsVoucher], '' PrepaidCardNo,null MemberDate,null MemberValue, null StartDate,null EndDate,'' ItemType
							,'' Description,0 LineTotalBefDis,0 LineTotalDisIncludeHeader, '' SerialNum,'' Name,'' Phone, @CusId ItemTypeS4,'' Custom1,'' Custom2,'' Custom3,'' Custom4,'' Custom5
							,'' PriceListId,'' ProductId,'' WeightScaleBarcode,'' StoreId, t2.TransId BookletNo, t1.Quantity OrgQty, 0 [DeliveryQty] , 0 [ReceiptQty],
							SUM(t1.Quantity) OVER(PARTITION BY t1.TransId, t1.ItemCode, t1.UomCode) TotalOrder, t3.Quantity AS DivisionQty  ,
							case when t3.Quantity  >= SUM(t1.Quantity) OVER(PARTITION BY t1.TransId, t1.ItemCode, t1.UomCode) then 1 else 0 end Result
					 

		 --SELECT t1.TransId, t1.CreatedOn, t1.ItemCode,  t1.BarCode,  t1.UOMCode,   t1.Quantity, t2.Quantity AS Division  , SUM(t1.Quantity) OVER(PARTITION BY t1.TransId, t1.ItemCode, t1.UomCode) TotalOrder,
		 --case when t2.Quantity  >= SUM(t1.Quantity) OVER(PARTITION BY t1.TransId, t1.ItemCode, t1.UomCode) then 1 else 0 end X
		 from T_SalesLine t1 with (nolock) 
		 left join T_SalesHeader t2 with (nolock)  on t1.TransId = t2.TransId and t1.CompanyCode= t2.CompanyCode
		 left join  (select *  from  [fn_GetDivisionItemByCus](@CompanyCode, @CusId ,  @DocDate) ) t3 on t1.ItemCode = t3.ItemCode and t1.UOMCode = t3.UomCode

		 where t2.CusId = @CusId and CONVERT(date, t2.CreatedOn) = @DocDate and ISNULL( t3.ItemCode,'') <> ''
  
	 ) tmp
	 --where X = 0
	 order by CreatedOn,TransId, ItemCode desc
 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_GetFunctionPermissionByUser]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--- [dbo].[USP_GetFunctionPermissionByUser] 'admin'
CREATE PROCEDURE [dbo].[USP_GetFunctionPermissionByUser] 
	 @UserName nvarchar(50)
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '';
 

-- select the category names
SELECT 
    @columns+=QUOTENAME(Id) + ','
FROM 
    S_Permission
ORDER BY 
    Id;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);
 
-- construct dynamic SQL
SET @sql ='
SELECT * FROM   
(
  

	 select c.FunctionId, c.ControlId , p.Permissions  , u.UserName
	from M_Control c  with (nolock)  
	left join M_Permission p with (nolock) on c.FunctionId = p.FunctionId and c.ControlId = p.ControlId
	left join M_UserRole r with (nolock) on r.RoleId = p.RoleId
	left join M_User u with (nolock) on  u.UserId = r.UserId
	where u.Username = '''+@UserName+'''
	--and isnull( c.FunctionId, '''') != ''''

) t 

PIVOT(
    Count(UserName) 
    FOR Permissions IN ('+ @columns +') 
) AS pivot_table;';

-- execute the dynamic SQL
EXECUTE sp_executesql @sql;


--	 select p.FunctionId, p.ControlId, p.Permissions , u.UserName
--	from M_User u with (nolock)
--	left join M_UserRole r with (nolock) on u.UserId = r.UserId
--	left join M_Permission p with (nolock) on r.RoleId = p.RoleId


--select * from M_Control
----, p.Permissions  
-- select c.FunctionId, c.ControlId , p.Permissions  
--	from M_Control c  with (nolock)  
--	left join M_Permission p with (nolock) on c.FunctionId = p.FunctionId and c.ControlId = p.ControlId
--	left join M_UserRole r with (nolock) on r.RoleId = p.RoleId
--	left join M_User u with (nolock) on  u.UserId = r.UserId
 
--	select * from M_Permission
GO
/****** Object:  StoredProcedure [dbo].[USP_GetFunctionPermissionList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_GetFunctionPermissionList]  
	 
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '',
	@nullVl NVARCHAR(10) = '';

-- select the category names
SELECT 
    @columns+=QUOTENAME(Id) + ','
FROM 
    S_Permission
ORDER BY 
    Id;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);
set @nullVl ='';
-- construct dynamic SQL
SET @sql ='
SELECT * FROM   
(
  
   
 SELECT 
        f.FunctionId,  
		p.ControlId,
        p.Permissions 
    FROM 
        M_Function f
		left join M_Permission p on p.FunctionId = f.FunctionId
        left join S_Permission c  ON c.Id = p.Permissions
	where isnull(ControlId , '''' ) = ''''

) t 

PIVOT(
    Count(ControlId) 
    FOR Permissions IN ('+ @columns +') 
) AS pivot_table;';

-- execute the dynamic SQL
EXECUTE sp_executesql @sql;
GO
/****** Object:  StoredProcedure [dbo].[USP_GetFunctionPermissionListByRole]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetFunctionPermissionListByRole] 'Admin'
CREATE PROCEDURE [dbo].[USP_GetFunctionPermissionListByRole] 
	 @RoleId nvarchar(50)
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '',
	@nullVl NVARCHAR(10) = '';

-- select the category names
SELECT 
    @columns+=QUOTENAME(Id) + ','
FROM 
    S_Permission
ORDER BY 
    Id;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);
set @nullVl ='';
-- construct dynamic SQL
SET @sql ='
SELECT * FROM   
(
  
	select distinct functionId, ControlId, Name, Url,   Icon, isParent, ParentId,Permissions, RoleId  from 
	(
		
	 	
	   SELECT  f.FunctionId as functionId,f.Name, f.Url, f.Icon ,null ControlId, f.isParent,  f.ParentId ,null Permissions ,''' +@RoleId+ '''  RoleId
	 FROM M_Function f with (nolock) 
	  left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId and isnull(p.ControlId , '''' ) = '''' 
	 where f.Status = ''A''
	union all
	 SELECT f.FunctionId as functionId, f.Name, f.Url,  f.Icon, p.ControlId, f.isParent , f.ParentId,  p.Permissions , p.RoleId
	 FROM M_Function f with (nolock)
	 left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId
	  left join M_Role r with (nolock) on r.RoleId = p.RoleId
	  left join M_UserRole ur with (nolock) on ur.RoleId = p.RoleId
	  left join M_User u with (nolock) on u.UserId = ur.UserId
	 where  isnull(ControlId , '''' ) = '''' and f.Status = ''A'' and (convert(nvarchar(50), p.RoleId)= ''' +@RoleId+ ''' or r.RoleName= ''' +@RoleId+ ''' or u.UserName= ''' +@RoleId+ ''' or convert(nvarchar(50), ur.UserId) = ''' +@RoleId+ ''')
	) a
	 where  isnull(ControlId , '''' ) = '''' and (convert(nvarchar(50), RoleId)= ''' +@RoleId+ ''') 
	 
) t 
--ORDER BY ParentId desc
PIVOT(
    Count(RoleId) 
    FOR Permissions IN ('+ @columns +') 
) AS pivot_table;
';

 
 --select * from M_User
-- execute the dynamic SQL
EXECUTE sp_executesql @sql;
 

 --select * from M_Function
--select distinct functionId, ControlId,ParentId,Permissions  from 
--(
-- SELECT  f.FunctionId as functionId, p.ControlId, f.ParentId, p.Permissions , p.RoleId
-- FROM M_Function f with (nolock) 
-- left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId
-- where  isnull(ControlId , '''' ) = '''' 
--union all
-- SELECT f.FunctionId as functionId, p.ControlId, f.ParentId,  p.Permissions , p.RoleId
-- FROM M_Function f with (nolock)
-- left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId
-- where  isnull(ControlId , '''' ) = '''' and p.RoleId= 'b03f1d02-7f3d-4a16-91d1-2196c6a7d2b7'
--) a

--select * from M_Role
	 
	
	
	 --SELECT  f.FunctionId as functionId,f.Name, f.Url, f.Icon ,   p.ControlId,  f.ParentId , p.Permissions , p.RoleId
	 --FROM M_Function f with (nolock) 
	 --left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId
	
	 --where  isnull(ControlId , '''' ) = ''''  
	 --union all
	 -- SELECT  f.FunctionId as functionId,f.Name, f.Url, f.Icon ,   p.ControlId,  f.ParentId , p.Permissions , p.RoleId
	 --FROM M_Function f with (nolock) 
	 --left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId and isnull(p.ControlId , '''' ) = '''' 
	 --where  isnull(p.ControlId , '''' ) = '''' 


	 -- SELECT  *
	 --FROM M_Function
GO
/****** Object:  StoredProcedure [dbo].[USP_GetGeneralSettingStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- [USP_GetGeneralSettingStore] 'CP001','1001'
CREATE PROCEDURE [dbo].[USP_GetGeneralSettingStore]    
	 @CompanyCode nvarchar(50),
	 @StoreId nvarchar(50),
	 @SettingId  nvarchar(50) = null,
	 @IsCheck bit = null
AS

begin
	  select   
	    [SettingId]
      , [CompanyCode]
      , [StoreId]
      , [SettingName]
      , SettingValue
      , [SettingDescription]
      , [ValueType]
      ,   Status
      , [CreatedBy]
      , [CreatedOn]
      , [ModifiedBy]
      , [ModifiedOn]
      , [TokenExpired]
      , [DefaultValue]
      , [CustomField1]
      , [CustomField2]
      , CustomField3
      , [CustomField4]
      , [CustomField5] 

	  from
	  (
		 select distinct 
	   t1.[SettingId]
      ,t1.[CompanyCode]
      ,t1.[StoreId]
      ,t1.[SettingName]
      ,isnull(t1.[SettingValue] , t2.SettingValue)  SettingValue
      ,isnull(t1.SettingName , t2.[SettingDescription]) [SettingDescription]
      ,t2.[ValueType]
      , isnull(t1.Status,'I')   Status
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[TokenExpired]
      ,t1.[DefaultValue]
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5] 
	  ,t2.Priority
	  from S_GeneralSetting t1 with (nolock)
	  left join S_DefaultGeneralSetting t2   with (nolock) on t1.SettingId = t2.SettingId and t1.CompanyCode = t2.CompanyCode
	  where t1.CompanyCode = @CompanyCode and StoreId=@StoreId  
	  --and isnull(t1.Status,'A') = 'A'

	  union all 

	  --select * from S_GeneralSetting where SettingId = 'OpenDrawerOnReceipt'

	  select distinct 
	   t1.[SettingId]
      ,t1.[CompanyCode]
      ,@StoreId StoreId
      ,t1.[SettingName]
      ,t1.SettingValue
      ,isnull(t1.[SettingDescription] , t1.SettingName) [SettingDescription]
      ,t1.[ValueType]
      , isnull(t1.Status,'I')   Status
      ,'' [CreatedBy]
      , null [CreatedOn]
      ,'' [ModifiedBy]
      ,null [ModifiedOn]
      ,t1.[TokenExpired]
      ,t1.[DefaultValue]
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5] 
	  ,t1.Priority
	  from [S_DefaultGeneralSetting] t1 with (nolock)
	  left join S_GeneralSetting t2   with (nolock) on t1.SettingId = t2.SettingId and t1.CompanyCode = t2.CompanyCode and t2.StoreId = @StoreId
	  where t1.CompanyCode = @CompanyCode  and isnull(t2.SettingId,'') = ''
			and (StoreId = @StoreId or ISNULL(@Ischeck,0) = 0)
	  ) tmp

	  where  (ISNULL(@SettingId, '') = '' OR SettingId = @SettingId)  
	  order by Priority

	  --and isnull(t2.Status,'A') = 'A'
  --	 select distinct t1.[SettingId]
  --    ,[CompanyCode]
  --    ,[StoreId]
  --    ,[SettingName]
  --    ,[SettingValue]
  --    ,[SettingDescription]
  --    ,[ValueType]
  --    ,t1.[Status]
  --    ,[CreatedBy]
  --    ,[CreatedOn]
  --    ,[ModifiedBy]
  --    ,[ModifiedOn]
  --    ,[TokenExpired]
  --    ,[DefaultValue]
  --    ,[CustomField1]
  --    ,[CustomField2]
  --    ,[CustomField3]
  --    ,[CustomField4]
  --    ,[CustomField5] 
		--from S_GeneralSetting t1 with (nolock)
		--left join S_POSOption t2 with (nolock) on t1.SettingId= t2.Type
		--where CompanyCode = @CompanyCode and StoreId=@StoreId  and isnull(t2.Status,'A') = 'A' and isnull(t1.Status,'A') = 'A'
		----and t2.Code is null
		--union all
		--select distinct t1.Type SettingId, @CompanyCode CompanyCode, @StoreId StoreId,  t1.Type SettingName , t1.Code SettingValue, t1.Type  SettingDescription
		--, '' [ValueType]
		--,'A' [Status]
		--,'' [CreatedBy]
		--,null [CreatedOn]
		--, ''[ModifiedBy]
		--, null [ModifiedOn]
		--,null [TokenExpired]
		--,'' [DefaultValue]
		--,'' [CustomField1]
		--,'' [CustomField2]
		--,'' [CustomField3]
		--,'' [CustomField4]
		--,'' [CustomField5]
		--from S_POSOption t1 with (nolock)
		--left join ( 
  --			 select distinct t1.[SettingId]
		--	  ,[CompanyCode]
		--	  ,[StoreId]
		--	  ,[SettingName]
		--	  ,[SettingValue]
		--	  ,[SettingDescription],[ValueType]
		--	  ,t1.[Status]
		--	  ,[CreatedBy]
		--	  ,[CreatedOn]
		--	  ,[ModifiedBy]
		--	  ,[ModifiedOn]
		--	  ,[TokenExpired]
		--	  ,[DefaultValue]
		--	  ,[CustomField1]
		--	  ,[CustomField2]
		--	  ,[CustomField3]
		--	  ,[CustomField4]
		--	  ,[CustomField5]
       
		--		from S_GeneralSetting t1 with (nolock)
		--		left join S_POSOption t2 with (nolock) on t1.SettingId= t2.Type
		--		where CompanyCode = @CompanyCode and StoreId=@StoreId  and isnull(t2.Status,'A') = 'A' and isnull(t1.Status,'A') = 'A'
		--) t2 on t1.Type= t2.SettingId 
		--where  t2.SettingId is null  and isnull(t1.Status,'A') = 'A' and  t1.IsDefault = 1  
	
 
end

 --select * from S_POSOption
GO
/****** Object:  StoredProcedure [dbo].[USP_GetGRPO]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_GetPurchaseOder]   'CP001', 'FM01','','', '','',''
create PROCEDURE [dbo].[USP_GetGRPO]
	@CompanyCode nvarchar(50),
	@storeId	nvarchar(50),
	@Status		nvarchar(5),
	@FrDate  datetime,
	@ToDate  datetime,
	@Keyword nvarchar(250),
	@ViewBy nvarchar(250) =null 
AS
begin
 

	select  [PurchaseId]
		  ,[CompanyCode]
		  ,[StoreId]
		  ,[StoreName]
		  ,[DocStatus]
		  ,[DocDate]
		  ,[DocDueDate]
		  ,[CardCode]
		  ,[CardName]
		  ,[InvoiceAddress]
		  ,[TaxCode]
		  ,[VATPercent]
		  ,[VATTotal]
		  ,[DocTotal]
		  ,[Comment]
		  ,[CreatedBy]
		  ,[CreatedOn]
		  ,[ModifiedBy]
		  ,[ModifiedOn]
		  ,[Status] 
		  ,[RefTransId] 
		  ,[ShiftId]
			, CASE IsCanceled
			WHEN  'C' THEN 'Y'  
		 
			ELSE  IsCanceled end as   'IsCanceled' 
	from T_GoodsReceiptPOHeader with (nolock)
	where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
		AND (StoreId = @storeId  or ISNULL(@storeId, '')='')  
		and ( ISNULL(@Status, '') = '' 
			or ( CASE WHEN @Status = 'N' THEN IsCanceled END = 'Y' and Status = 'C'
			or	( Status = @Status)  ) 
			)
		and (CONVERT(date,  CreatedOn) >= @FrDate  or ISNULL(@FrDate, '') = '')  
		and (CONVERT(date,  CreatedOn) <= @ToDate  or ISNULL(@ToDate, '') = '')  
		and (PurchaseId like N'%'+@Keyword+'%' or Comment like N'%'+@Keyword+'%' or ISNULL(@Keyword, '') = '')  
	order by CreatedOn desc
end 




 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetInventoryCounted]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetInventoryCounted]   'CP001', 'JAOF001','', '' ,'',''
CREATE PROCEDURE [dbo].[USP_GetInventoryCounted]
	@CompanyCode nvarchar(50) ,
	@StoreId	nvarchar(50), 
	@Status		nvarchar(5),
	@FrDate  datetime,
	@ToDate  datetime,
	@Keyword nvarchar(250)
	 
AS
begin
select t1.*  from T_InventoryCountingHeader t1 with (nolock)
left join T_InventoryPostingHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.ICId = t2.RefId
where 

(ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (t1.Status = @Status  or ISNULL(@Status, '') = '')  
	and (t1.CreatedOn >= @FrDate  or ISNULL(@FrDate, '') = '')  
	and (t1.CreatedOn <= @ToDate  or ISNULL(@ToDate, '') = '')  
	and (t1.Name like 'N%'+@Keyword+'%' or t1.Remark like '%'+@Keyword+'%' or ISNULL(@Keyword, '') = '')  
	and t1.IsCanceled = 'N'  and t1.Status = 'C'
	and isnull(t2.RefId,'') ='' 
end 


--select * from T_InventoryHeader with (nolock)
GO
/****** Object:  StoredProcedure [dbo].[USP_GetInventoryCounting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetInventoryCounting]   '', '','C', '' ,'',''
CREATE PROCEDURE [dbo].[USP_GetInventoryCounting]
	@CompanyCode nvarchar(50) ,
	@StoreId	nvarchar(50), 
	@Status		nvarchar(5),
	@FrDate  datetime,
	@ToDate  datetime,
	@Keyword nvarchar(250)
	 
AS
begin
select * from T_InventoryCountingHeader with (nolock)
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')  
	and (CreatedOn >= @FrDate  or ISNULL(@FrDate, '') = '')  
	and (CreatedOn <= @ToDate  or ISNULL(@ToDate, '') = '')  
	and (Name like 'N%'+@Keyword+'%' or Remark like '%'+@Keyword+'%' or ISNULL(@Keyword, '') = '')  
end 


--select * from T_InventoryHeader with (nolock)
GO
/****** Object:  StoredProcedure [dbo].[USP_GetInventoryTransfer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetInventoryTransfer]   '', '','', '','A', '','',''
CREATE PROCEDURE [dbo].[USP_GetInventoryTransfer]
	@CompanyCode nvarchar(50) ,
	@FrStoreId	nvarchar(50),
	@ToStoreId	nvarchar(50),
	@DocType	nvarchar(50), 
	@Status		nvarchar(5),
	@FrDate  datetime,
	@ToDate  datetime,
	@Keyword nvarchar(250)
	 
AS
begin
select * from T_InventoryHeader with (nolock)
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (FromStore = @FrStoreId  or ISNULL(@FrStoreId, '')='')  
	and (ToStore = @ToStoreId  or ISNULL(@ToStoreId, '') = '')  
	and (DocType = @DocType  or ISNULL(@DocType, '') = '')  
	and (Status = @Status  or ISNULL(@Status, '') = '')  
	and (CreatedOn >= @FrDate  or ISNULL(@FrDate, '') = '')  
	and (CreatedOn <= @ToDate  or ISNULL(@ToDate, '') = '')  
	and (Name like 'N%'+@Keyword+'%' or Remark like '%'+@Keyword+'%' or ISNULL(@Keyword, '') = '')  
	order by CreatedOn desc
end 

GO
/****** Object:  StoredProcedure [dbo].[USP_GetInventoryTransferList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetInventoryTransferList]   '', '','', '', '','',''
CREATE PROCEDURE [dbo].[USP_GetInventoryTransferList]
	@CompanyCode nvarchar(50) ,
	@StoreId	nvarchar(50),
	@FromSloc	nvarchar(50),
	@ToSloc		nvarchar(50),
	@DocType	nvarchar(50), 
	@Status		nvarchar(5),
	@FrDate  datetime,
	@ToDate  datetime,
	@Keyword nvarchar(250)
	 
AS
begin
select * from T_InventoryTransferHeader with (nolock)
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	AND (FromSloc = @FromSloc  or ISNULL(@FromSloc, '')='')   
	AND (ToSloc = @ToSloc  or ISNULL(@ToSloc, '')='')   
	and (DocType = @DocType  or ISNULL(@DocType, '') = '')  
	and (Status = @Status  or ISNULL(@Status, '') = '')  
	and (CreatedOn >= @FrDate  or ISNULL(@FrDate, '') = '')  
	and (CreatedOn <= @ToDate  or ISNULL(@ToDate, '') = '')  
	and (Name like 'N%'+@Keyword+'%' or Remark like '%'+@Keyword+'%' or ISNULL(@Keyword, '') = '')  
	order by CreatedOn desc
end 

GO
/****** Object:  StoredProcedure [dbo].[USP_GetItem]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetItem] 'CP001','100000001', '', '', '','','', N'','',''
CREATE PROCEDURE [dbo].[USP_GetItem]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Type nvarchar(50),
	@CustomerGroupId nvarchar(50) = null,
	@PriceListId nvarchar(50) = null ,
	@LicensePlate nvarchar(50) = null
AS
begin
	DECLARE	@CusGrpId	nvarchar(50)
	
	if( @Type = 'Other')
	begin
		--select @Type
		select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		   ,t1.[ItemCategory_1] 
		  ,t1.[ItemCategory_2] 
		  ,t1.[ItemCategory_3] 
		  ,t1.[ForeignName]
			,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		   , t3.PriceAfterTax
		   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,t2.BarCode
		  ,T2.QRCode 
		  ,t3.PriceBeforeTax
		  ,t3.PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  , t3.PriceListId
		  ,isnull(t1.Returnable, 1) Returnable
		  ,t1.VoucherCollection
		  ,t1.IsPriceTime
		from M_Item  t1 with (nolock) 
		left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
		left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1
			--and isnull(t3.PriceAfterTax,  0) >0
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
			and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
			and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
			AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
			AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='' or  @Type ='Other')  
			and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
			 and t3.StoreId = @StoreId
			 and isnull(t1.Status,'A') = 'A' 
			 and  isnull(t4.Status,'A') = 'A'
			 and  isnull(t2.Status,'A') ='A' 
			 and  isnull(t3.Status,'A') = 'A' 
			  AND (T1.CustomField1 = 'PIN'  OR T1.CustomField1 = 'PN'  OR T1.CustomField1 = 'BP'  OR T1.CustomField1 = 'TP' OR T1.CustomField1 = 'TopUp')
			 --and ( t1.CustomField1 = 'BP' or  t1.CustomField1 = 'PN' or t1.CustomField1 = 'TP' )
	end
	else
	begin 
		--select @Type + '1'
		select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		  ,t1.[ItemCategory_1]  
		  ,t1.[ItemCategory_2] 
		  ,t1.[ItemCategory_3] 
		  ,t1.[ForeignName]
			,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		   , t3.PriceAfterTax
		   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,t2.BarCode
		  ,T2.QRCode 
		  ,t3.PriceBeforeTax
		  ,t3.PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  , t3.PriceListId
		  ,isnull(t1.Returnable, 1) Returnable
		  ,t1.VoucherCollection
		  ,t1.IsPriceTime
		from M_Item  t1 with (nolock) 
		left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
		left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1
			and isnull(t3.PriceAfterTax,  0) >0
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
			and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
			and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
			AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
			AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='')  
			and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
			 and t3.StoreId = @StoreId
			 and isnull(t1.Status,'A') = 'A' 
			 and  isnull(t4.Status,'A') = 'A'
			 and  isnull(t2.Status,'A') ='A' 
			 and  isnull(t3.Status,'A') = 'A' 
			 and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
	end
	 --[USP_GetItem] 'CP001','JAOF001', 'CAK020001 ', '', '','','',''


	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 

--[USP_GetItem] 'CP001','1001', '100000023', '', '2050000000010','','',''
--select * from [fn_GetPriceListByCustomerGroup]('CP001','1001', '')


--select * from M_ItemUOM where ItemCode ='100000023'


--select * from M_Item where ItemCode = '100000001'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItem_Check]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetItem_Check] 'CP001','3001', '30000001', '', '','','', N'Other','',''
CREATE PROCEDURE [dbo].[USP_GetItem_Check]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Type nvarchar(50),
	@CustomerGroupId nvarchar(50) = null,
	@PriceListId nvarchar(50) = null 
	 
AS
begin
	DECLARE	@CusGrpId	nvarchar(50)
	
	if( @Type = 'Other')
	begin
		--select @Type
		select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		   ,t1.[ItemCategory_1] 
		  ,t1.[ItemCategory_2] 
		  ,t1.[ItemCategory_3] 
		  ,t1.[ForeignName]
			,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		   , t3.PriceAfterTax
		   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,t2.BarCode
		  ,T2.QRCode 
		  ,t3.PriceBeforeTax
		  ,t3.PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  , t3.PriceListId
		  ,isnull(t1.Returnable, 1) Returnable
		  ,t1.VoucherCollection
		  ,t1.IsPriceTime
		from M_Item  t1 with (nolock) 
		left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
		left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1
			--and isnull(t3.PriceAfterTax,  0) >0
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
			and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
			and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
			AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
			AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='' or  @Type ='Other')  
			and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
			 and t3.StoreId = @StoreId
			 and isnull(t1.Status,'A') = 'A' 
			 and  isnull(t4.Status,'A') = 'A'
			 and  isnull(t2.Status,'A') ='A' 
			 and  isnull(t3.Status,'A') = 'A' 
			 and ( t1.CustomField1 = 'BP' or  t1.CustomField1 = 'PN' or t1.CustomField1 = 'TP' )
	end
	else
	begin 
		--select @Type + '1'
		select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		  ,t1.[ItemCategory_1]  
		  ,t1.[ItemCategory_2] 
		  ,t1.[ItemCategory_3] 
		  ,t1.[ForeignName]
			,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		   , t3.PriceAfterTax
		   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,t2.BarCode
		  ,T2.QRCode 
		  ,t3.PriceBeforeTax
		  ,t3.PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  , t3.PriceListId
		  ,isnull(t1.Returnable, 1) Returnable
		  ,t1.VoucherCollection
		  ,t1.IsPriceTime
		from M_Item  t1 with (nolock) 
		left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
		left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1
			and isnull(t3.PriceAfterTax,  0) >0
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
			and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
			and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
			AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
			AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='')  
			and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
			 and t3.StoreId = @StoreId
			 and isnull(t1.Status,'A') = 'A' 
			 and  isnull(t4.Status,'A') = 'A'
			 and  isnull(t2.Status,'A') ='A' 
			 and  isnull(t3.Status,'A') = 'A' 
			 and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
	end
	 --[USP_GetItem] 'CP001','JAOF001', 'CAK020001 ', '', '','','',''


	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 

--[USP_GetItem] 'CP001','1001', '100000023', '', '2050000000010','','',''
--select * from [fn_GetPriceListByCustomerGroup]('CP001','1001', '')


--select * from M_ItemUOM where ItemCode ='100000023'


--select * from M_Item where ItemCode = '100000001'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItem_Filter]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
--select * from M_ItemUOM
--select * from [fn_GetPriceListByCustomerGroup]('CP001', 'FM001', '')
-- [USP_GetItem_Filter] 'CP001','2019', '10087915', '', '','','','','','', '', '','','','','','', '','','','','','','','','','','',''
CREATE PROCEDURE [dbo].[USP_GetItem_Filter]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Group nvarchar(50),
	@ItemCate1 nvarchar(50),
	@ItemCate2 nvarchar(50),
	@ItemCate3 nvarchar(50),
    @CustomF1 nvarchar(50), 
	@CustomF2 nvarchar(50),
	@CustomF3 nvarchar(50),
	@CustomF4 nvarchar(50), 
	@CustomF5 nvarchar(50),
	@CustomF6 nvarchar(50),
	@CustomF7 nvarchar(50),
	@CustomF8 nvarchar(50),
	@CustomF9 nvarchar(50),
	@CustomF10 nvarchar(50),
	@ValidFrom date,
	@ValidTo date,
	@IsSerial bit,
	@IsBOM bit,
	@IsVoucher bit,
	@IsCapacity bit,
	@CustomerGroupId nvarchar(50) = null,
	@PriceListId nvarchar(50) = null,
	@PriceFrom decimal = null,
	@PriceTo decimal = null,
	@PLU nvarchar(50) = null
AS
begin



		
		if (ISNULL(@PLU , '') <> '' and ISNULL(@BarCode , '') <> '')
		begin 
			
			select  distinct t1.[ItemCode]
					  ,t1.[CompanyCode]
					  ,t1.[ProductId]
					  ,t1.[VariantId] 
					  ,t1.[CapacityValue]
					  ,t1.[ItemGroupId]
					  ,t1.[SalesTaxCode]
					  ,t6.TaxPercent [SalesTaxRate] 
					  ,t1.[PurchaseTaxCode]
					  ,t6.TaxPercent [PurchaseTaxRate] 
					  ,t1.[ItemName]
					  ,t1.[ItemDescription]
					  ,t1.[ItemCategory_1]
					  ,t1.[ItemCategory_2]
					  ,t1.[ItemCategory_3]
					  ,t1.[ForeignName]
						,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
					   ,t5.UomName UomName
					  ,t1.[ImageURL]
					  ,t1.[ImageLink]
					  ,t1.[MCId]
					  ,t4.MCName
					  ,t1.[CustomField1]
					  ,t1.[CustomField2]
					  ,t1.[CustomField3]
					  ,t1.[CustomField4]
					  ,t1.[CustomField5]
					  ,t1.[CustomField6]
					  ,t1.[CustomField7]
					  ,t1.[CustomField8]
					  ,t1.[CustomField9]
					  ,t1.[CustomField10]
					   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
					  ,t1.[IsSerial]
					  ,t1.[IsBOM]
					  ,t1.[ValidFrom]
					  ,t1.[ValidTo] 
					  ,t2.BarCode
					  ,T2.QRCode 
					  ,t3.PriceBeforeTax
					  ,t3.PriceAfterTax
					  ,t1.isVoucher
					  ,t1.RejectPayType
					  ,t3.PriceListId
					  ,isnull(t1.Returnable, 1) Returnable
					  ,t1.VoucherCollection
					  ,t1.IsPriceTime,'#FF3300' IsHighLight
				INTO #ItemFilterPLU
				from M_Item  t1 with (nolock) 
				left join M_MerchandiseCategory t4 with (nolock)  on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
				left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
				left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId) WHERE  isnull(Status,'A') = 'A' AND (PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='') and StoreId = @StoreId  ) t3 on t3.ItemCode = t1.ItemCode  and t3.Barcode = t2.BarCode and t3.UOMCode= t2.UOMCode and convert(date, GETDATE()) between ISNULL(convert(date,t3.ValidFrom), '2000-01-01')  and ISNULL(convert(date, t3.ValidTo), convert(date, GETDATE())) 
				--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
				left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
				left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
				where 1=1
					--and isnull(t3.PriceAfterTax,  0) >0
					and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
					AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
					and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')   
					--and  (  t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
					AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')    
		 
					and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t2.PLU like  N'%'+@Keyword+'%'
						or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
					AND (t1.ItemGroupId = @Group  or ISNULL(@Group, '')='') 
					AND (t1.ItemCategory_1 = @ItemCate1  or ISNULL(@ItemCate1, '')='') 
					AND (t1.ItemCategory_2 = @ItemCate2  or ISNULL(@ItemCate2, '')='') 
					AND (t1.ItemCategory_3 = @ItemCate3  or ISNULL(@ItemCate3, '')='') 
					AND (t1.CustomField1 = @CustomF1  or ISNULL(@CustomF1, '')='') 
					AND (t1.CustomField2 = @CustomF2  or ISNULL(@CustomF2, '')='') 
					AND (t1.CustomField3 = @CustomF3  or ISNULL(@CustomF3, '')='') 
					AND (t1.CustomField4 = @CustomF4  or ISNULL(@CustomF4, '')='')
					AND (t1.CustomField5 = @CustomF5  or ISNULL(@CustomF5, '')='')
					AND (t1.CustomField6 = @CustomF6  or ISNULL(@CustomF6, '')='')
					AND (t1.CustomField7 = @CustomF7  or ISNULL(@CustomF7, '')='')
					AND (t1.CustomField8 = @CustomF8  or ISNULL(@CustomF8, '')='')
					AND (t1.CustomField9 = @CustomF9  or ISNULL(@CustomF9, '')='')
					AND (t1.CustomField10 = @CustomF10  or ISNULL(@CustomF10, '')='')
					AND (t1.ValidFrom = @ValidFrom  or ISNULL(@ValidFrom, '')='')
					AND (t2.PLU = @PLU  or ISNULL(@PLU, '')='')
   
					AND (t1.ValidTo = @ValidTo  or ISNULL(@ValidTo, '')='')
					AND (t1.IsSerial = @IsSerial  or ISNULL(convert(nvarchar(10),@IsSerial), '')='')
					AND (t1.IsBOM = @IsBOM  or ISNULL(convert(nvarchar(10),@IsBOM), '')='')
					AND (t1.isVoucher = @IsVoucher  or ISNULL(convert(nvarchar(10),@IsVoucher), '')='')
					--AND (t1.MCId = @ValidFrom  or ISNULL(@ValidFrom, '')='')

	 
					 and isnull(t1.Status,'A') = 'A' 
					 and  isnull(t4.Status,'A') = 'A'
					 and  isnull(t2.Status,'A') ='A' 
					 and PriceAfterTAx IS NOT NULL

					 AND (t3.PriceAfterTax >= @PriceFrom  or ISNULL(convert(nvarchar(10),@PriceFrom), '')='')
					  AND (t3.PriceAfterTax <= @PriceTo  or ISNULL(convert(nvarchar(10),@PriceTo), '')='')
					 -- Loại trừ Other Item
					 and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
 
			--select 'Alo' + convert(nvarchar(50), (select COUNT(*) from #ItemFilter)) 
			if((select COUNT(*) from #ItemFilterPLU) = 0)
			begin
				drop table #ItemFilterPLU;
				 
				--select 'Chạy hàm lại';
				Exec [USP_GetItem_Filter] @CompanyCode ,
					@StoreId ,
					@ItemCode,
					@UomCode,
					@BarCode,
					@Keyword,
					@Merchandise ,
					@Group ,
					@ItemCate1 ,
					@ItemCate2 ,
					@ItemCate3 ,
					@CustomF1 , 
					@CustomF2,
					@CustomF3,
					@CustomF4 , 
					@CustomF5,
					@CustomF6,
					@CustomF7,
					@CustomF8 ,
					@CustomF9,
					@CustomF10 ,
					@ValidFrom ,
					@ValidTo ,
					@IsSerial ,
					@IsBOM ,
					@IsVoucher ,
					@IsCapacity ,
					@CustomerGroupId ,
					@PriceListId ,
					@PriceFrom,
					@PriceTo,
					 null
			end 
			else
			begin
				select * from #ItemFilterPLU
				drop table #ItemFilterPLU
			end
		end
		else
		begin

			
			select  distinct t1.[ItemCode]
					  ,t1.[CompanyCode]
					  ,t1.[ProductId]
					  ,t1.[VariantId] 
					  ,t1.[CapacityValue]
					  ,t1.[ItemGroupId]
					  ,t1.[SalesTaxCode]
					  ,t6.TaxPercent [SalesTaxRate] 
					  ,t1.[PurchaseTaxCode]
					  ,t6.TaxPercent [PurchaseTaxRate] 
					  ,t1.[ItemName]
					  ,t1.[ItemDescription]
					  ,t1.[ItemCategory_1]
					  ,t1.[ItemCategory_2]
					  ,t1.[ItemCategory_3]
					  ,t1.[ForeignName]
						,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
					   ,t5.UomName UomName
					  ,t1.[ImageURL]
					  ,t1.[ImageLink]
					  ,t1.[MCId]
					  ,t4.MCName
					  ,t1.[CustomField1]
					  ,t1.[CustomField2]
					  ,t1.[CustomField3]
					  ,t1.[CustomField4]
					  ,t1.[CustomField5]
					  ,t1.[CustomField6]
					  ,t1.[CustomField7]
					  ,t1.[CustomField8]
					  ,t1.[CustomField9]
					  ,t1.[CustomField10]
					   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
					  ,t1.[IsSerial]
					  ,t1.[IsBOM]
					  ,t1.[ValidFrom]
					  ,t1.[ValidTo] 
					  ,t2.BarCode
					  ,T2.QRCode 
					  ,t3.PriceBeforeTax
					  ,t3.PriceAfterTax
					  ,t1.isVoucher
					  ,t1.RejectPayType
					  ,t3.PriceListId
					  ,isnull(t1.Returnable, 1) Returnable
					  ,t1.VoucherCollection
					  ,t1.IsPriceTime
					  ,'#FF3300' IsHighLight
				INTO #ItemFilter
				from M_Item  t1 with (nolock) 
				left join M_MerchandiseCategory t4 with (nolock)  on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
				left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
				left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId) WHERE  isnull(Status,'A') = 'A' AND (PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='') and StoreId = @StoreId  ) t3 on t3.ItemCode = t1.ItemCode  and t3.Barcode = t2.BarCode and t3.UOMCode= t2.UOMCode and convert(date, GETDATE()) between ISNULL(convert(date,t3.ValidFrom), '2000-01-01')  and ISNULL(convert(date,t3.ValidTo),  convert(date, GETDATE())) 
				--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
				left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
				left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
				where 1=1
					--and isnull(t3.PriceAfterTax,  0) >0
					and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
					AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
					and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  

					and  (( ISNULL(@PLU, '')='' and t2.BarCode = @BarCode)  or ISNULL(@BarCode, '') = '')  
					AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')    
		 
					and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t2.PLU like  N'%'+@Keyword+'%'
						or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
					AND (t1.ItemGroupId = @Group  or ISNULL(@Group, '')='') 
					AND (t1.ItemCategory_1 = @ItemCate1  or ISNULL(@ItemCate1, '')='') 
					AND (t1.ItemCategory_2 = @ItemCate2  or ISNULL(@ItemCate2, '')='') 
					AND (t1.ItemCategory_3 = @ItemCate3  or ISNULL(@ItemCate3, '')='') 
					AND (t1.CustomField1 = @CustomF1  or ISNULL(@CustomF1, '')='') 
					AND (t1.CustomField2 = @CustomF2  or ISNULL(@CustomF2, '')='') 
					AND (t1.CustomField3 = @CustomF3  or ISNULL(@CustomF3, '')='') 
					AND (t1.CustomField4 = @CustomF4  or ISNULL(@CustomF4, '')='')
					AND (t1.CustomField5 = @CustomF5  or ISNULL(@CustomF5, '')='')
					AND (t1.CustomField6 = @CustomF6  or ISNULL(@CustomF6, '')='')
					AND (t1.CustomField7 = @CustomF7  or ISNULL(@CustomF7, '')='')
					AND (t1.CustomField8 = @CustomF8  or ISNULL(@CustomF8, '')='')
					AND (t1.CustomField9 = @CustomF9  or ISNULL(@CustomF9, '')='')
					AND (t1.CustomField10 = @CustomF10  or ISNULL(@CustomF10, '')='')
					AND (t1.ValidFrom = @ValidFrom  or ISNULL(@ValidFrom, '')='')
					AND (t2.PLU = @PLU  or ISNULL(@PLU, '')='')
   
					AND (t1.ValidTo = @ValidTo  or ISNULL(@ValidTo, '')='')
					AND (t1.IsSerial = @IsSerial  or ISNULL(convert(nvarchar(10),@IsSerial), '')='')
					AND (t1.IsBOM = @IsBOM  or ISNULL(convert(nvarchar(10),@IsBOM), '')='')
					AND (t1.isVoucher = @IsVoucher  or ISNULL(convert(nvarchar(10),@IsVoucher), '')='')
					--AND (t1.MCId = @ValidFrom  or ISNULL(@ValidFrom, '')='')

	 
					 and isnull(t1.Status,'A') = 'A' 
					 and  isnull(t4.Status,'A') = 'A'
					 and  isnull(t2.Status,'A') ='A' 
					 and PriceAfterTAx IS NOT NULL

					 AND (t3.PriceAfterTax >= @PriceFrom  or ISNULL(convert(nvarchar(10),@PriceFrom), '')='')
					  AND (t3.PriceAfterTax <= @PriceTo  or ISNULL(convert(nvarchar(10),@PriceTo), '')='')
					 -- Loại trừ Other Item
					 and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
 
			select * from #ItemFilter
			drop table #ItemFilter
		end


--select distinct t1.[ItemCode]
--      ,t1.[CompanyCode]
--      ,t1.[ProductId]
--      ,t1.[VariantId] 
--      ,t1.[CapacityValue]
--      ,t1.[ItemGroupId]
--      ,t1.[SalesTaxCode]
--	  ,t6.TaxPercent [SalesTaxRate] 
--      ,t1.[PurchaseTaxCode]
--	  ,t6.TaxPercent [PurchaseTaxRate] 
--      ,t1.[ItemName]
--      ,t1.[ItemDescription]
--      ,t1.[ItemCategory_1]
--      ,t1.[ItemCategory_2]
--      ,t1.[ItemCategory_3]
--      ,t1.[ForeignName]
--        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
--	   ,t5.UomName UomName
--      ,t1.[ImageURL]
--      ,t1.[ImageLink]
--      ,t1.[MCId]
--	  ,t4.MCName
--      ,t1.[CustomField1]
--      ,t1.[CustomField2]
--      ,t1.[CustomField3]
--      ,t1.[CustomField4]
--      ,t1.[CustomField5]
--      ,t1.[CustomField6]
--      ,t1.[CustomField7]
--      ,t1.[CustomField8]
--      ,t1.[CustomField9]
--      ,t1.[CustomField10]
--       ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
--      ,t1.[IsSerial]
--      ,t1.[IsBOM]
--      ,t1.[ValidFrom]
--      ,t1.[ValidTo] 
--	  ,t2.BarCode
--	  ,T2.QRCode 
--	  ,t3.PriceBeforeTax
--	  ,t3.PriceAfterTax
--	  ,t1.isVoucher
--	  ,t1.RejectPayType
--	  ,t3.PriceListId
--	  ,isnull(t1.Returnable, 1) Returnable
--	  ,t1.VoucherCollection
--	  ,t1.IsPriceTime
--	   ,t1.MappingCode
--	   ,t1.IsFixedQty 
--	    ,case when t1.IsFixedQty = 1 then isnull(t2.DefaultFixedQty , 1 ) else null end DefaultFixedQty
--from M_Item  t1 with (nolock) 
--left join M_MerchandiseCategory t4 with (nolock) on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
--left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
--left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId) WHERE  isnull(Status,'A') = 'A' 
--AND (PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='') and StoreId = @StoreId  ) t3 on 
--t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and t3.Barcode= t2.BarCode   
--and CONVERT(date, GETDATE()) between CONVERT(date, ISNULL(t3.ValidFrom, '2000-01-01'))   and CONVERT(date,  ISNULL(t3.ValidTo,  GETDATE())) 
----and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
----left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
--left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
--left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
--where 1=1
--	--and isnull(t3.PriceAfterTax,  0) >0
--	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
--	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
--	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
--	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
--	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')    
	
--	and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t2.PLU like  N'%'+@Keyword+'%'
--		or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
--	AND (t1.ItemGroupId = @Group  or ISNULL(@Group, '')='') 
--	AND (t1.ItemCategory_1 = @ItemCate1  or ISNULL(@ItemCate1, '')='') 
--	AND (t1.ItemCategory_2 = @ItemCate2  or ISNULL(@ItemCate2, '')='') 
--	AND (t1.ItemCategory_3 = @ItemCate3  or ISNULL(@ItemCate3, '')='') 
--	AND (t1.CustomField1 = @CustomF1  or ISNULL(@CustomF1, '')='') 
--	AND (t1.CustomField2 = @CustomF2  or ISNULL(@CustomF2, '')='') 
--	AND (t1.CustomField3 = @CustomF3  or ISNULL(@CustomF3, '')='') 
--	AND (t1.CustomField4 = @CustomF4  or ISNULL(@CustomF4, '')='')
--	AND (t1.CustomField5 = @CustomF5  or ISNULL(@CustomF5, '')='')
--	AND (t1.CustomField6 = @CustomF6  or ISNULL(@CustomF6, '')='')
--	AND (t1.CustomField7 = @CustomF7  or ISNULL(@CustomF7, '')='')
--	AND (t1.CustomField8 = @CustomF8  or ISNULL(@CustomF8, '')='')
--	AND (t1.CustomField9 = @CustomF9  or ISNULL(@CustomF9, '')='')
--	AND (t1.CustomField10 = @CustomF10  or ISNULL(@CustomF10, '')='')
--	--AND (t2.PLU = @PLU  or ISNULL(@PLU, '')='')
--	AND (t1.ValidFrom = @ValidFrom  or ISNULL(@ValidFrom, '')='')

--		AND (t1.ValidTo = @ValidTo  or ISNULL(@ValidTo, '')='')
--	AND (t1.IsSerial = @IsSerial  or ISNULL(convert(nvarchar(10),@IsSerial), '')='')
--	AND (t1.IsBOM = @IsBOM  or ISNULL(convert(nvarchar(10),@IsBOM), '')='')
--	AND (t1.isVoucher = @IsVoucher  or ISNULL(convert(nvarchar(10),@IsVoucher), '')='')
--	--AND (t1.MCId = @ValidFrom  or ISNULL(@ValidFrom, '')='')

	 
--	 and isnull(t1.Status,'A') = 'A' 
--	 and  isnull(t4.Status,'A') = 'A'
--	 and  isnull(t2.Status,'A') ='A' 
--	 and PriceAfterTAx IS NOT NULL
--	 -- Loại trừ Other Item
--	 and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
 



	 
end 
 
--select * from M_ItemUOM

--select * from M_PriceList where ItemCode ='JA020201004'

-- [USP_GetItem] 'CP001', 'W0101', '', '','','','',''
 --[USP_GetItem] '', '', '', '','',''
 --select * from M_PriceList
--select * from M_ItemUOMCaiCai
--select * from M_ItemUOM 

--select * from M_UOM

--delete M_ItemUOM where ItemCode = 'JA010101002_2' and UOMCode = 'JA010000000000101001_2_7' and CompanyCode ='7pcs'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItem_Filter_CheckData]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
--select * from M_ItemUOM
--select * from [fn_GetPriceListByCustomerGroup]('CP001', 'FM001', '')
-- [USP_GetItem_Filter_CheckData] 'CP001','3007', '10059673', '', '','','','','','', '', '','','','','','', '','','','','','','','','','','',''
CREATE PROCEDURE [dbo].[USP_GetItem_Filter_CheckData]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Group nvarchar(50),
	@ItemCate1 nvarchar(50),
	@ItemCate2 nvarchar(50),
	@ItemCate3 nvarchar(50),
    @CustomF1 nvarchar(50), 
	@CustomF2 nvarchar(50),
	@CustomF3 nvarchar(50),
	@CustomF4 nvarchar(50), 
	@CustomF5 nvarchar(50),
	@CustomF6 nvarchar(50),
	@CustomF7 nvarchar(50),
	@CustomF8 nvarchar(50),
	@CustomF9 nvarchar(50),
	@CustomF10 nvarchar(50),
	@ValidFrom date,
	@ValidTo date,
	@IsSerial bit,
	@IsBOM bit,
	@IsVoucher bit,
	@IsCapacity bit,
	@CustomerGroupId nvarchar(50) = null,
	@PriceListId nvarchar(50) = null
AS
begin

select distinct t1.[ItemCode]
      ,t1.[CompanyCode]
      ,t1.[ProductId]
      ,t1.[VariantId] 
      ,t1.[CapacityValue]
      ,t1.[ItemGroupId]
      ,t1.[SalesTaxCode]
	  ,t6.TaxPercent [SalesTaxRate] 
      ,t1.[PurchaseTaxCode]
	  ,t6.TaxPercent [PurchaseTaxRate] 
      ,t1.[ItemName]
      ,t1.[ItemDescription]
      ,t1.[ItemCategory_1]
      ,t1.[ItemCategory_2]
      ,t1.[ItemCategory_3]
      ,t1.[ForeignName]
        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
	   ,t5.UomName UomName
      ,t1.[ImageURL]
      ,t1.[ImageLink]
      ,t1.[MCId]
	  ,t4.MCName
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5]
      ,t1.[CustomField6]
      ,t1.[CustomField7]
      ,t1.[CustomField8]
      ,t1.[CustomField9]
      ,t1.[CustomField10]
       ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
      ,t1.[IsSerial]
      ,t1.[IsBOM]
      ,t1.[ValidFrom]
      ,t1.[ValidTo] 
	  ,t2.BarCode
	  ,T2.QRCode 
	  ,t3.PriceBeforeTax
	  ,t3.PriceAfterTax
	  ,t1.isVoucher
	  ,t1.RejectPayType
	  ,t3.PriceListId
	  ,isnull(t1.Returnable, 1) Returnable
	  ,t1.VoucherCollection
	  ,t1.IsPriceTime
	  ,t3.PriceAfterTAx
from M_Item  t1 with (nolock) 
left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId) 
WHERE  isnull(Status,'A') = 'A' AND (PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='') 
and StoreId = @StoreId  ) t3 on t3.ItemCode = t1.ItemCode and t3.Barcode= t2.BarCode   and t3.UOMCode= t2.UOMCode and  CONVERT(date, GETDATE()) between CONVERT(date, ISNULL(t3.ValidFrom, '2000-01-01'))  and convert(date, ISNULL(t3.ValidTo,  GETDATE())) 
--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')    
	
	and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t2.PLU like  N'%'+@Keyword+'%'
		or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	AND (t1.ItemGroupId = @Group  or ISNULL(@Group, '')='') 
	AND (t1.ItemCategory_1 = @ItemCate1  or ISNULL(@ItemCate1, '')='') 
	AND (t1.ItemCategory_2 = @ItemCate2  or ISNULL(@ItemCate2, '')='') 
	AND (t1.ItemCategory_3 = @ItemCate3  or ISNULL(@ItemCate3, '')='') 
	AND (t1.CustomField1 = @CustomF1  or ISNULL(@CustomF1, '')='') 
	AND (t1.CustomField2 = @CustomF2  or ISNULL(@CustomF2, '')='') 
	AND (t1.CustomField3 = @CustomF3  or ISNULL(@CustomF3, '')='') 
	AND (t1.CustomField4 = @CustomF4  or ISNULL(@CustomF4, '')='')
	AND (t1.CustomField5 = @CustomF5  or ISNULL(@CustomF5, '')='')
	AND (t1.CustomField6 = @CustomF6  or ISNULL(@CustomF6, '')='')
	AND (t1.CustomField7 = @CustomF7  or ISNULL(@CustomF7, '')='')
	AND (t1.CustomField8 = @CustomF8  or ISNULL(@CustomF8, '')='')
	AND (t1.CustomField9 = @CustomF9  or ISNULL(@CustomF9, '')='')
	AND (t1.CustomField10 = @CustomF10  or ISNULL(@CustomF10, '')='')
	AND (t1.ValidFrom = @ValidFrom  or ISNULL(@ValidFrom, '')='')

		AND (t1.ValidTo = @ValidTo  or ISNULL(@ValidTo, '')='')
	AND (t1.IsSerial = @IsSerial  or ISNULL(convert(nvarchar(10),@IsSerial), '')='')
	AND (t1.IsBOM = @IsBOM  or ISNULL(convert(nvarchar(10),@IsBOM), '')='')
	AND (t1.isVoucher = @IsVoucher  or ISNULL(convert(nvarchar(10),@IsVoucher), '')='')
	--AND (t1.MCId = @ValidFrom  or ISNULL(@ValidFrom, '')='')

	 
	 and isnull(t1.Status,'A') = 'A' 
	 and  isnull(t4.Status,'A') = 'A'
	 and  isnull(t2.Status,'A') ='A' 
	 --and PriceAfterTAx IS NOT NULL


	 ---- Loại trừ Other Item
	 --and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
 



	 
end 
 
--select * from M_ItemUOM

--select * from M_PriceList where ItemCode ='JA020201004'

-- [USP_GetItem] 'CP001', 'W0101', '', '','','','',''
 --[USP_GetItem] '', '', '', '','',''
 --select * from M_PriceList
--select * from M_ItemUOMCaiCai
--select * from M_ItemUOM 

--select * from M_UOM

--delete M_ItemUOM where ItemCode = 'JA010101002_2' and UOMCode = 'JA010000000000101001_2_7' and CompanyCode ='7pcs'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItem_Onhand_rm]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetItem_Onhand] 'CP001', 'W0101', '', '','' ,'',''
CREATE PROCEDURE [dbo].[USP_GetItem_Onhand_rm]
	@CompanyCode nvarchar(50) = '',
	@StoreId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50)
 
AS
begin
select distinct t1.[ItemCode]
      ,t1.[CompanyCode]
      ,t1.[ProductId]
      ,t1.[VariantId] 
      ,t1.[CapacityValue]
      ,t1.[ItemGroupId]
      ,t1.[SalesTaxCode]
      ,t1.[PurchaseTaxCode]
      ,t1.[ItemName]
      ,t1.[ItemDescription]
      ,t1.[ItemCategory_1]
      ,t1.[ItemCategory_2]
      ,t1.[ItemCategory_3]
      ,t1.[ForeignName]
        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
	   ,t5.UomName UomName
      ,t1.[ImageURL]
      ,t1.[ImageLink]
      ,t1.[MCId]
	  ,t4.MCName
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5]
      ,t1.[CustomField6]
      ,t1.[CustomField7]
      ,t1.[CustomField8]
      ,t1.[CustomField9]
      ,t1.[CustomField10]
       ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
      ,t1.[IsSerial]
      ,t1.[IsBOM]
      ,t1.[ValidFrom]
      ,t1.[ValidTo] 
	  ,t2.BarCode
	  ,T2.QRCode 
	  ,t3.PriceBeforeTax
	  ,t3.PriceAfterTax
	  ,t1.isVoucher
	  ,t6.SLocId, t6.Quantity , t1.rejectPayType
from M_Item  t1 with (nolock) 
left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode 
left join M_PriceList t3 with (nolock) on t3.ItemCode = t2.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode
left join T_ItemStorage t6 with (nolock) on t6.CompanyCode = t1.CompanyCode and t6.ItemCode= t1.ItemCode and t6.UOMCode = t2.UOMCode 
where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
	and (t6.StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (t1.ItemCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	and isnull(t1.Status,'A') = 'A' and isnull(t4.Status,'A') = 'A' and isnull( t2.Status,'A') ='A' and isnull(t3.Status,'A') = 'A' 
	--and isnull(T6.Quantity,0) > 0
end 
 

 --select * from T_ItemStorage where StoreId = 'W0101'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItem_Promo]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_GetItem_Promo] 'CP001','1001', '32000004', 'EA', '','','', N'','2',''
CREATE PROCEDURE [dbo].[USP_GetItem_Promo]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Type nvarchar(50),
	@CustomerGroupId nvarchar(50) = null,
	@PriceListId nvarchar(50) = null 
	 
AS
begin
	DECLARE	@CusGrpId	nvarchar(50)
	
	if( @Type = 'Other')
	begin
		--select @Type
		select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		  ,t1.[ItemCategory_1]
		  ,t1.[ItemCategory_2]
		  ,t1.[ItemCategory_3]
		  ,t1.[ForeignName]
			,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		   , t3.PriceAfterTax
		   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,t2.BarCode
		  ,T2.QRCode 
		  ,t3.PriceBeforeTax
		  ,t3.PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  , t3.PriceListId
		  ,isnull(t1.Returnable, 1) Returnable
		  ,t1.VoucherCollection
		  ,t1.IsPriceTime
		from M_Item  t1 with (nolock) 
		left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
		left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1
			----and isnull(t3.PriceAfterTax,  0) >0
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			--AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
			and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
			and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
			----AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
			----AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='' or  @Type ='Other')  
			----and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
			 --and t3.StoreId = @StoreId
			 --and isnull(t1.Status,'A') = 'A' 
			 --and  isnull(t4.Status,'A') = 'A'
			 --and  isnull(t2.Status,'A') ='A' 
			 --and  isnull(t3.Status,'A') = 'A' 
			 ----and ( t1.CustomField1 = 'BP' or  t1.CustomField1 = 'PN' or t1.CustomField1 = 'TP' )
	end
	else
	begin 
		--select @Type + '1'
		select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		  ,t1.[ItemCategory_1]
		  ,t1.[ItemCategory_2]
		  ,t1.[ItemCategory_3]
		  ,t1.[ForeignName]
			,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		   , t3.PriceAfterTax
		   ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,t2.BarCode
		  ,T2.QRCode 
		  ,t3.PriceBeforeTax
		  ,t3.PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  , t3.PriceListId
		  ,isnull(t1.Returnable, 1) Returnable
		  ,t1.VoucherCollection
		  ,t1.IsPriceTime
		from M_Item  t1 with (nolock) 
		left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
		left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		--left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1
			----and isnull(t3.PriceAfterTax,  0) >0
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			--AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
			and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
			and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
			----AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
			----AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='')  
			----and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
			 --and t3.StoreId = @StoreId
			 --and isnull(t1.Status,'A') = 'A' 
			 --and  isnull(t4.Status,'A') = 'A'
			 --and  isnull(t2.Status,'A') ='A' 
			 --and  isnull(t3.Status,'A') = 'A' 
			 ----and ( t1.CustomField1 <> 'BP' and  t1.CustomField1 <> 'PN' and  t1.CustomField1 <> 'TP' )
	end
	 --[USP_GetItem] 'CP001','JAOF001', 'CAK020001 ', '', '','','',''


	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 

GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemByVoucherCollection]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetItemByVoucherCollection] 'CP001','VO_SIZE_SML'
CREATE PROCEDURE [dbo].[USP_GetItemByVoucherCollection]
	@CompanyCode nvarchar(50),
	@ItemCode	nvarchar(50)

AS
BEGIN

SELECT * 
FROM M_Item 
WHERE (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
		AND VoucherCollection = @ItemCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemCustom]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetItemCustom] 'CP001','', ' ', '', '','','',''
CREATE PROCEDURE [dbo].[USP_GetItemCustom]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Type nvarchar(50),
	@CustomerGroupId nvarchar(50) = null
AS
begin

  
	select distinct t1.[ItemCode]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId] 
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t6.TaxPercent [SalesTaxRate] 
		  ,t1.[PurchaseTaxCode]
		  ,t6.TaxPercent [PurchaseTaxRate] 
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		  ,t1.[ItemCategory_1]
		  ,t1.[ItemCategory_2]
		  ,t1.[ItemCategory_3]
		  ,t1.[ForeignName]
			,  t1.InventoryUOm UomCode
		   ,t5.UomName UomName
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t4.MCName
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		  ,t1.DefaultPrice PriceAfterTax
		   ,t1.DefaultPrice  [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
		  ,'' BarCode
		  ,'' QRCode 
		  ,t1.DefaultPrice PriceBeforeTax
		  ,t1.DefaultPrice PriceAfterTax
		  ,t1.isVoucher
		  ,t1.RejectPayType
		  ,'' PriceListId
		   ,isnull(t1.Returnable, 1) Returnable
		    ,t1.VoucherCollection
			,isnull(t1.IsPriceTime,0) IsPriceTime
	from M_Item  t1 with (nolock) 
	left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
	left join M_UOM t5 with (nolock) on t1.InventoryUOM = t5.UOMCode 
	left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
	where 1=1
		 
		and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
		AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
		and (t1.InventoryUOM = @UomCode  or ISNULL(@UomCode, '') = '')  
	 
		AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
		AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='')  
		and (t1.ItemCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	 
		 and isnull(t1.Status,'A') = 'A' 
		 and  isnull(t4.Status,'A') = 'A'
	  AND (T1.CustomField1 = 'PIN'  OR T1.CustomField1 = 'PN'  OR T1.CustomField1 = 'BP'  OR T1.CustomField1 = 'TP' OR T1.CustomField1 = 'TopUp')

end 

--[USP_GetItem] 'CP001','1001', '100000023', '', '2050000000010','','',''
--select * from [fn_GetPriceListByCustomerGroup]('CP001','1001', '')


--select * from M_ItemUOM where ItemCode ='100000023'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_GetItemInfor] 'CP001','100000123', 'EA', '', '','','',''
CREATE   PROCEDURE [dbo].[USP_GetItemInfor]
	@CompanyCode nvarchar(50), 
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Type nvarchar(50),
	@PriceListId nvarchar(50) = null
AS
begin
select distinct t1.[ItemCode]
      ,t1.[CompanyCode]
      ,t1.[ProductId]
      ,t1.[VariantId] 
      ,t1.[CapacityValue]
      ,t1.[ItemGroupId]
      ,t1.[SalesTaxCode]
	  ,t6.TaxPercent [SalesTaxRate] 
      ,t1.[PurchaseTaxCode]
	  ,t6.TaxPercent [PurchaseTaxRate] 
      ,t1.[ItemName]
      ,t1.[ItemDescription]
      ,t1.[ItemCategory_1]
      ,t1.[ItemCategory_2]
      ,t1.[ItemCategory_3]
      ,t1.[ForeignName]
        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
	   ,t5.UomName UomName
      ,t1.[ImageURL]
      ,t1.[ImageLink]
      ,t1.[MCId]
	  ,t4.MCName
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5]
      ,t1.[CustomField6]
      ,t1.[CustomField7]
      ,t1.[CustomField8]
      ,t1.[CustomField9]
      ,t1.[CustomField10]
	 
      ,isnull( t1.DefaultPrice,0) [DefaultPrice]
      ,t1.[IsSerial]
      ,t1.[IsBOM]
      ,t1.[ValidFrom]
      ,t1.[ValidTo] 
	  ,t2.BarCode
	  ,T2.QRCode 
	 ,t1.Status
	  ,t1.isVoucher
	  ,t1.RejectPayType
	   ,isnull(t1.Returnable, 1) Returnable
	  , case isnull(@PriceListId,'') when '' then '' else  t3.PriceListId end   PriceListId
	  , t1.VoucherCollection
	  ,t1.IsPriceTime
from M_Item  t1 with (nolock) 
left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode

left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode = t2.UOMCode and t3.CompanyCode = t1.CompanyCode
left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
	AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='')  
	AND (t3.PriceListId = @PriceListId  or ISNULL(@PriceListId, '')='')  
	and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
	 --and t3.StoreId = @StoreId

	 --[USP_GetItemWithoutPrice] 'CP001','JAOF001', 'CAK020001', '', '','','',''


	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 
--[USP_GetItem] '','', '', '', '','','',''
--ALTER PROCEDURE [dbo].[USP_GetItem]
--select * from M_Tax

--select * from M_PriceList where ItemCode ='JA020201004'

-- [USP_GetItem] 'CP001', 'W0101', '', '','','','',''
 --[USP_GetItem] '', '', '', '','',''
 --select * from M_PriceList
--select * from M_ItemUOMCaiCai
--select * from M_ItemUOM 

--select * from M_UOM

--delete M_ItemUOM where ItemCode = 'CAK020001 ' and UOMCode = 'JA010000000000101001_2_7' and CompanyCode ='7pcs'

--select * from M_Item  where  ItemCode = 'CAK020001'
--select * from M_ItemUOM where  ItemCode = 'CAK020001'

--select * from M_PriceList where  ItemCode = 'CAK020001'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemListingStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetItemListingStore] 'CP001','BAL010001','admin'
CREATE PROCEDURE [dbo].[USP_GetItemListingStore] 
	@CompanyCode	nvarchar(50),
	--@StoreId	nvarchar(50),
	@ItemCode nvarchar(50),
	@UserCode nvarchar(50)
AS	


  select distinct t1.StoreId, t2.StoreName,1 'Status'  
  from M_ItemStoreListing t1 with (nolock) 
 left join M_Store t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId 
   INNER JOIN M_UserStore t3 ON t2.StoreId = t3.StoreId
	INNER JOIN M_User t4 ON t3.UserId = t4.UserId
 	where  t1.CompanyCode =@CompanyCode and  (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '') = '') 
	and t4.Username = @UserCode and t1.Status = 'A'
          --and  (t1.StoreId = @StoreId  or ISNULL(@StoreId, '') = '') 
	--select * from M_ItemStoreListing with (nolock) 
	 union all
 
  select distinct t1.StoreId, t1.StoreName, 0 'Status' 
 from M_Store t1 with (nolock) 
 left join (
  select distinct t1.StoreId, t2.StoreName,1 'Status'  , t2.CompanyCode
  from M_ItemStoreListing t1 with (nolock) 
 left join M_Store t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId 
   INNER JOIN M_UserStore t3 ON t2.StoreId = t3.StoreId
	INNER JOIN M_User t4 ON t3.UserId = t4.UserId
 	where  t1.CompanyCode =@CompanyCode and  (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '') = '') 
	and t4.Username = @UserCode and t1.Status = 'A') t2  on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId   
 --left join M_ItemStoreListing t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId   and t2.Status <> 'A'
	--											and  (t2.ItemCode = @ItemCode  or ISNULL(@ItemCode, '') = '') 
 INNER JOIN M_UserStore t3 ON t1.StoreId = t3.StoreId
 INNER JOIN M_User t4 ON t3.UserId = t4.UserId
 where t2.storeId is null and t1.CompanyCode = @CompanyCode and t4.Username = @UserCode


 --t2.storeId is null and

 --select * from M_ItemStoreListing
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemStock]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetItemStock]  '', '', '','','','',''
CREATE PROCEDURE [dbo].[USP_GetItemStock]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@SlocId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50), 
	@SerialNum nvarchar(50)
AS
begin
select t1.CompanyCode, t1.StoreId, t1.SLocId, t1.ItemCode, t1.UOMCode, t1.Quantity , t2.BarCode, t3.SerialNum
from T_ItemStorage t1 with (nolock)
left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode and t1.UOMCode= t2.UOMCode
left join M_ItemSerial t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.CompanyCode = t1.CompanyCode
where (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='')  
AND (t1.SLocId = @SlocId  or ISNULL(@SlocId, '')='')  
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	and (t3.SerialNum = @SerialNum  or ISNULL(@SerialNum, '') = '')  
	
--	select distinct t1.CompanyCode, t6.StoreId, t6.SLocId, t1.ItemCode, t6.UOMCode, t6.Quantity , t2.BarCode, t7.SerialNum
--		t1.[ItemCode]
--      ,t1.[CompanyCode]
--      ,t1.[ProductId]
--      ,t1.[VariantId] 
--      ,t1.[CapacityValue]
--      ,t1.[ItemGroupId]
--      ,t1.[SalesTaxCode]
--      ,t1.[PurchaseTaxCode]
--      ,t1.[ItemName]
--      ,t1.[ItemDescription]
--      ,t1.[ItemCategory_1]
--      ,t1.[ItemCategory_2]
--      ,t1.[ItemCategory_3]
--      ,t1.[ForeignName]
--        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
--	   ,t5.UomName UomName
--      ,t1.[ImageURL]
--      ,t1.[ImageLink]
--      ,t1.[MCId]
--	  ,t4.MCName
--      ,t1.[CustomField1]
--      ,t1.[CustomField2]
--      ,t1.[CustomField3]
--      ,t1.[CustomField4]
--      ,t1.[CustomField5]
--      ,t1.[CustomField6]
--      ,t1.[CustomField7]
--      ,t1.[CustomField8]
--      ,t1.[CustomField9]
--      ,t1.[CustomField10]
--       ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
--      ,t1.[IsSerial]
--      ,t1.[IsBOM]
--      ,t1.[ValidFrom]
--      ,t1.[ValidTo] 
--	  ,t2.BarCode
--	  ,T2.QRCode 
--	  ,t3.PriceBeforeTax
--	  ,t3.PriceAfterTax
--	  ,t1.isVoucher
--	  ,t6.SLocId , t1.rejectPayType
--from M_Item  t1 with (nolock) 
--left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
--left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode 
--left join M_PriceList t3 with (nolock) on t3.ItemCode = t2.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
--left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode
--left join T_ItemStorage t6 with (nolock) on t6.CompanyCode = t1.CompanyCode and t6.ItemCode= t1.ItemCode and t6.UOMCode = t2.UOMCode 
--left join M_ItemSerial t7 with (nolock) on t7.ItemCode = t1.ItemCode and t7.CompanyCode = t1.CompanyCode
--where 1=1
--	--and isnull(t3.PriceAfterTax,  0) >0
--	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
--	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
--	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
--	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
--	--AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
--	and (t6.StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
--	and (t7.SerialNum = @SerialNum  or ISNULL(@SerialNum, '') = '')  
--	--and (t1.ItemCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
--	--and isnull(T6.Quantity,0) > 0
end 

--select * from M_ItemSerial
--select * from T_ItemStorage

--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemTransfer_rm]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetItemTransfer] NULL, NULL, '', '','',''
CREATE PROCEDURE [dbo].[USP_GetItemTransfer_rm]
	@CompanyCode nvarchar(50),
	@FromStore nvarchar(50),
	@ToStore nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50)
AS
begin
select t1.[ItemCode]
      ,t1.[CompanyCode]
      ,t1.[ProductId]
      ,t1.[VariantId] 
      ,t1.[CapacityValue]
      ,t1.[ItemGroupId]
      ,t1.[SalesTaxCode]
      ,t1.[PurchaseTaxCode]
      ,t1.[ItemName]
      ,t1.[ItemDescription]
      ,t1.[ItemCategory_1]
      ,t1.[ItemCategory_2]
      ,t1.[ItemCategory_3]
      ,t1.[ForeignName]
        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
	   ,t5. UomName UomName
      ,t1.[ImageURL]
      ,t1.[ImageLink]
      ,t1.[MCId]
	  ,t4.MCName
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5]
      ,t1.[CustomField6]
      ,t1.[CustomField7]
      ,t1.[CustomField8]
      ,t1.[CustomField9]
      ,t1.[CustomField10]
      ,t1.[DefaultPrice]
      ,t1.[IsSerial]
      ,t1.[IsBOM]
      ,t1.[ValidFrom]
      ,t1.[ValidTo] 
	  ,t2.BarCode
	  ,T2.QRCode 
	  ,t3.PriceBeforeTax
	  ,t3.PriceAfterTax,
	  t0.LineId,
	  t0.FrSLocId,
	  t0.ToSlocId,
	  t0.DocType,
	  t0.OpenQty,
	  t0.Quantity 
	  
from T_InventoryLine t0  with (nolock)
left join T_InventoryHeader th with (nolock) on t0.CompanyCode= th.CompanyCode and t0.INVTId= th.INVTId
left join M_Item  t1 with (nolock) on t0.ItemCode = t1.ItemCode and t0.CompanyCode= t1.CompanyCode
left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode and t0.UOMCode=t2.UOMCode

left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and GETDATE() between t3.ValidFrom and t3.ValidTo
left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 

where (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	AND (th.FromStore = @FromStore  or ISNULL(@FromStore, '')='')  
	AND (th.ToStore = @ToStore  or ISNULL(@ToStore, '')='')  
end 


--select * from T_InventoryLine
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemWithoutAll_rm]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetItemWithoutAll] '', '', '', '','',''
CREATE PROCEDURE [dbo].[USP_GetItemWithoutAll_rm]
	@CompanyCode nvarchar(50) = '',
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50)
AS
begin
select distinct t1.[ItemCode]
      ,t1.[CompanyCode]
      ,t1.[ProductId]
      ,t1.[VariantId] 
      ,t1.[CapacityValue]
      ,t1.[ItemGroupId]
      ,t1.[SalesTaxCode]
      ,t1.[PurchaseTaxCode]
      ,t1.[ItemName]
      ,t1.[ItemDescription]
      ,t1.[ItemCategory_1]
      ,t1.[ItemCategory_2]
      ,t1.[ItemCategory_3]
      ,t1.[ForeignName]
        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
	   ,t5.UomName UomName
      ,t1.[ImageURL]
      ,t1.[ImageLink]
      ,t1.[MCId]
	  ,t4.MCName
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5]
      ,t1.[CustomField6]
      ,t1.[CustomField7]
      ,t1.[CustomField8]
      ,t1.[CustomField9]
      ,t1.[CustomField10]
       ,isnull(t3.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
      ,t1.[IsSerial]
      ,t1.[IsBOM]
      ,t1.[ValidFrom]
      ,t1.[ValidTo] 
	  ,t2.BarCode
	  ,T2.QRCode 
	  ,t3.PriceBeforeTax
	  ,t3.PriceAfterTax
	 
	  
from M_Item  t1 with (nolock) 
left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode

left join M_PriceList t3 with (nolock) on t3.ItemCode = t2.ItemCode and t3.UOMCode= t2.UOMCode  
left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode
where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
	and (t1.ItemCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 
 --[USP_GetItem] '', '', '', '','',''
 --select * from M_PriceList
--select * from M_ItemUOMCaiCai
--select * from M_ItemUOM 

--select * from M_UOM

--delete M_ItemUOM where ItemCode = 'JA010101002_2' and UOMCode = 'JA010000000000101001_2_7' and CompanyCode ='7pcs'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetItemWithoutPrice]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--
CREATE PROCEDURE [dbo].[USP_GetItemWithoutPrice]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50),
	@BarCode	nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50),
	@Type nvarchar(50)
AS
begin
select distinct t1.[ItemCode]
      ,t1.[CompanyCode]
      ,t1.[ProductId]
      ,t1.[VariantId] 
      ,t1.[CapacityValue]
      ,t1.[ItemGroupId]
      ,t1.[SalesTaxCode]
	  ,t6.TaxPercent [SalesTaxRate] 
      ,t1.[PurchaseTaxCode]
	  ,t6.TaxPercent [PurchaseTaxRate] 
      ,t1.[ItemName]
      ,t1.[ItemDescription]
      ,t1.[ItemCategory_1]
      ,t1.[ItemCategory_2]
      ,t1.[ItemCategory_3]
      ,t1.[ForeignName]
        ,isnull(t2.UOMCode, t1.InventoryUOM) UomCode
	   ,t5.UomName UomName
      ,t1.[ImageURL]
      ,t1.[ImageLink]
      ,t1.[MCId]
	  ,t4.MCName
      ,t1.[CustomField1]
      ,t1.[CustomField2]
      ,t1.[CustomField3]
      ,t1.[CustomField4]
      ,t1.[CustomField5]
      ,t1.[CustomField6]
      ,t1.[CustomField7]
      ,t1.[CustomField8]
      ,t1.[CustomField9]
      ,t1.[CustomField10]
	   , t3.PriceAfterTax
       ,isnull(isnull(t3.PriceAfterTax, t1.DefaultPrice),0) [DefaultPrice]
      ,t1.[IsSerial]
      ,t1.[IsBOM]
      ,t1.[ValidFrom]
      ,t1.[ValidTo] 
	  ,t2.BarCode
	  ,T2.QRCode 
	  ,t3.PriceBeforeTax
	  ,t3.PriceAfterTax
	  ,t1.isVoucher
	  ,t1.RejectPayType
	  
from M_Item  t1 with (nolock) 
left join M_MerchandiseCategory t4 on t1.MCId = t4.MCId and t1.CompanyCode = t4.CompanyCode
left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
left join M_PriceList t3 with (nolock) on t3.ItemCode = t1.ItemCode and t3.UOMCode= t2.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
where 1=1
	--and isnull(t3.PriceAfterTax,  0) >0
	and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	and (t2.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')  
	and (t2.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
	AND (t1.CustomField1 = @Type  or ISNULL(@Type, '')='')  
	and (t1.ItemCode like  N'%'+@Keyword+'%' or t2.BarCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%')
	
	 and t3.StoreId = @StoreId
		 and isnull(t1.Status,'A') = 'A' and  isnull(t4.Status,'A') = 'A' and  isnull(t2.Status,'A') ='A' and  isnull(t3.Status,'A') = 'A' 

	  --[USP_GetItemWithoutPrice] 'CP001','', ' ', '', '','','',''
	 --[USP_GetItemWithoutPrice] 'CP001','JAOF001', 'CAK020001', '', '','','',''


	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 
--[USP_GetItem] '','', '', '', '','','',''
--ALTER PROCEDURE [dbo].[USP_GetItem]
--select * from M_Tax

--select * from M_PriceList where ItemCode ='JA020201004'

-- [USP_GetItem] 'CP001', 'W0101', '', '','','','',''
 --[USP_GetItem] '', '', '', '','',''
 --select * from M_PriceList
--select * from M_ItemUOMCaiCai
--select * from M_ItemUOM 

--select * from M_UOM

--delete M_ItemUOM where ItemCode = 'CAK020001 ' and UOMCode = 'JA010000000000101001_2_7' and CompanyCode ='7pcs'

--select * from M_Item  where  ItemCode = 'CAK020001'
--select * from M_ItemUOM where  ItemCode = 'CAK020001'

--select * from M_PriceList where  ItemCode = 'CAK020001'
GO
/****** Object:  StoredProcedure [dbo].[USP_GetLicenseInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create   PROCEDURE [dbo].[USP_GetLicenseInfor]
	 @CompanyCode nvarchar(50),
	 @KeyId nvarchar(50) = null
AS
begin
	select t1.*
	--, t2.Hash, t2.[HardwareKey]
 --     ,t2.[CustomF1]
 --     ,t2.[CustomF2]
 --     ,t2.[CustomF3]
 --     ,t2.[CustomF4]
 --     ,t2.[CustomF5]
 --     ,t2.[CustomF6]
 --     ,t2.[CustomF7]
 --     ,t2.[CustomF8]
 --     ,t2.[CustomF9]
 --     ,t2.[CustomF10]
 --     ,t2.[CustomF11]
 --     ,t2.[CustomF12]
 --     ,t2.[CustomF13]
 --     ,t2.[CustomF14]
 --     ,t2.[CustomF15]
	from S_License t1 with (nolock)
	--left join S_Token  t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.LicenseId = t2.LicenseId
	where t1.CompanyCode = @CompanyCode 
	and (ISNULL(@KeyId,'') = '' or t1.LicenseId = @KeyId)



end;
    
GO
/****** Object:  StoredProcedure [dbo].[USP_GetLoyaltyFactorRank]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_GetLoyaltyFactorRank 'CP001', 'FM002'
-- =============================================
CREATE PROCEDURE [dbo].[USP_GetLoyaltyFactorRank] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@CustomerId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT TOP 1 ISNULL(R.Factor, 1) 'Factor'
	FROM [dbo].[M_Customer] C WITH(NOLOCK)
	LEFT JOIN [dbo].[S_LoyaltyRank] R WITH(NOLOCK) ON R.RankId = C.CustomerRank AND R.CompanyCode = C.CompanyCode
	WHERE C.CompanyCode = @CompanyCode AND C.CustomerId = @CustomerId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetLoyaltyPointConvert]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_GetPointConvert 'CP001', 'FM002', '15000'
-- =============================================
CREATE PROCEDURE [dbo].[USP_GetLoyaltyPointConvert] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@Point decimal(19,6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT TOP 1 @Point * C.Amount / ISNULL(C.Point, 1) 'Factor'
	FROM [dbo].[S_LoyaltyPointConvert] C WITH(NOLOCK)
	WHERE C.CompanyCode = @CompanyCode AND C.StoreId = @StoreId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetPermissionList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_GetPermissionList]
	 @FunctionId nvarchar(50)
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '';

-- select the category names
SELECT 
    @columns+=QUOTENAME(Id) + ','
FROM 
    S_Permission
ORDER BY 
    Id;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);

-- construct dynamic SQL
SET @sql ='
SELECT * FROM   
(
    
 SELECT 
        FunctionId, 
        ControlId,
        Permissions 
    FROM 
        M_Permission p
        INNER JOIN S_Permission c 
            ON c.Id = p.Permissions
) t 
PIVOT(
    Count(FunctionId) 
    FOR Permissions IN ('+ @columns +')
) AS pivot_table;';

-- execute the dynamic SQL
EXECUTE sp_executesql @sql;




--select * from M_Permission
GO
/****** Object:  StoredProcedure [dbo].[USP_GetPermissionUser]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetPermissionUser] 'Admin'
CREATE PROCEDURE [dbo].[USP_GetPermissionUser] 
	 @UserName nvarchar(50)
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '',
	@nullVl NVARCHAR(10) = '';

-- select the category names
SELECT 
    @columns+=QUOTENAME(Id) + ','
FROM 
    S_Permission
ORDER BY 
    Id;

-- remove the last comma
SET @columns = LEFT(@columns, LEN(@columns) - 1);
set @nullVl ='';
-- construct dynamic SQL
SET @sql ='
SELECT * FROM   
(
    SELECT f.FunctionId as functionId, f.Name, f.Url,  f.Icon,f.CustomF1,f.CustomF2,f.CustomF3 , p.ControlId, f.ParentId,  p.Permissions , p.RoleId, f.isShowMenu, 
	f.isParent, f.MenuOrder, f.OrderNo
	 FROM M_Function f with (nolock)
	 left join M_Permission p with (nolock) on p.FunctionId = f.FunctionId
	  left join M_Role r with (nolock) on r.RoleId = p.RoleId
	  left join M_UserRole ur with (nolock) on ur.RoleId = p.RoleId
	  left join M_User u with (nolock) on u.UserId = ur.UserId
	 where isnull(f.ParentId,'''')<>''''  and  (convert(nvarchar(50), p.RoleId)= ''' +@UserName+ ''' or r.RoleName= ''' +@UserName+ ''' or u.UserName= ''' +@UserName+ ''' or convert(nvarchar(50), ur.UserId) = ''' +@UserName+ ''')
	  and f.Status = ''A''

) t 

PIVOT(
    Count(RoleId) 
    FOR Permissions IN ('+ @columns +') 
) AS pivot_table;';

 
 --select * from M_User
-- execute the dynamic SQL
EXECUTE sp_executesql @sql;
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetPickupAmountByNumOfList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
-- [USP_GetPickupAmountByNumOfList] 'CP001', '1001', '220115', '100122011500002',  2
CREATE PROCEDURE [dbo].[USP_GetPickupAmountByNumOfList]   
	 @CompanyCode nvarchar(50),
	 @StoreId nvarchar(50),
	 @DailyId  nvarchar(50),
	 @CounterId nvarchar(50),
	 @ShiftId  nvarchar(50),
	 @NumOfList int
	 
AS
 
if(@NumOfList = -1)
begin
	select *  from (
	select   CONVERT(nvarchar(50) , ROW_NUMBER () OVER(PARTITION BY CounterId, ShiftId, CounterId ORDER BY  CreatedOn, CounterId DESC)) AS rn , *
	from T_PickupAmount with (nolock)
	where  CompanyCode = @CompanyCode 
	 and ShiftId = @ShiftId
	 and StoreId = @StoreId 
	 AND (CounterId = @CounterId  or ISNULL(@CounterId, '')='') 
	 AND (DailyId = @DailyId  or ISNULL(@DailyId, '')='')    
	--order by CreatedOn 
	) tmp 
end
else
begin
	select *  from (
	select   CONVERT(nvarchar(50) , ROW_NUMBER () OVER(PARTITION BY CounterId, ShiftId, CounterId ORDER BY  CreatedOn, CounterId DESC)) AS rn , *
	from T_PickupAmount with (nolock)
	where  CompanyCode = @CompanyCode 
	 and ShiftId = @ShiftId
	 and StoreId = @StoreId 
	 AND (CounterId = @CounterId  or ISNULL(@CounterId, '')='') 
	 AND (DailyId = @DailyId  or ISNULL(@DailyId, '')='')    
	--order by CreatedOn 
	) tmp
	where  rn = @NumOfList
end

	
GO
/****** Object:  StoredProcedure [dbo].[USP_GetPickupAmountLst]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--[USP_GetControlPermissionListByFunction]   'Adm_Warehouse', 'B03F1D02-7F3D-4A16-91D1-2196C6A7D2B7'

--select * from M_Control where FunctionId = 'Adm_Warehouse'
--select * from M_Control 100121120100003
-- [USP_GetPickupAmountLst] 'CP001', '', '', '',  'CustomF', N'rn', N'CustomF1,CustomF2,CustomF3,CustomF4,CustomF5', '' ,'',''
CREATE PROCEDURE [dbo].[USP_GetPickupAmountLst]   
	 @CompanyCode nvarchar(50),
	 @StoreId nvarchar(50),
	 @DailyId  nvarchar(50),
	 @ShiftId  nvarchar(50),
	 @ColumnName nvarchar(50),
	 @ColumnToPivot  nvarchar(50),
	 @ListToPivot  nvarchar(350),
	 @IsSales  nvarchar(5) = null,
	 @FDate nvarchar(50) = null,
	 @TDate  nvarchar(50) = null
AS

DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '' ;
 

   DECLARE @SqlStatement NVARCHAR(MAX)
   if( @IsSales = 'N')
   begin
	 SET @SqlStatement = N'
		SELECT PivotTable.* , t2.CreatedOn ShiftDate FROM (

			select  rn, StoreId, CounterId, ShiftId, Amount  
			from 
			(
				select  CONCAT( '''+@ColumnName+''' , CONVERT(nvarchar(50) , ROW_NUMBER () OVER(PARTITION BY t1.DeviceId, t1.ShiftId ORDER BY t1.DeviceId DESC))) AS rn, t1.StoreId, t1.DeviceId  CounterId, t1.ShiftId, null Amount, null CreatedOn
				from T_ShiftHeader t1 
				where t1.CompanyCode = '''+@CompanyCode+''' 
				and (ISNULL('''+@StoreId + ''', '''') = '''' OR  t1.StoreId = '''+ @StoreId+'''  )
				and (ISNULL('''+@DailyId + ''', '''') = '''' OR  t1.ShiftId in (select ShiftId from T_ShiftHeader where DailyId = '''+@DailyId+'''))
				and (ISNULL('''+@ShiftId + ''', '''') = '''' OR  t1.ShiftId not in (
					select  ShiftId 
					from T_PickupAmount
					where   CompanyCode = '''+@CompanyCode+''' 
					   and (ISNULL('''+@StoreId + ''', '''') = '''' OR   StoreId = '''+ @StoreId+'''  )
						and (ISNULL('''+@DailyId + ''', '''') = '''' OR  ShiftId in (select ShiftId from T_ShiftHeader where DailyId = '''+@DailyId+'''))
						and (ISNULL('''+@ShiftId + ''', '''') = '''' OR ShiftId = '''+ @ShiftId+'''  )
						and (ISNULL('''+@FDate + ''', '''') = '''' OR Convert(date, CreatedOn) >= Convert(date, '''+ @FDate +'''  ))
						and (ISNULL('''+@TDate + ''' , '''') = '''' OR Convert(date, CreatedOn) <= Convert(date, '''+ @TDate +'''  ))
					
				))
				and (ISNULL('''+@FDate + ''', '''') = '''' OR Convert(date, CreatedOn) >= Convert(date, '''+ @FDate +'''  ))
				and (ISNULL('''+@TDate + ''' , '''') = '''' OR Convert(date, CreatedOn) <= Convert(date, '''+ @TDate +'''  ))
					
				union all
				 
					select  CONCAT( '''+@ColumnName+''' , CONVERT(nvarchar(50) , ROW_NUMBER () OVER(PARTITION BY CounterId, ShiftId, CounterId ORDER BY  CreatedOn, CounterId DESC))) AS rn , StoreId , CounterId, ShiftId, Amount, CreatedOn
					from T_PickupAmount
					where   CompanyCode = '''+@CompanyCode+''' 
						and (ISNULL('''+@StoreId + ''', '''') = '''' OR StoreId = '''+ @StoreId+'''  )
						and (ISNULL('''+@DailyId + ''', '''') = '''' OR ShiftId in (select ShiftId from T_ShiftHeader where DailyId = '''+@DailyId+''')) 
						and (ISNULL('''+@ShiftId + ''', '''') = '''' OR ShiftId = '''+ @ShiftId+'''  )
						and (ISNULL('''+@FDate + ''', '''') = '''' OR Convert(date, CreatedOn) >= Convert(date, '''+ @FDate +'''  ))
						and (ISNULL('''+@TDate + ''' , '''') = '''' OR Convert(date, CreatedOn) <= Convert(date, '''+ @TDate +'''  ))
					
				 
				 
			 ) tmp
			 
		) StudentResults
		
		PIVOT (
		  SUM([Amount])
		  FOR ['+@ColumnToPivot+']
		  IN ('+@ListToPivot+')
		) AS PivotTable

		 left join T_ShiftHeader t2 on PivotTable.ShiftId = t2.ShiftId and PivotTable.ShiftId = t2.ShiftId
	  ';
   end
   else
   begin
		 SET @SqlStatement = N'
			SELECT  PivotTable.* , t2.CreatedOn ShiftDate
			FROM (
				select StoreId, CONCAT( '''+@ColumnName+''' , CONVERT(nvarchar(50) , ROW_NUMBER () OVER(PARTITION BY CounterId, ShiftId, CounterId ORDER BY CreatedOn, CounterId DESC))) AS rn, CounterId, ShiftId, Amount
				from T_PickupAmount
				where   CompanyCode = '''+@CompanyCode+''' 
					and (ISNULL('''+@StoreId + ''', '''') = '''' OR StoreId = '''+ @StoreId+'''  )
				and (ISNULL('''+@DailyId + ''', '''') = '''' OR ShiftId in (select ShiftId from T_ShiftHeader where DailyId = '''+@DailyId+''')) 
				and (ISNULL('''+@ShiftId + ''', '''') = '''' OR ShiftId = '''+ @ShiftId+'''  )
				and (ISNULL('''+@FDate + ''', '''') = '''' OR Convert(date, CreatedOn) >= Convert(date, '''+ @FDate +'''  ))
				and (ISNULL('''+@TDate + ''' , '''') = '''' OR Convert(date, CreatedOn) <= Convert(date, '''+ @TDate +'''  ))
			) StudentResults
			PIVOT (
			  SUM([Amount])
			  FOR ['+@ColumnToPivot+']
			  IN ('+@ListToPivot+')
			) AS PivotTable
			 left join T_ShiftHeader t2 on PivotTable.ShiftId = t2.ShiftId and PivotTable.ShiftId = t2.ShiftId
		  ';
   end
 
 --print @SqlStatement
  EXEC(@SqlStatement)


  -- 
  --ISNULL('''+@FDate + ''', '''') = '''' OR 
  
				--and (ISNULL('''+@TDate + ''', '''') = '''' OR Convert(date, '''+@TDate+''') >= '''+ @TDate+'''  )


 --select case when Count(2) > 1 then 1 else 0 end

--select * from M_Control

 --SELECT 
 --       c.ControlId,  
	--	p.FunctionId,
 --       p.Permissions 
 --   FROM 
 --       M_Control c with (nolock)
	--	left join M_Permission p  with (nolock) on p.ControlId = c.ControlId
		
 --       --left join S_Permission s  ON s.Id = p.Permissions
	--	where c.FunctionId='Adm_OUTLETGROUPSETUP' and p.RoleId =


--  --select ShiftId from T_ShiftHeader where DailyId = '211129'
--  select  CONCAT( 'CustomF' , CONVERT(nvarchar(50) , 
--		ROW_NUMBER () OVER(PARTITION BY CounterId, ShiftId ORDER BY CounterId DESC))) AS rn, CounterId, ShiftId, Amount
--		from T_PickupAmount
--		where  StoreId = '1001' and CompanyCode = 'CP001' 
--		and ShiftId in (select ShiftId from T_ShiftHeader where DailyId = '211129') 

--select * from T_ShiftHeader where ShiftId = '100121112900001'

 	--select    CONCAT( '' , CONVERT(nvarchar(50) , ROW_NUMBER () OVER(PARTITION BY CounterId, ShiftId, CreatedOn ORDER BY CreatedOn DESC))) AS rn, StoreId , CounterId, ShiftId, Amount, CreatedOn
		--		from T_PickupAmount
		--		where StoreId = '1001'  
		--		and ShiftId in (select ShiftId from T_ShiftHeader where DailyId = '220115') 
			 
		--		and (ISNULL('''+@ShiftId + ''', '''') = '''' OR ShiftId = '''+ @ShiftId+'''  )
GO
/****** Object:  StoredProcedure [dbo].[USP_GetPriceItem]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_GetPriceItem] 'CP001','JAOF001', 'JA020202004','Lesson'
CREATE   PROCEDURE [dbo].[USP_GetPriceItem]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@ItemCode	nvarchar(50),
	@UomCode	nvarchar(50) 
AS
begin
 select  top 1  PriceAfterTax, PriceBeforeTax, [DefaultPrice]
 from (
		select   isnull(isnull(t1.PriceAfterTax, t3.DefaultPrice),0) [DefaultPrice] 
			  ,isnull( t1.PriceBeforeTax,0)  PriceBeforeTax
			  ,isnull( t1.PriceAfterTax,0)  PriceAfterTax
			  
		from M_PriceList  t1 with (nolock) 
		 --left join M_ItemUOM t2 with (nolock) on t1.ItemCode = t2.ItemCode
		left join M_Item t3 with (nolock) on t3.ItemCode = t1.ItemCode 
		--and t3.UOMCode= t2.UOMCode
		--left join M_UOM t5 with (nolock) on t2.UOMCode = t5.UOMCode 
		--left join M_Tax t6  with (nolock) on t6.CompanyCode = t1.CompanyCode  and t6.TaxCode = t1.SalesTaxCode
		where 1=1  
			--and isnull(t3.PriceAfterTax,  0) >0 'CP001','JAOF001', 'BAL010001','Viên'
			and (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
			and (t1.UOMCode = @UomCode  or ISNULL(@UomCode, '') = '')   
			and (t1.StoreId = @StoreId  or ISNULL(@StoreId, '') = '')   
		 union all

		  select 0 PriceAfterTax, 0 PriceBeforeTax, isnull(DefaultPrice,0) DefaultPrice
		  from M_Item where  (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
			AND (ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  ) as tmp
   order by DefaultPrice desc
end 
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetRemainingPromoQuantity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC USP_GetRemainingPromoQuantity 'CP001', 'JAOF002', 'PRCP00100000008'
-- =============================================
CREATE PROCEDURE [dbo].[USP_GetRemainingPromoQuantity]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT SUM(ISNULL(L.Quantity,0)) AS Quantity
	FROM T_SalesLine L 
	INNER JOIN T_SalesHeader H ON H.TransId = L.TransId
	WHERE L.CompanyCode = @CompanyCode
		AND H.IsCanceled = 'N'
		AND H.[Status] = 'C'
		--ISNULL(L.PromoType,'') = 'Fixed Quantity' AND 
		AND ISNULL(L.PromoId,'') like '%' + @PromoId + '%' --AND         -- Dien ma promotionID
		--H.TransId = '' AND					-- Lay Qty tru dan vao field remain theo tranID
		AND H.StoreId = @StoreId						-- Lay Qty theo ma cua hang
	--GROUP BY  H.StoreId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetStorageByStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetStoreByUser] 'admin'
CREATE PROCEDURE [dbo].[USP_GetStorageByStore]
	 
	@CompanyCode	nvarchar(50),
	 @StoreId nvarchar(50)
AS
BEGIN
     select distinct t1.*  
	from M_Storage t1 with (nolock)  
	left join M_Store t3 with (nolock)  on t3.WhsCode = t1.WhsCode 
	where t3.CompanyCode = @CompanyCode  and t3.StoreId = @StoreId



 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetStoreAreaCapacity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_GetStoreAreaCapacity]
	 

	@CompanyCode	nvarchar(50)	,
		@StoreId	nvarchar(50)
AS	
	select * from M_StoreArea where StoreAreaId in (
	select distinct StoreAreaId from M_StoreCapacity with (nolock) 
 
    WHERE CompanyCode = @CompanyCode AND StoreId = @StoreId and Status ='A')

	--select * from M_StoreCapacity

	-- [USP_GetStoreAreaCapacity] 'CP001','JAOF001'
 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetStoreByUser]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetStoreByUser] 'admin'
CREATE PROCEDURE [dbo].[USP_GetStoreByUser]
	 
	@UserCode	nvarchar(50)
	 
AS
BEGIN
        select t1.* 
		from M_Store t1 with (nolock) 
		join M_UserStore t2 with (nolock) on t1.StoreId = t2.StoreId
		join M_User t3 with (nolock) on t2.UserId = t3.UserId

		where t3.Username = @UserCode and t1.Status = 'A' and t3.Status = 'A' 

 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetStoreByUserWhsType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetStoreByUserWhsType] 'admin'
CREATE PROCEDURE [dbo].[USP_GetStoreByUserWhsType]
	 
	@UserCode	nvarchar(50)
	 
AS
BEGIN
       select distinct t1.*, 1 isCheck , t5.MappingType
		from M_Store t1 with (nolock) 
		left join M_UserStore t2 with (nolock) on t1.StoreId = t2.StoreId
		left join M_User t3 with (nolock) on t2.UserId = t3.UserId 
		left join M_StoreWarehouse t5 with (nolock) on t1.WhsCode = t5.WareHouseID
		where  t3.Username = @UserCode
		union all
		select distinct t1.*, 0 isCheck, t5.MappingType
		from M_Store t1 with (nolock) 
		left join M_Warehouse t4 with (nolock) on t1.WhsCode = t4.WhsCode
		left join M_StoreWarehouse t5 with (nolock) on t5.WareHouseID = t4.WhsCode 
		where t1.StoreId not in (
			select distinct t1.StoreId
			from M_Store t1 with (nolock) 
			left join M_UserStore t2 with (nolock) on t1.StoreId = t2.StoreId
			left join M_User t3 with (nolock) on t2.UserId = t3.UserId 
			where  t3.Username = @UserCode
		)

 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_GetStoreListByUser]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_GetStoreByUser] 'admin'
CREATE PROCEDURE [dbo].[USP_GetStoreListByUser]
	 
	@UserCode	nvarchar(50)
	 
AS
BEGIN
        select distinct t1.[StoreId]
      ,t1.[CompanyCode]
      ,t1.[StoreName]
      ,t1.[StoreDescription]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,[ForeignName]
      ,[Address]
      ,[Phone]
      ,[DefaultCusId]
      ,[StoreGroupId]
      ,[ProvinceId]
      ,[DistrictId]
      ,[WardId]
      ,[CountryCode]
      ,[CustomField1]
      ,[CustomField2]
      ,[CustomField3]
      ,[CustomField4]
      ,[CustomField5]
      ,[AreaCode]
      ,[CurrencyCode]
      ,[StoreType]
      ,[ListType]
      ,[FormatConfigId]
      ,[WhsCode]
      ,[RegionCode]
     
      ,CONVERT( Nvarchar(MAX), t1.[PrintRemarks]) PrintRemarks , 1 isCheck
		from M_Store t1 with (nolock) 
		left join M_UserStore t2 with (nolock) on t1.StoreId = t2.StoreId
		left join M_User t3 with (nolock) on t2.UserId = t3.UserId 

		where  t3.Username = @UserCode
		union all
		select distinct t1.[StoreId]
      ,t1.[CompanyCode]
      ,t1.[StoreName]
      ,t1.[StoreDescription]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,[ForeignName]
      ,[Address]
      ,[Phone]
      ,[DefaultCusId]
      ,[StoreGroupId]
      ,[ProvinceId]
      ,[DistrictId]
      ,[WardId]
      ,[CountryCode]
      ,[CustomField1]
      ,[CustomField2]
      ,[CustomField3]
      ,[CustomField4]
      ,[CustomField5]
      ,[AreaCode]
      ,[CurrencyCode]
      ,[StoreType]
      ,[ListType]
      ,[FormatConfigId]
      ,[WhsCode]
      ,[RegionCode]
     
      ,CONVERT( Nvarchar(MAX), t1.[PrintRemarks]) PrintRemarks , 0 isCheck
		from M_Store t1 with (nolock) 
		where t1.StoreId not in (
			select distinct t1.StoreId 
			from M_Store t1 with (nolock) 
			left join M_UserStore t2 with (nolock) on t1.StoreId = t2.StoreId
			left join M_User t3 with (nolock) on t2.UserId = t3.UserId 

			where  t3.Username = @UserCode
		)


		 

 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetSumaryHeaderDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_EOD_SummaryHeader] 'CP001', '1001' , '2021-10-25'
CREATE PROCEDURE [dbo].[USP_GetSumaryHeaderDate]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Date	Date
AS
begin 
	Declare @Status Nvarchar(50)
	Declare @StoreName Nvarchar(250)
	Declare @ChargableAmount Numeric(19,6)
	Declare @TotalAmount Numeric(19,6)
	Declare @TotalReceipt Numeric(19,6)
	Declare @AmountChange Numeric(19,6)
	Declare @TotalDiscountAmt Numeric(19,6)
	Declare @CompletedTotalQty Numeric(19,6)
	Declare @CompletedTotalAmt Numeric(19,6)
	Declare @CanceledTotalQty Numeric(19,6)
	Declare @CanceledTotalAmt Numeric(19,6)
	Declare @TransTotalQty Numeric(19,6)
	Declare @TransTotalAmt Numeric(19,6)
	Declare @Description Nvarchar(50) 

	SELECT
		--@Date AS Date,
		--@CompanyCode AS CompanyCode ,
		--@StoreId AS StoreId ,
		@StoreName = S.StoreName
	FROM M_Store S
	WHERE S.CompanyCode = @CompanyCode AND S.StoreId = @StoreId

	SELECT
		--@ChargableAmount ,
		--@TotalAmount ,
		@TotalReceipt = COUNT(*) , 
		--@AmountChange ,
		--@TotalDiscountAmt ,
		@CompletedTotalQty = COUNT(*),
		--@CompletedTotalAmt ,
		--@CanceledTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty ,
		@TransTotalQty = COUNT(*)
		--@TransTotalAmt 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'N'


	SELECT
		--@ChargableAmount = SUM(ISNULL(ChargableAmount,0)),
		@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(ChargableAmount,0)),
		@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty = COUNT(*)--,
		@CompletedTotalAmt = SUM(ISNULL(TotalPayable,0)) ,
		--@CanceledTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty ,
		--@TransTotalQty ,
		@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'N'


	SELECT
		--@ChargableAmount = SUM(ISNULL(ChargableAmount,0)),
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(ChargableAmount,0)),
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		@CanceledTotalQty = COUNT(*)
		--@CanceledTotalAmt ,
		--@CanceledTotalQty ,
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'C'


	SELECT
		--@ChargableAmount = SUM(ISNULL(ChargableAmount,0)),
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(ChargableAmount,0)),
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty = COUNT(*)
		--@CompletedTotalAmt ,
		@CanceledTotalAmt = SUM(ISNULL(TotalPayable,0)) 
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'C'


	SELECT
		@ChargableAmount = SUM(T_SalesPayment.CollectedAmount-ISNULL(T_SalesPayment.ChangeAmt,0)) ,
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		@AmountChange = SUM(ISNULL(T_SalesPayment.ChangeAmt,0)) 
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty = COUNT(*)
		--@CompletedTotalAmt ,
		--@CanceledTotalAmt = SUM(ISNULL(TotalPayable,0)) 
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader INNER JOIN T_SalesPayment ON T_SalesHeader.TransId = T_SalesPayment.TransId
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'C'

	SELECT
		@Status = ISNULL(Status, 'O')
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(T_SalesPayment.ChangeAmt,0)) 
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty = COUNT(*)
		--@CompletedTotalAmt ,
		--@CanceledTotalAmt = SUM(ISNULL(TotalPayable,0)) 
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM  T_EndDate 
	WHERE CONVERT(date, T_EndDate.Date ) =  CONVERT(date, @Date) and StoreId = @StoreId
		set @Description = FORMAT(@Date, 'yyMMdd')

	SELECT
		ISNULL(@Status, 'O') as Status,
		@Date AS Date,
		@CompanyCode AS CompanyCode ,
		 @Description as 'Description',
		@StoreId AS StoreId ,
		@StoreName AS StoreName,
		@ChargableAmount AS ChargableAmount ,
		@TotalAmount AS TotalAmount ,
		@TotalReceipt AS TotalReceipt ,
		@AmountChange AS AmountChange ,
		@TotalDiscountAmt AS TotalDiscountAmt ,
		@CompletedTotalQty AS CompletedTotalQty ,
		@CompletedTotalAmt AS CompletedTotalAmt ,
		@CanceledTotalQty AS CanceledTotalQty ,
		@CanceledTotalAmt AS CanceledTotalAmt ,
		@TransTotalQty AS TransTotalQty ,
		@TransTotalAmt AS TransTotalAmt
	
	




	--select distinct @Date Date, ISNULL(T6.Status, 'O') Status, @CompanyCode CompanyCode, @StoreId StoreId, t7.StoreName,
	--SUM(t3.ChargableAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS ChargableAmount 
	--, SUM(t2.TotalAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS TotalAmount, 

	--SUM(t2.TotalReceipt) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS TotalReceipt, 
	--SUM(t2.AmountChange)
	--OVER(PARTITION BY t1.StoreId, T1.companyCode) AS AmountChange,  
	-- SUM(t2.TotalDiscountAmt) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS TotalDiscountAmt,

	-- ISNULL( count(t2.TransId) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) AS CompletedTotalQty, 
	-- ISNULL( SUM(t2.TotalReceipt) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) AS CompletedTotalAmt, 
	-- ISNULL(count(t4.TransId)OVER(PARTITION BY t1.StoreId, T1.companyCode), 0)   AS CanceledTotalQty,
	-- ISNULL( SUM(t4.TotalReceipt) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) AS CanceledTotalAmt,
	-- ISNULL( count(t2.TransId) OVER(PARTITION BY t1.StoreId, T1.companyCode) + count(t4.TransId) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) as TransTotalQty ,
	-- ISNULL( SUM(t2.TotalAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode) + SUM(t4.TotalAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) as TransTotalAmt

	--from T_ShiftHeader t1 with(nolock)  
	--left join T_SalesHeader t2  with(nolock) on t1.ShiftId = t2.ShiftId  and t1.StoreId = t2.StoreId  and t2.Status = 'C' and t2.IsCanceled = 'N' 
	--left join T_SalesPayment t3 with(nolock) on t3.TransId = t2.TransId and t2.ShiftId = t3.ShiftId
	--left join T_SalesHeader t4  with(nolock) on t1.ShiftId = t4.ShiftId  and t1.StoreId = t4.StoreId  and t4.Status = 'C' and t2.IsCanceled = 'Y'
	--left join T_SalesPayment t5 with(nolock) on t4.TransId = t5.TransId and t4.ShiftId = t5.ShiftId
	--left join T_EndDate t6 with(nolock) on t6.CompanyCode = t1.CompanyCode and CONVERT(date, t6.Date) = CONVERT(date, @Date)
	--left join M_Store t7  with(nolock) on t1.CompanyCode = t7.CompanyCode and t1.StoreId = t7.StoreId
	--where t1.companyCode = @CompanyCode  and cONVERT(date, t1.CreatedOn ) =  CONVERT(date, @Date)


	--and CONVERT(date, t6.Date) = CONVERT(date, @Date) and t6.StoreId = @StoreId and t6.CompanyCode=@CompanyCode
	--t1.ShiftId = @ShiftId
	
 end

 --select * from T_ShiftHeader


 --select * from T_ShiftHeader where ShiftId = 'ST00012012010009'
 --select * from T_ShiftLine
GO
/****** Object:  StoredProcedure [dbo].[USP_GetSumaryHeaderShift]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetSumaryHeaderShift] 'CP001', '', '100121082000003'
CREATE   PROCEDURE [dbo].[USP_GetSumaryHeaderShift]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50) ,
	@ShiftId	nvarchar(50) 
	
 
AS
begin
	select distinct t1.* ,  t7.StoreName, t1.DeviceId CounterId,
	SUM(t3.ChargableAmount) OVER(PARTITION BY t1.ShiftId, T1.companyCode) AS ChargableAmount 
	, SUM(t2.TotalAmount) OVER(PARTITION BY t1.ShiftId, T1.companyCode) AS TotalAmount, 

	SUM(t2.TotalReceipt) OVER(PARTITION BY t1.ShiftId, T1.companyCode) AS TotalReceipt, 
	SUM(t2.AmountChange)
	OVER(PARTITION BY t1.ShiftId, T1.companyCode) AS AmountChange,  
	 SUM(t2.TotalDiscountAmt) OVER(PARTITION BY t1.ShiftId, T1.companyCode) AS TotalDiscountAmt,

	 ISNULL( count(t2.TransId) OVER(PARTITION BY t1.ShiftId, T1.companyCode), 0) AS CompletedTotalQty, 
	 ISNULL( SUM(t2.TotalReceipt) OVER(PARTITION BY t1.ShiftId, T1.companyCode), 0) AS CompletedTotalAmt, 
	 ISNULL(count(t4.TransId)OVER(PARTITION BY t1.ShiftId, T1.companyCode), 0)   AS CanceledTotalQty,
	 ISNULL( SUM(t4.TotalReceipt) OVER(PARTITION BY t1.ShiftId, T1.companyCode), 0) AS CanceledTotalAmt,
	 ISNULL( count(t2.TransId) OVER(PARTITION BY t1.ShiftId, T1.companyCode) + count(t4.TransId) OVER(PARTITION BY t1.ShiftId, T1.companyCode), 0) as TransTotalQty ,
	 ISNULL( SUM(t2.TotalAmount) OVER(PARTITION BY t1.ShiftId, T1.companyCode) + SUM(t4.TotalAmount) OVER(PARTITION BY t1.ShiftId, T1.companyCode), 0) as TransTotalAmt

	from T_ShiftHeader t1 with(nolock)  
	left join T_SalesHeader t2  with(nolock) on t1.ShiftId = t2.ShiftId  and t1.StoreId = t2.StoreId  and t2.Status = 'C' and t2.IsCanceled = 'N' and t1.CompanyCode = t2.CompanyCode
	left join T_SalesPayment t3 with(nolock) on t3.TransId = t2.TransId  and t1.CompanyCode = t2.CompanyCode and t2.ShiftId = t3.ShiftId
	left join T_SalesHeader t4  with(nolock) on t1.ShiftId = t4.ShiftId  and t1.StoreId = t4.StoreId  and t4.Status = 'C' and t2.IsCanceled = 'Y'  and t1.CompanyCode = t2.CompanyCode
	left join T_SalesPayment t5 with(nolock) on t5.TransId = t4.TransId   and t1.CompanyCode = t2.CompanyCode and t4.ShiftId = t5.ShiftId
	left join M_Store t7  with(nolock) on t1.CompanyCode = t7.CompanyCode and t1.StoreId = t7.StoreId
	where t1.companyCode = @CompanyCode  and t1.ShiftId = @ShiftId 
	--and t2.Status = 'C' and t2.IsCanceled = 'N' 
	and t1.StoreId = @StoreId
	
 end

 --select * from T_ShiftHeader

 --select * from T_ShiftHeader where ShiftId = '100121082000003'
 --select * from T_ShiftLine

 
GO
/****** Object:  StoredProcedure [dbo].[USP_GetTransIdByOMSId]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_S_EndDateSummary] 'CP001', '1001' ,'2021-11-23'
create PROCEDURE [dbo].[USP_GetTransIdByOMSId]
	@CompanyCode	nvarchar(50),
	@OMSId	nvarchar(50) 
	 
AS	
Begin
	
	select TransId from T_SalesHeader with (nolock)
	 where OMSId = @OMSId and  CompanyCode= @CompanyCode

end
GO
/****** Object:  StoredProcedure [dbo].[USP_I_LoyaltyPointTransfer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_LoyaltyPointTransfer] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@SendCustomerId nvarchar(50),
	@SendCustomerName nvarchar(250),
	@SendCardNumber nvarchar(50),
	@RecivedCustomerId nvarchar(50),
	@RecivedCustomerName nvarchar(250),
	@RecivedCardNumber nvarchar(50),
	@TransDate datetime,
	@TransType nvarchar(50),
	@TransPoint decimal(19, 6),
	@CreatedBy nvarchar(50),
	@CreatedOn datetime,
	@ModifiedBy nvarchar(50),
	@ModifiedOn datetime,
	@CalcStatus char(1),
	@ExpireDate date
AS
BEGIN TRANSACTION
	BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Point transfer successfully.' -- Error message
		DECLARE @RCount int = 0

		DECLARE @PointRatio decimal(19, 6)
		DECLARE @AmtRatio decimal(19, 6)

		SELECT TOP 1 @PointRatio = Point, @AmtRatio = Amount
		FROM S_LoyaltyPointConvert
		WHERE CompanyCode = @CompanyCode AND StoreId = @StoreId
		ORDER BY ModifiedOn DESC, CreatedOn DESC

		DECLARE @TransId nvarchar(50)
		SET @TransId = (SELECT dbo.[fnc_AutoGenDocumentCode] ('PT', @CompanyCode,  @StoreId))

		-- insert loyalty out point
		INSERT INTO [dbo].[T_LoyaltyLog]
			([TransId]
			,[CompanyCode]
			,[StoreId]
			,[CustomerId]
			,[CustomerName]
			,[CardNumber]
			,[TransDate]
			,[TransType]
			,[InPoint]
			,[OutPoint]
			,[InAmt]
			,[OutAmt]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[CalcStatus]
			,[ExpireDate]
			,[PointRatio]
			,[AmountRatio])
		VALUES
			(@TransId
			,@CompanyCode
			,@StoreId
			,@SendCustomerId
			,@SendCustomerName
			,@SendCardNumber
			,@TransDate
			,@TransType
			,0
			,@TransPoint
			,0
			,0
			,@CreatedBy
			,@CreatedOn
			,@ModifiedBy
			,@ModifiedOn
			,@CalcStatus
			,@ExpireDate
			,@PointRatio
			,@AmtRatio
			)

		DECLARE @CurentPoint decimal(19,6); 
		SET @CurentPoint = (SELECT TOP 1 RewardPoints FROM M_Customer
		WHERE CustomerId = @SendCustomerId AND CompanyCode = @CompanyCode)
		UPDATE M_Customer SET RewardPoints = @CurentPoint - @TransPoint WHERE CustomerId = @SendCustomerId AND CompanyCode = @CompanyCode

		-- insert loyalty in point
		INSERT INTO [dbo].[T_LoyaltyLog]
			([TransId]
			,[CompanyCode]
			,[StoreId]
			,[CustomerId]
			,[CustomerName]
			,[CardNumber]
			,[TransDate]
			,[TransType]
			,[InPoint]
			,[OutPoint]
			,[InAmt]
			,[OutAmt]
			,[CreatedBy]
			,[CreatedOn]
			,[ModifiedBy]
			,[ModifiedOn]
			,[CalcStatus]
			,[ExpireDate]
			,[PointRatio]
			,[AmountRatio])
		VALUES
			(@TransId
			,@CompanyCode
			,@StoreId
			,@RecivedCustomerId
			,@RecivedCustomerName
			,@RecivedCardNumber
			,@TransDate
			,@TransType
			,@TransPoint
			,0
			,0
			,0
			,@CreatedBy
			,@CreatedOn
			,@ModifiedBy
			,@ModifiedOn
			,@CalcStatus
			,@ExpireDate
			,@PointRatio
			,@AmtRatio
			)

		SET @CurentPoint = (SELECT TOP 1 RewardPoints FROM M_Customer
		WHERE CustomerId = @RecivedCustomerId AND CompanyCode = @CompanyCode)
		UPDATE M_Customer SET RewardPoints = @CurentPoint + @TransPoint WHERE CustomerId = @RecivedCustomerId AND CompanyCode = @CompanyCode


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_BankTerminal]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_M_BankTerminal]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@Id nvarchar(50),
	@CounterId nvarchar(50),
	@PaymentMethod nvarchar(50), 
	@CreatedBy nvarchar(50),
	@Status nvarchar(50),
	@TerminalIdDefault nvarchar(50),
	@CustomF1 nvarchar(50) ,
	@CustomF2 nvarchar(50) ,
	@CustomF3 nvarchar(50) ,
	@CustomF4 nvarchar(50) ,
	@CustomF5 nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[M_BankTerminal]
           ( CompanyCode ,
			Id ,
			CounterId ,
			PaymentMethod , 
			CreatedBy , CreatedOn,
			Status ,
			TerminalIdDefault ,
			CustomF1  ,
			CustomF2  ,
			CustomF3  ,
			CustomF4  ,
			CustomF5  
           )
     VALUES
           (@CompanyCode ,
			@Id ,
			@CounterId ,
			@PaymentMethod , 
			@CreatedBy , GETDATE(),
			@Status ,
			@TerminalIdDefault ,
			@CustomF1  ,
			@CustomF2  ,
			@CustomF3  ,
			@CustomF4  ,
			@CustomF5  
		   )

	 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_BOMHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_BOMHeader]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemName	nvarchar(250)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT 
	INTO M_BOMHeader
           ([ItemCode]
           ,[CompanyCode]
           ,[ItemName]
           ,[Quantity]
           ,[UOMCode]
           ,[CreatedBy]
           ,[Status]) 
	VALUES ( @ItemCode,@CompanyCode,@ItemName,@Quantity,@UOMCode,@CreatedBy,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_BOMLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_BOMLine]  
	@BOMId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemName	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@IsOption	bit,
	@OptionGroup	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)		,
	@TriggerStatus	nvarchar(50)	,
	@TriggerSystem	nvarchar(250)
AS	INSERT 
	INTO M_BOMLine
           ([BOMId]
           ,[ItemCode]
           ,[CompanyCode]
           ,[ItemName]
           ,[UOMCode]
           ,[Quantity]
		   ,IsOption
		   ,OptionGroup
           ,[CreatedBy]
           ,[Status]
		   ,TriggerStatus
		   ,TriggerSystem
		   ) 
	VALUES ( @BOMId,@ItemCode,@CompanyCode,@ItemName,@UOMCode,@Quantity,@IsOption, @OptionGroup, @CreatedBy,@Status,@TriggerStatus, @TriggerSystem)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Company]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Company]
	@CompanyCode	nvarchar(50)	,
	@CompanyName	nvarchar(250)	,
	@ForeignName	nvarchar(250)	,
	@ShortName	nvarchar(250)	,
	@Logo	nvarchar(250)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(250)	,
	@TaxCode	nvarchar(250)	,
	@Email	nvarchar(150)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT 
	INTO M_Company
           ([CompanyCode]
           ,[CompanyName]
		   	,ForeignName ,
			ShortName,
	Logo ,
	Address	 ,
	Phone	 ,
	TaxCode	 ,
	Email	 
           ,[CreatedBy]
           ,[Status]) 
	VALUES ( @CompanyCode,@CompanyName,	@ForeignName , @ShortName,
	@Logo ,
	@Address	 ,
	@Phone	 ,
	@TaxCode	 ,
	@Email	, @CreatedBy,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Control]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Control]
	@ControlId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ControlName	nvarchar(250)	,
	@FunctionId	nvarchar(50)	,
	@Status	char(1)	,
	@Action	nvarchar(50)	,
	@ControlType	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@OrderNum int null,
	@Require bit null,
	@OptionName	nvarchar(50)	,
	@OptionKey	nvarchar(50)	,
	@OptionValue	nvarchar(50),
	@Custom1	nvarchar(50)	,
	@Custom2	nvarchar(50)
AS	INSERT 
	INTO M_Control
           ([ControlId]
           ,[CompanyCode]
           ,[ControlName]
           ,[FunctionId]
           ,[Status]
           ,[Action]
           ,[ControlType]
           ,[CreatedBy],
		   OrderNum,
		   Require ,
			OptionName	,
			OptionKey,
			OptionValue,
			Custom1,
			Custom2) 
	VALUES ( @ControlId,@CompanyCode,@ControlName,@FunctionId,@Status,@Action,@ControlType,@CreatedBy, @OrderNum,
	@Require ,
	@OptionName	,
	@OptionKey,
	@OptionValue,
	@Custom1,
	@Custom2)
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Currency]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_I_M_Currency] 
@CurrencyCode	nvarchar(50),
@CurrencyName	nvarchar(250),
@Rounding	nvarchar(50),
@CreatedBy	nvarchar(50), 
@Status	char(1),
@MaxValue	decimal(19, 6),
@RoundingPaymentDif	decimal(19, 6) = null
	 
AS	
insert into M_Currency  (CurrencyCode,
CurrencyName,
Rounding,
CreatedBy,
CreatedOn,
Status,
MaxValue, RoundingPaymentDif
) values (
@CurrencyCode,
@CurrencyName,
@Rounding,
@CreatedBy,
GETDATE() ,
@Status,
@MaxValue, @RoundingPaymentDif
)
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Customer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Customer]
	@CompanyCode	nvarchar(50)	,
	@CustomerId	nvarchar(50)	,
	@CustomerGrpId	nvarchar(50)	,
	@CustomerName	nvarchar(250)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@DOB	date	,
	@JoinedDate	datetime	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	,
	@CusType	char(1),
	@Gender	nvarchar(50) = null,
	@Email	nvarchar(50) = null,
	@CardNo nvarchar(50)  = null,
	@CustomF1 nvarchar(250)  = null,
	@CustomF2 nvarchar(250)  = null,
	@CustomF3 nvarchar(250)  = null,
	@CustomF4 nvarchar(250)  = null,
	@CustomF5 nvarchar(250)  = null,
		@DoNotAccumPoints bit = null,
	@CustomerRank nvarchar(50) = null,
	@RewardPoints decimal(19,6) = null,
	@CustomerRankName nvarchar(50) = null,
	@CreatedByStore	nvarchar(50)	= null

AS	INSERT INTO [dbo].[M_Customer]
           ([CompanyCode]
           ,[CustomerId]
           ,[CustomerGrpId]
           ,[CustomerName]
           ,[Address]
           ,[Phone]
           ,[DOB]
           ,[JoinedDate]
           ,[CreatedBy]
           ,[Status], CusType, Gender, Email, CardNo,
		   CustomF1 ,
			CustomF2 ,
			CustomF3,
			CustomF4 ,
			CustomF5 ,
			DoNotAccumPoints,
			CustomerRank,
			RewardPoints,
			CustomerRankName
		   )
     VALUES
           (@CompanyCode
           ,@CustomerId
           ,@CustomerGrpId
           ,@CustomerName
           ,@Address
           ,@Phone
           ,@DOB
           ,@JoinedDate
           ,@CreatedBy
           ,@Status, @CusType, @Gender, @Email, @CardNo,
		    @CustomF1 ,
			@CustomF2 ,
			@CustomF3,
			@CustomF4 ,
			@CustomF5,
			@DoNotAccumPoints,
			@CustomerRank,
			@RewardPoints,
			@CustomerRankName)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_CustomerGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_CustomerGroup]
	@CompanyCode	nvarchar(50)	,
	@CusGrpId	nvarchar(50)	,
	@CusGrpDesc	nvarchar(250)	, 
	@CreatedBy	nvarchar(50)	,  
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_CustomerGroup]
           ([CompanyCode]
           ,[CusGrpId]
           ,[CusGrpDesc]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@CompanyCode
           ,@CusGrpId
           ,@CusGrpDesc
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_DeliverryInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_I_M_DeliverryInfor]
	@CustomerId	nvarchar(150)	,
	@CompanyCode	nvarchar(50)	,
	@DeliveryPartner nvarchar(250) NULL,
	@DeliveryId nvarchar(150) NULL,
	@Phone	nvarchar(50)	,
	@Fax	nvarchar(150),
	@Email	nvarchar(150)	,
	@TaxCode	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Name	nvarchar(250)	, 
	@Remarks	nvarchar(MAX)	,
	@Status	char(1)																	
AS	
INSERT INTO [dbo].M_DeliverryInfor
           (Id,
CustomerId,
CompanyCode,DeliveryPartner, DeliveryId,
Phone,
Fax,
Email,
TaxCode,
Name,
Address,
Remarks,
Status
)
     VALUES
           (NewId(),
@CustomerId,
@CompanyCode,@DeliveryPartner,@DeliveryId,
@Phone,
@Fax,
@Email,
@TaxCode,
@Name,
@Address,
@Remarks,
@Status
)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Denomination]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Denomination]
	 @Currency  nvarchar(50)
	,@Name nvarchar(250)
	,@Description  nvarchar(250)
	,@Value  nvarchar(50)
	,@Status char(1)
	,@Remarks nvarchar(250),
	@ShowOnPayment bit = null,
	@ShowOnDiscount bit = null
AS	

INSERT INTO [dbo].M_Denomination
           (Id,
			Currency,
			Name,
			Description,
			Value,
			Status,
			Remarks, ShowOnPayment, ShowOnDiscount
)
     VALUES
           (NEWID(),
		   @Currency,
			@Name,
			@Description,
			@Value,
			@Status,
			@Remarks, @ShowOnPayment, @ShowOnDiscount)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Employee]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Employee]
	@EmployeeId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@EmployeeName	nvarchar(250)	,
	@Position	nvarchar(50)	,
	@Status	char(1)	,
	@CreatedBy	nvarchar(50)	
AS	INSERT INTO [dbo].[M_Employee]
           ([EmployeeId]
           ,[CompanyCode]
           ,[EmployeeName]
           ,[Position]
           ,[Status]
           ,[CreatedBy])
     VALUES
           (@EmployeeId
           ,@CompanyCode
           ,@EmployeeName
           ,@Position
           ,@Status
           ,@CreatedBy
           )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_EmployeeStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_EmployeeStore]
	@EmployeeId	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@FromDate	datetime	,
	@ToDate	datetime	
AS	INSERT INTO [dbo].[M_EmployeeStore]
           ([EmployeeId]
           ,[StoreId]
           ,[FromDate]
           ,[ToDate])
     VALUES
           (@EmployeeId
           ,@StoreId
           ,@FromDate
           ,@ToDate)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ExchangeRate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_I_M_ExchangeRate]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@Date	datetime,
	@Currency	nvarchar(50),
	@Rate	decimal(19, 6),
	@Status	nvarchar(10)
	
AS	INSERT 
	INTO M_ExchangeRate
           (Id,
CompanyCode,
StoreId,
Date,
Currency,
Rate,
Status
) 
	VALUES ( @Id,
@CompanyCode,
@StoreId,
@Date,
@Currency,
@Rate,
@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Function]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Function]
	@FunctionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@Name	nvarchar(250)	,
	@Url	nvarchar(250)	,
	@Icon	nvarchar(250)	,
	@ParentId	nvarchar(50)	,
	@Status	char(1)	,
	@CreatedBy	nvarchar(50)	,
	@LicenseType	nvarchar(50),
	@OrderNo int,
	@isShowMenu int,
	@isParent int
AS	INSERT INTO [dbo].[M_Function]
           ([FunctionId]
           ,[CompanyCode]
           ,[Name]
           ,[Url]
		   ,Icon
           ,[ParentId]
           ,[Status]
           ,[CreatedBy]
           ,[LicenseType],OrderNo, isShowMenu, isParent )
     VALUES
           (@FunctionId
           ,@CompanyCode
           ,@Name
           ,@Url
		   ,@Icon
           ,@ParentId
           ,@Status
           ,@CreatedBy
           ,@LicenseType, 
		   @OrderNo, @isShowMenu,@isParent )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Holiday]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_I_M_Holiday]
	 
	@CompanyCode	nvarchar(50)	,
	@HldCode	nvarchar(250)	,
	@StrDate	datetime,
	@EndDate	datetime,
	@Rmrks	nvarchar(50)	, 
	@Status	char(1)	
	 
AS	INSERT INTO [dbo].M_Holiday
           ([CompanyCode] , HldCode
           ,StrDate
           ,EndDate 
           ,Rmrks,[Status])
     VALUES
           ( @CompanyCode
           ,@HldCode
           ,@StrDate, @EndDate, @Rmrks
           ,@Status
          
           )

--		   StrDate	datetime	Checked
--EndDate	datetime	Checked
--Rmrks	nvarchar(150)	Checked
--Status	nvarchar(1)	Checked
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Image]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Image]
	@Id	uniqueidentifier,
		@CompanyCode	nvarchar(50),
	@Type	nvarchar(15),
	@Num	nvarchar(250),
	@Image	nvarchar(max),
	@Description	nvarchar(250),
	@CreateOn	datetime,
	@CustomerPhone	nvarchar(250),
	@CustomerName	nvarchar(250)
AS	

	begin
	--declare @str varchar(MAX);
	--set @str = '3qAAAA=='; 
	--;

		Insert into M_Image (Id, CompanyCode,  Type, Num, Image, Description, CreateOn, CustomerPhone, CustomerName)
		values (NEWID(), @CompanyCode, @Type, @Num, cast(N'' as xml).value('xs:base64Binary(sql:variable("@Image"))', 'varbinary(Max)') , @Description, GETDATE(), @CustomerPhone, @CustomerName )
	end


	--select * from M_Image
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_InvoiceInfor]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_I_M_InvoiceInfor]
	@CustomerId	nvarchar(150)	,
	@CompanyCode	nvarchar(50)	,
	@Phone	nvarchar(50)	,
	@Fax	nvarchar(150),
	@Email	nvarchar(150)	,
	@TaxCode	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Name	nvarchar(250)	, 
	@Remarks	nvarchar(MAX)	,
	@Status	char(1)																	
AS	
INSERT INTO [dbo].M_InvoiceInfor
           (Id,
CustomerId,
CompanyCode,
Phone,
Fax,
Email,
TaxCode,
Name,
Address,
Remarks,
Status
)
     VALUES
           (NewId(),
@CustomerId,
@CompanyCode,
@Phone,
@Fax,
@Email,
@TaxCode,
@Name,
@Address,
@Remarks,
@Status
)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Item]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Item]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ProductId	nvarchar(50)	,
	@VariantId	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@CapacityValue	int	,
	@ItemGroupId	nvarchar(50)	,
	@SalesTaxCode	nvarchar(50)	,
	@PurchaseTaxCode	nvarchar(50)	,
	@ItemName	nvarchar(250)	,
	@ItemDescription	nvarchar(250)	,
	@ItemCategory_1	nvarchar(50)	,
	@ItemCategory_2	nvarchar(50)	,
	@ItemCategory_3	nvarchar(50)	,
	@ForeignName	nvarchar(250)	,
	@InventoryUOM	nvarchar(50)	,
	@ImageURL	nvarchar(250)	,
	@ImageLink	nvarchar(250)	,
	@MCId	nvarchar(50)	,
	@CustomField1	nvarchar(250)	,
	@CustomField2	nvarchar(250)	,
	@CustomField3	nvarchar(250)	,
	@CustomField4	nvarchar(250)	,
	@CustomField5	nvarchar(250)	,
	@CustomField6	nvarchar(250)	,
	@CustomField7	nvarchar(250)	,
	@CustomField8	nvarchar(250)	,
	@CustomField9	nvarchar(250)	,
	@CustomField10	nvarchar(250)	,
	@DefaultPrice	decimal(19, 6)	,
	@IsSerial	char(1)	,
	@IsBOM	char(1)	,
	@IsVoucher	char(1)	,
	@ValidFrom	date	,
	@ValidTo	date	,
	@RejectPayType nvarchar(50)	, @Returnable bit = null		, @VoucherCollection nvarchar(50) = null	, @IsPriceTime bit = null	
AS	INSERT INTO [dbo].[M_Item]
           ([ItemCode]
           ,[CompanyCode]
           ,[ProductId]
           ,[VariantId]
           ,[CreatedBy]
           ,[Status]
           ,[ItemGroupId]
           ,[SalesTaxCode]
           ,[PurchaseTaxCode]
           ,[ItemName]
           ,[ItemDescription]
           ,[ItemCategory_1]
           ,[ItemCategory_2]
           ,[ItemCategory_3]
           ,[ForeignName]
           ,[InventoryUOM]
           ,[ImageURL]
           ,[ImageLink]
           ,[MCId]
           ,[CustomField1]
           ,[CustomField2]
           ,[CustomField3]
           ,[CustomField4]
           ,[CustomField5]
           ,[CustomField6]
           ,[CustomField7]
           ,[CustomField8]
           ,[CustomField9]
           ,[CustomField10]
           ,[DefaultPrice]
           ,[IsSerial]
           ,[IsBOM], isVoucher
           ,[ValidFrom]
           ,[ValidTo]
		   ,CapacityValue, RejectPayType, Returnable, VoucherCollection, IsPriceTime)
     VALUES
           (@ItemCode
           ,@CompanyCode
           ,@ProductId
           ,@VariantId
           ,@CreatedBy
           ,@Status
           ,@ItemGroupId
           ,@SalesTaxCode
           ,@PurchaseTaxCode
           ,@ItemName
           ,@ItemDescription
           ,@ItemCategory_1
           ,@ItemCategory_2
           ,@ItemCategory_3
           ,@ForeignName
           ,@InventoryUOM
           ,@ImageURL
           ,@ImageLink
           ,@MCId
           ,@CustomField1
           ,@CustomField2
           ,@CustomField3
           ,@CustomField4
           ,@CustomField5
           ,@CustomField6
           ,@CustomField7
           ,@CustomField8
           ,@CustomField9
           ,@CustomField10
           ,@DefaultPrice
           ,@IsSerial
           ,@IsBOM , @IsVoucher
           ,@ValidFrom
           ,@ValidTo
		   ,@CapacityValue, @RejectPayType, @Returnable,  @VoucherCollection, @IsPriceTime)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ItemGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ItemGroup]
	@IGId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@IGName	nvarchar(250)	,
	@IGDescription	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ItemGroup]
           ([IGId]
           ,[CompanyCode]
           ,[IGName]
           ,[IGDescription]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@IGId
           ,@CompanyCode
           ,@IGName
           ,@IGDescription
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ItemSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ItemSerial]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(250)	,
	@Quantity	decimal(19, 6)	,
	@ExpDate	date	,
	@StoredDate	date	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ItemSerial]
           ([CompanyCode]
           ,[ItemCode]
           ,[SerialNum]
           ,[Quantity]
           ,[ExpDate]
           ,[StoredDate]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@CompanyCode
           ,@ItemCode
           ,@SerialNum
           ,@Quantity
           ,@ExpDate
           ,@StoredDate
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ItemSerialStock]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ItemSerialStock]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@SerialNum	nvarchar(250)	,
	@StockQty	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ItemSerialStock]
           ([CompanyCode]
           ,[ItemCode]
           ,[SLocId]
           ,[SerialNum]
           ,[StockQty]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@CompanyCode
           ,@ItemCode
           ,@SLocId
           ,@SerialNum
           ,@StockQty
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ItemStoreListing]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_I_M_ItemStoreListing] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@Status	nvarchar(50),
	@CreatedBy	nvarchar(50) 
 
AS	
insert into M_ItemStoreListing  (CompanyCode,
StoreId,
ItemCode,
Status,
CreatedBy,
CreatedOn 
) values (
@CompanyCode,
@StoreId,
@ItemCode,
@Status,
@CreatedBy,
GETDATE()  
)
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ItemUOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ItemUOM]
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@Factor	decimal(19, 6)	,
	@BarCode	nvarchar(250)	,
	@QRCode	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ItemUOM]
           ([ItemCode]
           ,[UOMCode]
           ,[Factor]
           ,[BarCode]
           ,[QRCode]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@ItemCode
           ,@UOMCode
           ,@Factor
           ,@BarCode
           ,@QRCode
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_KeyCap]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_I_M_KeyCap] 
	@Id	nvarchar(50),
	@Name	nvarchar(250),
	@Description	nvarchar(50),
	@Status	nvarchar(50)  
AS	
insert into M_KeyCap  (Id,
Name,
Description, 
Status 
) values (
@Id,
@Name,
@Description, 
@Status 
)
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_MerchandiseCategory]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_MerchandiseCategory]
	@MCId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@MCHier	nvarchar(50)	,
	@MCName	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	,
	@isShow	bit	,
	@OrderNum	int
AS	INSERT INTO [dbo].[M_MerchandiseCategory]
           ([MCId]
           ,[CompanyCode]
           ,[MCHier]
           ,[MCName]
           ,[CreatedBy]
           ,[Status],isShow, OrderNum)
     VALUES
           (@MCId
           ,@CompanyCode
           ,@MCHier
           ,@MCName
           ,@CreatedBy
           ,@Status, @isShow, @OrderNum)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_MovementType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_I_M_MovementType]
	 
	@Code	nvarchar(50)	,
	@Name	nvarchar(50)	,
	@Description	nvarchar(50),
	@Status	nvarchar(5)	
AS	INSERT INTO [dbo].[M_MovementType]
           (Code
           ,Name
           ,Description
           ,Status )
     VALUES
           (@Code
           ,@Name
           ,@Description
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_PaymentMethod]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_PaymentMethod]
	@PaymentCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@PaymentDesc	nvarchar(250)	,
	@ShortName	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	,
	@AccountCode	nvarchar(50)	,
	@IsRequireRefnum bit, @AllowChange bit,  @PaymentType	nvarchar(250)
	,@ForfeitCode	nvarchar(50)=null	,@RejectReturn bit =null,@RejectVoid bit =null,@RejectExchange bit =null,
	@EODApply  bit =null, @EODCode	nvarchar(50)=null, @AllowRefund	bit=null, @Currency  nvarchar(50)=null,
	@RequireTerminal  bit=null, @VoucherCategory	nvarchar(250)=null

AS	INSERT INTO [dbo].[M_PaymentMethod]
           ([PaymentCode]
           ,[CompanyCode]
           ,[PaymentDesc]  ,ShortName 
           ,[CreatedBy]
           ,[Status]
           ,[AccountCode], IsRequireRefnum, PaymentType, ForfeitCode ,RejectReturn  ,RejectVoid,RejectExchange, EODApply,  EODCode , AllowRefund, Currency, RequireTerminal, VoucherCategory  )
     VALUES
           (@PaymentCode
           ,@CompanyCode
           ,@PaymentDesc,  @ShortName
           ,@CreatedBy
           ,@Status
           ,@AccountCode, @IsRequireRefnum, @PaymentType,  @ForfeitCode ,@RejectReturn  ,@RejectVoid ,@RejectExchange, @EODApply,  @EODCode, @AllowRefund, @Currency, @RequireTerminal, @VoucherCategory )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_PaymentMethodMapping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_PaymentMethodMapping] @CompanyCode nvarchar(50), @PaymentCode	nvarchar(150), @FatherId nvarchar(150), @CustomF1 nvarchar(500), @CustomF2	nvarchar(500), @CustomF3	nvarchar(500), @CustomF4	nvarchar(500), @CustomF5	nvarchar(500), @CustomF6	nvarchar(500), @Status	nvarchar(50) AS  begin  INSERT INTO [dbo].M_PaymentMethodMapping ([CompanyCode], [PaymentCode], FatherId, CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, CustomF6 ,[Status] ) VALUES  (@CompanyCode, @PaymentCode, @FatherId, @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, @CustomF6, @Status ) end 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Permission]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Permission]
	@CompanyCode	nvarchar(50)	,
	@PermissionId	nvarchar(50)	,
	@RoleId	nvarchar(50)	,
	@FunctionId	nvarchar(50)	,
	@ControlId	nvarchar(50)	,
	@Permissions	nvarchar(50)	,
	@Status	char(1)	,
	@CreatedBy	nvarchar(50)	
AS
begin

  --update  M_Role set SyncLocalStatus = 'U' where RoleId = @RoleId and CompanyCode= @CompanyCode;

  DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

  INSERT INTO [dbo].[M_Permission]
           ([CompanyCode]
           ,[PermissionId]
           ,[RoleId]
           ,[FunctionId]
           ,[ControlId]
           ,[Permissions]
           ,[Status]
           ,[CreatedBy])
     VALUES
           (@CompanyCode
           ,@PermissionId
           ,@RoleId
           ,@FunctionId
           ,@ControlId
           ,@Permissions
           ,@Status
           ,@CreatedBy)

	UPDATE M_Role SET StatusGuid = @StatusGuid WHERE RoleId = @RoleId AND CompanyCode = @CompanyCode;
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_Role', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store

end
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_PrepaidCard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_PrepaidCard]
	@CompanyCode	nvarchar(50)	,
	@PrepaidCardNo	nvarchar(50)	,
	@MainBalance	numeric(19, 2)	,
	@SubBalance	numeric(19, 2)	,
	@StartDate	date	,
	@Duration	int	,
	@Status	char(1)	,
	@CreatedBy	nvarchar(50)
AS	INSERT 
	INTO M_PrepaidCard(
           CompanyCode	,
			PrepaidCardNo	,
			MainBalance,
			SubBalance,
			StartDate	,
			Duration,
			Status	,
			CreatedBy, CreatedOn) 
	VALUES ( @CompanyCode	,
			@PrepaidCardNo	,
			@MainBalance,
			@SubBalance,
			@StartDate	,
			@Duration,
			@Status	,
			@CreatedBy,
			GETDATE())
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_PriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_PriceList] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@PriceListId	nvarchar(50)	,
	@PriceBeforeTax	decimal(19, 6)	,
	@PriceAfterTax	decimal(19, 6)	,
	@ValidFrom	datetime	,
	@ValidTo	datetime	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_PriceList]
           ( 
           [CompanyCode]
           ,[StoreId]
           ,[ItemCode]
           ,[UOMCode]
           ,[BarCode]
		   ,PriceListId
           ,[PriceBeforeTax]
           ,[PriceAfterTax]
           ,[ValidFrom]
           ,[ValidTo]
           ,[CreatedBy]
           ,[Status])
     VALUES
           ( @CompanyCode
           ,@StoreId
           ,@ItemCode
           ,@UOMCode
           ,@BarCode
		   ,@PriceListId
           ,@PriceBeforeTax
           ,@PriceAfterTax
           ,@ValidFrom
           ,@ValidTo
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_PriceListName]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_I_M_PriceListName] 
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@PriceListId	nvarchar(50)	,
	@PriceListName	nvarchar(250)
	 
AS	INSERT INTO [dbo].[M_PriceListName]
           ( 
           [CompanyCode]
           ,Id
           ,PriceListId
           ,PriceListName
            )
     VALUES
           ( @CompanyCode
           
           ,@Id
           ,@PriceListId
           ,@PriceListName)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_PriorityPriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_I_M_PriorityPriceList]
	 
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@CusGrpId	nvarchar(50),
	@CusGrpDesc	nvarchar(250),
	@PriceListId	nvarchar(50),
	@Priority	int,
	@Status	char(10),
	 
	@CreatedBy	nvarchar(50)
 
	
AS	insert into [M_PriorityPriceList]
   (	Id ,
	CompanyCode ,
	CusGrpId	 ,
	CusGrpDesc	 ,
	PriceListId ,
	Priority ,
	Status ,
	CreatedOn,
	CreatedBy )
   values(	@Id ,
	@CompanyCode ,
	@CusGrpId	 ,
	@CusGrpDesc	 ,
	@PriceListId ,
	@Priority ,
	@Status ,
	GETDATE(),
	@CreatedBy )

      
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Product]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Product]
	@CompanyCode	nvarchar(50)	,
	@ProductId	nvarchar(50)	,
	@ProductName	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_Product]
           ([CompanyCode]
           ,[ProductId]
           ,[ProductName]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@CompanyCode
           ,@ProductId
           ,@ProductName
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption1]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption1]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption1]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption10]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption10]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption10]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption2]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption2]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption2]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption3]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption3]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption3]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption4]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption4]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption4]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption5]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption5]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption5]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption6]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption6]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption6]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption7]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption7]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption7]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption8]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption8]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption8]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductOption9]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductOption9]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductOption9]
           ([OptionId]
           ,[CompanyCode]
           ,[OptionName]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@OptionId
           ,@CompanyCode
           ,@OptionName
           ,@Description
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ProductVariant]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_ProductVariant]
	@ProductId	nvarchar(50)	,
	@VariantId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@Option1	nvarchar(50)	,
	@Option2	nvarchar(50)	,
	@Option3	nvarchar(50)	,
	@Option4	nvarchar(50)	,
	@Option5	nvarchar(50)	,
	@Option6	nvarchar(50)	,
	@Option7	nvarchar(50)	,
	@Option8	nvarchar(50)	,
	@Option9	nvarchar(50)	,
	@Option10	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_ProductVariant]
           ([ProductId]
           ,[VariantId]
           ,[CompanyCode]
           ,[Option1]
           ,[Option2]
           ,[Option3]
           ,[Option4]
           ,[Option5]
           ,[Option6]
           ,[Option7]
           ,[Option8]
           ,[Option9]
           ,[Option10]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@ProductId
           ,@VariantId
           ,@CompanyCode
           ,@Option1
           ,@Option2
           ,@Option3
           ,@Option4
           ,@Option5
           ,@Option6
           ,@Option7
           ,@Option8
           ,@Option9
           ,@Option10
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Reason]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Reason]
	
	@CompanyCode	nvarchar(50),
	@Value	nvarchar(50)	,
	@Language	nvarchar(250)	,
	@Remark	nvarchar(250)	,
	@Type	nvarchar(250)	,
	 @Status nvarchar(50),
	@CreatedBy	nvarchar(50)
	
AS	INSERT INTO [dbo].[M_Reason]
           (Id, [CompanyCode], Value, Language, Remark, Type
            ,[Status]
           ,[CreatedBy], CreatedOn
           )
     VALUES
           (NEWID()
           ,@CompanyCode
           ,@Value, @Language, @Remark, @Type
           ,@Status,@CreatedBy, GETDATE()
           )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Role]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Role]
	 @RoleId uniqueidentifier
	,@CompanyCode  nvarchar(50)
	,@RoleName nvarchar(250)
	,@Description  nvarchar(250)
	,@CreatedBy  nvarchar(50)
	,@DefaultScreen  nvarchar(250)
	,@Status char(1)
AS	
BEGIN

	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	INSERT INTO [dbo].[M_Role]
			   ([RoleId]
			   ,[CompanyCode]
			   ,[RoleName]
			   ,[Description]
			   ,[CreatedBy]
			   ,DefaultScreen
			   ,[Status]
			   ,[StatusGuid])
		 VALUES
			   (@RoleId
			   ,@CompanyCode 
			   ,@RoleName 
			   ,@Description 
			   ,@CreatedBy ,@DefaultScreen
			   ,@Status 
			   ,@StatusGuid)

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_Role', StoreId, @StatusGuid, GETDATE(), 'I' FROM M_Store WHERE [Status] = 'A'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Serial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_I_M_Serial]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@Name	nvarchar(50),
	@Prefix	nvarchar(50),
	@Serial	nvarchar(150),
	@ExpiryDate	datetime,
	@Status	nvarchar(50),
	@Stock	decimal(19, 6),
	@Custom1	nvarchar(50),
	@Custom2	nvarchar(50),
	@Custom3	nvarchar(50) ,
	@CreatedBy	nvarchar(150)
 

AS	Insert into [dbo].[M_Serial](
	Id	 ,
	CompanyCode ,
	Name ,
	Prefix	 ,
	Serial	 ,
	ExpiryDate	 ,
	Status ,
	Stock ,
	Custom1 ,
	Custom2 ,
	Custom3 ,
	CreatedBy, CreatedDate )
values(@Id	 ,
	@CompanyCode ,
	@Name ,
	@Prefix	 ,
	@Serial	 ,
	@ExpiryDate	 ,
	@Status ,
	@Stock ,
	@Custom1 ,
	@Custom2 ,
	@Custom3 ,
	@CreatedBy, GETDATE() )
   
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Shipping]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[USP_I_M_Shipping]
	@CompanyCode nvarchar(50) ,
	@ShippingCode nvarchar(150) ,
	@ShippingName nvarchar(550) ,
	@Description nvarchar(550) ,
	@Remark nvarchar(1500) ,
	@CreatedBy nvarchar(50) , 
	@DocDate datetime =NULL,
	@DocDueDate datetime = NULL,
	@Status nvarchar(50) = NULL,
	@CustomF1 nvarchar(250) = NULL,
	@CustomF2 nvarchar(250) = NULL,
	@CustomF3 nvarchar(250) = NULL,
	@CustomF4 nvarchar(250) = NULL,
	@CustomF5 nvarchar(250) = NULL,
	@CustomF6 nvarchar(250) = NULL,
	@CustomF7 nvarchar(250) = NULL,
	@CustomF8 nvarchar(250) = NULL,
	@CustomF9 nvarchar(250) = NULL,
	@CustomF10 nvarchar(250) = NULL,
	@Amount1 decimal(19, 6) = NULL,
	@Amount2 decimal(19, 6) = NULL,
	@Amoun3 decimal(19, 6) = NULL,
	@Amoun4 decimal(19, 6) = NULL,
	@Amount5 decimal(19, 6) = NULL,
	@LicensePlate nvarchar(50) = NULL,
	@Driver nvarchar(50) = NULL
AS
begin
   insert into M_Shipping ([CompanyCode]
      ,[ShippingCode]
      ,[ShippingName]
      ,[Description]
      ,[Remark]
      ,[CreatedBy]
      ,[CreatedOn] 
      ,[DocDate]
      ,[DocDueDate]
      ,[Status]
      ,[CustomF1]
      ,[CustomF2]
      ,[CustomF3]
      ,[CustomF4]
      ,[CustomF5]
      ,[CustomF6]
      ,[CustomF7]
      ,[CustomF8]
      ,[CustomF9]
      ,[CustomF10]
      ,[Amount1]
      ,[Amount2]
      ,[Amoun3]
      ,[Amoun4]
      ,[Amount5]
      ,[LicensePlate]
      ,[Driver])
	  values ( @CompanyCode  ,
	@ShippingCode  ,
	@ShippingName  ,
	@Description  ,
	@Remark  ,
	@CreatedBy  ,
	GETDATE()  , 
	@DocDate ,
	@DocDueDate  ,
	@Status  ,
	@CustomF1  ,
	@CustomF2  ,
	@CustomF3  ,
	@CustomF4  ,
	@CustomF5  ,
	@CustomF6  ,
	@CustomF7  ,
	@CustomF8  ,
	@CustomF9  ,
	@CustomF10  ,
	@Amount1  ,
	@Amount2  ,
	@Amoun3  ,
	@Amoun4  ,
	@Amount5  ,
	@LicensePlate  ,
	@Driver  )
end 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_ShortcutKeyboard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesInvoice( 'SOCP001JAOF00100000452;', 'CP001')
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_M_ShortcutKeyboard]
	-- Add the parameters for the stored procedure here
	 @Id	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	,
	@Name	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@Key1	nvarchar(50)	,
	@Key2	nvarchar(50)	,
	@Key3	nvarchar(50)	,
	@Key4	nvarchar(50)	,
	@Key5	nvarchar(50)	,
	@Custom1	nvarchar(50)	,
	@Custom2	nvarchar(50)	,
	@Custom3	nvarchar(50)	,
	@FunctionCode	nvarchar(50)	,
	@Window	nvarchar(50)	,
	@Status	nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	insert into M_ShortcutKeyboard  (
		Id,
		CompanyCode,
		Name,
		Description,
		Key1,
		Key2,
		Key3,
		Key4,
		Key5,
		Custom1,
		Custom2,
		Custom3,
		FunctionCode,
		Window,
		Status
	)
	values
	(
		@Id,
		@CompanyCode,
		@Name,
		@Description,
		@Key1,
		@Key2,
		@Key3,
		@Key4,
		@Key5,
		@Custom1,
		@Custom2,
		@Custom3,
		@FunctionCode,
		@Window,
		@Status
	)
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Storage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Storage]
	@SLocId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@WhsCode	nvarchar(50)	,
	@SlocName	nvarchar(50)	,
	@IsNegative bit,
	@CreatedBy	nvarchar(50)	,
	
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_Storage]
           ([SLocId]
           ,[CompanyCode]
		   ,SlocName
		   ,IsNegative
           ,[WhsCode]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@SLocId
           ,@CompanyCode
		   ,@SlocName
		   ,@IsNegative
           ,@WhsCode
           ,@CreatedBy
           ,@Status)
		    
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Store]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Store]
	@StoreId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@StoreDescription	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	,
	@ForeignName	nvarchar(250)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@DefaultCusId	nvarchar(50)	,
	@StoreGroupId	nvarchar(50)	,
	@ProvinceId	nvarchar(50)	,
	@DistrictId	nvarchar(50)	,
	@WardId	nvarchar(50)	,
	@CountryCode	nvarchar(50)	,
	@CustomField1	nvarchar(250)	,
	@CustomField2	nvarchar(250)	,
	@CustomField3	nvarchar(250)	,
	@CustomField4	nvarchar(250)	,
	@CustomField5	nvarchar(250)	,
	@AreaCode	nvarchar(50)	,
	@CurrencyCode	nvarchar(50)	,
	@StoreType	nvarchar(50)	,
	@ListType	nvarchar(50)	,
	@FormatConfigId	nvarchar(50)	,
	@WhsCode	nvarchar(50),
	@RegionCode	nvarchar(50),
	@PrintRemarks ntext = null
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();
	
	INSERT INTO [dbo].[M_Store]
           ([StoreId]
           ,[CompanyCode]
           ,[StoreName]
           ,[StoreDescription]
           ,[CreatedBy]
           ,[Status]
           ,[ForeignName]
           ,[Address]
           ,[Phone]
           ,[DefaultCusId]
           ,[StoreGroupId]
           ,[ProvinceId]
           ,[DistrictId]
           ,[WardId]
           ,[CountryCode]
           ,[CustomField1]
           ,[CustomField2]
           ,[CustomField3]
           ,[CustomField4]
           ,[CustomField5]
           ,[AreaCode]
           ,[CurrencyCode]
           ,[StoreType]
           ,[ListType]
           ,[FormatConfigId]
           ,[WhsCode],
		   [RegionCode], PrintRemarks
		   ,[StatusGuid])
     VALUES
           (@StoreId
           ,@CompanyCode
           ,@StoreName
           ,@StoreDescription
           ,@CreatedBy
           ,@Status
           ,@ForeignName
           ,@Address
           ,@Phone
           ,@DefaultCusId
           ,@StoreGroupId
           ,@ProvinceId
           ,@DistrictId
           ,@WardId
           ,@CountryCode
           ,@CustomField1
           ,@CustomField2
           ,@CustomField3
           ,@CustomField4
           ,@CustomField5
           ,@AreaCode
           ,@CurrencyCode
           ,@StoreType
           ,@ListType
           ,@FormatConfigId
           ,@WhsCode, @RegionCode, @PrintRemarks
		   ,@StatusGuid)

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn])
	SELECT DISTINCT @CompanyCode, 'M_Store', @StoreId, @StatusGuid, GETDATE()

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_StoreArea]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_I_M_StoreArea]
	@CompanyCode	nvarchar(50)	,
	@StoreAreaId	nvarchar(50)	,
	@StoreAreaName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@StoreAreaType	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	
AS	INSERT INTO [dbo].M_StoreArea
           (CompanyCode ,
			StoreAreaId ,
			StoreAreaName	 ,
			Description	 ,
			StoreAreaType ,
			CreatedBy	 , 
			Status	 )
     VALUES
           (@CompanyCode ,
			@StoreAreaId ,
			@StoreAreaName	 ,
			@Description	 ,
			@StoreAreaType ,
			@CreatedBy	 , 
			@Status	 )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_StoreCapacity]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_I_M_StoreCapacity]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50),
    @MaxCapacity	int,
	@CreatedBy	nvarchar(50),
	@Status	char(1)	
AS	INSERT INTO [dbo].[M_StoreCapacity]
           ([CompanyCode]
           ,StoreId
           ,StoreAreaId
		   ,TimeFrameId
		   ,MaxCapacity
		   ,CreatedBy
           ,[Status])
     VALUES
           (@CompanyCode
		   ,@StoreId
		   ,@StoreAreaId
           ,@TimeFrameId
		   ,@MaxCapacity
           ,@CreatedBy
           ,@Status)

GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_StoreCurrency]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_I_M_StoreCurrency]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@Currency	nvarchar(50),
	@Status nvarchar(50)
AS	
Insert into M_StoreCurrency(
Id	 ,
	CompanyCode ,
	StoreId ,
Currency ,
Status 
)
values(
@Id	,
	@CompanyCode	 ,
	@StoreId	 ,
	@Currency	 ,
	@Status  
)
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_StoreGroup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_StoreGroup]
	@StoreGroupId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreGroupName	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)																		
AS	INSERT INTO [dbo].[M_StoreGroup]
           ([StoreGroupId]
           ,[CompanyCode]
           ,[StoreGroupName]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@StoreGroupId
           ,@CompanyCode
           ,@StoreGroupName
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_StorePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_StorePayment]
	@StoreId	nvarchar(50)	,
	@PaymentCode	nvarchar(50)	,
	@isShow	bit,
	@AllowMix bit,
	@OrderNum	int,
	@Status	char(1)																	
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();
	
	INSERT INTO [dbo].[M_StorePayment]
           ([StoreId]
           ,[PaymentCode] 
		   ,isShow, AllowMix
		   ,OrderNum
		   ,[Status]
		   ,[StatusGuid])
     VALUES
           (@StoreId
           ,@PaymentCode
		   ,@isShow, @AllowMix
		   ,@OrderNum
           ,@Status
		   ,@StatusGuid)

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT 'CP001', 'M_StorePayment', @StoreId, @StatusGuid, GETDATE(), 'I'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Tax]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Tax]
	@TaxCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@TaxName	nvarchar(50)	,
	@TaxPercent	decimal(19, 6)	,
	@TaxType	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)																	
AS	INSERT INTO [dbo].[M_Tax]
           ([TaxCode]
           ,[CompanyCode]
           ,[TaxName]
           ,[TaxPercent]
           ,[TaxType]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@TaxCode
           ,@CompanyCode
           ,@TaxName
           ,@TaxPercent
           ,@TaxType
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_TimeFrame]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_I_M_TimeFrame]

	@CompanyCode	nvarchar(50)	,
    @TimeFrameId	nvarchar(50)	,
	@StartTime	datetime,
	@EndTime	datetime	,
	@Status	nvarchar(50)	, 
	@CreatedBy	nvarchar(50)	 
 
AS	INSERT 
	INTO M_TimeFrame
           (  [CompanyCode]
           ,[TimeFrameId]
           ,[StartTime]
           ,[EndTime]
           ,[Status]
        
           ,[CreatedBy] , CreatedOn) 
	VALUES ( @CompanyCode,@TimeFrameId,@StartTime, @EndTime,@Status, @CreatedBy , GETDATE())
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_TransactionType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_TransactionType]
	@TransType	nvarchar(50)	,
	@Description	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)													
AS	INSERT INTO [dbo].[M_TransactionType]
           ([TransType]
           ,[Description]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@TransType
           ,@Description
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_UOM]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_UOM]
	@UOMCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@UOMName	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status nvarchar(50)
	,@AllowDecimal bit =null
	,@DecimalFormat nvarchar(150) =null
	,@ThousandFormat nvarchar(150) =null
	,@DecimalPlacesFormat nvarchar(150) =null
	,@CustomF1 nvarchar(250) =null
	,@CustomF2 nvarchar(250) =null
	,@CustomF3 nvarchar(250) =null
	,@CustomF4 nvarchar(250) =null
	,@CustomF5 nvarchar(250) =null
AS	INSERT INTO [dbo].[M_UOM]
           ([UOMCode]
           ,[CompanyCode]
           ,[UOMName]
           ,[CreatedBy]
           ,[Status]   
		   ,AllowDecimal
		   ,DecimalFormat
		   ,ThousandFormat
		   ,DecimalPlacesFormat
		   ,CustomF1
		   ,CustomF2
		   ,CustomF3
		   ,CustomF4
		   ,CustomF5
		   )
     VALUES
           (@UOMCode
           ,@CompanyCode
           ,@UOMName
           ,@CreatedBy
           ,@Status,
		   @AllowDecimal
		   ,@DecimalFormat
		   ,@ThousandFormat
		   ,@DecimalPlacesFormat
		   ,@CustomF1
		   ,@CustomF2
		   ,@CustomF3
		   ,@CustomF4
		   ,@CustomF5)


GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_User]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_I_M_User]
	@UserId	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	,
	@Username	nvarchar(50)	,
	@Password	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@FirstName	nvarchar(150)	,
	@LastName	nvarchar(150)	,
	@Position	nvarchar(150)	,
	@Status	char(1)	,
	@DefEmployee nvarchar(50) = null,
	@DefStore nvarchar(50) = null,
	@CustomF1 nvarchar(250) = null,
	@CustomF2 nvarchar(250) = null,
	@CustomF3 nvarchar(250) = null,
	@CustomF4 nvarchar(250) = null,
	@CustomF5 nvarchar(250) = null , 
	@QRBarcode nvarchar(250) = null
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	INSERT INTO [dbo].[M_User]
			   ([UserId]
			   ,[CompanyCode]
			   ,[Username]
			   ,[Password]
			   ,[CreatedBy]
			   ,FirstName 
				,LastName
				,Position	 
			   ,[Status], DefEmployee, DefStore
			   ,CustomF1
			   ,CustomF2
			   ,CustomF3
			   ,CustomF4
			   ,CustomF5
			   ,QRBarcode
			   ,StatusGuid)
		 VALUES
			   (@UserId
			   ,@CompanyCode
			   ,@Username
			   ,@Password
			   ,@CreatedBy
			   ,@FirstName ,
				@LastName	 ,
				@Position	 
			   ,@Status, @DefEmployee
				,@DefStore
			   ,@CustomF1
			   ,@CustomF2
			   ,@CustomF3
			   ,@CustomF4
			   ,@CustomF5
			   ,@QRBarcode
			   ,@StatusGuid)

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'I' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_UserLicense]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_UserLicense]
	@UserId	uniqueidentifier	,
	@LicenseId	nvarchar(50)	
AS	INSERT INTO [dbo].[M_UserLicense]
           ([UserId]
           ,[LicenseId]
           )
     VALUES
           (@UserId
           ,@LicenseId
           )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_UserRole]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_UserRole]
	@UserId	uniqueidentifier	,
	@RoleId	nvarchar(50)	
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	INSERT INTO [dbo].[M_UserRole]
           ([UserId]
           ,[RoleId]
           )
     VALUES
           (@UserId
           ,@RoleId
           )

	UPDATE M_User SET StatusGuid = @StatusGuid WHERE UserId = @UserId
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'I' FROM M_Store WHERE [Status] = 'A'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_UserStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_UserStore]
	@UserId	uniqueidentifier	,
	@StoreId	nvarchar(50)	
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	INSERT INTO [dbo].[M_UserStore]
           ([UserId]
           ,[StoreId]
           )
     VALUES
           (@UserId
           ,@StoreId
           )

	UPDATE M_User SET StatusGuid = @StatusGuid WHERE UserId = @UserId
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'I' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_M_Warehouse]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_M_Warehouse]
	@WhsCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@WhsName	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	,
	@WhsType	nvarchar(50)	, @DefaultSlocId	nvarchar(50)
AS	INSERT INTO [dbo].[M_Warehouse]
           ([WhsCode]
           ,[CompanyCode]
           ,[WhsName]
           ,[CreatedBy]
           ,[Status]
           ,[WhsType], DefaultSlocId)
     VALUES
           (@WhsCode
           ,@CompanyCode
           ,@WhsName
           ,@CreatedBy
           ,@Status
           ,@WhsType, @DefaultSlocId)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_PriceTime_PriceList]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_PriceTime_PriceList]
	-- Add the parameters for the stored procedure here
	@ItemCode NVARCHAR(50)
AS
BEGIN


	INSERT INTO  [M_PriceList]
			   ([CompanyCode]
			   ,[StoreId]
			   ,[ItemCode]
			   ,[UOMCode]
			   ,[BarCode]
			   ,[PriceListId]
			   ,[ValidFrom]
			   ,[ValidTo]
			   ,[PriceBeforeTax]
			   ,[PriceAfterTax]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[SyncDate]
			   ,[SyncSource] )
	SELECT 
	I.CompanyCode,
	S.StoreId,
	I.ItemCode,
	M.UOMCode,
	M.BarCode,
	'NP' PriceListId,
	'1900-01-01' ValidFrom,
	'2099-12-31' ValidTo,
	0 PriceBeforeTax,
	0 PriceAfterTax,
	'MWI' CreatedBy,
	GETDATE() CreatedOn,
	'MWI' ModifiedBy,
	GETDATE() ModifiedOn,
	'A' Status,
	GETDATE() SyncDate,
	'MWI' SyncSource
	FROM M_ItemUOM M INNER JOIN M_Item I ON M.ItemCode = I.ItemCode
			CROSS JOIN M_Store S 
	WHERE I.IsPriceTime = 1 AND I.ItemCode = @ItemCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_BarcodeSetup]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_BarcodeSetup]
	@Id [uniqueidentifier]  ,
	@CompanyCode [nvarchar](50) ,
	@Name [nvarchar](50)  ,
	@Prefix [nvarchar](50)  ,
	@PrefixPosition [int]  ,
	@PLUPosition [int]  ,
	@BarCodePosition [int]  ,
	@QtyPosition [int]  ,
	@AmountPosition [int]  ,
	@CheckPosition [int]  ,
	@CheckCode [nvarchar](50)  ,
	@CharSeparator [nvarchar](50)  ,
	@AmountCalculation [nvarchar](50)  ,
	@AmountValue int ,
	@WeightCalculation [nvarchar](50)  ,
	@WeightValue int  , 
	@Status [nvarchar](10)  ,
	@PrefixCheckLength int null, 
	@IsOrgPrice bit null, 
	@CustomF1 nvarchar(50) null,
	@CustomF2 nvarchar(50) null,
	@CustomF3 nvarchar(50) null,
	@CustomF4 nvarchar(50) null,
	@CustomF5 nvarchar(50) null

AS	INSERT INTO S_BarcodeSetup
           (Id  ,
			CompanyCode  ,
			Name    ,
			Prefix   ,
			PrefixPosition  ,
			PLUPosition,
			BarCodePosition  ,
			QtyPosition    ,
			AmountPosition  ,
			CheckPosition  ,
			CheckCode  ,
			CharSeparator  , AmountCalculation,  AmountValue, WeightCalculation, WeightValue,
			Status, PrefixCheckLength , 
	IsOrgPrice , 
	CustomF1  ,
	CustomF2  ,
	CustomF3  ,
	CustomF4 ,
	CustomF5  ) 
	VALUES ( @Id  ,
			@CompanyCode  ,
			@Name    ,
			@Prefix   ,
			@PrefixPosition  ,
			@PLUPosition,
			@BarCodePosition  ,
			@QtyPosition    ,
			@AmountPosition  ,
			@CheckPosition  ,
			@CheckCode  ,
			@CharSeparator  , @AmountCalculation,  @AmountValue, @WeightCalculation, @WeightValue,
			@Status,
			@PrefixCheckLength , 
	@IsOrgPrice , 
	@CustomF1  ,
	@CustomF2  ,
	@CustomF3  ,
	@CustomF4 ,
	@CustomF5  )
 




GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_CurrencyRoundingOff]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_CurrencyRoundingOff] 
	
	@CompanyCode	nvarchar(50), 
	@StoreId	nvarchar(50)	,
	@CurrencyCode	nvarchar(50)	,
	@RoundingOff	decimal(19, 6)	,
	 
	@CustomF1	nvarchar(50)	,
	@CustomF2	nvarchar(50)	,
	@CustomF3	nvarchar(50),
	@Status nvarchar(10)	
AS	


INSERT INTO [dbo].[S_CurrencyRoundingOff]
           (Id, [CompanyCode], StoreId
           ,CurrencyCode
           ,RoundingOff
           ,CustomF1
           ,CustomF2
           ,CustomF3
           ,Status
		   )
     VALUES
           (NewId(),
		  @CompanyCode, @StoreId
           ,@CurrencyCode
           ,@RoundingOff
           ,@CustomF1
           ,@CustomF2
           ,@CustomF3
           ,@Status
		   )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_DataSourceEdit]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_S_DataSourceEdit]
	 
	@CompanyCode	nvarchar(50),
	@DataSource	nvarchar(50)	,
	@Field	nvarchar(250)	,
	@CanEdit	bit,
	@CreatedBy	nvarchar(50) 
	 
AS
BEGIN
	 
INSERT INTO [dbo].[S_DataSourceEdit]
           ( [CompanyCode]
           ,DataSource
           ,Field
           ,CanEdit
           
           ,[CreatedBy]
           ,CreatedOn)
     VALUES
           ( 
           @CompanyCode, 
           @DataSource,
           @Field, 
           @CanEdit, 
           
           @CreatedBy, 
            GETDATE()
	)
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_FormatConfig]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_FormatConfig]
	@CompanyCode	nvarchar(50)	,
	@FormatName	nvarchar(150)	,
	@SetupType	nvarchar(50)	,
	@SetupCode	nvarchar(50)	,
	@DateFormat	nvarchar(50)	,
	@DecimalFormat	nvarchar(50)	,
	@ThousandFormat	nvarchar(50)	,
	@DecimalPlacesFormat	nvarchar(50)	,
	@QtyDecimalPlacesFormat	nvarchar(50)	,
	@PerDecimalPlacesFormat	nvarchar(50)	,
	@RateDecimalPlacesFormat	nvarchar(50)	,
	@Status	char(1)	,
	@CreatedBy	nvarchar(50)		
AS	INSERT INTO [dbo].[S_FormatConfig]
           ([CompanyCode]
		    ,[FormatName]
           ,[SetupType]
           ,[SetupCode]
           ,[DateFormat]
           ,[DecimalFormat]
           ,[ThousandFormat]
           ,[DecimalPlacesFormat], QtyDecimalPlacesFormat, PerDecimalPlacesFormat, RateDecimalPlacesFormat
           ,[Status]
           ,[CreatedBy])
     VALUES
           (@CompanyCode
		   ,@FormatName
           ,@SetupType
           ,@SetupCode
           ,@DateFormat
           ,@DecimalFormat
           ,@ThousandFormat
            ,@DecimalPlacesFormat, @QtyDecimalPlacesFormat, @PerDecimalPlacesFormat, @RateDecimalPlacesFormat
           ,@Status
           ,@CreatedBy)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_GeneralSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_GeneralSetting]
	@SettingId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@SettingName	nvarchar(250)	,
	@SettingValue	nvarchar(50)	,
	@SettingDescription	nvarchar(250)	,
	@ValueType	nvarchar(50)	,
	@Status	char(1)	,
	@CreatedBy	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@TokenExpired	decimal(19, 6)	,
	@DefaultValue	nvarchar(250),
	@CustomField1	nvarchar(250),
	@CustomField2	nvarchar(250),
	@CustomField3	nvarchar(250),
	@CustomField4	nvarchar(250),
	@CustomField5	nvarchar(250)
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	INSERT INTO [dbo].[S_GeneralSetting]
           ([SettingId]
           ,[CompanyCode]
           ,[SettingName]
           ,[SettingValue]
           ,[SettingDescription]
           ,[ValueType]
           ,[Status]
           ,[CreatedBy]
           ,[StoreId]
           ,[TokenExpired], DefaultValue, CustomField1, CustomField2, CustomField3, CustomField4, CustomField5
		   ,[StatusGuid])
     VALUES
           (@SettingId
           ,@CompanyCode
           ,@SettingName
           ,@SettingValue
           ,@SettingDescription
           ,@ValueType
           ,@Status
           ,@CreatedBy
           ,@StoreId
           ,@TokenExpired, @DefaultValue, @CustomField1, @CustomField2, @CustomField3, @CustomField4, @CustomField5
		   ,@StatusGuid)

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'S_GeneralSetting', StoreId, @StatusGuid, GETDATE(), 'I' FROM M_Store WHERE StoreId = @StoreId -- [Status] = 'A'

END

GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_GeneralSettingAuto]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 

-- [USP_S_M_EmployeeByStore] 'CP001', 'ST001' 
create PROCEDURE [dbo].[USP_I_S_GeneralSettingAuto]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50) 
AS
begin
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'CheckInOut', @CompanyCode,@StoreId, N'Check In/ Check out', N'true', N'Check In/ Check out', N'String', N'A', N'system', CAST(N'2021-06-08T10:10:24.607' AS DateTime), NULL, NULL, NULL, N'false');
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'CRMSystem', @CompanyCode,@StoreId, N'CRM system', N'Capi', N'CRM Source ', N'String', N'A', N'system', CAST(N'2021-04-05T17:03:20.073' AS DateTime), NULL, CAST(N'2021-06-07T16:15:13.863' AS DateTime), NULL, N'84123456789');
	 
	INSERT [dbo].[S_GeneralSetting]
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'CustomerDisplayMode', @CompanyCode,@StoreId, N'Display Customer', N'Link', N'Display Customer', N'String', N'A', N'system', CAST(N'2021-06-08T10:11:40.993' AS DateTime), NULL, CAST(N'2021-06-14T15:47:48.597' AS DateTime), NULL, N'Link');
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'CustomerYearOld',@CompanyCode,@StoreId, N'Customer Year Old', N'15', N'Customer Year Old', N'Number', N'A', N'system', CAST(N'2021-04-19T13:28:38.123' AS DateTime), NULL, CAST(N'2021-04-19T13:39:57.790' AS DateTime), NULL, NULL);
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'DisplayAmountBeforeEndShift', @CompanyCode,@StoreId, N'Show Amount End Shift', N'true', N'Show Amount End Shift', N'Boolean', N'A', N'system', CAST(N'2021-06-07T16:41:27.507' AS DateTime), NULL, NULL, NULL, N'true');
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'ExchangeItems', @CompanyCode,@StoreId, N'Show Exchange Item', N'FromOrder', N'Show Exchange Item', N'String', N'A', N'system', CAST(N'2021-06-07T16:38:56.497' AS DateTime), NULL, NULL, NULL, N'FromOrder');
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'Invoice',@CompanyCode,@StoreId, N'Invoice', N'true', N'Invoice', N'String', N'A', N'system', CAST(N'2021-06-08T10:26:02.660' AS DateTime), NULL, NULL, NULL, N'false');
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'ManageStock', @CompanyCode,@StoreId, N'Manage Stock', N'true', N'Manage Stock', N'Boolean', N'A', N'system', CAST(N'2021-06-07T16:35:48.440' AS DateTime), NULL, NULL, NULL, N'true');
	 

	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'ReturnItems',@CompanyCode,@StoreId, N'Show Return Item', N'FromOrder', N'Show Return Items', N'String', N'A', N'system', CAST(N'2021-06-07T16:38:15.377' AS DateTime), NULL, NULL, NULL, N'FromOrder');
	 
	INSERT [dbo].[S_GeneralSetting] 
	([SettingId], [CompanyCode], [StoreId], [SettingName], [SettingValue], [SettingDescription], [ValueType], [Status], [CreatedBy], [CreatedOn], [ModifiedBy], [ModifiedOn], [TokenExpired], [DefaultValue]) 
	VALUES (N'ShopMode', @CompanyCode,@StoreId, N'Shop Mode', N'FnB', N'Shop Mode', N'String', N'A', N'system', CAST(N'2021-06-09T13:50:59.277' AS DateTime), NULL, NULL, NULL, N'FnB');
	 
end 
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_License]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_I_S_License] 
	-- Add the parameters for the stored procedure here
	@LicenseId nvarchar(150),
    @CompanyCode nvarchar(50),
    @LicenseType nvarchar(50),
    @LicenseDesc nvarchar(550),
    @LicenseCode nvarchar(150),
    @ValidFrom datetime,
    @ValidTo datetime,
    @Status nvarchar(50),
    @LicenseAmt decimal(19,6),
    @LicenseRemain decimal(19,6),
    @Token nvarchar(MAX),
    @CustomF1 nvarchar(1500),
    @CustomF2 nvarchar(1500),
    @CustomF3 nvarchar(1500),
	@CustomF4 nvarchar(1500),
	@CustomF5 nvarchar(1500),
	@CreatedBy nvarchar(250),
	@NotifyShowOn int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 
    -- Insert statements for procedure here
	delete  [S_License] where [LicenseId] =@LicenseId

	INSERT INTO [dbo].[S_License]
           ([LicenseId]
			  ,[CompanyCode]
			  ,[LicenseType]
			  ,[LicenseDesc]
			  ,[LicenseCode]
			  ,[ValidFrom]
			  ,[ValidTo]
			  ,[Status]
			  ,[LicenseAmt]
			  ,[LicenseRemain] 
			  ,[Token]
			  ,[LicenseCusF1]
			  ,[LicenseCusF2]
			  ,[LicenseCusF3]
			  ,[LicenseCusF4]
			  ,[LicenseCusF5], CreatedBy, CreatedOn, NotifyShowOn)
     VALUES
           (@LicenseId,
           @CompanyCode,
           @LicenseType,
           @LicenseDesc,
           @LicenseCode,
           @ValidFrom,
           @ValidTo,
           @Status,
           @LicenseAmt,
           @LicenseRemain,
           @Token,
           @CustomF1,
           @CustomF2,
           @CustomF3, @CustomF4, @CustomF5, @CreatedBy, GETDATE(), @NotifyShowOn)


END

GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LicenseType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_LicenseType]
	@LicenseType	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@Description    nvarchar(50)	
AS	INSERT INTO [dbo].[S_LicenseType]
           ([LicenseType]
           ,[CompanyCode]
           ,[Description])
     VALUES
           (@LicenseType
           ,@CompanyCode
           ,@Description)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_Log]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_S_Log]
	
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Type	nvarchar(250)	,
	@TransId	nvarchar(50)	,
	@LineNum	nvarchar(250)	,
	@Action	nvarchar(150)	,
	@Time	 Datetime	,
	@Value	nvarchar(250)	,
	@Result	nvarchar(250)	,
	@CustomF1	nvarchar(MAX)	, 
	@CustomF2	nvarchar(MAX)	, 
	@CustomF3	nvarchar(MAX)	, 
	@CustomF4	nvarchar(MAX)	, 
	@CustomF5	nvarchar(MAX), 
	@CreatedBy nvarchar(250),
	@CustomF6	nvarchar(MAX) = null, 
	@CustomF7	nvarchar(MAX) = null, 
	@CustomF8	nvarchar(MAX) = null, 
	@CustomF9	nvarchar(MAX) = null, 
    @CustomF10	nvarchar(MAX) = null, 
    @TerminalId	nvarchar(150) = null
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--insert into S_Log
	--(  CompanyCode ,
	--StoreId ,
	--Type ,
	--TransId	 ,
	--LineNum	 ,
	--Action ,
	--Time ,
	--Value ,
	--Result ,
	--CustomF1	 , 
	--CustomF2 , 
	--CustomF3	 , 
	--CustomF4 , 
	--CustomF5 , CreatedBy, CreatedOn
    --TerminalId, CustomF6, CustomF7, CustomF8, CustomF9, CustomF10
	--)
	
	--values( 
	--	@CompanyCode ,
	--	@StoreId ,
	--	@Type ,
	--	@TransId	 ,
	--	@LineNum	 ,
	--	@Action ,
	--	@Time ,
	--	@Value ,
	--	@Result ,
	--	@CustomF1	 , 
	--	@CustomF2 , 
	--	@CustomF3	 , 
	--	@CustomF4 , 
	--	@CustomF5 , @CreatedBy, GETDATE(),
	-- @TerminalId, @CustomF6, @CustomF7, @CustomF8, @CustomF9, @CustomF10
	--)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LogByTableType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_LogByTableType] @CompanyCode nvarchar(50), @StoreId	nvarchar(150), @TransId	nvarchar(150), @TerminalId	nvarchar(150), 	@CreatedBy	nvarchar(150)= null
   ,  @Lines as S_LogTableType READONLY    AS  
begin  
  SET NOCOUNT ON;  
  if (select count(*) from @Lines) > 0  
		begin insert into S_Log (CompanyCode, StoreId, Type, TransId, LineNum , Action , Time , Value , Result , CustomF1	 ,  CustomF2 ,  CustomF3	 , CustomF4, CustomF5 , CreatedBy, CreatedOn, TerminalId, CustomF6, CustomF7, CustomF8, CustomF9, CustomF10		) 
		select  @CompanyCode , @StoreId , Type , @TransId , LineNum	 , Action , Time , Value , Result , CustomF1	 ,  CustomF2 ,  CustomF3	 ,  CustomF4 ,  CustomF5 , CreatedBy, GETDATE(), @TerminalId, CustomF6, CustomF7, CustomF8, CustomF9, CustomF10  from @Lines   
		end
	end
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LoyaltyCustomer]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_LoyaltyCustomer]
	-- Add the parameters for the stored procedure here
	@LoyaltyId nvarchar(50),
	@CompanyCode nvarchar(50),
	@LineNum int,
	@CustomerValue nvarchar(50),
	@CustomerType nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[S_LoyaltyCustomer]
           ([LoyaltyId]
           ,[CompanyCode]
           ,[LineNum]
           ,[CustomerValue]
           ,[CustomerType])
     VALUES
           (@LoyaltyId,
           @CompanyCode,
           @LineNum,
           @CustomerValue,
           @CustomerType)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LoyaltyEarn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_LoyaltyEarn] 
	-- Add the parameters for the stored procedure here
	@LoyaltyId nvarchar(50),
    @CompanyCode nvarchar(50),
    @LineNum int,
    @LineType nvarchar(50),
    @LineCode nvarchar(50),
    @LineName nvarchar(250),
    @LineUom nvarchar(50),
    @ConditionType nvarchar(50),
    @Condition_1 nvarchar(10),
    @Value_1 decimal(19,6),
    @Condition_2 nvarchar(50),
    @Value_2 decimal(19,6),
    @ValueType nvarchar(50),
    @EarnValue decimal(19,6),
	@MaxPointApply decimal(19,6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_LoyaltyEarn]
           ([LoyaltyId]
           ,[CompanyCode]
           ,[LineNum]
           ,[LineType]
           ,[LineCode]
           ,[LineName]
           ,[LineUom]
           ,[ConditionType]
           ,[Condition_1]
           ,[Value_1]
           ,[Condition_2]
           ,[Value_2]
           ,[ValueType]
           ,[EarnValue]
		   ,[MaxPointApply])
     VALUES
           (@LoyaltyId,
           @CompanyCode,
           @LineNum,
           @LineType,
           @LineCode,
           @LineName,
           @LineUom,
           @ConditionType,
           @Condition_1,
           @Value_1,
           @Condition_2,
           @Value_2,
           @ValueType,
           @EarnValue, 
		   @MaxPointApply)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LoyaltyExclude]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_LoyaltyExclude] 
	-- Add the parameters for the stored procedure here
    @CompanyCode nvarchar(50),
    @LineType nvarchar(50),
    @LineCode nvarchar(50),
    @LineName nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_LoyaltyExclude]
           ([CompanyCode]
           ,[LineType]
           ,[LineCode]
           ,[LineName])
     VALUES
           (@CompanyCode
           ,@LineType
           ,@LineCode
           ,@LineName)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LoyaltyHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_LoyaltyHeader]
	-- Add the parameters for the stored procedure here
	@LoyaltyId nvarchar(50),
	@CompanyCode nvarchar(50),
	@LoyaltyType int,
	@LoyaltyName nvarchar(250),
	@CustomerType char(1),
	@ValidDateFrom date,
	@ValidDateTo date,
	@ValidTimeFrom int,
	@ValidTimeTo int,
	@IsMon char(1),
	@IsTue char(1),
	@IsWed char(1),
	@IsThu char(1),
	@IsFri char(1),
	@IsSat char(1),
	@IsSun char(1),
	@TotalBuyFrom decimal(19, 6),
	@TotalBuyTo decimal(19, 6),
	@TotalEarnType nvarchar(50),
	@TotalEarnValue decimal(19, 6),
	@MaxTotalEarnValue decimal(19, 6),
	@CreatedBy nvarchar(50),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_LoyaltyHeader]
           ([LoyaltyId]
           ,[CompanyCode]
           ,[LoyaltyType]
           ,[LoyaltyName]
           ,[CustomerType]
           ,[ValidDateFrom]
           ,[ValidDateTo]
           ,[ValidTimeFrom]
           ,[ValidTimeTo]
           ,[IsMon]
           ,[IsTue]
           ,[IsWed]
           ,[IsThu]
           ,[IsFri]
           ,[IsSat]
           ,[IsSun]
           ,[TotalBuyFrom]
           ,[TotalBuyTo]
           ,[TotalEarnType]
		   ,[TotalEarnValue]
		   ,[MaxTotalEarnValue]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     VALUES
           (@LoyaltyId,
           @CompanyCode,
           @LoyaltyType,
           @LoyaltyName,
           @CustomerType,
           @ValidDateFrom,
           @ValidDateTo,
           @ValidTimeFrom,
           @ValidTimeTo,
           @IsMon,
           @IsTue,
           @IsWed,
           @IsThu,
           @IsFri,
           @IsSat,
           @IsSun,
           @TotalBuyFrom,
           @TotalBuyTo,
           @TotalEarnType,
		   @TotalEarnValue,
		   @MaxTotalEarnValue,
           @CreatedBy,
           GETDATE(),
           @CreatedBy,
           GETDATE(),
           @Status)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LoyaltyRank]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_I_S_LoyaltyRank]
	@CompanyCode 	nvarchar(10),
	@RankId	nvarchar(10),
	@RankName	nvarchar(50),
	@Factor	decimal(19, 6),
	@TargetAmount	decimal(19, 6),
	@Period	int,
	@Status	nvarchar(5)
	
AS	
begin
	INSERT INTO [dbo].[S_LoyaltyRank]
           (CompanyCode, RankId	 ,
	RankName	 ,
	Factor ,
	TargetAmount ,
	Period	 ,
	Status	)
     VALUES
           (@CompanyCode,	@RankId	 ,
	@RankName	 ,
	@Factor ,
	@TargetAmount ,
	@Period	 ,
	@Status	 )
end
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_LoyaltyStore]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_LoyaltyStore]
	-- Add the parameters for the stored procedure here
	@LoyaltyId nvarchar(50),
	@CompanyCode nvarchar(50),
	@LineNum int,
	@StoreValue nvarchar(50)
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[S_LoyaltyStore]
           ([LoyaltyId]
           ,[CompanyCode]
           ,[LineNum]
           ,[StoreValue]
           )
     VALUES
           (@LoyaltyId,
           @CompanyCode,
           @LineNum,
           @StoreValue
            )
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PersonalSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_PersonalSetting]
	@SettingId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@FunctionId	nvarchar(50)	,
	@SettingName	nvarchar(50)	,
	@SettingType	nvarchar(50)	,
	@SettingValue	nvarchar(50)	,
	@UserId	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@Status	char(1)	
AS	INSERT INTO [dbo].[S_PersonalSetting]
           ([SettingId]
           ,[CompanyCode]
           ,[FunctionId]
           ,[SettingName]
           ,[SettingType]
           ,[SettingValue]
           ,[UserId]
           ,[CreatedBy]
           ,[Status])
     VALUES
           (@SettingId
           ,@CompanyCode
           ,@FunctionId
           ,@SettingName
           ,@SettingType
           ,@SettingValue
           ,@UserId
           ,@CreatedBy
           ,@Status)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PromoBuy_del]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_PromoBuy_del] 
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
    @CompanyCode nvarchar(50),
    @LineNum int,
    @LineType nvarchar(50),
    @LineCode nvarchar(50),
    @LineName nvarchar(250),
    @LineUom nvarchar(50),
    @ValueType nvarchar(50),
    @Condition_1 nvarchar(10),
    @Value_1 decimal(19,6),
    @Condition_2 nvarchar(10),
    @Value_2 decimal(19,6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_PromoBuy]
           ([PromoId]
           ,[CompanyCode]
           ,[LineNum]
           ,[LineType]
           ,[LineCode]
           ,[LineName]
           ,[LineUom]
           ,[ValueType]
           ,[Condition_1]
           ,[Value_1]
           ,[Condition_2]
           ,[Value_2])
     VALUES
           (@PromoId,
           @CompanyCode,
           @LineNum,
           @LineType,
           @LineCode,
           @LineName,
           @LineUom,
           @ValueType,
           @Condition_1,
           @Value_1,
           @Condition_2,
           @Value_2)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PromoCustomer_del]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_PromoCustomer_del]
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
	@CompanyCode nvarchar(50),
	@LineNum int,
	@CustomerValue nvarchar(50),
	@CustomerType nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[S_PromoCustomer]
           ([PromoId]
           ,[CompanyCode]
           ,[LineNum]
           ,[CustomerValue]
           ,[CustomerType])
     VALUES
           (@PromoId,
           @CompanyCode,
           @LineNum,
           @CustomerValue,
           @CustomerType)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PromoGet_del]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_PromoGet_del] 
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
    @CompanyCode nvarchar(50),
    @LineNum int,
    @LineType nvarchar(50),
    @LineCode nvarchar(50),
    @LineName nvarchar(250),
    @LineUom nvarchar(50),
    @ConditionType nvarchar(50),
    @Condition_1 nvarchar(10),
    @Value_1 decimal(19,6),
    @Condition_2 nvarchar(50),
    @Value_2 decimal(19,6),
    @ValueType nvarchar(50),
    @GetValue decimal(19,6),
	@MaxAmtDis decimal(19,6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_PromoGet]
           ([PromoId]
           ,[CompanyCode]
           ,[LineNum]
           ,[LineType]
           ,[LineCode]
           ,[LineName]
           ,[LineUom]
           ,[ConditionType]
           ,[Condition_1]
           ,[Value_1]
           ,[Condition_2]
           ,[Value_2]
           ,[ValueType]
           ,[GetValue], MaxAmtDis)
     VALUES
           (@PromoId,
           @CompanyCode,
           @LineNum,
           @LineType,
           @LineCode,
           @LineName,
           @LineUom,
           @ConditionType,
           @Condition_1,
           @Value_1,
           @Condition_2,
           @Value_2,
           @ValueType,
           @GetValue, @MaxAmtDis)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PromoHeader_del]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_PromoHeader_del]
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
	@CompanyCode nvarchar(50),
	@PromoType int,
	@PromoName nvarchar(250),
	@CustomerType char(1),
	@ValidDateFrom date,
	@ValidDateTo date,
	@ValidTimeFrom int,
	@ValidTimeTo int,
	@IsMon char(1),
	@IsTue char(1),
	@IsWed char(1),
	@IsThu char(1),
	@IsFri char(1),
	@IsSat char(1),
	@IsSun char(1),
	@TotalBuyFrom decimal(19, 6),
	@TotalBuyTo decimal(19, 6),
	@TotalGetType nvarchar(50),
	@TotalGetValue decimal(19, 6),
	@MaxTotalGetValue decimal(19, 6),
	@IsCombine char(1),
	@IsVoucher bit,
	@CreatedBy nvarchar(50),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_PromoHeader]
           ([PromoId]
           ,[CompanyCode]
           ,[PromoType]
           ,[PromoName]
           ,[CustomerType]
           ,[ValidDateFrom]
           ,[ValidDateTo]
           ,[ValidTimeFrom]
           ,[ValidTimeTo]
           ,[IsMon]
           ,[IsTue]
           ,[IsWed]
           ,[IsThu]
           ,[IsFri]
           ,[IsSat]
           ,[IsSun]
           ,[TotalBuyFrom]
           ,[TotalBuyTo]
           ,[TotalGetType]
		   ,TotalGetValue
		   , MaxTotalGetValue
           ,[IsCombine]
		   , IsVoucher
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     VALUES
           (@PromoId,
           @CompanyCode,
           @PromoType,
           @PromoName,
           @CustomerType,
           @ValidDateFrom,
           @ValidDateTo,
           @ValidTimeFrom,
           @ValidTimeTo,
           @IsMon,
           @IsTue,
           @IsWed,
           @IsThu,
           @IsFri,
           @IsSat,
           @IsSun,
           @TotalBuyFrom,
           @TotalBuyTo,
           @TotalGetType,
		   @TotalGetValue,
		   @MaxTotalGetValue,
           @IsCombine,
		   @IsVoucher,
           @CreatedBy,
           GETDATE(),
           @CreatedBy,
           GETDATE(),
           @Status)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PromoSchema]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_PromoSchema]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
    @CompanyCode nvarchar(50),
    @SchemaName nvarchar(250),
    @CreatedBy nvarchar(50),
    @Status char(1),
	@AllowChain char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	INSERT INTO [dbo].[S_PromoSchema]
           ([SchemaId]
           ,[CompanyCode]
           ,[SchemaName]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status]
		   ,[AllowChain])
     VALUES
           (@SchemaId,
           @CompanyCode,
           @SchemaName,
           @CreatedBy,
           GETDATE(),
           @CreatedBy,
           GETDATE(),
           @Status,
		   @AllowChain)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_PromoStore_del]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_S_PromoStore_del]
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
	@CompanyCode nvarchar(50),
	@LineNum int,
	@StoreValue nvarchar(50)
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[S_PromoStore]
           ([PromoId]
           ,[CompanyCode]
           ,[LineNum]
           ,[StoreValue]
           )
     VALUES
           (@PromoId,
           @CompanyCode,
           @LineNum,
           @StoreValue
            )


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_QuickAccessMenu]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_S_QuickAccessMenu]
	@Id	int	,
	@Name	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@Url	nvarchar(250)	,
	@Icon	nvarchar(250)	,
	@Image	nvarchar(250)	,
	@OrderNum	int	,
	@Status	nvarchar(5)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into S_QuickAccessMenu 
	(   Id	,
		Name	,
		Description	,
		Url,
		Icon,
		Image	,
		OrderNum	,
		Status
	)
	
	values(
		@Id	,
		@Name	,
		@Description	,
		@Url,
		@Icon,
		@Image	,
		@OrderNum	,
		@Status
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_ReleaseNote]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   PROCEDURE [dbo].[USP_I_S_ReleaseNote]
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@Version	nvarchar(250)	,
	@Description	nvarchar(MAX)	 
    ,@ReleaseTime  Datetime 
    ,@ReleaseContent nvarchar(MAX)	
    ,@ReleaseContentForeign nvarchar(MAX)	
    ,@CustomF1 nvarchar(MAX)	
    ,@CustomF2 nvarchar(MAX)	
    ,@CustomF3 nvarchar(MAX)	
    ,@CustomF4 nvarchar(MAX)	
    ,@CustomF5 nvarchar(MAX)	
    ,@CreatedBy  nvarchar(250)
    ,@Status nvarchar(15)	


AS	INSERT INTO [dbo].S_ReleaseNote
           ( Id
      ,CompanyCode
      ,Version
      ,Description
      ,ReleaseTime
      ,ReleaseContent
      ,ReleaseContentForeign
      ,CustomF1
      ,CustomF2
      ,CustomF3
      ,CustomF4
      ,CustomF5
      ,Status
      ,CreatedBy
      ,CreatedOn )
     VALUES
           (@Id
      ,@CompanyCode
      ,@Version
      ,@Description
      ,@ReleaseTime
      ,@ReleaseContent
      ,@ReleaseContentForeign
      ,@CustomF1
      ,@CustomF2
      ,@CustomF3
      ,@CustomF4
      ,@CustomF5
      ,@Status
      ,@CreatedBy
      ,GETDATE()
           )


GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_SalesType]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_S_SalesType]
	@Code	nvarchar(50)	,
	@Description	nvarchar(50)	,
 
	@Status	char(1)	
AS	INSERT INTO [dbo].S_SalesType
           ([Code]
           ,[Description] 
           ,[Status])
     VALUES
           (@Code
           ,@Description
         
           ,@Status)


GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_SchemaLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_SchemaLine]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
    @CompanyCode nvarchar(50),
    @LineNum int,
    @PromoId nvarchar(50),
    @Description nvarchar(250),
    @Priority int,
    @IsApply char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here


	INSERT INTO [dbo].[S_SchemaLine]
           ([SchemaId]
           ,[CompanyCode]
           ,[LineNum]
           ,[PromoId]
           ,[Description]
           ,[Priority]
           ,[IsApply])
     VALUES
           (@SchemaId,
           @CompanyCode,
           @LineNum,
           @PromoId,
           @Description,
           @Priority,
           @IsApply)

	update S_PromoHeader set IsCombine = 'Y' where PromoId = @PromoId;

 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_StoreClient]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_I_S_StoreClient]
	@CompanyCode nvarchar(50),
	
	@StoreId	nvarchar(50),  
	@Id	nvarchar(50),  
	@FromDate	DateTime,  
	@ToDate	DateTime , 
	@Name	nvarchar(250),  
	@LocalIP	nvarchar(50),  
	@PublicIP	nvarchar(50),  
	@Custom1	nvarchar(250),  
	@Custom2	nvarchar(250),  
	@Custom3	nvarchar(250),  
	@Custom4	nvarchar(250),  
	@Custom5	nvarchar(250),  
	@PoleName	nvarchar(250) = null,  
	@PoleBaudRate	nvarchar(50)= null,  
	@PoleParity	nvarchar(50)= null,  
	@PoleDataBits	nvarchar(50)= null,  
	@PoleStopBits	nvarchar(50)= null,  
	@PoleHandshake	nvarchar(50)= null,  
	@PrintSize	nvarchar(50)= null,  
	@PrintName	nvarchar(50)= null,  
	@Status	nvarchar(10) 
AS
begin

	
	--Declare @SettingValue nvarchar(50) 
	--set @SettingValue =(select isnull(SettingValue, 
	--								(select isnull(SettingValue,'None') from S_DefaultGeneralSetting where  SettingId = N'DefaultCounter' and CompanyCode=@CompanyCode)) 
	--						from S_GeneralSetting where SettingId = N'DefaultCounter' and CompanyCode=@CompanyCode and StoreId=@StoreId)
	--if(isnull(@SettingValue, (select isnull(SettingValue,'None') from S_DefaultGeneralSetting where  SettingId = N'DefaultCounter' and CompanyCode=@CompanyCode)) = 'None')
	--begin
	--	set @PublicIP = null
	--end

	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

Insert into S_StoreClient (
 CompanyCode ,
	
	StoreId ,  
	Id	 ,  
	FromDate ,  
	ToDate , 
	Name ,  LocalIP, PublicIP,
	Custom1 ,  
	Custom2 ,  
	Custom3 ,  
	Custom4 ,  
	Custom5	 ,
	PoleName,  
	PoleBaudRate,  
	PoleParity	,  
	PoleDataBits	,  
	PoleStopBits	,  
	PoleHandshake	,  
	PrintSize, PrintName,
	[Status]
	,[StatusGuid]
)

values(
@CompanyCode  ,
	
	@StoreId ,  
	@Id	 ,  
	@FromDate ,  
	@ToDate , 
	@Name ,   @LocalIP,@PublicIP,
	@Custom1	 ,  
	@Custom2 ,  
	@Custom3 ,  
	@Custom4 ,  
	@Custom5 ,  
	@PoleName,  
	@PoleBaudRate,  
	@PoleParity	,  
	@PoleDataBits	,  
	@PoleStopBits	,  
	@PoleHandshake	,
	@PrintSize, @PrintName,
	@Status,
	@StatusGuid)

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT 'CP001', 'S_StoreClient', @StoreId, @StatusGuid, GETDATE(), 'I'
	   
 
end 


--select * from S_StoreClient where LocalIP ='932e840e9321a1de4a0e225330dcb2f7'
 
--delete S_StoreClient where LocalIP ='932e840e9321a1de4a0e225330dcb2f7'


--select isnull(SettingValue, 'FingerId')  from S_GeneralSetting where SettingId = N'DefaultCounter' and CompanyCode='CP001' and StoreId='1001'

--update S_StoreClient set PublicIP = NULL where PublicIP = LocalIP
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_ThirdPartyLog]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_ThirdPartyLog]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@Id nvarchar(50), 
	@CreatedBy nvarchar(50),
	@Status nvarchar(50),
	@Type nvarchar(50),
	@Remark nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[S_ThirdPartyLog]
           ([TransId]
           ,[CompanyCode]
           ,[StoreId]
           ,[Id]
           
           ,[CreatedBy] ,[CreatedOn]
           ,[Status]
           ,[Type]
           ,[Remark]
           )
     VALUES
           (@TransId
           ,@CompanyCode
           ,@StoreId
           ,@Id
           
           ,@CreatedBy, GETDATE()
           ,@Status
           ,@Type
           ,@Remark
           
		   )

	 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_ThirdPartyLogLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_S_ThirdPartyLogLine]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@HeaderId nvarchar(50), 
	@LineId nvarchar(50), 
	@JsonBody nvarchar(MAX), 
	@StartTime nvarchar(50), 
	@EndTime nvarchar(50), 
	@Key1 nvarchar(1500), 
	@Key2 nvarchar(1500), 
	@Key3 nvarchar(1500), 
	@Key4 nvarchar(1500), 
	@Key5 nvarchar(1500), 
	@CustomF1 nvarchar(MAX), 
	@CustomF2 nvarchar(MAX), 
	@CustomF3 nvarchar(MAX), 
	@CustomF4 nvarchar(MAX), 
	@CustomF5 nvarchar(MAX),  
	@Status nvarchar(50), 
	@Remark nvarchar(MAX) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[S_ThirdPartyLogLine]
           ([TransId]
           ,[CompanyCode]
           ,[StoreId]
           ,HeaderId
           ,LineId , 
			JsonBody, 
			StartTime , 
			EndTime , 
			Key1 , 
			Key2 , 
			Key3 , 
			Key4 , 
			Key5 , 
			CustomF1 , 
			CustomF2 , 
			CustomF3 , 
			CustomF4 , 
			CustomF5 ,  
			Status , 
			Remark  
           )
     VALUES
           (@TransId
           ,@CompanyCode
           ,@StoreId
            ,@HeaderId
           ,@LineId , 
			@JsonBody, 
			@StartTime , 
			@EndTime , 
			@Key1 , 
			@Key2 , 
			@Key3 , 
			@Key4 , 
			@Key5 , 
			@CustomF1 , 
			@CustomF2 , 
		@CustomF3 , 
			@CustomF4 , 
			@CustomF5 ,  
			@Status , 
			@Remark  
		   )

	 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_Version]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   PROCEDURE [dbo].[USP_I_S_Version]
	 
	@CompanyCode	nvarchar(50)	,
	@Version	nvarchar(250)	,
	@ReleaseTime	datetime, 
	@Description nvarchar(500)	, 
	@CreatedBy	nvarchar(50)	, 
	@Status	nvarchar(15)	
	 
AS	 
		insert into S_Version (Id, CompanyCode, Version, Description, ReleaseTime, CreatedBy, CreatedOn)
	Values (NEWID(), @CompanyCode, @Version, @Description, @ReleaseTime, @CreatedBy, GETDATE())


GO
/****** Object:  StoredProcedure [dbo].[USP_I_S_VoidOrderSetting]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_S_VoidOrderSetting]
	@Id	nvarchar(50)	,
	@Type	nvarchar(50)	,
	@Code	nvarchar(50)	,
	@Description	nvarchar(250)	,
	@Value	nvarchar(50)	,
	@Status	nvarchar(50)	,
	@Custom1	nvarchar(50)	,
	@Custom2	nvarchar(50)	,
	@Custom3	decimal(19, 6)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
INSERT INTO [dbo].S_VoidOrderSetting
           (Id	,
			Type	,
			Code,
			Description,
			Value,
			Status	,
			Custom1	,
			Custom2,
			Custom3)
     VALUES(  @Id	,
			@Type	,
			@Code,
			@Description,
			@Value,
			@Status	,
			@Custom1	,
			@Custom2,
			@Custom3)
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_BankIn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_T_BankIn] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@LineNum	int,
	@Currency	nvarchar(50),
	@FCAmt	decimal(19, 6),
	@Rate	decimal(19, 6),
	@BankInAmt	decimal(19, 6),
	@RefNum	nvarchar(150),
	@RefNum2	nvarchar(150),
	@CustomF1	nvarchar(150),
	@CustomF2	nvarchar(150),
	@CustomF3	nvarchar(150),
	@CustomF4	nvarchar(150),
	@CustomF5	nvarchar(150),
	@CreatedBy	nvarchar(150), 
	@DocDate datetime,
	@Status nvarchar(150)
												
AS	
begin

INSERT INTO [dbo].[T_BankIn]
           (
			CompanyCode,
			StoreId,
			DailyId,
			LineNum,
			Currency,
			FCAmt,
			Rate,
			BankInAmt,
			RefNum	,
			RefNum2,
			CustomF1	,
			CustomF2,
			CustomF3	,
			CustomF4	,
			CustomF5	,
			CreatedBy,
			CreatedOn, 
			DocDate, Status )
     VALUES
           (
			@CompanyCode,
			@StoreId,
			@DailyId,
			@LineNum,
			@Currency,
			@FCAmt,
			@Rate,
			@BankInAmt,
			@RefNum	,
			@RefNum2,
			@CustomF1	,
			@CustomF2,
			@CustomF3	,
			@CustomF4	,
			@CustomF5	,
			@CreatedBy,
			GETDATE(), 
			@DocDate ,@Status
)
	declare @dateFm nvarchar(50) ;
	set @dateFm = (select FORMAT (@DocDate, 'yyyy-MM-dd')  );
	exec dbo.USP_ReCalcuAmtNotBankIn @CompanyCode, @StoreId, @DailyId, @dateFm

end
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_DeliveryOrder]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_DeliveryOrder]
	@TransId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(250),
	@ContractNo	nvarchar(50),
	@ShiftId	nvarchar(50),
	@CusId	nvarchar(50)	,
	@CusIdentifier	nvarchar(50)	,
	@TotalAmount	decimal(19, 6)	, 
	@TotalPayable	decimal(19, 6)	,
	@TotalDiscountAmt	decimal(19, 6)	,
	@TotalReceipt	decimal(19, 6)	,
	@AmountChange	decimal(19, 6)	,
	@PaymentDiscount decimal(19, 6)	,
	@TotalTax	decimal(19, 6)	,
	@DiscountType nvarchar(20)	,
	@DiscountAmount decimal(19, 6)	,
	@DiscountRate	decimal(19, 6),
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled char(1), 
	@Remarks	nvarchar(250)	,
	@SalesPerson	nvarchar(150)	,
	@SalesPersonName nvarchar(250)	,
	@SalesMode	nvarchar(50)	,
	@RefTransId	nvarchar(50)	,
	@ManualDiscount	char(1),
	@SalesType nvarchar(50)	,
	@DataSource nvarchar(50),
	@POSType nvarchar(50), 
	@Phone nvarchar(50)	,
	@CusName nvarchar(250),
	@CusAddress nvarchar(250), 
	@Reason nvarchar(250),
	@CollectedStatus nvarchar(50),
	@OMSId nvarchar(50) , @Chanel nvarchar(50), @StartTime datetime,  @TerminalId nvarchar(50) = null, @RoundingOff	decimal(19, 6)= null,
	@ShortOrderID	nvarchar(50)= null , @MerchantId	nvarchar(50) = null, @CusGrpId	nvarchar(50) = null, @PromoId	nvarchar(50) = null
	,@RewardPoints	decimal(19, 6) = null, @ExpiryDate	datetime = null
	,@ApprovalId	nvarchar(50) = null, @DocDate	datetime = null, @CustomF1	nvarchar(50) = null, @CustomF2	nvarchar(50) = null,
	@CustomF3	nvarchar(50) = null, @CustomF4	nvarchar(50) = null , @CustomF5	nvarchar(50) = null  , @LuckyNo	nvarchar(50) = null
	 , @OrderId	nvarchar(50) = null ,
	    @DeliveryBy	nvarchar(50) = null  
	   , @ReceiptBy	nvarchar(50) = null  
	    , @From	nvarchar(50) = null  
		  , @To	nvarchar(50) = null    , @ToCustom1	nvarchar(50) = null    
		  , @ToCustom2	nvarchar(50) = null    , @ToCustom3	nvarchar(50) = null  
	 , @PrefixDO	nvarchar(50) = null  
	,@Lines as T_DeliveryOrderLineTableType READONLY   
	,@LineSerials as T_DeliveryOrderLineSerialTableType READONLY  
   
AS
 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @LineTotal decimal(19,6)
 
	DECLARE @Message NVARCHAR(MAX)

 	 
	 
	DECLARE @CountPayment int
	DECLARE @PaymentCode NVARCHAR(50)
	DECLARE @totalAmt decimal(19,6)

	 
	 

	if isnull(@TransId, '') = ''
	begin
		if ISNULL(@PrefixDO, '') <> ''
		begin
			set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] (@PrefixDO, @CompanyCode,@StoreId))
		end
	end
	
	
	select *
    into #ItemTmp@TransId
	from M_Item with (nolock) 
	where ItemCode in (
		select distinct ItemCode from @Lines
	)

	insert into T_DeliveryHeader 
	( 
		TransId	,
		CompanyCode,
		ContractNo,
		StoreId,
		StoreName,
		ShiftId,
		CusId	,
		CusIdentifier	,
		TotalAmount,
		TotalPayable,
		TotalDiscountAmt,
		TotalReceipt,
		AmountChange,
		PaymentDiscount ,
		TotalTax	,
		DiscountType ,
		DiscountAmount ,
		DiscountRate,
		CreatedBy,  
		Status	,
		IsCanceled,
		Remarks	,
		SalesPerson	, SalesPersonName,
		SalesMode	,
		RefTransId	,
		ManualDiscount	,
		SalesType,
		DataSource, POSType , Phone, CusName, CusAddress, Reason, CollectedStatus, OMSId  , Chanel, StartTime, TerminalId, RoundingOff, ShortOrderID, MerchantId, CusGrpId, PromoId, ApprovalId, RewardPoints, ExpiryDate,
		DocDate, CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, LuckyNo, OrderId,
		 DeliveryBy  , ReceiptBy  , [From]  , [To]	 , ToCustom1	 , ToCustom2	  , ToCustom3	 
	)
	
	values(
    -- Insert statements for procedure here
		@TransId	,
		@CompanyCode, @ContractNo,
		@StoreId,
		@StoreName,
		@ShiftId,
		@CusId	,
		@CusIdentifier	,
		@TotalAmount,
		@TotalPayable,
		@TotalDiscountAmt,
		@TotalReceipt,
		@AmountChange,
		@PaymentDiscount ,
		@TotalTax	,
		@DiscountType ,
		@DiscountAmount ,
		@DiscountRate	,
 
		@CreatedBy	, 
 
		@Status	,
		@IsCanceled,
		@Remarks	,
		@SalesPerson	, @SalesPersonName,
		@SalesMode	,
		@RefTransId	,
		@ManualDiscount	,
		@SalesType,
		@DataSource, @POSType,  @Phone, @CusName, @CusAddress, @Reason, @CollectedStatus, @OMSId, @Chanel,
	 
		@StartTime
		,@TerminalId, @RoundingOff, @ShortOrderID, @MerchantId, @CusGrpId, @PromoId, @ApprovalId, @RewardPoints, @ExpiryDate,
		@DocDate, @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, @LuckyNo, @OrderId
	    , @DeliveryBy , @ReceiptBy , @From  , @To	 , @ToCustom1, @ToCustom2	  , @ToCustom3	 

	)
	 
	 
	if (select count(*) from @Lines) > 0
	begin
		
		INSERT INTO [dbo].T_DeliveryLine
			   ([TransId]
			   ,[LineId]
			   ,[CompanyCode]
			   ,[ItemCode]
			   ,[BarCode]
			   ,[UOMCode]
			   ,[Quantity] 
			   ,[Price]
			   ,LineTotal
			   ,DiscountType
			   ,[DiscountAmt]
			   ,[DiscountRate]
			   ,[CreatedBy]
				,CreatedOn
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[Remark]
			   ,[PromoId]
			   ,[PromoType]
			   ,[PromoPercent]
			   ,[PromoBaseItem]
			   ,[SalesMode]
			   ,[TaxRate]
			   ,[TaxAmt]
			   ,[TaxCode]
			   ,[SLocId]
			   ,[MinDepositAmt]
			   ,[MinDepositPercent]
			   ,[DeliveryType]
			   ,[POSService]
			   ,StoreAreaId
			   ,TimeFrameId
			   ,Duration
			   ,AppointmentDate
			   ,BomId,PromoPrice,PromoLineTotal, BaseLine,
				BaseTransId,
				OpenQty,
				PromoDisAmt,
				IsPromo, IsSerial, IsVoucher,
				PrepaidCardNo	 ,
				MemberDate ,
				MemberValue ,
				StartDate ,
				EndDate, ItemType , Description, LineTotalBefDis , LineTotalDisIncludeHeader,SerialNum,  Phone, Name,
				ItemTypeS4	 ,
				Custom1 ,
				Custom2 ,
				Custom3 ,
				Custom4 ,
				Custom5 ,ProductId, PriceListId, WeightScaleBarcode, StoreId, BookletNo,
				 OrgQty , DeliveryQty ,ReceiptQty  
				)
	     select @TransId
			   , [LineId]
			   ,  t1.[CompanyCode]  
			   ,  t1.[ItemCode]  
			   , [BarCode]  
			   ,[UOMCode]  
			   , [Quantity]  
			   , [Price]  
			   ,  LineTotal 
			    , DiscountType 
			   ,  [DiscountAmt]   
			   ,  [DiscountRate]   
			   ,  t1.[CreatedBy]  
			   , GETDATE()
			   ,   t1.[ModifiedBy]   
			   ,    t1.[ModifiedOn]   
			   ,    t1.[Status]  
			   ,   [Remark]  
			   ,    [PromoId]  
			   ,    [PromoType]  
			   ,    [PromoPercent]  
			   ,  [PromoBaseItem]  
			   ,   [SalesMode]  
			   ,  [TaxRate]  
			   ,   [TaxAmt]  
			   ,  [TaxCode]  
			   ,   [SLocId]   
			   , [MinDepositAmt]   
			   ,   [MinDepositPercent]   
			   ,  [DeliveryType]   
			   ,  [POSService]   
			   ,  StoreAreaId   
			   ,    TimeFrameId   
			   ,   Duration   
			   ,    AppointmentDate   
			   ,   BomId   
			   , PromoPrice   
			   , PromoLineTotal   
			   ,  BaseLine    ,
				   BaseTransId     ,
				  OpenQty     ,
				    PromoDisAmt     ,
				   IsPromo     ,
				    t1.IsSerial      ,
				    t1.IsVoucher     ,
				    PrepaidCardNo     	 ,
				  MemberDate      ,
				   MemberValue      ,
				   StartDate      ,
				   EndDate     , 
				   --(select top 1 CustomField1 from M_Item where ItemCode = ItemCode)
				   case when   isnull(ItemType, '') = '' then  t2.CustomField1  else ItemType end  ItemType , 
				    Description     ,
				   case when   isnull(LineTotalBefDis, 0) = 0 then  (ISNULL(t1.Quantity, 0)  * ISNULL(t1.Price, 0))  else LineTotalBefDis end  LineTotalBefDis       ,
				    LineTotalDisIncludeHeader     ,
				    SerialNum     , 
				    Phone     , 
				    Name     ,
				   case when   isnull(ItemTypeS4, '') = '' then t2.ItemCategory_1 else ItemTypeS4 end ItemTypeS4,
				  Custom1      ,
				 Custom2      ,
				   Custom3      ,
				   Custom4      ,
				   Custom5      ,
				  t1.ProductId     ,
				  PriceListId     ,
				   WeightScaleBarcode     ,
				  StoreId     ,
				  BookletNo   , OrgQty , DeliveryQty ,ReceiptQty    
	  
			from @Lines t1
			left join #ItemTmp@TransId t2 on t1.ItemCode = t2.ItemCode and t1.CompanyCode = t2.CompanyCode
	end
	
    if (select count(*) from @LineSerials) > 0
	begin
	INSERT INTO [dbo].T_DeliveryLineSerial
          (  TransId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId,
		Quantity,
		UOMCode,
		CreatedBy	, CreatedOn,
		Status,  OpenQty ,
		BaseLine ,
		BaseTransId, LineNum, Prefix ,
		Phone ,
		Name ,
		CustomF1 ,
		CustomF2  , ExpDate, StoreId , CustomF3, CustomF4, CustomF5
	)
    select  
		@TransId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId,
		Quantity,
		UOMCode,
		CreatedBy	,  GETDATE() CreatedOn,
		Status, OpenQty ,
		BaseLine ,
		BaseTransId,
		LineNum,
		Prefix ,
		Phone ,
		Name ,
		CustomF1 ,
		CustomF2, ExpDate, @StoreId, REPLACE(CustomF3 , '<PIN>' , '< PIN >') , CustomF4, CustomF5   
	
	from @LineSerials 


	end
	 
	  
	drop table #ItemTmp@TransId

	select @TransId ;
	 



	-- 	if isnull(@ItemType, '') = '' begin set @ItemType = (select top 1 CustomField1 from M_Item where ItemCode = @ItemCode ) end

	--if isnull(@ItemTypeS4, '') = '' begin set @ItemTypeS4 = (select top 1  ItemCategory_1 from M_Item where ItemCode = @ItemCode ) end


END


--select * from T_SalesLine where TransId = 'SO100100017551'
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_DeliveryOrderByDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_DeliveryOrderByDate]
	@CompanyCode	nvarchar(50), 
	@CreatedBy	nvarchar(50)	= null 
	,@Headers as T_DeliveryHeaderTableType READONLY   
    ,@Lines as T_DeliveryOrderLineTableType READONLY   
	 
AS
 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @LineTotal decimal(19,6)
 
	DECLARE @Message NVARCHAR(MAX)

 	 
	DECLARE @TransId NVARCHAR(50) 
	 
	--DECLARE @CountPayment int
	DECLARE @CusId NVARCHAR(50) 
	--DECLARE @PaymentCode NVARCHAR(50)
	DECLARE @totalAmt decimal(19,6)

	
	 

	DECLARE Customer_Lines cursor local FOR
	select  CusId 
	from @Headers  
	--where isnull(@CustomerId,'') = '' or t1.CusId = @CustomerId
	--where CONVERT(date, CreatedOn) =  CONVERT(date, @Date)  
					
					 

	OPEN Customer_Lines   
	FETCH NEXT FROM Customer_Lines 
	INTO @CusId
	WHILE @@FETCH_STATUS = 0 
	BEGIN
	 
			set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] ('DO', @CompanyCode, @CusId))
			 
	 
			insert into T_DeliveryHeader 
			( 
				TransId	,
				CompanyCode,
				ContractNo,
				StoreId,
				StoreName,
				ShiftId,
				CusId	,
				CusIdentifier	,
				TotalAmount,
				TotalPayable,
				TotalDiscountAmt,
				TotalReceipt,
				AmountChange,
				PaymentDiscount ,
				TotalTax	,
				DiscountType ,
				DiscountAmount ,
				DiscountRate,
				CreatedBy,  
				Status	,
				IsCanceled,
				Remarks	,
				SalesPerson	, SalesPersonName,
				SalesMode	,
				RefTransId	,
				ManualDiscount	,
				SalesType,
				DataSource, POSType , Phone, CusName, CusAddress, Reason, CollectedStatus, OMSId  , Chanel, StartTime, TerminalId, RoundingOff, ShortOrderID, MerchantId, CusGrpId, PromoId, ApprovalId, RewardPoints, ExpiryDate,
				DocDate, CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, LuckyNo, OrderId,
				 DeliveryBy  , ReceiptBy  , [From]  , [To]	 , ToCustom1	 , ToCustom2	  , ToCustom3	 
			)
	
			select
			-- Insert statements for procedure here
				@TransId	,
				@CompanyCode, 
				ContractNo,
				@CusId,
				null,
				null,
				@CusId	,
				null	,
				TotalAmount,
				TotalPayable,
				TotalDiscountAmt,
				TotalReceipt,
				AmountChange,
				PaymentDiscount ,
				TotalTax	,
				DiscountType ,
				DiscountAmount ,
				DiscountRate	,
 
				@CreatedBy	, 
 
				Status	,
				IsCanceled,
				Remarks	,
				SalesPerson	, SalesPersonName,
				SalesMode	,
				RefTransId	,
				ManualDiscount	,
				SalesType,
				DataSource, POSType,  Phone, CusName, CusAddress, Reason, CollectedStatus, OMSId, Chanel,
	 
				StartTime
				,TerminalId, RoundingOff, ShortOrderID, MerchantId, CusGrpId, PromoId, ApprovalId, RewardPoints, ExpiryDate,
				DocDate, CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, LuckyNo, OrderId
				, DeliveryBy , ReceiptBy , [From]  , [To]	 , ToCustom1, ToCustom2	  , ToCustom3	 

			from @Headers 
			where  CusId = @CusId
	 
	 
			if (select count(*) from @Lines) > 0
			begin
		
				INSERT INTO [dbo].T_DeliveryLine
					   ([TransId]
					   ,[LineId]
					   ,[CompanyCode]
					   ,[ItemCode]
					   ,[BarCode]
					   ,[UOMCode]
					   ,[Quantity] 
					   ,[Price]
					   ,LineTotal
					   ,DiscountType
					   ,[DiscountAmt]
					   ,[DiscountRate]
					   ,[CreatedBy]
						,CreatedOn
					   ,[ModifiedBy]
					   ,[ModifiedOn]
					   ,[Status]
					   ,[Remark]
					   ,[PromoId]
					   ,[PromoType]
					   ,[PromoPercent]
					   ,[PromoBaseItem]
					   ,[SalesMode]
					   ,[TaxRate]
					   ,[TaxAmt]
					   ,[TaxCode]
					   ,[SLocId]
					   ,[MinDepositAmt]
					   ,[MinDepositPercent]
					   ,[DeliveryType]
					   ,[POSService]
					   ,StoreAreaId
					   ,TimeFrameId
					   ,Duration
					   ,AppointmentDate
					   ,BomId,PromoPrice,PromoLineTotal, BaseLine,
						BaseTransId,
						OpenQty,
						PromoDisAmt,
						IsPromo, IsSerial, IsVoucher,
						PrepaidCardNo	 ,
						MemberDate ,
						MemberValue ,
						StartDate ,
						EndDate, ItemType , Description, LineTotalBefDis , LineTotalDisIncludeHeader,SerialNum,  Phone, Name,
						ItemTypeS4	 ,
						Custom1 ,
						Custom2 ,
						Custom3 ,
						Custom4 ,
						Custom5 ,ProductId, PriceListId, WeightScaleBarcode, StoreId, BookletNo,
						 OrgQty , DeliveryQty ,ReceiptQty  
						)
				 select @TransId
					   , [LineId]
					   ,  t1.[CompanyCode]  
					   ,  t1.[ItemCode]  
					   , [BarCode]  
					   ,[UOMCode]  
					   , [Quantity]  
					   , [Price]  
					   ,  LineTotal 
						, DiscountType 
					   ,  [DiscountAmt]   
					   ,  [DiscountRate]   
					   ,  t1.[CreatedBy]  
					   , GETDATE()
					   ,   t1.[ModifiedBy]   
					   ,    t1.[ModifiedOn]   
					   ,    t1.[Status]  
					   ,   [Remark]  
					   ,    [PromoId]  
					   ,    [PromoType]  
					   ,    [PromoPercent]  
					   ,  [PromoBaseItem]  
					   ,   [SalesMode]  
					   ,  [TaxRate]  
					   ,   [TaxAmt]  
					   ,  [TaxCode]  
					   ,   [SLocId]   
					   , [MinDepositAmt]   
					   ,   [MinDepositPercent]   
					   ,  [DeliveryType]   
					   ,  [POSService]   
					   ,  StoreAreaId   
					   ,    TimeFrameId   
					   ,   Duration   
					   ,    AppointmentDate   
					   ,   BomId   
					   , PromoPrice   
					   , PromoLineTotal   
					   ,  BaseLine    ,
						   BaseTransId     ,
						  OpenQty     ,
							PromoDisAmt     ,
						   IsPromo     ,
							t1.IsSerial      ,
							t1.IsVoucher     ,
							PrepaidCardNo     	 ,
						  MemberDate      ,
						   MemberValue      ,
						   StartDate      ,
						   EndDate     , 
						   --(select top 1 CustomField1 from M_Item where ItemCode = ItemCode)
						   null  ItemType , 
							[Description]     ,
						   null LineTotalBefDis       ,
							LineTotalDisIncludeHeader     ,
							SerialNum     , 
							Phone     , 
							[Name]     ,
						   null ItemTypeS4,
						  Custom1      ,
						 Custom2      ,
						   Custom3      ,
						   Custom4      ,
						   Custom5      ,
						  t1.ProductId     ,
						  PriceListId     ,
						   WeightScaleBarcode     ,
						  StoreId     ,
						  BookletNo   , OrgQty , DeliveryQty ,ReceiptQty    
	  
					from @Lines t1
					where  
					ItemTypeS4 = @CusId
					--left join #ItemTmp@TransId t2 on t1.ItemCode = t2.ItemCode and t1.CompanyCode = t2.CompanyCode
			end
	
		 
		FETCH NEXT FROM Customer_Lines
		INTO @CusId
	End
	CLOSE Customer_Lines 
	DEALLOCATE Customer_Lines

	  
	 



	-- 	if isnull(@ItemType, '') = '' begin set @ItemType = (select top 1 CustomField1 from M_Item where ItemCode = @ItemCode ) end

	--if isnull(@ItemTypeS4, '') = '' begin set @ItemTypeS4 = (select top 1  ItemCategory_1 from M_Item where ItemCode = @ItemCode ) end


END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_DivisionHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[USP_I_T_DivisionHeader]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(50), 
	@ContractNo	nvarchar(50),
	@ShiftId	nvarchar(50), 
	@CreatedBy	nvarchar(50), 
	@Status	nvarchar(15), 
	@CusId	nvarchar(150), 
	@CusGrpId	nvarchar(150), 
	@IsCanceled	nvarchar(5),
	@Remarks	nvarchar(550),
	@CustomF1	nvarchar(250),
	@CustomF2	nvarchar(250),
	@CustomF3	nvarchar(250),
	@CustomF4	nvarchar(250),
	@CustomF5	nvarchar(250),
	@DocDate	datetime = null
	,@Lines as T_DivisionLineTableType READONLY   
AS
begin
  
	DECLARE @LineTotal decimal(19,6)
	DECLARE @CalcuLineTotal decimal(19,6)
	DECLARE @CalcuCollected decimal(19,6)
	DECLARE @Message NVARCHAR(MAX)
	DECLARE @TransId NVARCHAR(50)

	if isnull(@TransId, '') = ''
	begin 
		set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] ('DI', @CompanyCode,@StoreId)) 
	end
	  
    INSERT INTO [dbo].T_DivisionHeader
	  ([Id]
      ,[CompanyCode]
      ,[StoreId]
      ,[StoreName]
      ,[ContractNo]
      ,[ShiftId]
      ,[CusId]
      ,[CusGrpId]
      ,[CreatedOn]
      ,[CreatedBy] 
      ,[Status]
      ,[IsCanceled]
      ,[Remarks]
      ,[CustomF1]
      ,[CustomF2]
      ,[CustomF3]
      ,[CustomF4]
      ,[CustomF5], DocDate)
	  Values(@TransId, @CompanyCode, @StoreId, @StoreName, @ContractNo, @ShiftId, @CusId, @CusGrpId, GETDATE(), @CreatedBy, @Status, 
			 @IsCanceled, @Remarks, @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, @DocDate)

	if (select count(*) from @Lines) > 0
	begin
		INSERT INTO [dbo].[T_DivisionLine]
			   ([Id] ,[LineId] ,[CompanyCode] ,[ItemCode] ,StoreId, [SLocId] ,[BarCode] ,[UOMCode] ,[Quantity] 
			    ,[CreatedBy] ,[CreatedOn] , [Status] ,[Remark] ,[Custom1] ,[Custom2] ,[Custom3] ,[Custom4] ,[Custom5])
		select @TransId, LineId, @CompanyCode, ItemCode,StoreId, SlocId, Barcode, UoMCode, Quantity, @CreatedBy, getDate(), Status, remark
		, custom1, custom2, custom3, custom4, custom5  from @Lines
	end
	select @TransId ;
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_EndDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_EndDate] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Id	nvarchar(50),
	@Date	nvarchar(50)	,
	@Description	nvarchar(50), --Daily ID
	@Remark nvarchar(250),
	@Status	nvarchar(50),
	@CreateBy nvarchar(50),
	@TotalBalance	decimal(19, 6),
	@TotalCollected	nvarchar(50),
	@TotalCount	nvarchar(50),
	@TotalSales	nvarchar(50),
	@TaxTotal	decimal(19, 6)=null,
	@DiscountTotal	decimal(19, 6)=null,
	@PaymentTotal	decimal(19, 6)=null,
	@LineItemCount	decimal(19, 6)=null,
	@TaxCount	decimal(19, 6)=null,
	@DiscountCount	decimal(19, 6)=null,
	@PaymentCount	decimal(19, 6)=null,
	@CreatedOn datetime = null,
	@ModifiedBy nvarchar(50) = null,
	@ModifiedOn datetime = null
AS
BEGIN

	SET NOCOUNT ON;
 
	Declare @OldAmountNotBankIn decimal(19, 6); 	
	Declare @SumBankIn decimal(19, 6); 	
	Declare @AmountNotBankIn decimal(19, 6); 
	Declare @Currency nvarchar(15); 
		

		set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode)
		set @OldAmountNotBankIn = (select Top 1 ISNULL( AmtNotInBank,0) from T_EndDate where Description < @Description and  StoreId = @StoreId and CompanyCode = @CompanyCode order by Description desc)
		select @SumBankIn =  ISNULL( SUM(isnull(BankInAmt,0)),0) from T_BankIn with (nolock) where DailyId = @Description and StoreId = @StoreId and CompanyCode = @CompanyCode
		select @AmountNotBankIn =  ISNULL(( (isnull(@OldAmountNotBankIn,0) + isnull(@TotalCollected,0)) - isnull(@SumBankIn,0) ), 0)

		select
			@TaxTotal = SUM(t2.TotalTax)
			, @DiscountTotal = Sum(TotalDiscountAmt) 
			, @PaymentTotal = SUM( TotalPayable) 
			, @LineItemCount=  COUNT(t8.LineId)  
			, @TaxCount= COUNT(CASE  WHEN isnull(TotalTax, 0) <> 0 THEN 1 END)	 
			, @DiscountCount = Count(TotalDiscountAmt)  
			, @PaymentCount = Count(t1.PaymentCode) 
		from T_SalesPayment t1 with (nolock)
			left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId and t1.ShiftId = t2.ShiftId  
			left join T_SalesLine t8 with (nolock) on t1.CompanyCode = t8.CompanyCode and t8.TransId = t2.TransId   
			left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
			left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
			left join T_ShiftLine t6  with (nolock) on t6.ShiftId = t5.ShiftId and t6.CompanyCode = t5.CompanyCode and isnull(t6.Currency, @Currency) = isnull(t1.Currency, @Currency) and t1.PaymentCode = t6.PaymentCode
			left Join M_PaymentMethod t7  with (nolock) on t1.CompanyCode = t7.CompanyCode and t1.PaymentCode = t7.PaymentCode
		where 
			t1.CompanyCode = @CompanyCode 
			and t2.StoreId = @StoreId  
			and ISNULL(t2.IsCanceled,'N') = 'N'  
			and t2.Status = 'C' 
			and	T1.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) 
			and StoreId = @StoreId 
			AND CompanyCode = @CompanyCode)
			and isnull(t7.EODApply,1) = 1
		Group by  
			t1.ShiftId
			, t1.PaymentCode
			, t7.ShortName 
			, t1.Currency
			, t1.Rate
			, t1.CreatedBy
			, t4.FirstName + ' ' + t4.LastName
			, t5.Status
			, t6.CollectAmount
			, t7.EODCode
 


	/* Old logic before 2022-08-15
			Declare @OldDailyId nvarchar(150); 
			Declare @DailyId nvarchar(150); 
			Declare @SumTotalSale decimal(19, 6);
	 			AS DateAdd; GETDATE() - 1
			
			--Delete T_ItemStorage where CompanyCode =@CompanyCode and  StoreId=@StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
			set @OldDailyId = (select dbo.[fnc_GetDailyID](@StoreId, @CompanyCode, convert(date, @Date )))
			set @OldAmountNotBankIn = (select ISNULL( AmtNotInBank,0) from T_EndDate where Description = @OldDailyId and CompanyCode = @CompanyCode)
			set @DailyId = @Description
			(select dbo.[fnc_GetDailyID]( @StoreId, @CompanyCode, GETDATE() ))
			select @SumTotalSale = @TotalSales
			--select @SumTotalSale =  ISNULL(TotalSales, 0) from T_EndDate with (nolock) where Description = @DailyId  
			set @AmountNotBankIn = ISNULL(( (@OldAmountNotBankIn + @SumTotalSale) - @SumBankIn), 0)
			select @SumTotalSale =  (select ISNULL( SUM( isnull(Amount,0)),0) from T_PickupAmount where DailyId  =  @Description and StoreId = @StoreId and CompanyCode = @CompanyCode)
			ISNULL(TotalSales, 0) from T_EndDate with (nolock) where Description = @DailyId
			set @AmountNotBankIn = ISNULL(( (isnull(@OldAmountNotBankIn,0) + isnull(@SumTotalSale,0)) - isnull(@SumBankIn,0) ), 0)
	*/
	insert into T_EndDate 
	( CompanyCode,
		StoreId,
		Id,
		Date,
		Description,
		Remark,
		Status,
		CreateOn,
		CreateBy, ModifiedOn, ModifiedBy, TotalBalance , TotalCollected, TotalCount, TotalSales, TaxTotal, DiscountTotal, PaymentTotal, LineItemCount, TaxCount, DiscountCount, PaymentCount, AmtNotInBank
 
	)
	
	values(
		@CompanyCode	 ,
		@StoreId	 ,
		@Id,
		@Date,
		@Description,
		@Remark,
		@Status,
		isnull(@CreatedOn, GETDATE()),
		@CreateBy, @ModifiedOn, @ModifiedBy, @TotalBalance , @TotalCollected, @TotalCount, @TotalSales, @TaxTotal, @DiscountTotal, @PaymentTotal, @LineItemCount, @TaxCount, @DiscountCount, @PaymentCount, @AmountNotBankIn
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_EndDateDetail]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_T_EndDateDetail] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@EndDateId	nvarchar(50),
	@Id	nvarchar(50),
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50),
	@UoMCode	nvarchar(50),
	@Description	nvarchar(250),
	@Barcode	nvarchar(50), 
	@Price decimal(19, 6) ,
	@Quantity decimal(19, 6),@LineTotal decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Delete T_ItemStorage where CompanyCode =@CompanyCode and  StoreId=@StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
 

	insert into T_EndDateDetail
	( CompanyCode,
		StoreId,
		EndDateId,
		Id,
		LineId,
		ItemCode,
		UoMCode,
		Description,
		Barcode,
		Price,
		Quantity,
		LineTotal

 
	)
	
	values(
		@CompanyCode	 ,
		@StoreId	 ,
		@EndDateId ,
		NEWID(),
		@LineId,
		@ItemCode,
		@UoMCode,
		@Description,
		@Barcode,
		@Price,
		@Quantity,
		@LineTotal
		 
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_EndDatePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_EndDatePayment] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@EndDateId	nvarchar(50),
	@Id	nvarchar(50),
	@ShiftId	nvarchar(50),
	@LineId	nvarchar(50)	,
	@PaymentCode	nvarchar(50),
	@Currency	nvarchar(50),
	@Amount decimal(19, 6) ,
	@FCAmount  decimal(19, 6) ,
	@CollectedAmount decimal(19, 6) ,
	@FCCollectedAmount decimal(19, 6) ,
	@Balance decimal(19, 6) ,
	@EOD_Code nvarchar(50)= null,
	@CounterId nvarchar(50)= null,
	@BankInAmt decimal(19, 6) = null,
	@BankInBalance decimal(19, 6) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Delete T_ItemStorage where CompanyCode =@CompanyCode and  StoreId=@StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
 

	insert into T_EndDatePayment
	( CompanyCode,
		StoreId,
		EndDateId,
		Id,
		ShiftId,
		LineId,
		PaymentCode, Currency,
		Amount, FCAmount,
		CollectedAmount, FCCollectedAmount,
		Balance,
		EOD_Code,
		CounterId,
		BankInAmt,
		BankInBalance
	)
	
	values(
		@CompanyCode	 ,
		@StoreId	 ,
		@EndDateId ,
		NEWID(),
		@ShiftId,
		@LineId,
		@PaymentCode,@Currency,
		@Amount, @FCAmount,
		@CollectedAmount, @FCCollectedAmount,
		@Balance, @EOD_Code, @CounterId,
		@BankInAmt,
		@BankInBalance
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsIssueHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_GoodsIssueHeader]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TotalPayable	decimal(19, 6),
	@TotalDiscountAmt	decimal(19, 6),
	@TotalReceipt	decimal(19, 6),	
	@TotalTax	decimal(19, 6),
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	nvarchar(50),
	@Remark	nvarchar(250),
	@StoreName 	nvarchar(250),
	@RefId 	nvarchar(250),
	@MovementType nvarchar(50),
	@ShiftId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsIssueHeader 
	(  [INVTId]
      ,[CompanyCode]
      ,[StoreId]
      ,[TotalPayable]
      ,[TotalDiscountAmt]
      ,[TotalReceipt]
      ,[TotalTax]
      ,[CreatedBy]
      ,[CreatedOn] 
      ,[Status]
      ,[IsCanceled]
      ,[Remark], StoreName, RefId, MovementType, ShiftId
	)
	
	values(
    @INVTId,
	@CompanyCode,
	@StoreId,
	@TotalPayable,
	@TotalDiscountAmt,
	@TotalReceipt,	
	@TotalTax,
	@CreatedBy, 
	GETDATE(),
	@Status,
	@IsCanceled,
	@Remark	, @StoreName, @RefId, @MovementType, @ShiftId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsIssueLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsIssueLine]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@LineId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@Description	nvarchar(250),
	@SLocId	nvarchar(50),
	@BarCode	nvarchar(250),
	@UOMCode	nvarchar(50),
	@Quantity	decimal(19, 6),
	@Price	decimal(19, 6),
	@LineTotal	decimal(19, 6),
	@CurrencyCode	nvarchar(50),
	@CurrencyRate	decimal(19, 6),
	@TaxCode	nvarchar(50),
	@TaxRate	decimal(19, 6),
	@TaxAmt	decimal(19, 6),
	@Remark	nvarchar(250), 
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@BOMId	nvarchar(50),
	@BOMValue	decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsIssueLine 
	(   INVTId,
		CompanyCode,
		LineId	,
		ItemCode,
		Description,
		SLocId,
		BarCode,
		UOMCode,
		Quantity	,
		Price	,
		LineTotal,
		CurrencyCode,
		CurrencyRate,
		TaxCode,
		TaxRate,
		TaxAmt,
		Remark,
		CreatedBy	, 
		Status, 
		BOMId,
		BOMValue
	)
	
	values(
    @INVTId,
	@CompanyCode,
	@LineId	,
	@ItemCode,
	@Description,
	@SLocId,
	@BarCode,
	@UOMCode,
	@Quantity	,
	@Price	,
	@LineTotal,
	@CurrencyCode,
	@CurrencyRate,
	@TaxCode,
	@TaxRate,
	@TaxAmt,
	@Remark,
	@CreatedBy	,
	 
	@Status,
		@BOMId,
		@BOMValue
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsIssueLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsIssueLineSerial]
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@ItemCode	nvarchar(50),
	@Description	nvarchar(50),
	@SerialNum	nvarchar(100),
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6),
	@UOMCode	nvarchar(50),
	@CreatedBy	nvarchar(50),
	@Status	char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsIssueLineSerial 
	(  INVTId	,
		LineId,
		CompanyCode	,
		ItemCode	,
		Description,
		SerialNum,
		SLocId	,
		Quantity	,
		UOMCode,
		CreatedBy,
		Status	
	)
	
	values(
        @INVTId	,
		@LineId,
		@CompanyCode	,
		@ItemCode	,
		@Description,
		@SerialNum,
		@SLocId	,
		@Quantity	,
		@UOMCode,
		@CreatedBy,
		@Status	
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReceiptHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_GoodsReceiptHeader]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TotalPayable	decimal(19, 6),
	@TotalDiscountAmt	decimal(19, 6),
	@TotalReceipt	decimal(19, 6),	
	@TotalTax	decimal(19, 6),
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	nvarchar(50),
	@Remark	nvarchar(250),
	@StoreName 	nvarchar(250),
	@RefId nvarchar(50),
	@MovementType nvarchar(50),
	@ShiftId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReceiptHeader 
	(  [INVTId]
      ,[CompanyCode]
      ,[StoreId]
      ,[TotalPayable]
      ,[TotalDiscountAmt]
      ,[TotalReceipt]
      ,[TotalTax]
      ,[CreatedBy]
      ,[CreatedOn] 
      ,[Status]
      ,[IsCanceled]
      ,[Remark], StoreName, RefId, MovementType, ShiftId
	)
	
	values(
    @INVTId,
	@CompanyCode,
	@StoreId,
	@TotalPayable,
	@TotalDiscountAmt,
	@TotalReceipt,	
	@TotalTax,
	@CreatedBy, 
	GETDATE(),
	@Status,
	@IsCanceled,
	@Remark	,@StoreName, @RefId, @MovementType, @ShiftId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReceiptLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsReceiptLine]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@LineId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@SLocId	nvarchar(50),
	@BarCode	nvarchar(250),
	@UOMCode	nvarchar(50),
	@Quantity	decimal(19, 6),
	@Price	decimal(19, 6),
	@LineTotal	decimal(19, 6),
	@CurrencyCode	nvarchar(50),
	@CurrencyRate	decimal(19, 6),
	@TaxCode	nvarchar(50),
	@TaxRate	decimal(19, 6),
	@TaxAmt	decimal(19, 6),
	@Remark	nvarchar(250), 
	@CreatedBy	nvarchar(50), 
	@Status	char(1), @Description	nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReceiptLine 
	(   INVTId,
		CompanyCode,
		LineId	,
		ItemCode,
		SLocId,
		BarCode,
		UOMCode,
		Quantity	,
		Price	,
		LineTotal,
		CurrencyCode,
		CurrencyRate,
		TaxCode,
		TaxRate,
		TaxAmt,
		Remark,
		CreatedBy	, 
		Status, Description
	)
	
	values(
    @INVTId,
	@CompanyCode,
	@LineId	,
	@ItemCode,
	@SLocId,
	@BarCode,
	@UOMCode,
	@Quantity	,
	@Price	,
	@LineTotal,
	@CurrencyCode,
	@CurrencyRate,
	@TaxCode,
	@TaxRate,
	@TaxAmt,
	@Remark,
	@CreatedBy	,
	 
	@Status, @Description
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReceiptLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsReceiptLineSerial]
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@ItemCode	nvarchar(50),
	@SerialNum	nvarchar(100),
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6),
	@UOMCode	nvarchar(50),
	@CreatedBy	nvarchar(50),
	@Status	char(1), @Description	nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReceiptLineSerial 
	(  INVTId	,
		LineId,
		CompanyCode	,
		ItemCode	,
		SerialNum,
		SLocId	,
		Quantity	,
		UOMCode,
		CreatedBy,
		Status	, Description
	)
	
	values(
        @INVTId	,
		@LineId,
		@CompanyCode	,
		@ItemCode	,
		@SerialNum,
		@SLocId	,
		@Quantity	,
		@UOMCode,
		@CreatedBy,
		@Status	, @Description
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReceiptPOHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_GoodsReceiptPOHeader]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@CardCode	nvarchar(50)	,
	@CardName	nvarchar(250)	,
	@InvoiceAddress	nvarchar(250)	,
	@TaxCode	nvarchar(50)	,
	@VATPercent	decimal(19, 6)	,
	@VATTotal	decimal(19, 6)	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)	,
	@IsCanceled	nvarchar(50)	,
	@RefTransId nvarchar(50),
	@ShiftId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReceiptPOHeader 
	( 
	    PurchaseId	,
		CompanyCode	,
		StoreId,
		StoreName	,
		DocStatus,
		DocDate	,
		DocDueDate,
		CardCode,
		CardName	,
		InvoiceAddress,
		TaxCode	,
		VATPercent	,
		VATTotal	,
		DocTotal	,
		Comment	,
		CreatedBy	,
		CreatedOn	,
		ModifiedBy	,
		ModifiedOn	,
		Status	,
		IsCanceled	,
		RefTransId , ShiftId
	)
	
	values(
		 @PurchaseId	,
		@CompanyCode	,
		@StoreId,
		@StoreName	,
		@DocStatus,
		@DocDate	,
		@DocDueDate,
		@CardCode,
		@CardName	,
		@InvoiceAddress,
		@TaxCode	,
		@VATPercent	,
		@VATTotal	,
		@DocTotal	,
		@Comment	,
		@CreatedBy	,
		@CreatedOn	,
		@ModifiedBy	,
		@ModifiedOn	,
		@Status	,
		@IsCanceled	,
		@RefTransId , @ShiftId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReceiptPOLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsReceiptPOLine]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseTrans	nvarchar(50)	,
	@BaseType	nvarchar(50)	,
	@BaseEntry	nvarchar(50)	,
	@LineStatus	char(1)	,
	@DiscPercent	decimal(19, 6)	,
	@VATPercent	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)	,
	@BaseLine	int	,
	@BaseTransId	nvarchar(50)
AS
--BEGIN
--	declare @qty decimal;	
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_GoodsReceiptPOLine 
--	( 
--	    PurchaseId	,
--		CompanyCode,
--		LineId	,
--		ItemCode	,
--		SLocId	,
--		BarCode	,
--		Description	,
--		UOMCode	,
--		Quantity	,
--		OpenQty		,
--		Price	,
--		BaseTrans,
--		BaseType	,
--		BaseEntry,
--		LineStatus	,
--		DiscPercent	,
--		VATPercent	,
--		LineTotal	,
--		Comment	,
--		CreatedBy	,
--		CreatedOn	,
--		ModifiedBy	,
--		ModifiedOn	,
--		Status,
--		BaseLine	,
--		BaseTransId
--	)
	
--	values(
--		  @PurchaseId	,
--		@CompanyCode,
--		@LineId	,
--		@ItemCode	,
--		@SLocId	,
--		@BarCode	,
--		@Description	,
--		@UOMCode	,
--		@Quantity	,
--		@OpenQty		,
--		@Price	,
--		@BaseTrans,
--		@BaseType	,
--		@BaseEntry,
--		@LineStatus	,
--		@DiscPercent	,
--		@VATPercent	,
--		@LineTotal	,
--		@Comment	,
--		@CreatedBy	,
--		@CreatedOn	,
--		@ModifiedBy	,
--		@ModifiedOn	,
--		@Status,
--		@BaseLine	,
--		@BaseTransId
--	)

--	if @OpenQty = 0
--	begin
--		update T_PurchaseOrderLine set OpenQty= @OpenQty where  CompanyCode= @CompanyCode and LineId=@BaseLine and PurchaseId= @BaseTransId
--	end
--	else
--	begin
--		update T_PurchaseOrderLine set OpenQty= @OpenQty, Status ='C' where  CompanyCode= @CompanyCode and LineId=@BaseLine and PurchaseId= @BaseTransId
--	end
  
--   set @qty = (select isnull(SUM(OpenQty),0) from T_PurchaseOrderLine with (nolock) where PurchaseId= @BaseTransId and  CompanyCode= @CompanyCode)
--   if @qty <=0
--   begin
--		update T_PurchaseOrderHeader set Status = 'C' where PurchaseId= @BaseTransId and  CompanyCode= @CompanyCode
--   end
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReceiptPOLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsReceiptPOLineSerial]
	@PurchaseId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@OpenQty	decimal(19, 6)	,
	@BaseLine	nvarchar(50)	,
	@BaseTransId	nvarchar(50), @Description nvarchar(250)
 AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_GoodsReceiptPOLineSerial 
--	( 
--	    PurchaseId	,
--		LineId	,
--		CompanyCode,
--		ItemCode,
--		SerialNum,
--		SLocId	,
--		Quantity	,
--		UOMCode	,
--		CreatedBy	,
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn,
--		OpenQty,
--		BaseLine,
--		BaseTransId, Description
--	)
	
--	values(
--		 @PurchaseId	,
--		@LineId	,
--		@CompanyCode,
--		@ItemCode,
--		@SerialNum,
--		@SLocId	,
--		@Quantity	,
--		@UOMCode	,
--		@CreatedBy	,
--		@CreatedOn,
--		@ModifiedBy	,
--		@ModifiedOn,
--		@OpenQty,
--		@BaseLine,
--		@BaseTransId, @Description 
--	)

--	update T_PurchaseOrderLineSerial set OpenQty= @OpenQty where  CompanyCode= @CompanyCode and LineId=@BaseLine and PurchaseId= @BaseTransId
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReturnHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_GoodsReturnHeader]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@CardCode	nvarchar(50)	,
	@CardName	nvarchar(250)	,
	@InvoiceAddress	nvarchar(250)	,
	@TaxCode	nvarchar(50)	,
	@VATPercent	decimal(19, 6)	,
	@VATTotal	decimal(19, 6)	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)	,
	@IsCanceled	nvarchar(50)	,
	@RefTransId nvarchar(50),
	@ShiftId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReturnHeader 
	( 
	    PurchaseId	,
		CompanyCode	,
		StoreId,
		StoreName	,
		DocStatus,
		DocDate	,
		DocDueDate,
		CardCode,
		CardName	,
		InvoiceAddress,
		TaxCode	,
		VATPercent	,
		VATTotal	,
		DocTotal	,
		Comment	,
		CreatedBy	,
		CreatedOn	,
		ModifiedBy	,
		ModifiedOn	,
		Status	,
		IsCanceled	,
		RefTransId , ShiftId
	)
	
	values(
		 @PurchaseId	,
		@CompanyCode	,
		@StoreId,
		@StoreName	,
		@DocStatus,
		@DocDate	,
		@DocDueDate,
		@CardCode,
		@CardName	,
		@InvoiceAddress,
		@TaxCode	,
		@VATPercent	,
		@VATTotal	,
		@DocTotal	,
		@Comment	,
		@CreatedBy	,
		@CreatedOn	,
		@ModifiedBy	,
		@ModifiedOn	,
		@Status	,
		@IsCanceled	,
		@RefTransId , @ShiftId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReturnLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsReturnLine]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseTrans	nvarchar(50)	,
	@BaseType	nvarchar(50)	,
	@BaseEntry	nvarchar(50)	,
	@LineStatus	char(1)	,
	@DiscPercent	decimal(19, 6)	,
	@VATPercent	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)	,
	@BaseLine	int	,
	@BaseTransId	nvarchar(50)
AS
BEGIN
	declare @qty decimal;	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReturnLine 
	( 
	    PurchaseId	,
		CompanyCode,
		LineId	,
		ItemCode	,
		SLocId	,
		BarCode	,
		Description	,
		UOMCode	,
		Quantity	,
		OpenQty		,
		Price	,
		BaseTrans,
		BaseType	,
		BaseEntry,
		LineStatus	,
		DiscPercent	,
		VATPercent	,
		LineTotal	,
		Comment	,
		CreatedBy	,
		CreatedOn	,
		ModifiedBy	,
		ModifiedOn	,
		Status,
		BaseLine	,
		BaseTransId
	)
	
	values(
		  @PurchaseId	,
		@CompanyCode,
		@LineId	,
		@ItemCode	,
		@SLocId	,
		@BarCode	,
		@Description	,
		@UOMCode	,
		@Quantity	,
		@OpenQty		,
		@Price	,
		@BaseTrans,
		@BaseType	,
		@BaseEntry,
		@LineStatus	,
		@DiscPercent	,
		@VATPercent	,
		@LineTotal	,
		@Comment	,
		@CreatedBy	,
		@CreatedOn	,
		@ModifiedBy	,
		@ModifiedOn	,
		@Status,
		@BaseLine	,
		@BaseTransId
	)

	if @OpenQty = 0
	begin
		update T_PurchaseOrderLine set OpenQty= @OpenQty where  CompanyCode= @CompanyCode and LineId=@BaseLine and PurchaseId= @BaseTransId
	end
	else
	begin
		update T_PurchaseOrderLine set OpenQty= @OpenQty, Status ='C' where  CompanyCode= @CompanyCode and LineId=@BaseLine and PurchaseId= @BaseTransId
	end
  
   set @qty = (select isnull(SUM(OpenQty),0) from T_PurchaseOrderLine with (nolock) where PurchaseId= @BaseTransId and  CompanyCode= @CompanyCode)
   if @qty <=0
   begin
		update T_PurchaseOrderHeader set Status = 'C' where PurchaseId= @BaseTransId and  CompanyCode= @CompanyCode
   end
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_GoodsReturnLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_GoodsReturnLineSerial]
	@PurchaseId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@OpenQty	decimal(19, 6)	,
	@BaseLine	nvarchar(50)	,
	@BaseTransId	nvarchar(50), @Description nvarchar(250)
 AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_GoodsReturnLineSerial 
	( 
	    PurchaseId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId	,
		Quantity	,
		UOMCode	,
		CreatedBy	,
		CreatedOn,
		ModifiedBy	,
		ModifiedOn,
		OpenQty,
		BaseLine,
		BaseTransId, Description
	)
	
	values(
		 @PurchaseId	,
		@LineId	,
		@CompanyCode,
		@ItemCode,
		@SerialNum,
		@SLocId	,
		@Quantity	,
		@UOMCode	,
		@CreatedBy	,
		@CreatedOn,
		@ModifiedBy	,
		@ModifiedOn,
		@OpenQty,
		@BaseLine,
		@BaseTransId, @Description 
	)

	update T_PurchaseOrderLineSerial set OpenQty= @OpenQty where  CompanyCode= @CompanyCode and LineId=@BaseLine and PurchaseId= @BaseTransId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryCountingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryCountingHeader]
	@ICId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled	nvarchar(50)	,
	@Name	nvarchar(250) ,
	@RefId nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryCountingHeader 
	(   ICId ,
	    CompanyCode ,
		StoreId ,
		StoreName ,
		DocStatus 	,
		DocDate ,
		DocDueDate ,
		DocTotal ,
		Comment ,
		CreatedBy , 
		Status	 ,
		IsCanceled ,
		Name	 ,
		RefId
	)
	
	values(
		@ICId ,
		@CompanyCode ,
		@StoreId ,
		@StoreName ,
		@DocStatus 	,
		@DocDate ,
		@DocDueDate ,
		@DocTotal ,
		@Comment ,
		@CreatedBy , 
		@Status	 ,
		@IsCanceled ,
		@Name	 ,
		@RefId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryCountingLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryCountingLine]
	@ICId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseRef	nvarchar(50)	,
	@BaseType	nvarchar(50)	,
	@BaseEntry	nvarchar(50)	,
	@LineStatus	char(1)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@TotalStock	decimal(19, 6)	,
	@TotalCount	decimal(19, 6)	,
	@TotalDifferent	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryCountingLine
	(   ICId	,
		CompanyCode,
		LineId	,
		ItemCode,
		SLocId	,
		BarCode	,
		Description,
		UOMCode	,
		Quantity	,
		Price,
		BaseRef	,
		BaseType	,
		BaseEntry,
		LineStatus	,
		LineTotal,
		Comment,
		TotalStock	,
		TotalCount	,
		TotalDifferent,
		CreatedBy,
		Status 
	)
	
	values(
		@ICId	,
		@CompanyCode,
		@LineId	,
		@ItemCode,
		@SLocId	,
		@BarCode	,
		@Description,
		@UOMCode	,
		@Quantity	,
		@Price,
		@BaseRef	,
		@BaseType	,
		@BaseEntry,
		@LineStatus	,
		@LineTotal,
		@Comment,
		@TotalStock	,
		@TotalCount	,
		@TotalDifferent,
		@CreatedBy,
		@Status 
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryCountingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryCountingLineSerial]
	@ICId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@TotalStock	decimal(19, 6)	,
	@TotalCount	decimal(19, 6)	,
	@TotalDifferent	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50),
	@Description	nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryCountingLineSerial 
	( ICId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId	,
		Quantity	,
		TotalStock	,
		TotalCount	,
		TotalDifferent,
		UOMCode	,
		CreatedBy,
		Description
	)
	
	values(
		@ICId	,
		@LineId	,
		@CompanyCode,
		@ItemCode,
		@SerialNum,
		@SLocId	,
		@Quantity	,
		@TotalStock	,
		@TotalCount	,
		@TotalDifferent,
		@UOMCode	,
		@CreatedBy, @Description
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryFrom_CheckNegative]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	@ListLine = (CompanyCode;ItemCode-SLocId-UOMCode-Quantity)
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryFrom_CheckNegative]
	@CompanyCode	nchar(10)	,
	@ListLine	nvarchar(MAX)	
AS
 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @LineTable AS TABLE
	(Line nvarchar(MAX))

	DECLARE @ItemTable AS TABLE
	(ItemCode nvarchar(50), SlocId	nvarchar(50), UOMCode nvarchar(50),Quantity decimal(19, 6))

	DECLARE @LineMember nvarchar(MAX)
	DECLARE	@UOMCode	nvarchar(50)	
	DECLARE	@Quantity	decimal(19, 6)	
	DECLARE	@SlocId	nvarchar(50)
	DECLARE @IsBOM BIT
	DECLARE @ItemCode	nvarchar(50)
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @IsNegative BIT
	DECLARE @SLocQuantity DECIMAL(19,6)
	DECLARE @ErrMsg NVARCHAR(250) = 'Successfully.' -- Return message


	INSERT INTO @LineTable 
		SELECT VALUE FROM string_split(@ListLine,';')

	DECLARE SPLIT_LINE CURSOR FOR
		SELECT Line 
		FROM @LineTable
	OPEN SPLIT_LINE

	FETCH NEXT FROM SPLIT_LINE
	INTO @LineMember 
	WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO @ItemTable 
			VALUES	(PARSENAME(REPLACE(@LineMember, '-', '.'), 4)
					, PARSENAME(REPLACE(@LineMember, '-', '.'), 3)
					, PARSENAME(REPLACE(@LineMember, '-', '.'), 2)
					, PARSENAME(REPLACE(@LineMember, '-', '.'), 1) )
			FETCH NEXT FROM SPLIT_LINE
			INTO @LineMember
		END
	CLOSE SPLIT_LINE 
	DEALLOCATE SPLIT_LINE

	

	DECLARE ITEM_CODE CURSOR FOR
		SELECT ItemCode, SLocId, UOMCode, Quantity 
		FROM @ItemTable
	OPEN ITEM_CODE

	FETCH NEXT FROM ITEM_CODE
	INTO @ItemCode, @SLocId, @UOMCode, @Quantity
	WHILE @@FETCH_STATUS = 0
		BEGIN
		SELECT @IsNegative = IsNegative 
		FROM M_Storage with (nolock)
		WHERE SLocId = @SLocId 
			AND CompanyCode = @CompanyCode
			IF(@IsNegative = 0)  
			BEGIN
				
				SELECT @SLocQuantity = Quantity
				FROM T_ItemStorage with (nolock)
				WHERE 
					CompanyCode = @CompanyCode 
					AND ItemCode = @ItemCode
					AND SLocId = @SLocId
					AND UOMCode = @UOMCode

				IF (SELECT COUNT(*) 
					FROM T_ItemStorage with (nolock)
					WHERE CompanyCode = @CompanyCode 
						AND ItemCode = @ItemCode
						AND SLocId = @SLocId
						AND UOMCode = @UOMCode) <> 0
					BEGIN
						IF(@SLocQuantity - @Quantity < 0)
							BEGIN
								SET @ErrMsg = 'Quantity is not enough'
								SELECT  1 as ID, @ErrMsg as Message
								RETURN
							END								
					END
				ELSE
					BEGIN	
								SET @ErrMsg = 'Quantity is not enough'
								SELECT  1 as ID, @ErrMsg as Message
								RETURN
					END
			
		END
		FETCH NEXT FROM ITEM_CODE
		INTO @ItemCode, @SLocId, @UOMCode, @Quantity	
	END
		SELECT  0 as ID, @ErrMsg as Message	
		RETURN
	CLOSE ITEM_CODE 
	DEALLOCATE ITEM_CODE
END




GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_InventoryHeader]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50),
	@DocType	nvarchar(50),
	@RefINVTId	nvarchar(50),
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	nvarchar(50)	,
	@DocDate	datetime,
	@DocDueDate	datetime,
	@FromStore	nvarchar(50),
	@FromStoreName	nvarchar(250),
	@ToStore nvarchar(50),
	@ToStoreName	nvarchar(250),
	@Name nvarchar(150),
	@Remark	nvarchar(250),
	@RefId nvarchar(50),
	@TransitWhs nvarchar(50), @FromWhs nvarchar(50), @ToWhs nvarchar(50), @ShiftId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryHeader 
	(   INVTId,
		CompanyCode,
		DocType,
		RefINVTId	,
		CreatedBy,
		Status	,
		IsCanceled	,
		DocDate,
		DocDueDate,
		FromStore,
		FromStoreName,
		ToStore ,
		ToStoreName,
		Name,
		Remark, RefId, TransitWhs, FromWhs, ToWhs, ShiftId
	)
	
	values(
		@INVTId,
		@CompanyCode,
		@DocType,
		@RefINVTId	,
		@CreatedBy,
		@Status	,
		@IsCanceled	,
		@DocDate,
		@DocDueDate,
		@FromStore,
		@FromStoreName,
		@ToStore ,
		@ToStoreName,
		@Name,
		@Remark, @RefId, @TransitWhs, @FromWhs, @ToWhs, @ShiftId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryLine]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@DocType	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@ShipDate	datetime	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@BaseTransId	nvarchar(50)	,
	@BaseLine nvarchar(50)	,
	@Approve	decimal(19, 6)	=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryLine
	(   INVTId	,
		CompanyCode,
		LineId	 ,
		ItemCode ,
		FrSLocId ,
		ToSlocId ,
		DocType ,
		BarCode ,
		Description ,
		UOMCode,
		Quantity ,
		ShipDate ,
		OpenQty ,
		Price	 ,
		LineTotal	 ,
		CreatedBy , 
		Status,
		BaseTransId,
		BaseLine
	)
	
	values(
		@INVTId	,
		@CompanyCode,
		@LineId	 ,
		@ItemCode ,
		@FrSLocId ,
		@ToSlocId ,
		@DocType ,
		@BarCode ,
		@Description ,
		@UOMCode,
		@Quantity ,
		@ShipDate ,
		@OpenQty ,
		@Price	 ,
		@LineTotal	 ,
		@CreatedBy , 
		@Status,
		@BaseTransId,
		@BaseLine
	)

	--if @DocType = 'R'
	--begin
	--	Declare @RefINVTId nvarchar(50);
	--	--Declare @CompanyCode nvarchar(50); set @CompanyCode ='CP001'; ='IVCP001W010100000016'--
	--	set @RefINVTId  = (select top 1 RefINVTId from T_InventoryHeader where INVTId = @INVTId and CompanyCode= @CompanyCode);
	--	declare @OpenQtyL int ; set @OpenQtyL = (select isnull(OpenQty, Quantity) from T_InventoryLine where INVTId = @RefINVTId and CompanyCode= @CompanyCode);
	--	declare @StatusH nvarchar(1); set @StatusH = (select isnull(Status, 'O') from T_InventoryHeader where INVTId = @RefINVTId and CompanyCode= @CompanyCode);
	--	declare @QtyL int; set @QtyL= @OpenQtyL - @Quantity;
		
	--	update T_InventoryLine set OpenQty = @QtyL where CompanyCode = @CompanyCode and @INVTId= @INVTId;
	--	if @QtyL > 0
	--	begin
	--		update T_InventoryHeader set Status = 'P' where CompanyCode = @CompanyCode and @INVTId= @RefINVTId;
	--	end
	--	else
	--	begin
	--		update T_InventoryHeader set Status = 'C' where CompanyCode = @CompanyCode and @INVTId= @RefINVTId;
	--	end  
	--end 
END

--update T_InventoryHeader set Status = 'C' where CompanyCode = @CompanyCode and @INVTId= @RefINVTId;
--select * from T_InventoryHeader

--select * from T_InventoryLine

GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryLineSerial]
	@INVTId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	nvarchar(50),
	@Description nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryLineSerial
	(   INVTId ,
		LineId ,
		CompanyCode ,
		ItemCode ,
		SerialNum	 ,
		FrSLocId ,
		ToSlocId ,
		Quantity ,
		UOMCode ,
		CreatedBy , 
		Status, Description
	)
	
	values(
		@INVTId ,
		@LineId ,
		@CompanyCode ,
		@ItemCode ,
		@SerialNum	 ,
		@FrSLocId ,
		@ToSlocId ,
		@Quantity ,
		@UOMCode ,
		@CreatedBy , 
		@Status, @Description
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryPostingHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryPostingHeader]
	@IPId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled	nvarchar(50)	,
	@Name	nvarchar(250),
	@RefId nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryPostingHeader 
	(  IPId,
	CompanyCode,
		StoreId,
		StoreName,
		DocStatus,
		DocDate,
		DocDueDate,
		DocTotal,
		Comment,
		CreatedBy	,
		Status	,
		IsCanceled,
		Name , RefId
	)
	
	values(
		@IPId,
		@CompanyCode,
		@StoreId,
		@StoreName,
		@DocStatus,
		@DocDate,
		@DocDueDate,
		@DocTotal,
		@Comment,
		@CreatedBy	,
		@Status	,
		@IsCanceled,
		@Name , @RefId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryPostingLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_T_InventoryPostingLine]
	@IPId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseRef	nvarchar(50)	,
	@BaseType	nvarchar(50)	,
	@BaseEntry	nvarchar(50)	,
	@LineStatus	char(1)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	, 
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryPostingLine
	(   IPId	,
		CompanyCode,
		LineId	,
		ItemCode,
		SLocId	,
		BarCode	,
		Description,
		UOMCode	,
		Quantity	,
		Price,
		BaseRef	,
		BaseType	,
		BaseEntry,
		LineStatus	,
		LineTotal,
		Comment, 
		CreatedBy,
		Status 
	)
	
	values(
		@IPId	,
		@CompanyCode,
		@LineId	,
		@ItemCode,
		@SLocId	,
		@BarCode	,
		@Description,
		@UOMCode	,
		@Quantity	,
		@Price,
		@BaseRef	,
		@BaseType	,
		@BaseEntry,
		@LineStatus	,
		@LineTotal,
		@Comment, 
		@CreatedBy,
		@Status 
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryPostingLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryPostingLineSerial]
	@IPId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	, 
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50),
	@Description nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryPostingLineSerial 
	(   IPId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId	,
		Quantity	, 
		UOMCode	,
		CreatedBy,Description
	)
	
	values(
		@IPId	,
		@LineId	,
		@CompanyCode,
		@ItemCode,
		@SerialNum,
		@SLocId	,
		@Quantity	, 
		@UOMCode	,
		@CreatedBy, @Description
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryTransferHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryTransferHeader]
	@INVTTransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50),
	@DocType	nvarchar(50),
	@RefINVTId	nvarchar(50),
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	nvarchar(50)	,
	@DocDate	datetime,
	@DocDueDate	datetime,
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(250),
	@FromSloc	nvarchar(50),
	@FromSlocName	nvarchar(250),
	@ToSloc nvarchar(50),
	@ToSlocName	nvarchar(250),
	@Name nvarchar(150),
	@Remark	nvarchar(250),
	@RefId nvarchar(50),
	@TransitWhs nvarchar(50), 
	@FromWhs nvarchar(50), 
	@ToWhs nvarchar(50), 
	@ShiftId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryTransferHeader
	(   INVTTransId,
		CompanyCode,
		DocType,
		RefINVTId	,
		CreatedBy,
		Status	,
		IsCanceled	,
		DocDate,
		DocDueDate,
		StoreId,
		StoreName,
		FromSloc,
		FromSlocName,
		ToSloc ,
		ToSlocName,
		Name,
		Remark, 
		RefId, 
		TransitWhs, 
		FromWhs, 
		ToWhs, 
		ShiftId
	)
	
	values(
		@INVTTransId,
		@CompanyCode,
		@DocType,
		@RefINVTId	,
		@CreatedBy,
		@Status	,
		@IsCanceled	,
		@DocDate,
		@DocDueDate,
		@StoreId,
		@StoreName,
		@FromSloc,
		@FromSlocName,
		@ToSloc ,
		@ToSlocName,
		@Name,
		@Remark, 
		@RefId, 
		@TransitWhs, 
		@FromWhs, 
		@ToWhs,  
		@ShiftId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryTransferLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryTransferLine]
	@INVTTransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@DocType	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@ShipDate	datetime	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@BaseTransId	nvarchar(50)	,
	@BaseLine nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryTransferLine
	(   INVTTransId	,
		CompanyCode,
		LineId	 ,
		ItemCode ,
		FrSLocId ,
		ToSlocId ,
		DocType ,
		BarCode ,
		Description ,
		UOMCode,
		Quantity ,
		ShipDate ,
		OpenQty ,
		Price	 ,
		LineTotal	 ,
		CreatedBy , 
		Status,
		BaseTransId,
		BaseLine
	)
	
	values(
		@INVTTransId	,
		@CompanyCode,
		@LineId	 ,
		@ItemCode ,
		@FrSLocId ,
		@ToSlocId ,
		@DocType ,
		@BarCode ,
		@Description ,
		@UOMCode,
		@Quantity ,
		@ShipDate ,
		@OpenQty ,
		@Price	 ,
		@LineTotal	 ,
		@CreatedBy , 
		@Status,
		@BaseTransId,
		@BaseLine
	)

	--if @DocType = 'R'
	--begin
	--	Declare @RefINVTId nvarchar(50);
	--	--Declare @CompanyCode nvarchar(50); set @CompanyCode ='CP001'; ='IVCP001W010100000016'--
	--	set @RefINVTId  = (select top 1 RefINVTId from T_InventoryHeader where INVTId = @INVTId and CompanyCode= @CompanyCode);
	--	declare @OpenQtyL int ; set @OpenQtyL = (select isnull(OpenQty, Quantity) from T_InventoryLine where INVTId = @RefINVTId and CompanyCode= @CompanyCode);
	--	declare @StatusH nvarchar(1); set @StatusH = (select isnull(Status, 'O') from T_InventoryHeader where INVTId = @RefINVTId and CompanyCode= @CompanyCode);
	--	declare @QtyL int; set @QtyL= @OpenQtyL - @Quantity;
		
	--	update T_InventoryLine set OpenQty = @QtyL where CompanyCode = @CompanyCode and @INVTId= @INVTId;
	--	if @QtyL > 0
	--	begin
	--		update T_InventoryHeader set Status = 'P' where CompanyCode = @CompanyCode and @INVTId= @RefINVTId;
	--	end
	--	else
	--	begin
	--		update T_InventoryHeader set Status = 'C' where CompanyCode = @CompanyCode and @INVTId= @RefINVTId;
	--	end  
	--end 
END

--update T_InventoryHeader set Status = 'C' where CompanyCode = @CompanyCode and @INVTId= @RefINVTId;
--select * from T_InventoryHeader

--select * from T_InventoryLine

GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InventoryTransferLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InventoryTransferLineSerial]
	@INVTTransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	nvarchar(50),
	@Description nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_InventoryTransferLineSerial
	(   INVTTransId ,
		LineId ,
		CompanyCode ,
		ItemCode ,
		SerialNum	 ,
		FrSLocId ,
		ToSlocId ,
		Quantity ,
		UOMCode ,
		CreatedBy , 
		Status, Description
	)
	
	values(
		@INVTTransId ,
		@LineId ,
		@CompanyCode ,
		@ItemCode ,
		@SerialNum	 ,
		@FrSLocId ,
		@ToSlocId ,
		@Quantity ,
		@UOMCode ,
		@CreatedBy , 
		@Status, @Description
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InvoiceHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_InvoiceHeader]
	@TransId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(250),
	@ContractNo nvarchar(50),
	@ShiftId	nvarchar(50),
	@CusId	nvarchar(50)	,
	@CusIdentifier	nvarchar(50)	,
	@TotalAmount	decimal(19, 6)	, 
	@TotalPayable	decimal(19, 6)	,
	@TotalDiscountAmt	decimal(19, 6)	,
	@TotalReceipt	decimal(19, 6)	,
	@AmountChange	decimal(19, 6)	,
	@PaymentDiscount decimal(19, 6)	,
	@TotalTax	decimal(19, 6)	,
	@DiscountType nvarchar(15)	,
	@DiscountAmount decimal(19, 6)	,
	@DiscountRate	decimal(19, 6),
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled char(1), 
	@Remarks	nvarchar(250)	,
	@SalesPerson	nvarchar(150)	,
	@SalesPersonName	nvarchar(250)	,
	@SalesMode	nvarchar(50)	,
	@RefTransId	nvarchar(50)	,
	@ManualDiscount	char(1),
	@SalesType nvarchar(50)	,
	@DataSource nvarchar(50),
	@POSType  nvarchar(50)	,
	@InvoiceType  nvarchar(50)	,
		@Phone nvarchar(50)	,
	@CusName nvarchar(250),
	@CusAddress nvarchar(250),
	@Reason nvarchar(250), @Chanel nvarchar(50),@TerminalId	nvarchar(50) 
AS
--BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
--	insert into T_InvoiceHeader
--	( 
--	TransId	,
--	CompanyCode,
--	StoreId,
--	StoreName,
--	ContractNo,
--	ShiftId,
--	CusId	,
--	CusIdentifier	,
--	TotalAmount,
--	TotalPayable,
--	TotalDiscountAmt,
--	TotalReceipt,
--	AmountChange,
--	PaymentDiscount ,
--	TotalTax	,
--	DiscountType ,
--	DiscountAmount ,
--	DiscountRate,
--	CreatedBy,
--	Status	,
--	IsCanceled,
--	Remarks	,
--	SalesPerson	, SalesPersonName,
--	SalesMode	,
--	RefTransId	,
--	ManualDiscount	, SalesType, DataSource, POSType, InvoiceType, Phone, CusName, CusAddress, Reason, Chanel, TerminalId
--	)
	
--	values(
--    -- Insert statements for procedure here
--	@TransId	,
--	@CompanyCode,
--	@StoreId,
--	@StoreName,
--	@ContractNo,
--	@ShiftId,
--	@CusId	,
--	@CusIdentifier	,
--	@TotalAmount,
--	@TotalPayable,
--	@TotalDiscountAmt,
--	@TotalReceipt,
--	@AmountChange,
--	@PaymentDiscount ,
--	@TotalTax	,
--	@DiscountType ,
--	@DiscountAmount ,
--	@DiscountRate	,
 
--	@CreatedBy	,
 
--	@Status	,
--	@IsCanceled,
--	@Remarks	,
--	@SalesPerson	, @SalesPersonName,
--	@SalesMode	,
--	@RefTransId	,
--	@ManualDiscount	, @SalesType, @DataSource, @POSType, @InvoiceType,  @Phone, @CusName, @CusAddress, @Reason, @Chanel, @TerminalId
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InvoiceLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--usp_I_T_InvoiceLine 'ARCP001ST00100000001','1','CP001','110007451','','Cai','1','48000','48000',
--'SANTOS Bàn Góc ', null,null,'test', 'O','Remark', '','', null,'','', null,null,'','SL001', null, null,'','','','',null,'','48000','48000','0','1', 'ST0012102220053'

CREATE PROCEDURE [dbo].[USP_I_T_InvoiceLine]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nchar(10)	,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@DiscountType nvarchar(50)	,
	@DiscountAmt	decimal(19, 6)	,
	@DiscountRate	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	, 
    @Status nvarchar(1)	,
    @Remark nvarchar(250)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoPercent	decimal(19, 6)	,
	@PromoBaseItem	nvarchar(50)	,
	@SalesMode	nvarchar(50)	, 
	@TaxRate	decimal(19, 6)	,
	@TaxAmt	decimal(19, 6)	,
	@TaxCode	nvarchar(50)	,
	@SlocId	nvarchar(50)	,
	@MinDepositAmt	decimal(19, 6)	,
	@MinDepositPercent	decimal(19, 6)	,
	@DeliveryType	char(1)	,
	@POSService	nvarchar(50),	
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50),
	@Duration int,
	@AppointmentDate	Datetime,
	@BomId	nvarchar(50),
	@PromoPrice	decimal(19, 6)	,
	@PromoLineTotal	decimal(19, 6)
	, @OpenQty decimal(19, 6), @BaseLine int, @BaseTransId nvarchar(50),
	 
	@PromoDisAmt	decimal(19, 6),
	@IsPromo	nvarchar(50),
	@IsSerial	bit, @IsVoucher	bit,
	@PrepaidCardNo	nvarchar(50)	,
	@Description	nvarchar(250)	,
	@MemberDate	datetime	,
	@MemberValue	int	,
	@StartDate	datetime	,
	@EndDate	datetime,
	@ItemType	nvarchar(50)	,
	@LineTotalBefDis	decimal(19, 6)= null,
	@LineTotalDisIncludeHeader	decimal(19, 6) = null, @StoreId nvarchar(250) = null
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
	
--INSERT INTO [dbo].[T_InvoiceLine]
--           ([TransId]
--           ,[LineId]
--           ,[CompanyCode]
--           ,[ItemCode]
--           ,[BarCode]
--           ,[UOMCode]
--           ,[Quantity]
--           ,[Price]
--		   ,LineTotal
--		   ,DiscountType
--           ,[DiscountAmt]
--           ,[DiscountRate]
--           ,[CreatedBy]
           
--           ,[Status]
--           ,[Remark]
--           ,[PromoId]
--           ,[PromoType]
--           ,[PromoPercent]
--           ,[PromoBaseItem]
--           ,[SalesMode]
--           ,[TaxRate]
--           ,[TaxAmt]
--           ,[TaxCode]
--           ,[SLocId]
--           ,[MinDepositAmt]
--           ,[MinDepositPercent]
--           ,[DeliveryType]
--           ,[POSService]
--		   ,StoreAreaId
--		   ,TimeFrameId , Duration
--		   ,AppointmentDate
--		   ,BomId,PromoPrice,PromoLineTotal, OpenQty, BaseLine, BaseTransId,
--		   PromoDisAmt,
--			IsPromo, IsSerial, IsVoucher, PrepaidCardNo	 ,
--			MemberDate ,
--			MemberValue ,
--			StartDate ,
--			EndDate, ItemType , Description, LineTotalBefDis, LineTotalDisIncludeHeader, StoreId)
--     VALUES
--           (@TransId,
--           @LineId, 
--           @CompanyCode, 
--           @ItemCode,
--           @BarCode, 
--           @UOMCode, 
--           @Quantity, 
--           @Price,
--		   @LineTotal,
--		   @DiscountType,
--           @DiscountAmt, 
--           @DiscountRate, 
--           @CreatedBy,  
--           @Status, 
--           @Remark, 
--           @PromoId, 
--           @PromoType, 
--           @PromoPercent, 
--           @PromoBaseItem, 
--           @SalesMode, 
--           @TaxRate, 
--           @TaxAmt, 
--           @TaxCode,
--           @SLocId, 
--           @MinDepositAmt, 
--           @MinDepositPercent,
--           @DeliveryType,
--           @POSService
--		   ,@StoreAreaId
--		   ,@TimeFrameId , @Duration
--		   ,@AppointmentDate,
--		   @BomId,@PromoPrice,@PromoLineTotal, @OpenQty, @BaseLine, @BaseTransId,
--		   @PromoDisAmt,
--			@IsPromo, @IsSerial,@IsVoucher, @PrepaidCardNo	 ,
--	@MemberDate ,
--	@MemberValue ,
--	@StartDate ,
--	@EndDate, @ItemType , @Description, @LineTotalBefDis, @LineTotalDisIncludeHeader, @StoreId )
 
-- --   declare @qty int
--	--set @qty= ( select isnull(OpenQty, ISNULL(Quantity,0)) from T_SalesLine where CompanyCode= @CompanyCode and LineId=@BaseLine  and TransId= @BaseTransId) 
--	update T_SalesLine set OpenQty= Quantity - @Quantity where  CompanyCode= @CompanyCode and LineId=@BaseLine and TransId= @BaseTransId

--END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InvoiceLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- USP_I_T_InvoiceLineSerial 'ARCP001ST00100000026','c2e49b50-da2f-4fcc-8f6f-5c9f768d9045','CP001','620950003','3JYSZLHD','SL001','0','Cai','admin','O','1','3','ST0012103040062','1'
CREATE PROCEDURE [dbo].[USP_I_T_InvoiceLineSerial]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	nvarchar(50),  @OpenQty decimal(19, 6), @BaseLine int, @BaseTransId nvarchar(50), @LineNum int, @Description nvarchar(250), @StoreId nvarchar(250) = null
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
	
--INSERT INTO [dbo].T_InvoiceLineSerial
--           (  TransId	,
--	LineId	,
--	CompanyCode,
--	ItemCode,
--	SerialNum,
--	SLocId,
--	Quantity,
--	UOMCode,
--	CreatedBy	, 
--	Status, OpenQty, BaseLine, BaseTransId, LineNum, Description, StoreId)
--     VALUES(    @TransId	,
--	@LineId	,
--	@CompanyCode,
--	@ItemCode,
--	@SerialNum,
--	@SLocId,
--	@Quantity,
--	@UOMCode,
--	@CreatedBy	, 
--	@Status, @OpenQty, @BaseLine, @BaseTransId, @LineNum, @Description, @StoreId)
 

--	update T_SalesLineSerial set OpenQty= @OpenQty where  CompanyCode= @CompanyCode and LineNum=@BaseLine and TransId= @BaseTransId

--END


--select * from T_SalesLineSerial
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InvoicePayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_I_T_InvoicePayment]
	@PaymentCode	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@TotalAmt	decimal(19, 6)	,
	@ReceivedAmt	decimal(19, 6)	,
	@PaidAmt	decimal(19, 6)	,
	@ChangeAmt	decimal(19, 6)	,
	@PaymentMode	nvarchar(50)	,
	@CardType	nvarchar(50)	,
	@CardHolderName	nvarchar(250)	,
	@CardNo	nvarchar(50)	,
	@VoucherBarCode	nvarchar(250)	,
	@VoucherSerial	nvarchar(50)	, 
	@CreatedBy	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1),
	@ChargableAmount	decimal(19, 6)	,
	@PaymentDiscount	decimal(19, 6)	,
	@CollectedAmount	decimal(19, 6)	,
	@RefNumber	nvarchar(50) ,
	@RefTransId	nvarchar(50) ,
	@ShiftId	nvarchar(50) ,
	@TerminalId	nvarchar(50) ,
	@Currency nvarchar(50),
	@FCAmount	decimal(19, 6)	= null,
	@Rate	decimal(19, 6)	= null, @StoreId nvarchar(250) = null
AS	


--INSERT INTO [dbo].[T_InvoicePayment]
--           ([PaymentCode]
--           ,[CompanyCode]
--           ,[TransId]
--           ,[LineId]
--           ,[TotalAmt]
--           ,[ReceivedAmt]
--           ,[PaidAmt]
--           ,[ChangeAmt]
--           ,[PaymentMode]
--           ,[CardType]
--           ,[CardHolderName]
--           ,[CardNo]
--           ,[VoucherBarCode]
--           ,[VoucherSerial]
--           ,[CreatedBy] 
--           ,[ModifiedBy]
--           ,[ModifiedOn]
--           ,[Status]
--		   ,ChargableAmount
--		   ,PaymentDiscount
--		   ,CollectedAmount
--		   ,RefNumber, RefTransId, ShiftId, TerminalId, Currency, FCAmount, Rate, StoreId
--		   )
--     VALUES
--           (
--		   @PaymentCode,  
--           @CompanyCode,  
--           @TransId,  
--           @LineId,  
--           @TotalAmt,  
--           @ReceivedAmt,  
--           @PaidAmt,  
--           @ChangeAmt,  
--           @PaymentMode, 
--           @CardType, 
--           @CardHolderName,  
--           @CardNo, 
--           @VoucherBarCode,  
--           @VoucherSerial,   
--           @CreatedBy, 
--           @ModifiedBy, 
--           @ModifiedOn, 
--           @Status,
--		   @ChargableAmount,
--	@PaymentDiscount,
--	@CollectedAmount,
--	@RefNumber, @RefTransId, @ShiftId, @TerminalId, @Currency, @FCAmount, @Rate, @StoreId
--		   )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_InvoicePromo]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_InvoicePromo]
	@TransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@RefTransId	nvarchar(50)	,
	@ApplyType	nvarchar(50)	,
	@ItemGroupId	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@Value	decimal(19, 6)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoTypeLine	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1),
	@PromoAmt	decimal(19, 6)	,
	@PromoPercent	decimal(19, 6)
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
	
--INSERT INTO [dbo].[T_InvoicePromo]
--           (  Id ,
--				TransId	,
--				CompanyCode,
--				ItemCode	,
--				BarCode	,
--				RefTransId	,
--				ApplyType	,
--				ItemGroupId,
--				UOMCode,
--				Value	,
--				PromoId	,
--				PromoType	,
--				PromoTypeLine	,
--				CreatedBy	, 
--				Status,  PromoAmt, PromoPercent)
--     VALUES( NewId(),   @TransId	,
--				@CompanyCode,
--				@ItemCode	,
--				@BarCode	,
--				@RefTransId	,
--				@ApplyType	,
--				@ItemGroupId,
--				@UOMCode,
--				@Value	,
--				@PromoId	,
--				@PromoType	,
--				@PromoTypeLine	,
--				@CreatedBy	, 
--				@Status, @PromoAmt, @PromoPercent )
 

--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_ItemStorage]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_ItemStorage] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@SLocId	nvarchar(50),
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50),
	@Quantity decimal(19, 6)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Delete T_ItemStorage where CompanyCode =@CompanyCode and  StoreId=@StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
	 

	insert into T_ItemStorage 
	(  CompanyCode	 ,
		StoreId	 ,
		SLocId	 ,
		ItemCode ,
		UOMCode	,
		Quantity
	)
	
	values(
		@CompanyCode	 ,
		@StoreId	 ,
		@SLocId	 ,
		@ItemCode ,
		@UOMCode	,
		@Quantity
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_LoyaltyLog]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_LoyaltyLog]
	-- Add the parameters for the stored procedure here
	@TransId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@CustomerId nvarchar(50),
	@CustomerName nvarchar(250),
	@CardNumber nvarchar(50),
	@TransDate datetime,
	@TransType nvarchar(50),
	@InPoint decimal(19, 6),
	@OutPoint decimal(19, 6),
	@InAmt decimal(19, 6),
	@OutAmt decimal(19, 6),
	@CreatedBy nvarchar(50),
	@CreatedOn datetime,
	@ModifiedBy nvarchar(50),
	@ModifiedOn datetime,
	@CalcStatus char(1),
	@ExpireDate date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @Status NVARCHAR(5)
	SELECT @Status = Status  FROM T_SalesHeader WHERE TransId = @TransId 

	IF @Status = 'H'
	BEGIN
		RETURN
	END

	IF ISNULL(@StoreId, '') = ''
	BEGIN
		SET @StoreId = (SELECT TOP 1 StoreId FROM M_Store)
	END

	DECLARE @PointRatio decimal(19, 6)
	DECLARE @AmtRatio decimal(19, 6)

	SELECT TOP 1 @PointRatio = Point, @AmtRatio = Amount
	FROM S_LoyaltyPointConvert
	WHERE CompanyCode = @CompanyCode AND StoreId = @StoreId
	ORDER BY ModifiedOn DESC, CreatedOn DESC


    -- Insert statements for procedure here
	INSERT INTO [dbo].[T_LoyaltyLog]
           ([TransId]
           ,[CompanyCode]
           ,[StoreId]
           ,[CustomerId]
           ,[CustomerName]
           ,[CardNumber]
           ,[TransDate]
           ,[TransType]
           ,[InPoint]
           ,[OutPoint]
           ,[InAmt]
           ,[OutAmt]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[CalcStatus]
           ,[ExpireDate]
		   ,[PointRatio]
		   ,[AmountRatio])
     VALUES
           (@TransId
           ,@CompanyCode
           ,@StoreId
           ,@CustomerId
           ,@CustomerName
           ,@CardNumber
           ,@TransDate
           ,@TransType
           ,@InPoint
           ,@OutPoint
           ,@InAmt
           ,@OutAmt
           ,@CreatedBy
           ,@CreatedOn
           ,@ModifiedBy
           ,@ModifiedOn
           ,@CalcStatus
           ,@ExpireDate
		   ,@PointRatio
		   ,@AmtRatio
		   )

	IF @InAmt != 0
		BEGIN

			DECLARE @CusAmt decimal(19, 6)
			SET @CusAmt = (SELECT SUM(ISNUll(L.InAmt, 0)) + ISNULL(NULLIF(C.CustomF3, ''), 0)
			FROM M_Customer C
			LEFT JOIN T_LoyaltyLog L on C.CustomerId = L.CustomerId
			WHERE C.CompanyCode = @CompanyCode AND C.CustomerId = @CustomerId
			GROUP BY C.CustomF3)

			--SET @CusAmt = (SELECT ISNULL(SUM(InAmt), 0) 'InAmt' 
			--FROM [T_LoyaltyLog]
			--WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId
			----AND GETDATE() <= [ExpireDate]
			--)
			--+
			--(SELECT TOP 1 ISNULL(CustomF3, 0) FROM M_Customer WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId)

			DECLARE @RankId char(1)
			SET @RankId = (SELECT TOP 1 RankId
			FROM [S_LoyaltyRank]
			WHERE CompanyCode = @CompanyCode AND @CusAmt >= TargetAmount
			ORDER BY TargetAmount DESC)

			DECLARE @RewardPoints decimal(19, 6)
			SET @RewardPoints = @InPoint + (SELECT TOP 1 ISNULL(RewardPoints, 0) FROM [dbo].[M_Customer] --WITH(NOLOCK) 
			WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId)

			IF ISNULL(@RankId, '') <> ''
		
				UPDATE [dbo].[M_Customer] SET CustomerRank = @RankId, RewardPoints = @RewardPoints WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId
			ELSE

				UPDATE [dbo].[M_Customer] SET RewardPoints = @RewardPoints WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId
		END

	ELSE 
		BEGIN
			IF @OutPoint != 0
			BEGIN

				DECLARE @CurentPoint decimal(19,6); 
				SET @CurentPoint = (SELECT TOP 1 RewardPoints FROM M_Customer --with (nolock) 
				WHERE CustomerId = @CustomerId AND CompanyCode = @CompanyCode)
				UPDATE M_Customer SET RewardPoints = @CurentPoint - @OutPoint WHERE CustomerId = @CustomerId AND CompanyCode = @CompanyCode

			END
		END


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_Payment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_I_T_Payment]
	@CompanyCode nvarchar(150),
	@TransId nvarchar(50),
	@Title nvarchar(250) ,
	@Remark nvarchar(550) ,
	@CusId nvarchar(50)= NULL,
	@Type nvarchar(50) =NULL,
	@DocDate datetime =NULL,
	@DocDueDate datetime =NULL,
	@RefTransId nvarchar(50)= NULL,
	@Reason nvarchar(50)= NULL,
	@CustomF1 nvarchar(250) =NULL,
	@CustomF2 nvarchar(250) =NULL,
	@CustomF3 nvarchar(250) =NULL,
	@CustomF4 nvarchar(250) =NULL,
	@CustomF5 nvarchar(250) =NULL,
	@Status nvarchar(50) =NULL,
	@CreatedBy nvarchar(50)= NULL,
	@CreatedOn datetime =NULL,
	@ModifiedBy nvarchar(50)= NULL,
	@ModifiedOn datetime= NULL,
	@Lines as T_PaymentLineTableType READONLY   
AS	
 begin

    if isnull(@TransId, '') = ''
	begin 
		set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] ('PM', @CompanyCode,'')) 
	end
	insert into T_PaymentHeader
	([CompanyCode]
      ,[TransId]
      ,[Title]
      ,[Remark]
      ,[CusId]
      ,[Type]
      ,[DocDate]
      ,[DocDueDate]
      ,[RefTransId]
      ,[Reason]
      ,[CustomF1]
      ,[CustomF2]
      ,[CustomF3]
      ,[CustomF4]
      ,[CustomF5]
      ,[Status]
      ,[CreatedBy]
      ,[CreatedOn]
      )

	values (
	   @CompanyCode
      ,@TransId
      ,@Title
      ,@Remark
      ,@CusId
      ,@Type
      ,@DocDate
      ,@DocDueDate
      ,@RefTransId
      ,@Reason
      ,@CustomF1
      ,@CustomF2
      ,@CustomF3
      ,@CustomF4
      ,@CustomF5
      ,@Status
      ,@CreatedBy
      ,GETDATE()
	  )
	  
	   
	 if (select count(*) from @Lines) > 0
	begin
		
	INSERT INTO [dbo].T_PaymentLine
			   ([PaymentCode]
			   ,[CompanyCode]
			   ,[TransId]
			   ,[LineId]
			   ,[TotalAmt]
			   ,[ReceivedAmt]
			   ,[PaidAmt]
			   ,[ChangeAmt]
			   ,[PaymentMode]
			   ,[CardType]
			   ,[CardHolderName]
			   ,[CardNo]
			   ,[VoucherBarCode]
			   ,[VoucherSerial]
			   ,[CreatedBy] 
			   ,CreatedOn
			   ,[Status]
			   ,ChargableAmount
			   ,PaymentDiscount
			   ,CollectedAmount
			   ,RefNumber, DataSource,Currency, Rate, FCAmount, ShiftId, CardExpiryDate, AdjudicationCode, AuthorizationDateTime, TerminalId, RoundingOff, FCRoundingOff,
			   ForfeitCode, Forfeit,
			   CustomF1,CustomF2,CustomF3,CustomF4,CustomF5, StoreId
			   )
		 select 
			   PaymentCode,  
			   CompanyCode,  
			   @TransId,  
			   LineId,  
			   TotalAmt,  
			   ReceivedAmt,  
			   PaidAmt,  
			   ChangeAmt,  
			   PaymentMode, 
			   CardType, 
			   CardHolderName,  
			   CardNo, 
			   VoucherBarCode,  
			   VoucherSerial,   
			   CreatedBy, 
			   GETDATE(),
			   Status,
			   ChargableAmount,
		PaymentDiscount,
		CollectedAmount,
		RefNumber, DataSource,Currency, Rate, FCAmount, ShiftId,  CardExpiryDate, AdjudicationCode, AuthorizationDateTime, TerminalId, RoundingOff,FCRoundingOff,
		ForfeitCode, Forfeit, CustomF1,CustomF2,CustomF3,CustomF4,CustomF5, StoreId
			from @Lines


	end
	select @TransId ;
 end
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PickupAmount]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_PickupAmount] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@CounterId	nvarchar(50),
	@ShiftId	nvarchar(50),
	@PickupBy	nvarchar(50),
	@Amount	decimal(19,6),
	 @Remarks	nvarchar(250),
	 @CustomF1	nvarchar(50) = null, @CustomF2	nvarchar(50) = null,
	@CustomF3	nvarchar(50) = null, @CustomF4	nvarchar(50) = null 
	, @CustomF5	nvarchar(50) = null
	, @CreatedBy	nvarchar(50), @Status	nvarchar(50), @DailyId	nvarchar(50)= null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_PickupAmount 
	( 
	 
	CompanyCode, 
	StoreId,
	CounterId,
	ShiftId,
	PickupBy	,
	Amount	,
	Remarks,
	 CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, 	CreatedBy, CreatedOn, Status, DailyId
	)
	
	values(
    @CompanyCode, 
	
	@StoreId, 
	@CounterId,
	@ShiftId,
	@PickupBy	,
	@Amount	,
	@Remarks,
	 @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, 	@CreatedBy, GETDATE(), @Status, @DailyId
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PrepaidCardTrans]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_I_T_PrepaidCardTrans]
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(50)	,
	@PepaidCardNo	nvarchar(50)	,
	@TransType	nvarchar(50)	,
	@MainBalance	numeric(19, 2)	,
	@SubBlance	numeric(19, 2)	,
	@CreatedBy	nvarchar(50)
	 
AS	INSERT 
	INTO T_PrepaidCardTrans(
         CompanyCode ,
		TransId ,
		PepaidCardNo ,
		TransType ,
		MainBalance ,
		SubBlance ,
			CreatedBy, CreatedOn) 
	VALUES ( @CompanyCode	,
			@TransId ,
		@PepaidCardNo ,
		@TransType ,
		@MainBalance ,
		@SubBlance ,
			@CreatedBy,
			GETDATE())
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PurchaseOrderHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_PurchaseOrderHeader]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@CardCode	nvarchar(50)	,
	@CardName	nvarchar(250)	,
	@InvoiceAddress	nvarchar(250)	,
	@TaxCode	nvarchar(50)	,
	@VATTotal	decimal(19, 6)	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	, 
	@CreatedOn datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)	,
	@IsCanceled	bit	,
	@DataSource	nvarchar(50)	
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_PurchaseOrderHeader 
--	( 
--	   PurchaseId,
--		CompanyCode,
--		StoreId,
--		StoreName	,
--		DocStatus	,
--		DocDate,
--		DocDueDate,
--		CardCode,
--		CardName,
--		InvoiceAddress	,
--		TaxCode,
--		VATTotal,
--		DocTotal,
--		Comment,
--		CreatedBy	, 
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn	,
--		Status	,
--		IsCanceled, DataSource
--	)
	
--	values(
--    @PurchaseId,
--	@CompanyCode,
--	@StoreId,
--	@StoreName	,
--	@DocStatus	,
--	@DocDate,
--	@DocDueDate,
--	@CardCode,
--	@CardName,
--	@InvoiceAddress	,
--	@TaxCode,
--	@VATTotal,
--	@DocTotal,
--	@Comment,
--	@CreatedBy	, 
--	@CreatedOn,
--	@ModifiedBy	,
--	@ModifiedOn	,
--	@Status	,
--	@IsCanceled	, @DataSource
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PurchaseOrderLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_PurchaseOrderLine]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseSAPId	nvarchar(50)	,
	@BaseSAPLine	int	,
	@LineStatus	char(1)	,
	@DiscPercent	decimal(19, 6)	,
	@VATPercent	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)
AS
--BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_PurchaseOrderLine 
--	( 
--	    PurchaseId,
--		CompanyCode,
--		LineId	,
--		ItemCode,
--		SLocId	,
--		BarCode	,
--		Description,
--		UOMCode	,
--		Quantity	,
--		OpenQty,
--		Price	,
--		BaseSAPId	,
--		BaseSAPLine		,
--		LineStatus	,
--		DiscPercent,
--		VATPercent	,
--		LineTotal	,
--		Comment,
--		CreatedBy	,
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn	,
--		Status	
--	)
	
--	values(
--		@PurchaseId,
--		@CompanyCode,
--		@LineId	,
--		@ItemCode,
--		@SLocId	,
--		@BarCode	,
--		@Description,
--		@UOMCode	,
--		@Quantity	,
--		@OpenQty,
--		@Price	,
--		@BaseSAPId	,
--		@BaseSAPLine		,
--		@LineStatus	,
--		@DiscPercent,
--		@VATPercent	,
--		@LineTotal	,
--		@Comment,
--		@CreatedBy	,
--		@CreatedOn,
--		@ModifiedBy	,
--		@ModifiedOn	,
--		@Status	
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PurchaseOrderLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_PurchaseOrderLineSerial]
	@PurchaseId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@OpenQty	decimal(19, 6)	,
	@BaseLine	nvarchar(50)	,
	@BaseTransId	nvarchar(50)	,
    @Description nvarchar(250)
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_PurchaseOrderLineSerial 
--	( 
--	    PurchaseId	,
--		LineId	,
--		CompanyCode,
--		ItemCode,
--		SerialNum,
--		SLocId,
--		Quantity	,
--		UOMCode,
--		CreatedBy,
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn	,
--		OpenQty,
--		BaseLine,
--		BaseTransId,
--		  Description 
--	)
	
--	values(
--		@PurchaseId	,
--		@LineId	,
--		@CompanyCode,
--		@ItemCode,
--		@SerialNum,
--		@SLocId,
--		@Quantity	,
--		@UOMCode,
--		@CreatedBy,
--		@CreatedOn,
--		@ModifiedBy	,
--		@ModifiedOn	,
--		@OpenQty,
--		@BaseLine,
--		@BaseTransId,
--		  @Description
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PurchaseRequestHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_PurchaseRequestHeader]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@CardCode	nvarchar(50)	,
	@CardName	nvarchar(250)	,
	@InvoiceAddress	nvarchar(250)	,
	@TaxCode	nvarchar(50)	,
	@VATTotal	decimal(19, 6)	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	, 
	@CreatedOn datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)	,
	@IsCanceled	char(1),
	@DataSource	nvarchar(50)	
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_PurchaseRequestHeader 
--	( 
--	   PurchaseId,
--		CompanyCode,
--		StoreId,
--		StoreName	,
--		DocStatus	,
--		DocDate,
--		DocDueDate,
--		CardCode,
--		CardName,
--		InvoiceAddress	,
--		TaxCode,
--		VATTotal,
--		DocTotal,
--		Comment,
--		CreatedBy	, 
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn	,
--		Status	,
--		IsCanceled, DataSource
--	)
	
--	values(
--    @PurchaseId,
--	@CompanyCode,
--	@StoreId,
--	@StoreName	,
--	@DocStatus	,
--	@DocDate,
--	@DocDueDate,
--	@CardCode,
--	@CardName,
--	@InvoiceAddress	,
--	@TaxCode,
--	@VATTotal,
--	@DocTotal,
--	@Comment,
--	@CreatedBy	, 
--	@CreatedOn,
--	@ModifiedBy	,
--	@ModifiedOn	,
--	@Status	,
--	@IsCanceled	, @DataSource
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PurchaseRequestLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_PurchaseRequestLine]
	@PurchaseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseSAPId	nvarchar(50)	,
	@BaseSAPLine	int	,
	@LineStatus	char(1)	,
	@DiscPercent	decimal(19, 6)	,
	@VATPercent	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1)
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_PurchaseRequestLine 
--	( 
--	    PurchaseId,
--		CompanyCode,
--		LineId	,
--		ItemCode,
--		SLocId	,
--		BarCode	,
--		Description,
--		UOMCode	,
--		Quantity	,
--		OpenQty,
--		Price	,
--		BaseSAPId	,
--		BaseSAPLine		,
--		LineStatus	,
--		DiscPercent,
--		VATPercent	,
--		LineTotal	,
--		Comment,
--		CreatedBy	,
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn	,
--		Status	
--	)
	
--	values(
--		@PurchaseId,
--		@CompanyCode,
--		@LineId	,
--		@ItemCode,
--		@SLocId	,
--		@BarCode	,
--		@Description,
--		@UOMCode	,
--		@Quantity	,
--		@OpenQty,
--		@Price	,
--		@BaseSAPId	,
--		@BaseSAPLine		,
--		@LineStatus	,
--		@DiscPercent,
--		@VATPercent	,
--		@LineTotal	,
--		@Comment,
--		@CreatedBy	,
--		@CreatedOn,
--		@ModifiedBy	,
--		@ModifiedOn	,
--		@Status	
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_PurchaseRequestLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_PurchaseRequestLineSerial]
	@PurchaseId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	,
	@CreatedOn	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@OpenQty	decimal(19, 6)	,
	@BaseLine	nvarchar(50)	,
	@BaseTransId	nvarchar(50)	,
    @Description nvarchar(250)
AS
--BEGIN
--	-- SET NOCOUNT ON added to prevent extra result sets from
--	-- interfering with SELECT statements.
--	SET NOCOUNT ON;
--	insert into T_PurchaseRequestLineSerial 
--	( 
--	    PurchaseId	,
--		LineId	,
--		CompanyCode,
--		ItemCode,
--		SerialNum,
--		SLocId,
--		Quantity	,
--		UOMCode,
--		CreatedBy,
--		CreatedOn,
--		ModifiedBy	,
--		ModifiedOn	,
--		OpenQty,
--		BaseLine,
--		BaseTransId,
--		  Description 
--	)
	
--	values(
--		@PurchaseId	,
--		@LineId	,
--		@CompanyCode,
--		@ItemCode,
--		@SerialNum,
--		@SLocId,
--		@Quantity	,
--		@UOMCode,
--		@CreatedBy,
--		@CreatedOn,
--		@ModifiedBy	,
--		@ModifiedOn	,
--		@OpenQty,
--		@BaseLine,
--		@BaseTransId,
--		  @Description
--	)
--END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_Sales_Delivery]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_T_Sales_Delivery]
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(250)	,
	@DeliveryType	nvarchar(250)	,
	@DeliveryMethod	nvarchar(50)	,
	@DeliveryFee	char(50)
	 
AS	
	return
INSERT INTO [dbo].T_Sales_Delivery
           ( Id
           ,[CompanyCode]
           ,TransId
           ,DeliveryType
           ,DeliveryMethod
           ,DeliveryFee
           )
     VALUES ( NEWID(), @CompanyCode, @TransId, @DeliveryType, @DeliveryMethod, @DeliveryFee)
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesDelivery]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_SalesDelivery]
	@TransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DeliveryPartner	nvarchar(250)	,
	@DeliveryId	nvarchar(150)	,
	@Email	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@Remark	nvarchar(250)	, 
	@CreatedBy	nvarchar(50) 
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_SalesDelivery
	(   TransId,
		CompanyCode,
		StoreId	,
		StoreName,
		DeliveryPartner,
		DeliveryId,
		Email	,
		Address,
		Phone	,
		Remark,
		CreatedOn	,
		CreatedBy 
 
	)
	
	values( 
		@TransId,
		@CompanyCode,
		@StoreId	,
		@StoreName,
		@DeliveryPartner,
		@DeliveryId,
		@Email	,
		@Address,
		@Phone	,
		@Remark,
	    GETDATE()	,
		@CreatedBy 
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_SalesHeader]
	@TransId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(250),
	@ContractNo	nvarchar(50),
	@ShiftId	nvarchar(50),
	@CusId	nvarchar(50)	,
	@CusIdentifier	nvarchar(50)	,
	@TotalAmount	decimal(19, 6)	, 
	@TotalPayable	decimal(19, 6)	,
	@TotalDiscountAmt	decimal(19, 6)	,
	@TotalReceipt	decimal(19, 6)	,
	@AmountChange	decimal(19, 6)	,
	@PaymentDiscount decimal(19, 6)	,
	@TotalTax	decimal(19, 6)	,
	@DiscountType nvarchar(20)	,
	@DiscountAmount decimal(19, 6)	,
	@DiscountRate	decimal(19, 6),
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled char(1), 
	@Remarks	nvarchar(250)	,
	@SalesPerson	nvarchar(150)	,
	@SalesPersonName nvarchar(250)	,
	@SalesMode	nvarchar(50)	,
	@RefTransId	nvarchar(50)	,
	@ManualDiscount	char(1),
	@SalesType nvarchar(50)	,
	@DataSource nvarchar(50),
	@POSType nvarchar(50), 
	@Phone nvarchar(50)	,
	@CusName nvarchar(250),
	@CusAddress nvarchar(250), 
	@Reason nvarchar(250),
	@CollectedStatus nvarchar(50),
	@OMSId nvarchar(50) , @Chanel nvarchar(50), @StartTime datetime,  @TerminalId nvarchar(50) = null, @RoundingOff	decimal(19, 6)= null,
	@ShortOrderID	nvarchar(50)= null , @MerchantId	nvarchar(50) = null, @CusGrpId	nvarchar(50) = null, @PromoId	nvarchar(50) = null
	,@RewardPoints	decimal(19, 6) = null, @ExpiryDate	datetime = null
	,@ApprovalId	nvarchar(50) = null, @DocDate	datetime = null, @CustomF1	nvarchar(50) = null, @CustomF2	nvarchar(50) = null,
	@CustomF3	nvarchar(50) = null, @CustomF4	nvarchar(50) = null , @CustomF5	nvarchar(50) = null, @LuckyNo	nvarchar(50) = null
		, @OrderId	nvarchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_SalesHeader 
	( 
	TransId	,
	CompanyCode,
	ContractNo,
	StoreId,
	StoreName,
	ShiftId,
	CusId	,
	CusIdentifier	,
	TotalAmount,
	TotalPayable,
	TotalDiscountAmt,
	TotalReceipt,
	AmountChange,
	PaymentDiscount ,
	TotalTax	,
	DiscountType ,
	DiscountAmount ,
	DiscountRate,
	CreatedBy, CreatedOn,
	Status	,
	IsCanceled,
	Remarks	,
	SalesPerson	, SalesPersonName,
	SalesMode	,
	RefTransId	,
	ManualDiscount	,
	SalesType,
	DataSource, POSType , Phone, CusName, CusAddress, Reason, CollectedStatus, OMSId  , Chanel, StartTime, TerminalId, RoundingOff, ShortOrderID, MerchantId, CusGrpId, PromoId, ApprovalId, RewardPoints, ExpiryDate,
	DocDate, CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, LuckyNo, OrderId
	)
	
	values(
    -- Insert statements for procedure here
	@TransId	,
	@CompanyCode, @ContractNo,
	@StoreId,
	@StoreName,
	@ShiftId,
	@CusId	,
	@CusIdentifier	,
	@TotalAmount,
	@TotalPayable,
	@TotalDiscountAmt,
	@TotalReceipt,
	@AmountChange,
	@PaymentDiscount ,
	@TotalTax	,
	@DiscountType ,
	@DiscountAmount ,
	@DiscountRate	,
 
	@CreatedBy	, GETDATE(),
 
	@Status	,
	@IsCanceled,
	@Remarks	,
	@SalesPerson	, @SalesPersonName,
	@SalesMode	,
	@RefTransId	,
	@ManualDiscount	,
	@SalesType,
	@DataSource, @POSType,  @Phone, @CusName, @CusAddress, @Reason, @CollectedStatus, @OMSId, @Chanel,
	
	@StartTime
	,@TerminalId, @RoundingOff, @ShortOrderID, @MerchantId, @CusGrpId, @PromoId, @ApprovalId, @RewardPoints, @ExpiryDate,
		@DocDate, @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, @LuckyNo, @OrderId

	)
END

--(SELECT DATEADD(mi, -1, GETDATE()))
--select CreatedOn, StartTime, * from T_SalesHeader where TransId ='SOCP001300600000227'
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesInvoice]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_SalesInvoice]
	@TransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@CustomerName	nvarchar(250)	,
	@TaxCode	nvarchar(150)	,
	@Email	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@Remark	nvarchar(250)	, 
	@CreatedBy	nvarchar(50) ,
	@Name	nvarchar(250)	= null
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_SalesInvoice 
	(   TransId,
		CompanyCode,
		StoreId	,
		StoreName,
		CustomerName,
		TaxCode,
		Email	,
		Address,
		Phone	,
		Remark,
		CreatedOn	,
		CreatedBy 
		--,Name
 
	)
	
	values( 
		@TransId,
		@CompanyCode,
		@StoreId	,
		@StoreName,
		@CustomerName,
		@TaxCode,
		@Email	,
		@Address,
		@Phone	,
		@Remark,
	    GETDATE()	,
		@CreatedBy 
		--,@Name
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_SalesLine]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nchar(10)	,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@DiscountType nvarchar(50)	,
	@DiscountAmt	decimal(19, 6)	,
	@DiscountRate	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	, 
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
    @Status nvarchar(1)	,
    @Remark nvarchar(250)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoPercent	decimal(19, 6)	,
	@PromoBaseItem	nvarchar(50)	,
	@SalesMode	nvarchar(50)	,
	@Remarks	nvarchar(250)	,
	@TaxRate	decimal(19, 6)	,
	@TaxAmt	decimal(19, 6)	,
	@TaxCode	nvarchar(50)	,
	@SlocId	nvarchar(50)	,
	@MinDepositAmt	decimal(19, 6)	,
	@MinDepositPercent	decimal(19, 6)	,
	@DeliveryType	char(1)	,
	@POSService	nvarchar(50),	
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50),
	@Duration int,
	@AppointmentDate	Datetime,
	@BomId	nvarchar(50),
	@PromoPrice	decimal(19, 6)	,
	@PromoLineTotal	decimal(19, 6),
	@BaseLine	nvarchar(50),
	@BaseTransId	nvarchar(50),
	@OpenQty	decimal(19, 6),
	@PromoDisAmt	decimal(19, 6),
	@IsPromo	nvarchar(50),
	@IsSerial	bit,
	@IsVoucher	bit,
	@PrepaidCardNo	nvarchar(50)	,
	@Description	nvarchar(250)	,
	@MemberDate	datetime	,
	@MemberValue	int	,
	@StartDate	datetime	,
	@EndDate	datetime,
	@ItemType	nvarchar(50),
	@LineTotalBefDis	decimal(19, 6),
	@LineTotalDisIncludeHeader	decimal(19, 6),
	@SerialNum	nvarchar(50),
	@Phone	nvarchar(50),
	@Name	nvarchar(250),
	@ItemTypeS4	nvarchar(250) = null,
	@Custom1	nvarchar(250)= null,
	@Custom2	nvarchar(250)= null,
	@Custom3	nvarchar(250)= null,
	@Custom4	nvarchar(250)= null,
	@Custom5	nvarchar(250) = null,
	@ProductId	nvarchar(250) = null,
	@PriceListId	nvarchar(250) = null,
	@WeightScaleBarcode	nvarchar(250) = null,
	@StoreId nvarchar(250) = null,
	@BookletNo	nvarchar(250) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	if isnull(@ItemType, '') = '' begin set @ItemType = (select CustomField1 from M_Item where ItemCode = @ItemCode ) end

	if isnull(@ItemTypeS4, '') = '' begin set @ItemTypeS4 = (select ItemCategory_1 from M_Item where ItemCode = @ItemCode ) end
INSERT INTO [dbo].[T_SalesLine]
           ([TransId]
           ,[LineId]
           ,[CompanyCode]
           ,[ItemCode]
           ,[BarCode]
           ,[UOMCode]
           ,[Quantity]
           ,[Price]
		   ,LineTotal
		   ,DiscountType
           ,[DiscountAmt]
           ,[DiscountRate]
           ,[CreatedBy]
          
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status]
           ,[Remark]
           ,[PromoId]
           ,[PromoType]
           ,[PromoPercent]
           ,[PromoBaseItem]
           ,[SalesMode]
           ,[TaxRate]
           ,[TaxAmt]
           ,[TaxCode]
           ,[SLocId]
           ,[MinDepositAmt]
           ,[MinDepositPercent]
           ,[DeliveryType]
           ,[POSService]
		   ,StoreAreaId
		   ,TimeFrameId
		   ,Duration
		   ,AppointmentDate
		   ,BomId,PromoPrice,PromoLineTotal, BaseLine,
			BaseTransId,
			OpenQty,
			PromoDisAmt,
			IsPromo, IsSerial, IsVoucher,
			PrepaidCardNo	 ,
			MemberDate ,
			MemberValue ,
			StartDate ,
			EndDate, ItemType , Description, LineTotalBefDis , LineTotalDisIncludeHeader,SerialNum,  Phone, Name,
			ItemTypeS4	 ,
	Custom1 ,
	Custom2 ,
Custom3 ,
	Custom4 ,
	Custom5 ,ProductId, PriceListId, WeightScaleBarcode, StoreId, BookletNo)
     VALUES
           (@TransId,
           @LineId, 
           @CompanyCode, 
           @ItemCode,
           @BarCode, 
           @UOMCode, 
           @Quantity, 
           @Price,
		   @LineTotal,
		   @DiscountType,
           @DiscountAmt, 
           @DiscountRate, 
           @CreatedBy, 
            
           @ModifiedBy, 
           @ModifiedOn, 
           @Status, 
           @Remark, 
           @PromoId, 
           @PromoType, 
           @PromoPercent, 
           @PromoBaseItem, 
           @SalesMode, 
           @TaxRate, 
           @TaxAmt, 
           @TaxCode,
           @SLocId, 
           @MinDepositAmt, 
           @MinDepositPercent,
           @DeliveryType,
           @POSService
		   ,@StoreAreaId
		   ,@TimeFrameId, @Duration
		   ,@AppointmentDate,
		   @BomId,@PromoPrice,@PromoLineTotal,
		   @BaseLine,
			@BaseTransId,
			@OpenQty,
			@PromoDisAmt,
			@IsPromo, @IsSerial, @IsVoucher, @PrepaidCardNo	 ,
			@MemberDate ,
			@MemberValue ,
			@StartDate ,
			@EndDate, @ItemType , @Description, @LineTotalBefDis , @LineTotalDisIncludeHeader, @SerialNum,  @Phone, @Name,
				@ItemTypeS4	 ,
	@Custom1 ,
	@Custom2 ,
	@Custom3 ,
	@Custom4 ,
	@Custom5, @ProductId, @PriceListId , @WeightScaleBarcode, @StoreId, @BookletNo
	)
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesLine_CheckNegative]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	@ListLine = (CompanyCode;ItemCode-SLocId-UOMCode-Quantity) ItemCode-Sloc-Uom-quan;
--line.ItemCode + "-" + line.SlocId + "-" + line.UomCode + "-" + line.Quantity + ";
-- USP_I_T_SalesLine_CheckNegative 'CP001','GLA030001-W0102-Cái-1;'
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_SalesLine_CheckNegative]
	@CompanyCode	nchar(10)	,
	@ListLine	nvarchar(MAX)	
AS
 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @LastChar nvarchar(5)
	set @LastChar = (select right(@ListLine, 1))
	if @LastChar = ';'
	begin
		set @ListLine = LEFT(@ListLine, NULLIF(LEN(@ListLine)-1,-1)) 
	end
	DECLARE @LineTable AS TABLE
	(Line nvarchar(MAX))

	DECLARE @ItemTable AS TABLE
	(ItemCode nvarchar(50), SlocId	nvarchar(50), UOMCode nvarchar(50),Quantity decimal(19, 6))
	
	DECLARE @LineMember nvarchar(MAX)
	DECLARE	@UOMCode	nvarchar(50)	
	DECLARE	@ItemName	nvarchar(250)	
	DECLARE	@Quantity	decimal(19, 6)	
	DECLARE	@SlocId	nvarchar(50)
	DECLARE	@ItemType	nvarchar(50)
	DECLARE @IsBOM BIT
	DECLARE @ItemCode	nvarchar(50)
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @IsNegative BIT
	DECLARE @SLocQuantity DECIMAL(19,6)
	DECLARE @ErrMsg NVARCHAR(550) = 'Successfully.' -- Return message
	Declare @NumofQty int

	INSERT INTO @LineTable 
		SELECT VALUE FROM string_split(@ListLine,';')

	DECLARE SPLIT_LINE CURSOR FOR
		SELECT Line 
		FROM @LineTable
	OPEN SPLIT_LINE

	FETCH NEXT FROM SPLIT_LINE
	INTO @LineMember 
	WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO @ItemTable 
			VALUES	(PARSENAME(REPLACE(@LineMember, '-', '.'), 4)
					, PARSENAME(REPLACE(@LineMember, '-', '.'), 3)
					, PARSENAME(REPLACE(@LineMember, '-', '.'), 2)
					, PARSENAME(REPLACE(@LineMember, '-', '.'), 1) )
			FETCH NEXT FROM SPLIT_LINE
			INTO @LineMember
		END
	CLOSE SPLIT_LINE 
	DEALLOCATE SPLIT_LINE

	
	
	DECLARE ITEM_CODE CURSOR FOR
		SELECT ItemCode, SLocId, UOMCode, Quantity 
		FROM @ItemTable
	OPEN ITEM_CODE

	--SELECT  * from @ItemTable RETURN

	FETCH NEXT FROM ITEM_CODE
	INTO @ItemCode, @SLocId, @UOMCode, @Quantity
	WHILE @@FETCH_STATUS = 0
		BEGIN
			if(isnull(@ItemCode,'')<>'')
			begin
				SELECT @IsNegative = IsNegative  FROM M_Storage with (nolock) WHERE SLocId = @SLocId  AND CompanyCode = @CompanyCode
				IF(@IsNegative = 0)  
				BEGIN
					SELECT @IsBOM = ISBOM , @ItemType = CustomField4, @ItemName = ItemName
					FROM M_Item with (nolock) 
					WHERE ItemCode = @ItemCode 
						AND CompanyCode = @CompanyCode;
			
					if( @ItemType = 'I')
					begin
						IF (@IsBOM = 1)
						BEGIN
							SELECT @Propotion = @Quantity/Quantity 
							FROM M_BOMHeader with (nolock)
							WHERE ItemCode = @ItemCode
								AND CompanyCode = @CompanyCode

							DECLARE BOM_LINES CURSOR FOR
								SELECT ItemCode, UOMCode , Quantity 
								FROM M_BOMLine with (nolock)
								WHERE BOMId = @ItemCode 
									AND CompanyCode = @CompanyCode
							OPEN BOM_LINES  

							FETCH NEXT FROM BOM_LINES 
							INTO @ItemCode, @UOMCode, @Quantity

							WHILE @@FETCH_STATUS = 0 
								BEGIN
									SELECT @SLocQuantity = Quantity
									FROM T_ItemStorage with (nolock)
									WHERE 
										CompanyCode = @CompanyCode 
										AND ItemCode = @ItemCode
										AND SLocId = @SLocId
										AND UOMCode = @UOMCode

									IF (SELECT COUNT(*) 
										FROM T_ItemStorage with (nolock)
										WHERE 
											CompanyCode = @CompanyCode 
										AND ItemCode = @ItemCode
										AND SLocId = @SLocId
										AND UOMCode = @UOMCode) <> 0
										BEGIN
											IF(@SLocQuantity - @Quantity*@Propotion < 0)
												BEGIN
													SET @ErrMsg = @ItemName + ' Quantity is not enough'
													SELECT  1 as ID, @ErrMsg as Message
													RETURN
												END
										END
									ELSE
										BEGIN
											SET @ErrMsg = @ItemName + ' Quantity is not enough'
											SELECT  1 as ID, @ErrMsg as Message
											RETURN
										END
									FETCH NEXT FROM BOM_LINES
									INTO @ItemCode, @UOMCode, @Quantity
								END
							CLOSE BOM_LINES 
							DEALLOCATE BOM_LINES						
							END

						-- IsBOM = 0
						ELSE
							begin
								SELECT @SLocQuantity = Quantity FROM T_ItemStorage with (nolock) WHERE 
																				CompanyCode = @CompanyCode 
																				AND ItemCode = @ItemCode
																				AND SLocId = @SLocId
																				AND UOMCode = @UOMCode 

								set @NumofQty = (SELECT isnull(COUNT(*),0)  FROM T_ItemStorage with (nolock) 
											WHERE CompanyCode = @CompanyCode  AND ItemCode = @ItemCode
										AND SLocId = @SLocId AND UOMCode = @UOMCode )

								--SET @ErrMsg = '101 ' + CONVERT( nvarchar(50), @SLocQuantity)  + @ItemName + ' Quantity is not enough in storage ' + @UOMCode + @SLocId + @ItemCode + CONVERT( nvarchar(50), @NumofQty) + ' SELECT isnull(COUNT(*),0)  FROM T_ItemStorage with (nolock) 
								--			WHERE CompanyCode = @CompanyCode  AND ItemCode = ' + @ItemCode + '
								--		AND SLocId = ' + @SLocId + ' AND UOMCode =' + @UOMCode +''
								--		SELECT  1 as ID, @ErrMsg as Message
								--		RETURN
								IF @NumofQty <= 0	
									begin
										SET @ErrMsg = '101 ' + @ItemName + ' Quantity is not enough in storage'
										SELECT  1 as ID, @ErrMsg as Message
										RETURN
									END
								else
									BEGIN
									 
										 
											IF(@Quantity > 0 and (@SLocQuantity - @Quantity < 0 or @SLocQuantity < 0))
											BEGIN
												SET @ErrMsg = '102 '+ @ItemName + ' Quantity is not enough. Sloc Qty: ' + CONVERT( nvarchar(50), @SLocQuantity)
												SELECT  1 as ID, @ErrMsg as Message
												RETURN
											END		
										 
										
						 
									END
							 
							end
					end
				END
			end
		FETCH NEXT FROM ITEM_CODE
		INTO @ItemCode, @SLocId, @UOMCode, @Quantity	
		END
		SELECT  0 as ID, @ErrMsg as Message	
		RETURN
	CLOSE ITEM_CODE 
	DEALLOCATE ITEM_CODE
END

--SELECT  COUNT(*)  FROM T_ItemStorage with (nolock) 
--										WHERE CompanyCode = 'CP001'  AND ItemCode = 'JA060601001'
--									AND SLocId = 'W0102' AND UOMCode = 'Đôi'

----USP_I_T_SalesLine_CheckNegative 'CP001', 'JA060601001-W0102-Đôi-1;'

----SELECT isnull(COUNT(*),0)  FROM T_ItemStorage with (nolock) WHERE CompanyCode = 'CP001'  AND ItemCode = 'GLA030001'
----									AND SLocId = 'W0102' AND UOMCode = 'Cái'

---- USP_I_T_SalesLine_CheckNegative 'CP001','GLA030001-W0102-Cái-1;'Đôi
----SELECT isnull(COUNT(*),0)  FROM T_ItemStorage with (nolock) WHERE CompanyCode = 'CP001'  AND ItemCode = 'GLA030001'
----									AND SLocId = 'W0102' AND UOMCode = 'Cái'


--select * from T_ItemStorage WHERE CompanyCode = 'CP001'  AND ItemCode = 'JA060601001'  AND SLocId = N'W0102'AND UOMCode = 'Đôi'
--									
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesLineSerial]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_SalesLineSerial]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	nvarchar(50),
	@OpenQty	decimal(19, 6)	,
	@BaseLine	int,
	@BaseTransId	nvarchar(50),
	@LineNum	int,
	@Prefix	nvarchar(50),
	@Phone	nvarchar(50),
	@Name	nvarchar(250),
	@CustomF1	nvarchar(50),
	@CustomF2 nvarchar(50),
	@ExpDate datetime = null,
	@StoreId nvarchar(50) = null

 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @StoreId = null
	BEGIN
		SET @StoreId = (SELECT TOP 1 StoreID FROM T_SalesHeader WHERE TransId = @TransId)
	END

	INSERT INTO [dbo].[T_SalesLineSerial]
			  (  TransId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId,
		Quantity,
		UOMCode,
		CreatedBy	, 
		Status,  OpenQty ,
		BaseLine ,
		BaseTransId, LineNum, Prefix ,
		Phone ,
		Name ,
		CustomF1 ,
		CustomF2  , ExpDate, StoreId
		)
		VALUES(   
		@TransId	,
		@LineId	,
		@CompanyCode,
		@ItemCode,
		@SerialNum,
		@SLocId,
		@Quantity,
		@UOMCode,
		@CreatedBy	, 
		@Status, @OpenQty ,
		@BaseLine ,
		@BaseTransId,
		@LineNum,
		@Prefix ,
		@Phone ,
		@Name ,
		@CustomF1 ,
		@CustomF2, @ExpDate, @StoreId  )
 
 --update T_SalesLineSerial set OpenQty= @OpenQty where  CompanyCode= @CompanyCode and LineId=@BaseLine and TransId= @BaseTransId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesOrder]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_I_T_SalesOrder]
	@TransId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(250),
	@ContractNo	nvarchar(50),
	@ShiftId	nvarchar(50),
	@CusId	nvarchar(50)	,
	@CusIdentifier	nvarchar(50)	,
	@TotalAmount	decimal(19, 6)	, 
	@TotalPayable	decimal(19, 6)	,
	@TotalDiscountAmt	decimal(19, 6)	,
	@TotalReceipt	decimal(19, 6)	,
	@AmountChange	decimal(19, 6)	,
	@PaymentDiscount decimal(19, 6)	,
	@TotalTax	decimal(19, 6)	,
	@DiscountType nvarchar(20)	,
	@DiscountAmount decimal(19, 6)	,
	@DiscountRate	decimal(19, 6),
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled char(1), 
	@Remarks	nvarchar(250)	,
	@SalesPerson	nvarchar(150)	,
	@SalesPersonName nvarchar(250)	,
	@SalesMode	nvarchar(50)	,
	@RefTransId	nvarchar(50)	,
	@ManualDiscount	char(1),
	@SalesType nvarchar(50)	,
	@DataSource nvarchar(50),
	@POSType nvarchar(50), 
	@Phone nvarchar(50)	,
	@CusName nvarchar(250),
	@CusAddress nvarchar(250), 
	@Reason nvarchar(250),
	@CollectedStatus nvarchar(50),
	@OMSId nvarchar(50) , @Chanel nvarchar(50), @StartTime datetime,  @TerminalId nvarchar(50) = null, @RoundingOff	decimal(19, 6)= null,
	@ShortOrderID	nvarchar(50)= null , @MerchantId	nvarchar(50) = null, @CusGrpId	nvarchar(50) = null, @PromoId	nvarchar(50) = null
	,@RewardPoints	decimal(19, 6) = null, @ExpiryDate	datetime = null
	,@ApprovalId	nvarchar(50) = null, @DocDate	datetime = null, @CustomF1	nvarchar(50) = null, @CustomF2	nvarchar(50) = null,
	@CustomF3	nvarchar(50) = null, @CustomF4	nvarchar(50) = null , @CustomF5	nvarchar(50) = null  , @LuckyNo	nvarchar(50) = null
	 , @OrderId	nvarchar(50) = null 
	 , @PrefixSO	nvarchar(50) = null 
	 , @PrefixAR	nvarchar(50) = null 
	 , @LoyaltyId	nvarchar(50) = null 
	 ,@Lines as SalesLineTableType READONLY   
	,@LineSerials as SalesLineSerialTableType READONLY  
	,@LineInvoices as SalesInvoiceTableType READONLY  
	,@LinePayments as SalesPaymentTableType READONLY  
	,@LinePromos as SalesPromoTableType READONLY  
	,@LineDelivery as Sales_DeliveryTableType READONLY  
AS

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @LineTotal decimal(19,6)
	DECLARE @CalcuLineTotal decimal(19,6)
	DECLARE @CalcuCollected decimal(19,6)
	DECLARE @Message NVARCHAR(MAX)
	 
 	SELECT @CalcuCollected = (select SUM(ISNULL( CollectedAmount ,0)) from @LinePayments)
  
	SELECT   @CalcuLineTotal = ROUND(SUM(Price * Quantity * (100 - ISNULL(L.DiscountRate, 0)) / 100), 2, 1) ,  @LineTotal=  ROUND(SUM(L.LineTotal),  2, 1) 
	FROM @Lines L 
	--INNER JOIN T_SalesHeader H ON H.POSTransId = L.POSTransId
	--WHERE ISNULL(SyncSAPStatus,'N') <> 'Y' 
	GROUP BY L.TransId
	--HAVING ROUND(SUM(Price * Quantity * (100 - ISNULL(L.DiscountRate,0)) / 100),2) <> ROUND(SUM(L.LineTotal),2) 

	--if(@CalcuLineTotal <> (@LineTotal))
	--begin
	--	 set @Message = N'LineTotal: ' + CONVERT(nvarchar(100) , @LineTotal ) +  N' Calculate : ' + CONVERT(nvarchar(100) , @CalcuLineTotal ) 
	--	 +  N' Rounding Off : ' + CONVERT(nvarchar(100) , @RoundingOff ) 
	--	 raiserror(@Message, 16, 1)
	--end
	DECLARE @CountPayment int
	DECLARE @PaymentCode NVARCHAR(50)
	DECLARE @totalAmt decimal(19,6)

	set @totalAmt = (select top 1 isnull(TotalAmt,0) from @LinePayments where LineId = 1)
	set @CountPayment =  (select COUNT(*) from @LinePayments where isnull(ChargableAmount,0) =0 )
	set @PaymentCode = (select top 1 PaymentCode from @LinePayments where isnull(ChargableAmount,0) =0 )
	if(@CountPayment > 0)
	begin
		set @Message =N'Payment method invalid:  Chargable amount Payment method: '+@PaymentCode+ N' is Zero value!'
		raiserror(@Message, 16, 1)
	end
	if(@totalAmt <> @TotalPayable)
	begin
		set @Message =N'Total Payable invalid !!! . Please try again.'
		raiserror(@Message, 16, 1)
	end

	if(@DataSource = 'POS' and @Status = 'C' and @CalcuCollected <> @TotalReceipt)
	begin
		set @Message =N'Total amount collected and Total Payable do not match. Please try again'
		raiserror(@Message, 16, 1)
	end

	if isnull(@TransId, '') = ''
	begin
		if ISNULL(@PrefixSO, '') <> ''
		begin
			set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] (@PrefixSO, @CompanyCode,@StoreId))
		end
	end
	
	
	select *
    into #ItemTmp@TransId
	from M_Item with (nolock) 
	where ItemCode in (
		select distinct ItemCode from @Lines
	)

	insert into T_SalesHeader 
	( 
		TransId	,
		CompanyCode,
		ContractNo,
		StoreId,
		StoreName,
		ShiftId,
		CusId	,
		CusIdentifier	,
		TotalAmount,
		TotalPayable,
		TotalDiscountAmt,
		TotalReceipt,
		AmountChange,
		PaymentDiscount ,
		TotalTax	,
		DiscountType ,
		DiscountAmount ,
		DiscountRate,
		CreatedBy,  
		Status	,
		IsCanceled,
		Remarks	,
		SalesPerson	, SalesPersonName,
		SalesMode	,
		RefTransId	,
		ManualDiscount	,
		SalesType,
		DataSource, POSType , Phone, CusName, CusAddress, Reason, CollectedStatus, OMSId  , Chanel, StartTime, TerminalId, RoundingOff, ShortOrderID, MerchantId, CusGrpId, PromoId, ApprovalId, RewardPoints, ExpiryDate,
		DocDate, CustomF1, CustomF2, CustomF3, CustomF4, CustomF5, LuckyNo, OrderId, LoyaltyId
	)
	
	values(
    -- Insert statements for procedure here
		@TransId	,
		@CompanyCode, @ContractNo,
		@StoreId,
		@StoreName,
		@ShiftId,
		@CusId	,
		@CusIdentifier	,
		@TotalAmount,
		@TotalPayable,
		@TotalDiscountAmt,
		@TotalReceipt,
		@AmountChange,
		@PaymentDiscount ,
		@TotalTax	,
		@DiscountType ,
		@DiscountAmount ,
		@DiscountRate	,
 
		@CreatedBy	, 
 
		@Status	,
		@IsCanceled,
		@Remarks	,
		@SalesPerson	, @SalesPersonName,
		@SalesMode	,
		@RefTransId	,
		@ManualDiscount	,
		@SalesType,
		@DataSource, @POSType,  @Phone, @CusName, @CusAddress, @Reason, @CollectedStatus, @OMSId, @Chanel,
	 
		@StartTime
		,@TerminalId, @RoundingOff, @ShortOrderID, @MerchantId, @CusGrpId, @PromoId, @ApprovalId, @RewardPoints, @ExpiryDate,
		@DocDate, @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, @LuckyNo, @OrderId, @LoyaltyId

	)
	 
	-- declare @Message nvarchar(MAX);
	if (select count(*) from @Lines) > 0
	begin
		
		INSERT INTO [dbo].[T_SalesLine]
			   ([TransId]
			   ,[LineId]
			   ,[CompanyCode]
			   ,[ItemCode]
			   ,[BarCode]
			   ,[UOMCode]
			   ,[Quantity] 
			   ,[Price]
			   ,LineTotal
			   ,DiscountType
			   ,[DiscountAmt]
			   ,[DiscountRate]
			   ,[CreatedBy]
				,CreatedOn
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[Remark]
			   ,[PromoId]
			   ,[PromoType]
			   ,[PromoPercent]
			   ,[PromoBaseItem]
			   ,[SalesMode]
			   ,[TaxRate]
			   ,[TaxAmt]
			   ,[TaxCode]
			   ,[SLocId]
			   ,[MinDepositAmt]
			   ,[MinDepositPercent]
			   ,[DeliveryType]
			   ,[POSService]
			   ,StoreAreaId
			   ,TimeFrameId
			   ,Duration
			   ,AppointmentDate
			   ,BomId,PromoPrice,PromoLineTotal, BaseLine,
				BaseTransId,
				OpenQty,
				PromoDisAmt,
				IsPromo, IsSerial, IsVoucher,
				PrepaidCardNo	 ,
				MemberDate ,
				MemberValue ,
				StartDate ,
				EndDate, ItemType , Description, LineTotalBefDis , LineTotalDisIncludeHeader,SerialNum,  Phone, Name,
				ItemTypeS4	 ,
				Custom1 ,
				Custom2 ,
				Custom3 ,
				Custom4 ,
				Custom5 ,ProductId, PriceListId, WeightScaleBarcode, StoreId, BookletNo
				)
	     select @TransId
			   , [LineId]
			   ,  t1.[CompanyCode]  
			   ,  t1.[ItemCode]  
			   , [BarCode]  
			   ,[UOMCode]  
			   , [Quantity]  
			   , [Price]  
			   ,  LineTotal 
			    , DiscountType 
			   ,  [DiscountAmt]   
			   ,  [DiscountRate]   
			   ,  t1.[CreatedBy]  
			   , GETDATE()
			   ,   t1.[ModifiedBy]   
			   ,    t1.[ModifiedOn]   
			   ,    t1.[Status]  
			   ,   [Remark]  
			   ,    [PromoId]  
			   ,    [PromoType]  
			   ,    [PromoPercent]  
			   ,  [PromoBaseItem]  
			   ,   [SalesMode]  
			   ,  [TaxRate]  
			   ,   [TaxAmt]  
			   ,  [TaxCode]  
			   ,   [SLocId]   
			   , [MinDepositAmt]   
			   ,   [MinDepositPercent]   
			   ,  [DeliveryType]   
			   ,  [POSService]   
			   ,  StoreAreaId   
			   ,    TimeFrameId   
			   ,   Duration   
			   ,    AppointmentDate   
			   ,   BomId   
			   , PromoPrice   
			   , PromoLineTotal   
			   ,  BaseLine    ,
				   BaseTransId     ,
				  OpenQty     ,
				    PromoDisAmt     ,
				   IsPromo     ,
				    t1.IsSerial      ,
				    t1.IsVoucher     ,
				    PrepaidCardNo     	 ,
				  MemberDate      ,
				   MemberValue      ,
				   StartDate      ,
				   EndDate     , 
				   --(select top 1 CustomField1 from M_Item where ItemCode = ItemCode)
				   case when   isnull(ItemType, '') = '' then  t2.CustomField1  else ItemType end  ItemType , 
				    Description     ,
				   case when   isnull(LineTotalBefDis, 0) = 0 then  (ISNULL(t1.Quantity, 0)  * ISNULL(t1.Price, 0))  else LineTotalBefDis end  LineTotalBefDis       ,
				    LineTotalDisIncludeHeader     ,
				    SerialNum     , 
				    Phone     , 
				    Name     ,
				   case when   isnull(ItemTypeS4, '') = '' then t2.ItemCategory_1 else ItemTypeS4 end ItemTypeS4,
				  Custom1      ,
				 Custom2      ,
				   Custom3      ,
				   Custom4      ,
				   Custom5      ,
				  t1.ProductId     ,
				  PriceListId     ,
				   WeightScaleBarcode     ,
				  StoreId     ,
				  BookletNo     
	  
			from @Lines t1
			left join #ItemTmp@TransId t2 on t1.ItemCode = t2.ItemCode and t1.CompanyCode = t2.CompanyCode
	end
	
    if (select count(*) from @LineSerials) > 0
	begin
	INSERT INTO [dbo].[T_SalesLineSerial]
          (  TransId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId,
		Quantity,
		UOMCode,
		CreatedBy	, CreatedOn,
		Status,  OpenQty ,
		BaseLine ,
		BaseTransId, LineNum, Prefix ,
		Phone ,
		Name ,
		CustomF1 ,
		CustomF2  , ExpDate, StoreId , CustomF3, CustomF4, CustomF5
	)
    select  
		@TransId	,
		LineId	,
		CompanyCode,
		ItemCode,
		SerialNum,
		SLocId,
		Quantity,
		UOMCode,
		CreatedBy	,  GETDATE() CreatedOn,
		Status, OpenQty ,
		BaseLine ,
		BaseTransId,
		LineNum,
		Prefix ,
		Phone ,
		Name ,
		CustomF1 ,
		CustomF2, ExpDate, @StoreId, REPLACE(CustomF3 , '<PIN>' , '< PIN >') , CustomF4, CustomF5   
	
	from @LineSerials 


	end

	if (select count(*) from @LineInvoices) > 0
	begin
	insert into T_SalesInvoice 
	(   TransId,
		CompanyCode,
		StoreId	,
		StoreName,
		CustomerName,
		TaxCode,
		Email	,
		Address,
		Phone	,
		Remark,
		CreatedOn	,
		CreatedBy ,
		Name
 
	)
	
	select 
		@TransId,
		CompanyCode,
		StoreId	,
		StoreName,
		CustomerName,
		TaxCode,
		Email	,
		Address,
		Phone	,
		Remark,
	    GETDATE()	,
		CreatedBy ,
		Name
	from @LineInvoices

	end
	 
	 if (select count(*) from @LinePayments) > 0
	begin
		
	INSERT INTO [dbo].[T_SalesPayment]
			   ([PaymentCode]
			   ,[CompanyCode]
			   ,[TransId]
			   ,[LineId]
			   ,[TotalAmt]
			   ,[ReceivedAmt]
			   ,[PaidAmt]
			   ,[ChangeAmt]
			   ,[PaymentMode]
			   ,[CardType]
			   ,[CardHolderName]
			   ,[CardNo]
			   ,[VoucherBarCode]
			   ,[VoucherSerial]
			   ,[CreatedBy] 
			   ,CreatedOn
			   ,[Status]
			   ,ChargableAmount
			   ,PaymentDiscount
			   ,CollectedAmount
			   ,RefNumber, DataSource,Currency, Rate, FCAmount, ShiftId, CardExpiryDate, AdjudicationCode, AuthorizationDateTime, TerminalId, RoundingOff, FCRoundingOff,
			   ForfeitCode, Forfeit,
			   CustomF1,CustomF2,CustomF3,CustomF4,CustomF5, StoreId
			   )
		 select 
			   PaymentCode,  
			   CompanyCode,  
			   @TransId,  
			   LineId,  
			   TotalAmt,  
			   ReceivedAmt,  
			   PaidAmt,  
			   ChangeAmt,  
			   PaymentMode, 
			   CardType, 
			   CardHolderName,  
			   CardNo, 
			   VoucherBarCode,  
			   VoucherSerial,   
			   CreatedBy, 
			   GETDATE(),
			   Status,
			   ChargableAmount,
		PaymentDiscount,
		CollectedAmount,
		RefNumber, DataSource,Currency, Rate, FCAmount, ShiftId,  CardExpiryDate, AdjudicationCode, AuthorizationDateTime, TerminalId, RoundingOff,FCRoundingOff,
		ForfeitCode, Forfeit, CustomF1,CustomF2,CustomF3,CustomF4,CustomF5, StoreId
			from @LinePayments


	end
	 
	 if (select count(*) from @LinePromos) > 0
	begin
		
			INSERT INTO [dbo].[T_SalesPromo]
           ( TransId	,
				CompanyCode,
				ItemCode	,
				BarCode	,
				RefTransId	,
				ApplyType	,
				ItemGroupId,
				UOMCode,
				Value	,
				PromoId	,
				PromoType	,
				PromoTypeLine	,
				CreatedBy	, 
				Status, PromoAmt, PromoPercent, StoreId)
			select   @TransId	,
				CompanyCode,
				ItemCode	,
				BarCode	,
				RefTransId	,
				ApplyType	,
				ItemGroupId,
				UOMCode,
				Value	,
				PromoId	,
				PromoType	,
				PromoTypeLine	,
				CreatedBy	, 
				Status, PromoAmt, PromoPercent, StoreId
	 from @LinePromos
 

	end

		 if (select count(*) from @LineDelivery) > 0
	begin
		INSERT INTO [dbo].T_Sales_Delivery
			   ( Id
			   ,[CompanyCode]
			   ,TransId
			   ,DeliveryType
			   ,DeliveryMethod
			   ,DeliveryFee
			   )
		 select  NEWID(), CompanyCode, @TransId, DeliveryType, DeliveryMethod, DeliveryFee
		 from @LineDelivery
 

	end
	-- Tạo Invoice
	--if(@DataSource = 'POS' and  @Status <> 'H' and ISNULL( @PrefixAR ,'') <> '' )
	--begin
	--	Declare @ARID nvarchar(50);
	--	set @ARID = ( select dbo.[fnc_AutoGenDocumentCode] (@PrefixAR, @CompanyCode,@StoreId))
	 
	--	insert into T_InvoiceHeader
	--	( 
	--		TransId	,
	--		CompanyCode,
	--		StoreId,
	--		StoreName,
	--		ContractNo,
	--		ShiftId,
	--		CusId	,
	--		CusIdentifier	,
	--		TotalAmount,
	--		TotalPayable,
	--		TotalDiscountAmt,
	--		TotalReceipt,
	--		AmountChange,
	--		PaymentDiscount ,
	--		TotalTax	,
	--		DiscountType ,
	--		DiscountAmount ,
	--		DiscountRate,
	--		CreatedBy,
	--		Status	,
	--		IsCanceled,
	--		Remarks	,
	--		SalesPerson	, SalesPersonName,
	--		SalesMode	,
	--		RefTransId	,
	--		ManualDiscount	, SalesType, DataSource, POSType, InvoiceType, Phone, CusName, CusAddress, Reason, Chanel, TerminalId
	--	)
	
	--	values(
	--		-- Insert statements for procedure here
	--		@ARID	,
	--		@CompanyCode,
	--		@StoreId,
	--		@StoreName,
	--		@ContractNo,
	--		@ShiftId,
	--		@CusId	,
	--		@CusIdentifier	,
	--		@TotalAmount,
	--		@TotalPayable,
	--		@TotalDiscountAmt,
	--		@TotalReceipt,
	--		@AmountChange,
	--		@PaymentDiscount ,
	--		@TotalTax	,
	--		@DiscountType ,
	--		@DiscountAmount ,
	--		@DiscountRate	,
 
	--		@CreatedBy	,
 
	--		@Status	,
	--		@IsCanceled,
	--		@Remarks	,
	--		@SalesPerson	, @SalesPersonName,
	--		@SalesMode	,
	--		@TransId	,
	--		@ManualDiscount	, null, @DataSource, @POSType, @SalesType,  @Phone, @CusName, @CusAddress, @Reason, @Chanel, @TerminalId
	--	)


	--	-- declare @Message nvarchar(MAX);
	--	if (select count(*) from @Lines) > 0
	--	begin
			
	--		INSERT INTO [dbo].[T_InvoiceLine]
	--			   ([TransId]
	--			   ,[LineId]
	--			   ,[CompanyCode]
	--			   ,[ItemCode]
	--			   ,[BarCode]
	--			   ,[UOMCode]
	--			   ,[Quantity]
	--			   ,[Price]
	--			   ,LineTotal
	--			   ,DiscountType
	--			   ,[DiscountAmt]
	--			   ,[DiscountRate]
	--			   ,[CreatedBy] 
	--			   ,[Status]
	--			   ,[Remark]
	--			   ,[PromoId]
	--			   ,[PromoType]
	--			   ,[PromoPercent]
	--			   ,[PromoBaseItem]
	--			   ,[SalesMode]
	--			   ,[TaxRate]
	--			   ,[TaxAmt]
	--			   ,[TaxCode]
	--			   ,[SLocId]
	--			   ,[MinDepositAmt]
	--			   ,[MinDepositPercent]
	--			   ,[DeliveryType]
	--			   ,[POSService]
	--			   ,StoreAreaId
	--			   ,TimeFrameId , Duration
	--			   ,AppointmentDate
	--			   ,BomId,PromoPrice,PromoLineTotal, OpenQty, BaseLine, BaseTransId,
	--			   PromoDisAmt,
	--				IsPromo, IsSerial, IsVoucher, PrepaidCardNo	 ,
	--				MemberDate ,
	--				MemberValue ,
	--				StartDate ,
	--				EndDate, ItemType , Description, LineTotalBefDis, LineTotalDisIncludeHeader, StoreId)
			  
	--		select @ARID,
	--			   LineId, 
	--			   CompanyCode, 
	--			   ItemCode,
	--			   BarCode, 
	--			   UOMCode, 
	--			   Quantity, 
	--			   Price,
	--			   LineTotal,
	--			   DiscountType,
	--			   DiscountAmt, 
	--			   DiscountRate, 
	--			   CreatedBy,  
	--			   Status, 
	--			   Remark, 
	--			   PromoId, 
	--			   PromoType, 
	--			   PromoPercent, 
	--			   PromoBaseItem, 
	--			   SalesMode, 
	--			   TaxRate, 
	--			   TaxAmt, 
	--			   TaxCode,
	--			   SLocId, 
	--			   MinDepositAmt, 
	--			   MinDepositPercent,
	--			   DeliveryType,
	--			   POSService
	--			   ,StoreAreaId
	--			   ,TimeFrameId , Duration
	--			   ,AppointmentDate,
	--			   BomId,PromoPrice,PromoLineTotal, 0, LineId, @TransId,
	--			   PromoDisAmt,
	--				IsPromo, IsSerial,IsVoucher, PrepaidCardNo	 ,
	--				MemberDate ,
	--				MemberValue ,
	--				StartDate ,
	--				EndDate, case when   isnull(ItemType, '') = '' then  (select top 1 CustomField1 from M_Item where ItemCode = ItemCode) else  ItemType end ItemType , Description, LineTotalBefDis, LineTotalDisIncludeHeader , @StoreId
	--		from @Lines
  
	--		--update T_SalesLine set OpenQty= Quantity - @Quantity from  @Lines
	--		--where  CompanyCode= @CompanyCode and LineId=LineId and TransId= @TransId

	--	end

	--	if (select count(*) from @LineSerials) > 0
	--	begin
	--		INSERT INTO [dbo].T_InvoiceLineSerial
 --          (  TransId	,
	--			LineId	,
	--			CompanyCode,
	--			ItemCode,
	--			SerialNum,
	--			SLocId,
	--			Quantity,
	--			UOMCode,
	--			CreatedBy	, 
	--			Status, OpenQty, BaseLine, BaseTransId, LineNum, Description, StoreId)

	--			 select    @ARID	,
	--			NEWID()	,
	--			@CompanyCode,
	--			ItemCode,
	--			SerialNum,
	--			SLocId,
	--			Quantity,
	--			UOMCode,
	--			@CreatedBy	, 
	--			@Status, 0, 0, @TransId, LineNum, Description , @StoreId
	
	--		from @LineSerials 


	--	end
		
	--	 if (select count(*) from @LinePayments) > 0
	--	begin
		
		
	--	INSERT INTO [dbo].[T_InvoicePayment]
	--			   ([PaymentCode]
	--			   ,[CompanyCode]
	--			   ,[TransId]
	--			   ,[LineId]
	--			   ,[TotalAmt]
	--			   ,[ReceivedAmt]
	--			   ,[PaidAmt]
	--			   ,[ChangeAmt]
	--			   ,[PaymentMode]
	--			   ,[CardType]
	--			   ,[CardHolderName]
	--			   ,[CardNo]
	--			   ,[VoucherBarCode]
	--			   ,[VoucherSerial]
	--			   ,[CreatedBy] 
	--			   ,[ModifiedBy]
	--			   ,[ModifiedOn]
	--			   ,[Status]
	--			   ,ChargableAmount
	--			   ,PaymentDiscount
	--			   ,CollectedAmount
	--			   ,RefNumber, RefTransId, ShiftId, TerminalId, Currency, FCAmount, Rate, StoreId
	--			   )
	--		 select
	--			   PaymentCode,  
	--			   @CompanyCode,  
	--			   @ARID,  
	--			   LineId,  
	--			   TotalAmt,  
	--			   ReceivedAmt,  
	--			   PaidAmt,  
	--			   ChangeAmt,  
	--			   PaymentMode, 
	--			   CardType, 
	--			   CardHolderName,  
	--			   CardNo, 
	--			   VoucherBarCode,  
	--			   VoucherSerial,   
	--			   @CreatedBy, 
	--			   null, 
	--			   null, 
	--			   @Status,
	--			   ChargableAmount,
	--				PaymentDiscount,
	--				CollectedAmount,
	--				RefNumber, @TransId, @ShiftId, @TerminalId, Currency, FCAmount, Rate, @StoreId
				    

	--			from @LinePayments


	--	end

	--	 if (select count(*) from @LinePromos) > 0
	--	 begin
		
	--		 INSERT INTO [dbo].[T_InvoicePromo]
 --          (  Id ,
	--			TransId	,
	--			CompanyCode,
	--			ItemCode	,
	--			BarCode	,
	--			RefTransId	,
	--			ApplyType	,
	--			ItemGroupId,
	--			UOMCode,
	--			Value	,
	--			PromoId	,
	--			PromoType	,
	--			PromoTypeLine	,
	--			CreatedBy	, 
	--			Status,  PromoAmt, PromoPercent, StoreId)
	--		select NewId(),   @ARID	,
	--			@CompanyCode,
	--			ItemCode	,
	--			BarCode	,
	--			@TransId	,
	--			ApplyType	,
	--			ItemGroupId,
	--			UOMCode,
	--			Value	,
	--			PromoId	,
	--			PromoType	,
	--			PromoTypeLine	,
	--			@CreatedBy	, 
	--			@Status, PromoAmt, PromoPercent , @StoreId
	--		 from @LinePromos
 

	--		end

	--end
	
	drop table #ItemTmp@TransId

	select @TransId ;
	 



	-- 	if isnull(@ItemType, '') = '' begin set @ItemType = (select top 1 CustomField1 from M_Item where ItemCode = @ItemCode ) end

	--if isnull(@ItemTypeS4, '') = '' begin set @ItemTypeS4 = (select top 1  ItemCategory_1 from M_Item where ItemCode = @ItemCode ) end


END
 
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesPayment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_I_T_SalesPayment]
	@PaymentCode	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@TotalAmt	decimal(19, 6)	,
	@ReceivedAmt	decimal(19, 6)	,
	@PaidAmt	decimal(19, 6)	,
	@ChangeAmt	decimal(19, 6)	,
	@PaymentMode	nvarchar(50)	,
	@CardType	nvarchar(50)	,
	@CardHolderName	nvarchar(250)	,
	@CardNo	nvarchar(50)	,
	@VoucherBarCode	nvarchar(250)	,
	@VoucherSerial	nvarchar(50)	, 
	@CreatedBy	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@ModifiedOn	datetime	,
	@Status	char(1),
	@ChargableAmount	decimal(19, 6)	,
	@PaymentDiscount	decimal(19, 6)	,
	@CollectedAmount	decimal(19, 6)	,
	@RefNumber	nvarchar(250) ,
	@DataSource	nvarchar(50) ,
	@Currency nvarchar(50) = null,
	@Rate	decimal(19, 6)= null	,
	@FCAmount	decimal(19, 6)	= null,
	@ShiftId nvarchar(50)	= null, @CardExpiryDate datetime = null, @AdjudicationCode nvarchar(50)= null,  @AuthorizationDateTime datetime = null
   , @TerminalId nvarchar(50) = null, @RoundingOff	decimal(19, 6)= null, @FCRoundingOff	decimal(19, 6)= null,
    @ForfeitCode nvarchar(50) = null, @Forfeit	decimal(19, 6)= null,
	@CustomF1 nvarchar(250) = null, @CustomF2 nvarchar(250) = null, @CustomF3 nvarchar(250) = null, @CustomF4 nvarchar(250) = null, @CustomF5 nvarchar(250) = null
	, @StoreId nvarchar(250) = null
AS	


INSERT INTO [dbo].[T_SalesPayment]
           ([PaymentCode]
           ,[CompanyCode]
           ,[TransId]
           ,[LineId]
           ,[TotalAmt]
           ,[ReceivedAmt]
           ,[PaidAmt]
           ,[ChangeAmt]
           ,[PaymentMode]
           ,[CardType]
           ,[CardHolderName]
           ,[CardNo]
           ,[VoucherBarCode]
           ,[VoucherSerial]
           ,[CreatedBy] 
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status]
		   ,ChargableAmount
		   ,PaymentDiscount
		   ,CollectedAmount
		   ,RefNumber, DataSource,Currency, Rate, FCAmount, ShiftId, CardExpiryDate, AdjudicationCode, AuthorizationDateTime, TerminalId, RoundingOff, FCRoundingOff,
		   ForfeitCode, Forfeit,
		   CustomF1,CustomF2,CustomF3,CustomF4,CustomF5, StoreId
		   )
     VALUES
           (
		   @PaymentCode,  
           @CompanyCode,  
           @TransId,  
           @LineId,  
           @TotalAmt,  
           @ReceivedAmt,  
           @PaidAmt,  
           @ChangeAmt,  
           @PaymentMode, 
           @CardType, 
           @CardHolderName,  
           @CardNo, 
           @VoucherBarCode,  
           @VoucherSerial,   
           @CreatedBy, 
           @ModifiedBy, 
           @ModifiedOn, 
           @Status,
		   @ChargableAmount,
	@PaymentDiscount,
	@CollectedAmount,
	@RefNumber, @DataSource,@Currency, @Rate, @FCAmount, @ShiftId,  @CardExpiryDate, @AdjudicationCode, @AuthorizationDateTime, @TerminalId, @RoundingOff,@FCRoundingOff,
	@ForfeitCode, @Forfeit, @CustomF1,@CustomF2,@CustomF3,@CustomF4,@CustomF5, @StoreId
		   )
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_SalesPromo]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_I_T_SalesPromo]
	@TransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@RefTransId	nvarchar(50)	,
	@ApplyType	nvarchar(50)	,
	@ItemGroupId	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@Value	decimal(19, 6)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoTypeLine	nvarchar(50)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1),
	@PromoAmt decimal(19, 6)	,
	@PromoPercent decimal(19, 6)	, @StoreId nvarchar(250) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
INSERT INTO [dbo].[T_SalesPromo]
           ( TransId	,
				CompanyCode,
				ItemCode	,
				BarCode	,
				RefTransId	,
				ApplyType	,
				ItemGroupId,
				UOMCode,
				Value	,
				PromoId	,
				PromoType	,
				PromoTypeLine	,
				CreatedBy	, 
				Status, PromoAmt, PromoPercent, StoreId)
     VALUES(    @TransId	,
				@CompanyCode,
				@ItemCode	,
				@BarCode	,
				@RefTransId	,
				@ApplyType	,
				@ItemGroupId,
				@UOMCode,
				@Value	,
				@PromoId	,
				@PromoType	,
				@PromoTypeLine	,
				@CreatedBy	, 
				@Status, @PromoAmt, @PromoPercent, @StoreId)
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_ShiftHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_I_T_ShiftHeader]
	@ShiftId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@DailyId	nvarchar(50)	,
	@DeviceId	nvarchar(50)	,
	@OpenAmt	decimal(19, 6)	,
	@EndAmt	decimal(19, 6)	,
	@ShiftTotal	decimal(19, 6)	,
	@CreatedBy	nvarchar(50),
	@Status	nvarchar(10)	,
	@Id nvarchar(50) = null,
	@PrefixShift	nvarchar(150) = null
			
AS
BEGIN
	--INSERT INTO [dbo].[T_ShiftHeader]
	--		   ([ShiftId]
	--		   ,[CompanyCode]
	--		   ,[StoreId]
	--		   ,[DailyId]
	--		   ,[DeviceId]
	--		   ,[OpenAmt]
	--		   ,[EndAmt]
	--		   ,[ShiftTotal]
          
	--		   ,[CreatedBy]
	--			,CreatedOn
	--		   ,[Status], Id)
	--	 VALUES
	--		   (@ShiftId,
	--			@CompanyCode,
	--		   @StoreId,
	--		   @DailyId,
	--		   @DeviceId,
	--		   @OpenAmt,
	--		   @EndAmt,
	--		   @ShiftTotal,
          
	--		   @CreatedBy,
	--		   GETDATE(),
	--		   @Status, @Id)



	--if ISNULL(@PrefixShift, '') <> ''
	--begin
	--	set @ShiftId = (select  dbo.[fnc_AutoGenShiftWithPrefix](@CompanyCode, @StoreId, @PrefixShift))
	--end
	set @ShiftId = (select  dbo.[fnc_AutoGenShiftWithPrefix](@CompanyCode, @StoreId,  ISNULL(@PrefixShift ,  'S')))
     
	INSERT INTO [dbo].[T_ShiftHeader]
			   ([ShiftId]
			   ,[CompanyCode]
			   ,[StoreId]
			   ,[DailyId]
			   ,[DeviceId]
			   ,[OpenAmt]
			   ,[EndAmt]
			   ,[ShiftTotal]
          
			   ,[CreatedBy]
				,CreatedOn
			   ,[Status], Id)
		 VALUES
			   (@ShiftId,
				@CompanyCode,
			   @StoreId,
			   @DailyId,
			   @DeviceId,
			   @OpenAmt,
			   @EndAmt,
			   @ShiftTotal,
          
			   @CreatedBy,
			   GETDATE(),
			   @Status, @Id)


	select @ShiftId


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_ShiftLine]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_I_T_ShiftLine]
	@ShiftId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@PaymentCode	nvarchar(50),
	@Currency	nvarchar(50),
	@CounterId	nvarchar(50),
	@Value	decimal(19, 6),
	@FCValue	decimal(19, 6),
	@CollectAmount decimal(19, 6), 
	@FCCollectedAmount decimal(19, 6),  
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@CountedBalance decimal(19, 6), 
	@BankInAmt decimal(19, 6),
	@BankInBalance decimal(19, 6),
	@Cashier	nvarchar(50) = null, 
	@CustomF1	nvarchar(50) = null, 
	@CustomF2	nvarchar(50) = null, 
	@CustomF3	nvarchar(50) = null, 
	@CustomF4	nvarchar(50) = null, 
	@CustomF5	nvarchar(50) = null

AS
BEGIN
		insert into T_ShiftLine(
		ShiftId,
		CompanyCode,
		PaymentCode, Currency, CounterId,
		Value, FCValue, FCCollectedAmount,
		CollectAmount,
		CreatedOn,
		CreatedBy, 
		Status, CountedBalance, BankInAmt, BankInBalance, Cashier , 
		CustomF1 , 
		CustomF2 , 
		CustomF3 , 
		CustomF4 , 
		CustomF5 
		)
		values(
		@ShiftId,
		@CompanyCode,
		@PaymentCode, @Currency, @CounterId,
		@Value,@FCValue, @FCCollectedAmount,
		@CollectAmount,
		GETDATE(),
		@CreatedBy, 
		@Status, @CountedBalance, @BankInAmt, @BankInBalance,@Cashier , 
		@CustomF1 , 
		@CustomF2 , 
		@CustomF3 , 
		@CustomF4 , 
		@CustomF5 )


 
 END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_ShiftSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- EXEC [USP_I_T_ShiftSummary] '100121100600001' , 'CP001' , '1001'
CREATE PROCEDURE [dbo].[USP_I_T_ShiftSummary]
	@ShiftId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	

			
AS
BEGIN
	

	 DECLARE @Curr Nvarchar(50)
	 SET @Curr = (SELECT TOP 1 CurrencyCode FROM M_Store WHERE StoreId = @StoreID )

	 -- CREATE DISCOUNT
	DECLARE @DetailDiscount AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		CusGrpId NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisAmt NUMERIC(19,6)
	)

	DECLARE @CountDiscount AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailDiscount
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , H.CusGrpId , H.TerminalId , H.CreatedOn , ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0) 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 --INNER JOIN M_Item I ON H.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId
		AND ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0) > 0
	--GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountDiscount
	SELECT CusGrpId ,TerminalId, COUNT(*) 
	FROM @DetailDiscount 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY CusGrpId ,TerminalId


	INSERT INTO T_ShiftSummary ( CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency)
	SELECT H.CompanyCode , H.ShiftId ,  H.TerminalId ,'TOTALDISCOUNT', H.CusGrpId, C.CType  , SUM(H.LineTotalDisAmt) DiscountTotal , @Curr		
	FROM @DetailDiscount H INNER JOIN @CountDiscount C ON H.CusGrpId = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.ShiftId ,  H.TerminalId , H.CusGrpId, C.CType 	


	 -- CREATE Tax
	DECLARE @DetailTax AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		TaxAmt NUMERIC(19,6)
	)

	DECLARE @CountTax AS TABLE 
	(

		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTax
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.TaxCode , H.TerminalId , H.CreatedOn , L.TaxAmt 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 --INNER JOIN M_Item I ON H.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId
	--GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTax
	SELECT TaxCode ,TerminalId, COUNT(*) 
	FROM @DetailTax 
	GROUP BY TaxCode ,TerminalId


	INSERT INTO T_ShiftSummary ( CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency)
	SELECT H.CompanyCode , H.ShiftId ,  H.TerminalId ,'TOTALTAX', H.TaxCode, C.CType  , SUM(H.TaxAmt) TaxAmt , @Curr			
	FROM @DetailTax H INNER JOIN @CountTax C ON H.TaxCode = C.TaxCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode , H.ShiftId ,  H.TerminalId , H.TaxCode, C.CType 		


	 -- CREATE Total
	DECLARE @DetailTotal AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisIncludeHeader NUMERIC(19,6)
	)

	DECLARE @CountTotal AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 --INNER JOIN M_Item I ON H.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId
	--GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId


	INSERT INTO T_ShiftSummary ( CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency)
	SELECT H.CompanyCode , H.ShiftId ,  H.TerminalId ,'TOTALSALES', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr		
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.ShiftId ,  H.TerminalId , H.ItemType, C.CType 		


	-- CREATE TENDER
	DECLARE @DetailTender AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)
	)

	DECLARE @CountTender AS TABLE 
	(

		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.PaymentCode , H.TerminalId , H.CreatedOn , L.CollectedAmount
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId



	INSERT INTO @CountTender
	SELECT PaymentCode ,TerminalId, COUNT(*) 
	FROM @DetailTender 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY PaymentCode ,TerminalId


	INSERT INTO T_ShiftSummary ( CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency)
	SELECT H.CompanyCode , H.ShiftId ,  H.TerminalId ,'TOTALTENDER', H.PaymentCode, C.CType  , SUM(H.CollectedAmount) CollectedAmount , @Curr			
	FROM @DetailTender H INNER JOIN @CountTender C ON H.PaymentCode = C.PaymentCode AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.ShiftId ,  H.TerminalId , H.PaymentCode, C.CType  



	-- CREATE PAYMENTFINANCE
	DECLARE @DetailFinance AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		Currency NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)

	)

	DECLARE @CountFinance AS TABLE 
	(

		Currency NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailFinance
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.Currency , H.TerminalId , H.CreatedOn , CASE WHEN L.Currency = @Curr THEN L.CollectedAmount ELSE L.FCAmount END 
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId



	INSERT INTO @CountFinance
	SELECT Currency ,TerminalId, COUNT(*) 
	FROM @DetailFinance 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY Currency ,TerminalId


	INSERT INTO T_ShiftSummary ( CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency)
	SELECT H.CompanyCode , H.ShiftId ,  H.TerminalId ,'TOTALFINANCE', H.Currency, C.CType  , SUM(H.CollectedAmount) CollectedAmount , H.Currency			
	FROM @DetailFinance H INNER JOIN @CountFinance C ON H.Currency = C.Currency AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode , H.ShiftId ,  H.TerminalId, H.Currency, C.CType  , H.Currency		

END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_ShippingDivisionHeader]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[USP_I_T_ShippingDivisionHeader]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(50), 
	@ContractNo	nvarchar(50),
	@ShiftId	nvarchar(50), 
	@CreatedBy	nvarchar(50), 
	@Status	nvarchar(15), 
	@CusId	nvarchar(150), 
	@CusGrpId	nvarchar(150), 
	@IsCanceled	nvarchar(5),
	@Remarks	nvarchar(550),
	@CustomF1	nvarchar(250),
	@CustomF2	nvarchar(250),
	@CustomF3	nvarchar(250),
	@CustomF4	nvarchar(250),
	@CustomF5	nvarchar(250),
	@DocDate	datetime = null
	,@Lines as T_ShippingDivisionLineTableType READONLY   
AS
begin
  
	DECLARE @LineTotal decimal(19,6)
	DECLARE @CalcuLineTotal decimal(19,6)
	DECLARE @CalcuCollected decimal(19,6)
	DECLARE @Message NVARCHAR(MAX)
	DECLARE @TransId NVARCHAR(50)

	if isnull(@TransId, '') = ''
	begin 
		set @TransId = ( select dbo.[fnc_AutoGenDocumentCode] ('SD', @CompanyCode,@StoreId)) 
	end
	  
    INSERT INTO [dbo].[T_ShippingDivisionHeader]
	  ([Id]
      ,[CompanyCode]
      ,[StoreId]
      ,[StoreName]
      ,[ContractNo]
      ,[ShiftId]
      ,[CusId]
      ,[CusGrpId]
      ,[CreatedOn]
      ,[CreatedBy] 
      ,[Status]
      ,[IsCanceled]
      ,[Remarks]
      ,[CustomF1]
      ,[CustomF2]
      ,[CustomF3]
      ,[CustomF4]
      ,[CustomF5], DocDate)
	  Values(@TransId, @CompanyCode, @StoreId, @StoreName, @ContractNo, @ShiftId, @CusId, @CusGrpId, GETDATE(), @CreatedBy, @Status, 
			 @IsCanceled, @Remarks, @CustomF1, @CustomF2, @CustomF3, @CustomF4, @CustomF5, @DocDate)

	if (select count(*) from @Lines) > 0
	begin
		INSERT INTO [dbo].[T_ShippingDivisionLine]
			   ([Id] ,[LineId] ,[CompanyCode] ,[CusId] ,[CusGrpId] ,[ShippingCode] ,[Quantity] ,[CreatedBy]
               ,[CreatedOn] ,[Status] ,[Remark] ,[Custom1] ,[Custom2] ,[Custom3] ,[Custom4] ,[Custom5])
		select @TransId, LineId, @CompanyCode, [CusId] ,[CusGrpId]  , ShippingCode, Quantity, @CreatedBy
		      , getDate(), Status, remark , custom1, custom2, custom3, custom4, custom5  from @Lines
	end
	select @TransId ;
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_StoreDaily]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_I_T_StoreDaily] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@DeviceId	nvarchar(50),
	@CreateDate	datetime,
	@TotalSales	decimal(19, 6),
	@TotalCount	decimal(19, 6),
	@CreatedBy	nvarchar(50), 
	@Status	char(1),
	@TotalCollected	decimal(19, 6),
	@TotalBalance	decimal(19, 6)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Delete T_ItemStorage where CompanyCode =@CompanyCode and  StoreId=@StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
	 

	insert into T_StoreDaily 
	(   
		CompanyCode,
		StoreId,
		DailyId,
		DeviceId,
		CreateDate,
		TotalSales,
		TotalCount,
		CreatedBy, 
		CreatedOn,
		Status,
		TotalCollected,
		TotalBalance 
	)
	
	values(
		@CompanyCode,
		@StoreId,
		@DailyId,
		@DeviceId,
		GETDATE(),
		@TotalSales,
		@TotalCount,
		@CreatedBy, 
		GETDATE(),
		@Status,
		@TotalCollected,
		@TotalBalance 
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_StoreSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- EXEC [USP_I_T_StoreSummary] '211203' , 'CP001' , '1001'
CREATE PROCEDURE [dbo].[USP_I_T_StoreSummary]
	@DailyId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	

			
AS
BEGIN
	
	--UPDATE T_SalesPayment SET PaymentCode = 'QR10' WHERE PaymentCode LIKE 'E%' AND CustomF2 = 'B' ANd CustomF5 = 'MBB' and CardType like 'MB%'

	DECLARE @ShiftID AS TABLE 
	(
		ShiftID NVARCHAR(50)
	)

	INSERT INTO @ShiftID
	SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND CompanyCode = @CompanyCode AND StoreId = @StoreId



	DECLARE @Curr Nvarchar(50)
	SET @Curr = (SELECT TOP 1 CurrencyCode FROM M_Store WHERE StoreId = @StoreID )

	DECLARE @Date Date
	SET @Date = (SELECT TOP 1 Date  FROM T_EndDate WHERE Description = @DailyId )

	 -- CREATE DISCOUNT
	DECLARE @DetailDiscount AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		CusGrpId NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisAmt NUMERIC(19,6)
	)

	DECLARE @CountDiscount AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailDiscount
	SELECT H.CompanyCode , H.StoreId ,@DailyId ,CASE WHEN (L.DiscountRate <> 0 OR L.DiscountAmt <> 0 ) AND ISNULL(L.PromoId,'') = '' THEN 0 ELSE H.CusGrpId END CusGrpId, H.TerminalId , H.CreatedOn ,  ROUND(ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0),6) 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C' AND H.IsCanceled = 'N'
		AND  ROUND(ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0),6)  <> 0
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountDiscount
	SELECT CusGrpId ,TerminalId, COUNT(*) 
	FROM @DetailDiscount 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY CusGrpId ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId , @DailyId ,  H.TerminalId ,'TOTALDISCOUNT', H.CusGrpId, C.CType  , SUM(H.LineTotalDisAmt) DiscountTotal, @Curr ,@Date ,GETDATE()		
	FROM @DetailDiscount H INNER JOIN @CountDiscount C ON H.CusGrpId = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.CusGrpId, C.CType 	


	 -- CREATE Tax
	DECLARE @DetailTax AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		TaxAmt NUMERIC(19,6)
	)

	DECLARE @CountTax AS TABLE 
	(

		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTax
	SELECT H.CompanyCode , H.StoreId , @DailyId , L.TaxCode , H.TerminalId , H.CreatedOn , L.TaxAmt 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C' AND H.IsCanceled = 'N'
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTax
	SELECT TaxCode ,TerminalId, COUNT(*) 
	FROM @DetailTax 
	GROUP BY TaxCode ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId , @DailyId ,  H.TerminalId ,'TOTALTAX', H.TaxCode, C.CType  , SUM(H.TaxAmt) TaxAmt , @Curr,@Date ,GETDATE()
	FROM @DetailTax H INNER JOIN @CountTax C ON H.TaxCode = C.TaxCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode  ,  H.TerminalId , H.TaxCode , C.CType


	 -- CREATE Total
	DECLARE @DetailTotal AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisIncludeHeader NUMERIC(19,6)
	)

	DECLARE @CountTotal AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.ItemTypeS4 , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C'  AND ISNULL(L.Quantity,0) > 0 AND H.IsCanceled = 'N'
	--GROUP BY H.CompanyCode , H.StoreId ,@DailyId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALSALES', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr,@Date ,GETDATE()
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.ItemType, C.CType 		

	DELETE FROM @DetailTotal
	DELETE FROM @CountTotal

	INSERT INTO @DetailTotal
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.ItemTypeS4 , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.Status = 'C'  AND ISNULL(L.Quantity,0) < 0 AND H.IsCanceled = 'N'

	INSERT INTO @CountTotal
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTotal 
	GROUP BY ItemType ,TerminalId

	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALRETURN', H.ItemType, C.CType  , SUM(H.LineTotalDisIncludeHeader) LineTotalDisIncludeHeader , @Curr,@Date ,GETDATE()
	FROM @DetailTotal H INNER JOIN @CountTotal C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.ItemType, C.CType 		


	-- CREATE TENDER
	DECLARE @DetailTender AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)
	)

	DECLARE @CountTender AS TABLE 
	(

		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , L.PaymentCode , H.TerminalId , H.CreatedOn ,  ISNULL(L.CollectedAmount,0)-ISNULL(L.ChangeAmt,0) + ISNULL(L.Forfeit,0) 
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode AND L.CompanyCode = M.CompanyCode
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C'  AND H.IsCanceled = 'N' 

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , M.ForfeitCode , H.TerminalId , H.CreatedOn , - ABS(ISNULL(L.Forfeit,0))
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode AND L.CompanyCode = M.CompanyCode
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C' AND ISNULL(M.ForfeitCode,'') <> '' AND ISNULL(L.Forfeit,0) <> 0 AND H.IsCanceled = 'N'

	-- ZZ00 rouding POS -----
	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId ,@DailyId , 'ZZ00' RoundingCode , H.TerminalId , H.CreatedOn ,  ISNULL(H.RoundingOff,0)
	FROM T_SalesHeader H --INNER JOIN T_SalesPayment L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 INNER JOIN @ShiftID SS ON H.ShiftId = SS.ShiftId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId  AND H.Status = 'C' AND ISNULL(H.RoundingOff,0) <> 0 AND H.IsCanceled = 'N'

	INSERT INTO @CountTender
	SELECT PaymentCode ,TerminalId, COUNT(*) 
	FROM @DetailTender 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY PaymentCode ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALTENDER', H.PaymentCode, C.CType  , SUM(H.CollectedAmount) CollectedAmount,@Curr,@Date ,GETDATE()
	FROM @DetailTender H INNER JOIN @CountTender C ON H.PaymentCode = C.PaymentCode AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode  ,  H.TerminalId , H.PaymentCode, C.CType  



	-- CREATE PAYMENTFINANCE
	DECLARE @DetailFinance AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		EODCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)

	)

	DECLARE @CountFinance AS TABLE 
	(

		EODCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailFinance
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , M.EODCode , H.DeviceId , H.CreatedOn , CASE WHEN L.Currency = @Curr THEN L.CollectAmount ELSE L.FCCollectedAmount END 
	FROM T_ShiftHeader H INNER JOIN T_ShiftLine L On H.CompanyCode = L.CompanyCode AND H.ShiftId = L.ShiftId
						 INNER JOIN @ShiftID SS ON  H.ShiftId = SS.ShiftId
						 INNER JOIN M_PaymentMethod M ON L.PaymentCode = M.PaymentCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND ISNULL( M.EODCode , '') <> '' 



	INSERT INTO @CountFinance
	SELECT EODCode ,TerminalId, COUNT(*) 
	FROM @DetailFinance 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY EODCode ,TerminalId


	INSERT INTO T_StoreSummary ( CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,BusinessDate,CreatedOn)
	SELECT H.CompanyCode ,@StoreId ,@DailyId ,  H.TerminalId ,'TOTALFINANCE', H.EODCode, C.CType , SUM(H.CollectedAmount) CollectedAmount,@Curr,@Date ,GETDATE()		
	FROM @DetailFinance H INNER JOIN @CountFinance C ON H.EODCode = C.EODCode AND  H.TerminalId  = C.TerminalId
	GROUP BY  H.CompanyCode   ,  H.TerminalId, H.EODCode, C.CType   	


END
GO
/****** Object:  StoredProcedure [dbo].[USP_I_T_VoucherTransaction]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_I_T_VoucherTransaction]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@VoucherNo	nvarchar(50)	,
	@VoucherValue	numeric(19, 6)	,
	@VoucherType	nvarchar(50)	,
	@IssueDate	nvarchar(50)	,
	@IssueTransId	nvarchar(50)	,
	@RedeemDate	nvarchar(50)	,
	@RedeemTransId	nvarchar(50)
AS	

INSERT INTO [dbo].T_VoucherTransaction
           (CompanyCode ,
	ItemCode ,
	VoucherNo ,
	VoucherValue	 ,
	VoucherType	 ,
	IssueDate ,
	IssueTransId	 ,
	RedeemDate ,
	RedeemTransId	 )
     VALUES
           (@CompanyCode ,
	@ItemCode ,
	@VoucherNo ,
	@VoucherValue	 ,
	@VoucherType	 ,
	@IssueDate ,
	@IssueTransId	 ,
	@RedeemDate ,
	@RedeemTransId	)
GO
/****** Object:  StoredProcedure [dbo].[USP_IU_M_MemberCard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_IU_M_MemberCard]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@CardNo nvarchar(50),
	@CardType nvarchar(50) = null,
	@StartDate datetime,
	@ExpireDate datetime,
	@Status char(1),
	@CreatedBy nvarchar(50),
	@CustomerId nvarchar(50),
	@TransId nvarchar(50),
	@OwnerType nvarchar(20) = null,
	@HoldType nvarchar(20) = null
AS
BEGIN TRANSACTION
	BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ErrCode int = 0 -- Error code
	DECLARE @ErrMsg nvarchar(1000) = 'Save MemberCard successfully.' -- Error message
	DECLARE @RowCount int = 0;

	DECLARE @CheckExist int

	SET @CheckExist = (SELECT COUNT(OwnerId) FROM M_MemberCard 
	WHERE CompanyCode = @CompanyCode
	AND CardNo = @CardNo
	AND OwnerId <> @CustomerId)

	IF @CheckExist > 0 
		BEGIN
		
			SET @ErrCode = 1
			SET @ErrMsg = 'Card number ' + @CardNo + ' is already owned by another customer.'

		END
	ELSE
		BEGIN

			DECLARE @Check int
			SET @Check = (SELECT COUNT(C.CardNo) FROM M_MemberCard C WHERE C.CompanyCode = @CompanyCode AND C.CardNo = @CardNo)

			IF @Check = 0
				BEGIN
			
					INSERT INTO [dbo].[M_MemberCard]
						   ([CompanyCode]
						   ,[CardNo]
						   ,[StartDate]
						   ,[ExpireDate]
						   ,[LastExpireDate]
						   ,[Status]
						   ,[CreatedBy]
						   ,[CreatedOn]
						   ,[ModifiedBy]
						   ,[ModifiedOn]
						,[CardType]
						,[OwnerId]
						,[OwnerType]
						,[HoldType]
						,[TransId])
					 VALUES
						   (@CompanyCode
						   ,@CardNo
						   ,@StartDate
						   ,@ExpireDate
						   ,NULL
						   ,@Status
						   ,@CreatedBy
						   ,GETDATE()
						   ,NULL
						   ,NULL
						   ,CASE WHEN ISNULL(@CardType, '') = '' THEN 'Member' ELSE @CardType END
						   ,@CustomerId
						   ,CASE WHEN ISNULL(@OwnerType, '') = '' THEN 'Customer' ELSE @OwnerType END
						   ,CASE WHEN ISNULL(@HoldType, '') = '' THEN 'Main' ELSE @HoldType END
						   ,@TransId)

					IF ISNULL(@CustomerId, '') <> ''
					BEGIN
						
						IF @ExpireDate >= GETDATE()
							BEGIN
							
								UPDATE M_Customer SET CustomerGrpId = (SELECT CusGrpId FROM M_CustomerGroup WHERE CusGrpDesc = @CardType)
								WHERE CustomerId = @CustomerId

								UPDATE M_MemberCard SET [Status] = 'I'
								WHERE CardNo <> @CardNo AND OwnerId = @CustomerId AND HoldType = @HoldType

							END

					END

				END
			ELSE
				BEGIN

					UPDATE [dbo].[M_MemberCard]
						SET LastExpireDate = [ExpireDate]
					WHERE CompanyCode = @CompanyCode AND CardNo = @CardNo
					-----------------------------------
					UPDATE [dbo].[M_MemberCard]
						SET [StartDate] = @StartDate
							,[ExpireDate] = @ExpireDate
							--,[LastExpireDate] = <LastExpireDate, date,>
							,[Status] = @Status
							--,[CreatedBy] = <CreatedBy, nvarchar(50),>
							--,[CreatedOn] = <CreatedOn, datetime,>
							,[ModifiedBy] = @CreatedBy
							,[ModifiedOn] = GETDATE()
							,[CardType] = CASE WHEN ISNULL(@CardType, '') = '' THEN 'Member' ELSE @CardType END
							--,[OwnerId] = @CustomerId
							,[OwnerType] = CASE WHEN ISNULL(@OwnerType, '') = '' THEN 'Customer' ELSE @OwnerType END
							,[HoldType] = CASE WHEN ISNULL(@HoldType, '') = '' THEN 'Main' ELSE @HoldType END
							,[TransId] = @TransId
					WHERE CompanyCode = @CompanyCode AND CardNo = @CardNo
			
				END


		END

	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[USP_IU_S_Loyalty]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_IU_S_Loyalty]
	-- Add the parameters for the stored procedure here
	@UserID NVARCHAR(25),
	@S_LoyaltyHeader S_LoyaltyHeaderType READONLY,
	@S_LoyaltyCustomer S_LoyaltyCustomerType READONLY,
	@S_LoyaltyStore S_LoyaltyStoreType READONLY,
	@S_LoyaltyBuy S_LoyaltyBuyType READONLY,
	@S_LoyaltyEarn S_LoyaltyEarnType READONLY,
	@S_LoyaltyExclude S_LoyaltyExcludeType READONLY
AS
BEGIN TRANSACTION
	BEGIN

		--DECLARE @S_LoyaltyHeader S_LoyaltyHeaderType
		--DECLARE @S_LoyaltyCustomer S_LoyaltyCustomerType
		--DECLARE @S_LoyaltyStore S_LoyaltyStoreType
		--DECLARE @S_LoyaltyEarn S_LoyaltyEarnType
		--DECLARE @S_LoyaltyExclude S_LoyaltyExcludeType
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		DECLARE @ErrCode int = 0 -- Error code
		DECLARE @ErrMsg nvarchar(1000) = 'Save Loyalty successfully.' -- Error message
		DECLARE @RCount int = 0

		DECLARE @StatusGuid uniqueidentifier;
		SET @StatusGuid = NEWID();

		-- LOYALTY HEADER ===========================================================================================================

		-- Get Data Insert
		SELECT H1.LoyaltyId, H1.CompanyCode INTO #S_LoyaltyHeader_I
		FROM @S_LoyaltyHeader H1
		LEFT JOIN S_LoyaltyHeader H2 
			ON H1.LoyaltyId = H2.LoyaltyId AND H1.CompanyCode = H2.CompanyCode
		WHERE H2.LoyaltyId IS NULL

		-- Get Data Update
		SELECT H1.LoyaltyId, H1.CompanyCode INTO #S_LoyaltyHeader_U
		FROM @S_LoyaltyHeader H1
		INNER JOIN S_LoyaltyHeader H2 
			ON H1.LoyaltyId = H2.LoyaltyId AND H1.CompanyCode = H2.CompanyCode

		SELECT @RCount  = COUNT(*) from @S_LoyaltyHeader;
		
		-- INSERT NEW LOYALTY HEADER ====================================================================================================
		INSERT INTO [dbo].[S_LoyaltyHeader]
			   ([LoyaltyId]
			   ,[CompanyCode]
			   ,[LoyaltyType]
			   ,[LoyaltyName]
			   ,[CustomerType]
			   ,[ValidDateFrom]
			   ,[ValidDateTo]
			   ,[ValidTimeFrom]
			   ,[ValidTimeTo]
			   ,[IsMon]
			   ,[IsTue]
			   ,[IsWed]
			   ,[IsThu]
			   ,[IsFri]
			   ,[IsSat]
			   ,[IsSun]
			   ,[TotalBuyFrom]
			   ,[TotalBuyTo]
			   ,[TotalEarnType]
			   ,[TotalEarnValue]
			   ,[MaxTotalEarnValue]
			   ,[CreatedBy]
			   ,[CreatedOn]
			   ,[ModifiedBy]
			   ,[ModifiedOn]
			   ,[Status]
			   ,[StatusGuid])
		SELECT H1.[LoyaltyId]
			   ,H1.[CompanyCode]
			   ,H1.[LoyaltyType]
			   ,H1.[LoyaltyName]
			   ,H1.[CustomerType]
			   ,H1.[ValidDateFrom]
			   ,H1.[ValidDateTo]
			   ,H1.[ValidTimeFrom]
			   ,H1.[ValidTimeTo]
			   ,H1.[IsMon]
			   ,H1.[IsTue]
			   ,H1.[IsWed]
			   ,H1.[IsThu]
			   ,H1.[IsFri]
			   ,H1.[IsSat]
			   ,H1.[IsSun]
			   ,H1.[TotalBuyFrom]
			   ,H1.[TotalBuyTo]
			   ,H1.[TotalEarnType]
			   ,H1.[TotalEarnValue]
			   ,H1.[MaxTotalEarnValue]
			   ,H1.[CreatedBy]
			   ,H1.[CreatedOn]
			   ,H1.[ModifiedBy]
			   ,H1.[ModifiedOn]
			   ,H1.[Status]
			   ,@StatusGuid
		FROM @S_LoyaltyHeader H1
		INNER JOIN #S_LoyaltyHeader_I H2
			ON H1.LoyaltyId = H2.LoyaltyId AND H1.CompanyCode = H2.CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		-- ============================================================================================================================
		-- UPDATE LOYALTY HEADER ========================================================================================================
		UPDATE [dbo].[S_LoyaltyHeader]
		   SET [LoyaltyId] = H1.[LoyaltyId]
			  ,[CompanyCode] = H1.[CompanyCode]
			  ,[LoyaltyType] = H1.[LoyaltyType]
			  ,[LoyaltyName] = H1.[LoyaltyName]
			  ,[CustomerType] = H1.[CustomerType]
			  ,[ValidDateFrom] = H1.[ValidDateFrom]
			  ,[ValidDateTo] = H1.[ValidDateTo]
			  ,[ValidTimeFrom] = H1.[ValidTimeFrom]
			  ,[ValidTimeTo] = H1.[ValidTimeTo]
			  ,[IsMon] = H1.[IsMon]
			  ,[IsTue] = H1.[IsTue]
			  ,[IsWed] = H1.[IsWed]
			  ,[IsThu] = H1.[IsThu]
			  ,[IsFri] = H1.[IsFri]
			  ,[IsSat] = H1.[IsSat]
			  ,[IsSun] = H1.[IsSun]
			  ,[TotalBuyFrom] = H1.[TotalBuyFrom]
			  ,[TotalBuyTo] = H1.[TotalBuyTo]
			  ,[TotalEarnType] = H1.[TotalEarnType]
			  ,[TotalEarnValue] = H1.[TotalEarnValue]
			  ,[MaxTotalEarnValue] = H1.[MaxTotalEarnValue]
			  --,[CreatedBy] = H1.[CreatedBy]
			  --,[CreatedOn] = H1.[CreatedOn]
			  ,[ModifiedBy] = H1.[ModifiedBy]
			  ,[ModifiedOn] = H1.[ModifiedOn]
			  ,[Status] = H1.[Status]
			  ,[StatusGuid] = @StatusGuid
		FROM @S_LoyaltyHeader H1
		INNER JOIN #S_LoyaltyHeader_U H2
			ON H1.LoyaltyId = H2.LoyaltyId AND H1.CompanyCode = H2.CompanyCode
		WHERE H1.LoyaltyId = [S_LoyaltyHeader].LoyaltyId AND H1.CompanyCode = [S_LoyaltyHeader].CompanyCode
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END
		-- ============================================================================================================================

		IF @RCount > 0
		BEGIN
			INSERT INTO [dbo].[T_SyncActionData]
				([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
			SELECT DISTINCT CompanyCode, 'S_LoyaltyHeader', StoreValue, @StatusGuid, GETDATE(), 'IU' FROM @S_LoyaltyStore
		END

		-- LOYALTY EXCLUDE ==================================================================================================================

		DELETE P
		FROM S_LoyaltyExclude P 
		INNER JOIN @S_LoyaltyHeader S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		IF (SELECT COUNT(1) FROM @S_LoyaltyExclude) = 0 --(SELECT COUNT(LoyaltyId) FROM @S_LoyaltyExclude) = 0
			BEGIN
				GOTO CONTI1
			END

		--DELETE S_LoyaltyExclude WHERE LoyaltyId IN (SELECT D.LoyaltyId FROM @S_LoyaltyExclude D)

		--DELETE P
		--FROM S_LoyaltyExclude P 
		--INNER JOIN @S_LoyaltyExclude S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		--WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW LOYALTY BUY =======================================================================================================
		INSERT INTO [dbo].[S_LoyaltyExclude]
			   ([LoyaltyId]
			   ,[CompanyCode]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUom])
		SELECT P.[LoyaltyId]
			   ,P.[CompanyCode]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUom]
		FROM @S_LoyaltyExclude P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI1:

		-- LOYALTY BUY ==================================================================================================================

		DELETE P
		FROM S_LoyaltyBuy P 
		INNER JOIN @S_LoyaltyHeader S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		IF (SELECT COUNT(1) FROM @S_LoyaltyBuy) = 0
			BEGIN
				GOTO CONTI5
			END

		--DELETE P
		--FROM S_LoyaltyBuy P 
		--INNER JOIN @S_LoyaltyBuy S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		--WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW LOYALTY GET =======================================================================================================
		INSERT INTO [dbo].[S_LoyaltyBuy]
			   ([LoyaltyId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUom]
			   ,[ValueType]
			   ,[Condition_1]
			   ,[Value_1]
			   ,[Condition_2]
			   ,[Value_2])
		SELECT P.[LoyaltyId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUom]
			   ,P.[ValueType]
			   ,P.[Condition_1]
			   ,P.[Value_1]
			   ,P.[Condition_2]
			   ,P.[Value_2]
		FROM @S_LoyaltyBuy P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI5:

		-- LOYALTY EARNS ==================================================================================================================

		DELETE P
		FROM S_LoyaltyEarn P 
		INNER JOIN @S_LoyaltyHeader S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		IF (SELECT COUNT(1) FROM @S_LoyaltyEarn) = 0 --(SELECT COUNT(LoyaltyId) FROM @S_LoyaltyEarn) = 0
			BEGIN
				GOTO CONTI2
			END

		--DELETE P
		--FROM S_LoyaltyEarn P 
		--INNER JOIN @S_LoyaltyEarn S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		--WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW LOYALTY GET =======================================================================================================
		INSERT INTO [dbo].[S_LoyaltyEarn]
			   ([LoyaltyId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[LineType]
			   ,[LineCode]
			   ,[LineName]
			   ,[LineUom]
			   ,[ConditionType]
			   ,[Condition_1]
			   ,[Value_1]
			   ,[Condition_2]
			   ,[Value_2]
			   ,[ValueType]
			   ,[EarnValue]
			   ,[MaxPointApply])
		SELECT P.[LoyaltyId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[LineType]
			   ,P.[LineCode]
			   ,P.[LineName]
			   ,P.[LineUom]
			   ,P.[ConditionType]
			   ,P.[Condition_1]
			   ,P.[Value_1]
			   ,P.[Condition_2]
			   ,P.[Value_2]
			   ,P.[ValueType]
			   ,P.[EarnValue]
			   ,P.[MaxPointApply]
		FROM @S_LoyaltyEarn P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI2:

		-- LOYALTY STORE ==================================================================================================================

		DELETE P
		FROM S_LoyaltyStore P 
		INNER JOIN @S_LoyaltyHeader S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		IF (SELECT COUNT(1) FROM @S_LoyaltyStore) = 0 --(SELECT COUNT(LoyaltyId) FROM @S_LoyaltyStore) = 0
			BEGIN
				GOTO CONTI3
			END

		--DELETE P
		--FROM S_LoyaltyStore P 
		--INNER JOIN @S_LoyaltyStore S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		--WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW LOYALTY STORE =======================================================================================================
		INSERT INTO [dbo].[S_LoyaltyStore]
			   ([LoyaltyId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[StoreValue])
		SELECT P.[LoyaltyId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[StoreValue]
		FROM @S_LoyaltyStore P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI3:

		-- LOYALTY CUSTOMER ==================================================================================================================

		DELETE P
		FROM S_LoyaltyCustomer P 
		INNER JOIN @S_LoyaltyHeader S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		IF (SELECT COUNT(1) FROM @S_LoyaltyCustomer) = 0 --(SELECT COUNT(LoyaltyId) FROM @S_LoyaltyCustomer) = 0
			BEGIN
				GOTO CONTI4
			END

		--DELETE P
		--FROM S_LoyaltyCustomer P 
		--INNER JOIN @S_LoyaltyCustomer S ON P.CompanyCode = S.CompanyCode AND P.LoyaltyId = S.LoyaltyId
		--WHERE P.LoyaltyId = S.LoyaltyId AND P.CompanyCode = S.CompanyCode

		-- INSERT NEW LOYALTY CUSTOMER =======================================================================================================
		INSERT INTO [dbo].[S_LoyaltyCustomer]
			   ([LoyaltyId]
			   ,[CompanyCode]
			   ,[LineNum]
			   ,[CustomerValue]
			   ,[CustomerType])
		SELECT P.[LoyaltyId]
			   ,P.[CompanyCode]
			   ,P.[LineNum]
			   ,P.[CustomerValue]
			   ,P.[CustomerType]
		FROM @S_LoyaltyCustomer P
		IF @@ERROR <> 0 
			BEGIN
				SET @ErrCode = @@ERROR; SET @ErrMsg = ERROR_MESSAGE();
				GOTO HANDLE_ERROR --> Roll back when execute failed ...
			END

		CONTI4:


	END
-- Commit transaction ===============================================================================================================
COMMIT TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @RCount AS rcount;
	RETURN @@ROWCOUNT
-- Error transaction ================================================================================================================
HANDLE_ERROR:
	ROLLBACK TRANSACTION
	SELECT @ErrCode AS ErrCode, @ErrMsg AS ErrMsg, @@ROWCOUNT AS rcount;
	RETURN @@ERROR
--===================================================================================================================================

GO
/****** Object:  StoredProcedure [dbo].[USP_IU_S_LoyaltyPointConvert]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_IU_S_LoyaltyPointConvert]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@Point decimal(19,6),
	@Amount decimal(19,6),
	@CreatedBy nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @Check int
	SET @Check = (SELECT COUNT(C.StoreId) FROM S_LoyaltyPointConvert C WHERE C.CompanyCode = @CompanyCode AND C.StoreId = @StoreId)

	IF @Check = 0
		BEGIN
			
			INSERT INTO [dbo].[S_LoyaltyPointConvert]
				([CompanyCode]
				,[StoreId]
				,[Point]
				,[Amount]
				,[CreatedOn]
				,[CreatedBy])
			VALUES
				(@CompanyCode
				,@StoreId
				,@Point
				,@Amount
				,GETDATE()
				,@CreatedBy)

		END
	ELSE
		BEGIN
			
			UPDATE [dbo].[S_LoyaltyPointConvert]
			SET [Point] = @Point
				,[Amount] = @Amount
				,[ModifiedOn] = GETDATE()
				,[ModifiedBy] = @CreatedBy
			WHERE [S_LoyaltyPointConvert].CompanyCode = @CompanyCode AND [S_LoyaltyPointConvert].StoreId = @StoreId

		END

END
GO
/****** Object:  StoredProcedure [dbo].[USP_LoadChartOrderPeriodByMonth]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_LoadChartOrderPeriodByMonth] 
	@CompanyCode	nvarchar(50)	,
	@StoreId 	nvarchar(50)	, 
	@UserId	nvarchar(50)	,
	@Year nvarchar(50),
	@Month  nvarchar(50)
AS	
begin
	DECLARE @LastMonth DATETIME
	SET @LastMonth = GETDATE()  -- or any other date

	
--count(TransId),
	select  CONVERT( date, CreatedOn) Name, /*SUM(CASE WHEN IsCanceled = 'Y' THEN - t.TotalPayable ELSE t.TotalPayable END)*/SUM(TotalPayable) AS 'Value'
	from T_SalesHeader  t
	where --CONVERT( date, CreatedOn)  >= @Year + '/' +@Month + '/1' 
		IsCanceled = 'N' and Status = 'C' and
		YEAR(CreatedOn) = @Year and MONTH(CreatedOn) = @Month
	--and CONVERT( date, CreatedOn)  <= (SELECT DATEADD(month, ((YEAR(@LastMonth) - 1900) * 12) + MONTH(@LastMonth), -1))
	 and t.CompanyCode = @CompanyCode and t.StoreId =@StoreId --and t.CreatedBy = @UserId
	group by  CONVERT( date, CreatedOn)  
	order by CONVERT( date, CreatedOn)

	-- --year(CreatedOn) Year
	--SELECT  month(CreatedOn) as Month, SUM(t.TotalPayable) AS 'Amount'
	----(SELECT COUNT(*) FROM T_SalesHeader u2 WHERE 
	----    CAST(CAST(year(u1.CreatedOn) AS VARCHAR(4)) + RIGHT('0' + CAST(month(u1.CreatedOn) AS VARCHAR(2)), 2) + '01' AS DATETIME) > u2.CreatedOn) AS TotalCount
	--FROM T_SalesHeader t
	--where year(CreatedOn) = @Year
	--GROUP BY year(CreatedOn), month(CreatedOn) 
end


--[USP_LoadChartOrderPeriodByYear] '','','', '2021'
GO
/****** Object:  StoredProcedure [dbo].[USP_LoadChartOrderPeriodByWeek]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- EXEC [USP_LoadChartOrderPeriodByWeek] 'CP001' , '3001' , 'Admin'
CREATE PROCEDURE [dbo].[USP_LoadChartOrderPeriodByWeek] 
	@CompanyCode	nvarchar(50)	,
	@StoreId 	nvarchar(50)	, 
	@UserId	nvarchar(50)	 
AS	
begin
	DECLARE @LastMonth DATETIME
	SET @LastMonth = GETDATE()  -- or any other date

	
--count(TransId),
	select  CONVERT( date, CreatedOn) Name, SUM(CASE WHEN IsCanceled = 'Y' THEN - t.TotalPayable ELSE t.TotalPayable END) AS  Value
	from T_SalesHeader  t
	where  CONVERT( date, CreatedOn)  >=CONVERT( date, GETDATE() -7)  and CONVERT( date, CreatedOn)  <= CONVERT( date, GETDATE()) 
	 and t.CompanyCode = @CompanyCode and t.StoreId =@StoreId --and t.CreatedBy = @UserId
	group by  CONVERT( date, CreatedOn)  
	order by CONVERT( date, CreatedOn)


	-- --year(CreatedOn) Year
	--SELECT  month(CreatedOn) as Month, SUM(t.TotalPayable) AS 'Amount'
	----(SELECT COUNT(*) FROM T_SalesHeader u2 WHERE 
	----    CAST(CAST(year(u1.CreatedOn) AS VARCHAR(4)) + RIGHT('0' + CAST(month(u1.CreatedOn) AS VARCHAR(2)), 2) + '01' AS DATETIME) > u2.CreatedOn) AS TotalCount
	--FROM T_SalesHeader t
	--where year(CreatedOn) = @Year
	--GROUP BY year(CreatedOn), month(CreatedOn) 
end
-- [USP_LoadChartOrderPeriodByMonth] '','','', '2021', '06'
-- [USP_LoadChartOrderPeriodByWeek] 'CP001','3001 ','admin'
--[USP_LoadChartOrderPeriodByYear] '','','', '2021'
GO
/****** Object:  StoredProcedure [dbo].[USP_LoadChartOrderPeriodByYear]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_LoadChartOrderPeriodByYear] 
	@CompanyCode	nvarchar(50)	,
	@StoreId 	nvarchar(50)	, 
	@UserId	nvarchar(50)	,
	@Year nvarchar(50)
AS	
begin
	 --year(CreatedOn) Year
	SELECT   CONVERT(nvarchar(50), year(CreatedOn))  + '/'+   CONVERT(nvarchar(50), month(CreatedOn))  + '/1'  as Name, SUM(TotalPayable) as 'Value'--SUM(CASE WHEN IsCanceled = 'Y' THEN - t.TotalPayable ELSE t.TotalPayable END) AS 'Value'
	--(SELECT COUNT(*) FROM T_SalesHeader u2 WHERE 
	--    CAST(CAST(year(u1.CreatedOn) AS VARCHAR(4)) + RIGHT('0' + CAST(month(u1.CreatedOn) AS VARCHAR(2)), 2) + '01' AS DATETIME) > u2.CreatedOn) AS TotalCount
	FROM T_SalesHeader t
	where year(CreatedOn) = @Year and t.CompanyCode = @CompanyCode and t.StoreId =@StoreId and IsCanceled = 'N' and Status ='C'--and t.CreatedBy = @UserId
	GROUP BY year(CreatedOn), month(CreatedOn) 
	order by month(CreatedOn) 
end


GO
/****** Object:  StoredProcedure [dbo].[USP_ReCalcuAmtNotBankIn]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_ReCalcuAmtNotBankIn] 'CP001','2019','221203','2022-12-03'
CREATE   PROCEDURE [dbo].[USP_ReCalcuAmtNotBankIn] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@DocDate	nvarchar(50),
	@BankInAmt Decimal(19,6) = null
AS	
begin
	
	declare @StatusEOD nvarchar(50);
	declare @AmtnotBankInEOD decimal(19, 6);
	declare @OldAmountNotBankIn decimal(19, 6);
	declare @SumBankIn decimal(19, 6);
	declare @CashAmount decimal(19, 6);
	declare @AmountNotBankIn decimal(19, 6);
	declare @MaxDate datetime; 
	Declare @Currency nvarchar(15); 
	DECLARE @EndDateID Nvarchar(50)
	
	if(ISNULL(CONVERT(nvarchar(50), @BankInAmt), '') <> '')
	begin
		select @StatusEOD = Status
		from T_EndDate  where Description = @DailyId and CompanyCode= @CompanyCode and StoreId = @StoreId

		if (@StatusEOD = 'C')
		begin 
			update T_EndDate set AmtNotInBank = AmtNotInBank - @BankInAmt  
			where  CONVERT(date, Date) >= CONVERT(date, @DocDate)
			and CompanyCode= @CompanyCode and StoreId = @StoreId 
		end

	end
	else
	begin
		
		  
		  set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode)

			DECLARE EndDateCalcu_LINES CURSOR FOR
				 select Id, Description from T_EndDate where Date >= @DocDate and CompanyCode = @CompanyCode and StoreId= @StoreId
					 
			OPEN EndDateCalcu_LINES  

			FETCH NEXT FROM EndDateCalcu_LINES 
			INTO @EndDateID, @DailyId
			WHILE @@FETCH_STATUS = 0 
			BEGIN
					
					set @OldAmountNotBankIn = (select Top 1 ISNULL( AmtNotInBank,0) from T_EndDate where Description < @DailyId and  StoreId = @StoreId and CompanyCode = @CompanyCode order by Description desc)
					select @SumBankIn =  ISNULL( SUM(isnull(BankInAmt,0)),0) 
					from T_BankIn with (nolock)
					where DailyId = @DailyId and StoreId = @StoreId and CompanyCode = @CompanyCode and isnull(Status,'I') = 'A'
											
		
					SELECT @CashAmount =  SUM(isnull(E.CollectedAmount,0))
		  
					FROM T_EndDatePayment  E with (nolock)
						INNER JOIN M_PaymentMethod P with (nolock) ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
					WHERE E.CompanyCode = @CompanyCode AND
						E.EndDateId = @EndDateID	AND
						E.StoreId = @StoreId AND
						P.PaymentType = 'C'
					--GROUP BY 
					--	P.PaymentCode,
					--	P.PaymentDesc

					select @AmountNotBankIn =  ISNULL(( (isnull(@OldAmountNotBankIn,0) + isnull(@CashAmount,0)) - isnull(@SumBankIn,0) ), 0)

					update T_EndDate set AmtNotInBank = @AmountNotBankIn where Description = @DailyId and CompanyCode = @CompanyCode
		 

					--select isnull(Sum(isnull(BankInAmt,0)) ,0) from T_BankIn with (nolock)
					--where DailyId = @DailyId and StoreId = @StoreId and CompanyCode = @CompanyCode and ISNULL( Status, 'I') = 'A'

					--select @StatusEOD = Status
					--from T_EndDate  where Description = @DailyId and CompanyCode= @CompanyCode and StoreId = @StoreId

					--if (@StatusEOD = 'C')
					--begin 
					--	update T_EndDate set AmtNotInBank = AmtNotInBank - @BankInAmt  
					--	where  CONVERT(date, Date) >= CONVERT(date, @DocDate)
					--	and CompanyCode= @CompanyCode and StoreId = @StoreId 
					--end
				FETCH NEXT FROM EndDateCalcu_LINES
				INTO @EndDateID, @DailyId
			End
			CLOSE EndDateCalcu_LINES 
			DEALLOCATE EndDateCalcu_LINES
			--BEGIN TRAN
 
			
			--COMMIT TRAN
		


	end


end


--select * from T_EndDate
GO
/****** Object:  StoredProcedure [dbo].[USP_ReRunEndOfDate]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_ReRunEndOfDate] 'CP001', '3001' ,'2022-10-21', 'admin','ADMSupport'
CREATE     PROCEDURE [dbo].[USP_ReRunEndOfDate]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date, 
	@CreatedBy nvarchar(250)	,
	@TerminalId nvarchar(250)
AS	
Begin


		declare @DailyId nvarchar(150) ;
		declare @Id nvarchar(150), @CreatedOn datetime, @ModifiedOn datetime;

		set @DailyId = (select dbo.[fnc_GetDailyID](@StoreId, @CompanyCode, @Date));

		set @Id = (select Id from T_EndDate where  CompanyCode = @CompanyCode and convert(date, Date) = convert(date, @Date));
		
		set @CreatedOn = (select CreateOn from T_EndDate where  CompanyCode = @CompanyCode and convert(date, Date) = convert(date, @Date));
		set @ModifiedOn = GETDATE();

	    Declare @Currency nvarchar(15); 
		
		Declare @TotalCollectedAmount nvarchar(150) ,	@TotalAmt nvarchar(150) ,	@TotalBalance decimal(19, 6) , 	@TotalCount nvarchar(150) ,	@TotalItem nvarchar(150)

		set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode);

		-- Xóa transaction liên quan 

 		delete T_EndDate  where  CompanyCode = @CompanyCode and Id = @Id and StoreId = @StoreId; 

		delete T_EndDateDetail  where  CompanyCode = @CompanyCode and EndDateId = @Id and StoreId = @StoreId;

		delete T_EndDatePayment  where  CompanyCode = @CompanyCode and EndDateId =@Id and  StoreId = @StoreId;
 
		delete T_StoreDaily where  CompanyCode = @CompanyCode and DailyId = @DailyId and StoreId = @StoreId;

		delete T_StoreSummary where  CompanyCode = @CompanyCode and DailyId = @DailyId and StoreId = @StoreId;

		-- Xóa transaction liên quan 

		Declare @DateId nvarchar(50); 
		set @DateId = (select(@CompanyCode + @StoreId + FORMAT( @Date, 'yyMMdd'))) ;


		 select  @TotalCollectedAmount= CONVERT(nvarchar(150), TotalCollectedAmount) ,
		       @TotalAmt = TotalAmt,
			  @TotalBalance=CONVERT(nvarchar(150), TotalBalance) ,   @TotalCount=  CONVERT(nvarchar(150), TotalCount),
			 @TotalItem = CONVERT(nvarchar(150), TotalItem)  
	     from  [fn_GetEndDateSummary] (@CompanyCode, @StoreId , @Date);
		 
		 -- Insert EOD
	--	[USP_I_T_EndDate] 'CP001', '3001', 'IDTest', '2022-10-21', '','C', 'admin', '0', '0', '0', '0' , null, null,null,null,null,null,null
	--@Date	nvarchar(50)	,
	--@Description	nvarchar(50), --Daily ID
	--@Remark decimal(19, 6),
	--@Status	nvarchar(50),
	--@CreateBy nvarchar(50),
	--@TotalBalance	decimal(19, 6),
	--@TotalCollected	nvarchar(50),
	--@TotalCount	nvarchar(50),
	--@TotalSales	nvarchar(50),
	--@TaxTotal	decimal(19, 6)=null,
	--@DiscountTotal	decimal(19, 6)=null,
	--@PaymentTotal	decimal(19, 6)=null,
	--@LineItemCount	decimal(19, 6)=null,
	--@TaxCount	decimal(19, 6)=null,
	--@DiscountCount	decimal(19, 6)=null,
	--@PaymentCount	decimal(19, 6)=null
	   --Execute USP_I_T_EndDate 'CP001', '3001', 
				--'Test'	,
				--'2022-10-21'	,
				--'Test'	, --Daily ID
				--'',
				--'C',
				--'admin',
				--'0',
			 --   '1',
				--'1',
				--'1'
 
		 Execute USP_I_T_EndDate @CompanyCode, @StoreId, 
				@DateId	,
				@Date,
				@DailyId, --Daily ID
				'',
				'C',
				@CreatedBy,
				@TotalBalance,
			    @TotalCollectedAmount,
				@TotalItem,
				@TotalAmt,
				0,
				0,
				0,
				0,
				0,
				0,
				0, @CreatedOn, 'System', @ModifiedOn;

		 -- Insert Store Daily
  
		 Execute USP_I_T_StoreDaily @CompanyCode, @StoreId, @DailyId, @TerminalId, @Date, @TotalAmt, @TotalItem, @CreatedBy, 'C', @TotalCollectedAmount, @TotalBalance

		 -- Insert Detail
		 
		
		select ROW_NUMBER() OVER(ORDER BY t1.ItemCode ASC) AS RowNum, t2.ShiftId ,t1.ItemCode, t3.ItemName Description, t1.UOMCode,    SUM(t1.Quantity) TotalQty, t1.Price,  SUM(t1.LineTotalDisIncludeHeader) LineTotal
		INTO #TempDestinationTable
		from T_SalesLine t1 with (nolock)
		left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
		left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
		left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
		where t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = '' and t2.Status = 'C' and ISNULL(t2.IsCanceled,'N') = 'N' 
		and	T2.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)
		Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode


		 insert into T_EndDateDetail
		(  CompanyCode,
			StoreId,
			EndDateId,
			Id,
			LineId,
			ItemCode,
			UoMCode,
			Description,
			Barcode,
			Price,
			Quantity,
			LineTotal 
		)
		select @CompanyCode, @StoreId, @DateId, NEWID(), RowNum, ItemCode, UOMCode, Description, '', Price, TotalQty, LineTotal
		from #TempDestinationTable


		 -->>>>
 
		 insert into T_EndDatePayment
		( CompanyCode,
			StoreId,
			EndDateId,
			Id,
			ShiftId,
			LineId,
			PaymentCode, Currency,
			Amount, FCAmount,
			CollectedAmount, FCCollectedAmount,
			Balance,
			EOD_Code,
			CounterId,
			BankInAmt,
			BankInBalance
		)
	    select @CompanyCode, @StoreId, @DateId ,NEWID(), ShiftId,  RowNum, PaymentCode, Currency, TotalAmt, FCAmount, CollectedAmount, 
		    0, --- FCCollectedAmount chưa tìm thấy
			CollectedAmount - TotalAmt, 
			EOD_Code, CounterId, BankInAmt, BankInAmt - TotalAmt
	     from  [fn_GetEndDatePaymentDetail] (@CompanyCode, @StoreId , @Date);
		 
		 Execute USP_I_T_StoreSummary @DailyId, @CompanyCode, @StoreId

		 declare @SettingValue nvarchar(150) ; 
		 set @SettingValue = (select ISNULL(SettingValue,'') SettingValue from [fn_GetGeneralSettingStore] (@CompanyCode, @StoreId , 'ClearHoldBillAfterEOD'))
		 if(ISNULL(@SettingValue, 'false') = 'true' or ISNULL(@SettingValue, 'false') = '1')
		 begin
			Execute USP_ClearHoldBillByDate @CompanyCode, @StoreId, @DailyId, @CreatedBy;
		 end


 
end


--select * from T_EndDatePayment where ShiftId = '100121082500002'
--select * from T_ShiftLine where ShiftId ='100121101900001'

--select * from T_SalesPayment where ShiftId ='100121101900001' and PaymentCode = 'C010' or PaymentCode = 'CA00'

--CA00

GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_ActionOnOrder]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_RPT_ActionOnOrder] @CompanyCode nvarchar(50), @StoreId	nvarchar(150), @Userlogin nvarchar(50), @User nvarchar(50), @TransId nvarchar(50), @FDate date, @TDate date, @Type nvarchar(50) AS begin  select * FROM [dbo].[S_Log] with (nolock) where  (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )  and   (ISNULL(@StoreId, '') = '' OR StoreId = @StoreId ) and   (ISNULL(@User, '') = '' OR CreatedBy = @User )  and   (ISNULL(@TransId, '') = '' OR TransId = @TransId )    and   (ISNULL(@Type, '') = '' OR Type = @Type ) and   (ISNULL(@FDate, '') = '' OR CONVERT(date, CreatedOn) >=  CONVERT(date, @FDate) ) and   (ISNULL(@TDate, '') = '' OR CONVERT(date, CreatedOn) <=  CONVERT(date, @TDate) )   ORDER BY lineNum + 0 ASC   end 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_CHECK_LASTED_SYNC]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- EXEC [USP_RPT_CHECK_LASTED_SYNC]
CREATE PROCEDURE [dbo].[USP_RPT_CHECK_LASTED_SYNC]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	DECLARE @TSync AS TABLE
	(
		StoreID NVARCHAR(50),
		StoreName NVARCHAR(500),
		LastedSaleSync DateTime,
		LastedPaymentSync DateTime,
		LastedEODSync DateTime
	)

	INSERT INTO @TSync
	-- Check SALES
	SELECT O.StoreId , O.StoreName ,  S.LastedSaleSync , P.LastedPaymentSync , D.LastedEODSync
	FROM M_Store O 
	LEFT JOIN (SELECT StoreId,MAX(CreatedOn) LastedPaymentSync FROM T_SalesPayment 
	GROUP BY StoreId ) P ON O.StoreId = P.StoreId 

	LEFT JOIN (SELECT StoreId,MAX(CreatedOn) LastedSaleSync FROM T_SalesHeader 
	GROUP BY StoreId ) S ON O.StoreId = S.StoreId 

	-- CHECK EOD
	LEFT JOIN (SELECT StoreId,MAX(CreatedOn) LastedEODSync FROM T_StoreSummary 
	GROUP BY StoreId ) D ON O.StoreId = D.StoreId 

	---- CHECK SyncItemPrice
	--SELECT StoreId,MAX(CreatedOn) LastedSync FROM M_PriceList 
	--GROUP BY StoreId
	--ORDER BY MAX(CreatedOn)

	

	DECLARE @xml NVARCHAR(MAX)
	DECLARE @body NVARCHAR(MAX)

	SET @xml = CAST(( SELECT StoreID AS 'td','',StoreName AS 'td','', LastedSaleSync AS 'td','', LastedPaymentSync AS 'td' ,'', LastedEODSync AS 'td'
	FROM @TSync 
	FOR XML PATH('tr'), ELEMENTS ) AS NVARCHAR(MAX))

	SET @body ='<html><body><H3>Lasted Sync Store Server to Central Server Info</H3>
	<table border = 1> 
	<tr>
	<th> StoreID </th> <th> StoreName </th> <th> Lasted Sale </th> <th> Lasted Sale Payment </th> <th> Lasted EOD </th></tr>'    
 
	SET @body = @body + @xml +'</table></body></html>'

 

	EXEC msdb.dbo.sp_send_dbmail
	@profile_name = 'ServayEmail',
	@body = @body,
	@body_format ='HTML',
	@recipients = 'quang.p@tdiapj.com',
	@subject = 'RPFO SYNC Lasted Sync ';


	DELETE @TSync 



	---------
	DECLARE @FDate DATE
	DECLARE @TDate DATE
	DECLARE @FItem NVARCHAR(50)
	DECLARE @TItem NVARCHAR(50)
	

	IF @FDate IS NULL 
	BEGIN
		SET @FDate = GETDATE() - 1
	END

	IF @TDate IS NULL 
	BEGIN
		SET @TDate =  GETDATE()
	END

	IF @FItem IS NULL 
	BEGIN
		SET @FItem = (SELECT MIN(ItemCode) FROM M_Item)
	END

	IF @TItem IS NULL 
	BEGIN
		SET @TItem =  (SELECT MAX(ItemCode) FROM M_Item)
	END

	IF (OBJECT_ID('tempdb..#M_ITEM') IS NOT NULL)
	BEGIN
		 DROP Table #M_ITEM
	END

 	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM_FILLTER') IS NOT NULL)
	BEGIN
		 DROP Table #M_PARAM_ITEM_FILLTER
	END
 

	CREATE TABLE #M_ITEM  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		ItemCode NVARCHAR(50),
		ItemName NVARCHAR(250),
		SyncType NVARCHAR(50),
		--CreatedBy NVARCHAR(50),
		--CreatedOn DATETIME,
		ModifiedBy NVARCHAR(50),
		ModifiedOn DATETIME 
	)

	CREATE TABLE #M_PARAM_ITEM_FILLTER  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		ItemCode NVARCHAR(50),
		ItemName NVARCHAR(250)
	)

	CREATE TABLE #ERR  
	(
		StoreId NVARCHAR(50),
		ErrMsg NVARCHAR(500),
	)


	DECLARE 
		@columns NVARCHAR(MAX) = '', 
		@ReplaceColumns NVARCHAR(MAX) = '', 
		@SumCols NVARCHAR(MAX) = '', 
		@sql     NVARCHAR(MAX) = '',
		@LinkSvr   NVARCHAR(MAX) = '';

	-- select the category names
	SELECT 
		@columns+=QUOTENAME(StoreId) + ',' ,
		@SumCols+=QUOTENAME(StoreId) + ' + ',
		@ReplaceColumns+='CASE WHEN '+QUOTENAME(StoreId) + ' = 0 THEN ''N'' ELSE ''Y'' END '+QUOTENAME(StoreId) + '  ,' 
	FROM 
		M_Store
	ORDER BY 
		StoreId;

	-- remove the last comma
	SET @columns =  LEFT(@columns, LEN(@columns) - 1);;
	SET @SumCols =  LEFT(@SumCols, LEN(@SumCols) - 1);;
	SET @ReplaceColumns =  LEFT(@ReplaceColumns, LEN(@ReplaceColumns) - 1);;
 

	INSERT INTO #M_PARAM_ITEM_FILLTER  
	SELECT  'Central',I.CompanyCode,I.ItemCode,I.ItemName
	FROM [RPFO_POS_PRD].dbo.M_Item I
	WHERE I.ItemCode BETWEEN ISNULL(@FItem,I.ItemCode) AND ISNULL(@TItem,I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	INSERT INTO #M_ITEM
	SELECT 'Central' StoreId,CompanyCode,ItemCode,ItemName,SalesTaxCode,--CreatedBy,CreatedOn,
		ModifiedBy,ModifiedOn--,SyncDate
	FROM [RPFO_POS_PRD].dbo.M_Item 
	WHERE ItemCode BETWEEN ISNULL(@FItem,ItemCode) AND ISNULL(@TItem,ItemCode) AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3001'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKM_3001].[RPFO_3001_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3001' , 'Can not reach Store Server'
	 RAISERROR ('3001 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3002'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SELM_3002].[RPFO_3002_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3002' , 'Can not reach Store Server'
	 RAISERROR ('3002 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3003'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SERG_3003].[RPFO_3003_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3003' , 'Can not reach Store Server'
	 RAISERROR ('3003 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3004'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETR_3004].[RPFO_3004_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3004' , 'Can not reach Store Server'
	 RAISERROR ('3004 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3005'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEBF_3005].[RPFO_3005_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3005' , 'Can not reach Store Server'
	 RAISERROR ('3005 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3006'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKV-3006].[RPFO_3006_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3006' , 'Can not reach Store Server'
	 RAISERROR ('3006 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3007'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKN_3007].[RPFO_3007_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3007' , 'Can not reach Store Server'
	 RAISERROR ('3007 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3008'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEPM-3008].[RPFO_3008_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3008' , 'Can not reach Store Server'
	 RAISERROR ('3008 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3009'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETF_3009].[RPFO_3009_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3009' , 'Can not reach Store Server'
	 RAISERROR ('3009 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3010'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SELK_3010].[RPFO_3010_RPD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3010' , 'Can not reach Store Server'
	 RAISERROR ('3010 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3011'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKR_3011].[RPFO_3011_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3011' , 'Can not reach Store Server'
	 RAISERROR ('3011 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3012'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETA_3012].[RPFO_3012_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3012' , 'Can not reach Store Server'
	 RAISERROR ('3012 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3013'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKP_3013].[RPFO_3013_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3013' , 'Can not reach Store Server'
	 RAISERROR ('3013 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3014'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SELW-3014].[RPFO_3014_RPD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3014' , 'Can not reach Store Server'
	 RAISERROR ('3014 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3015'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEAP_3015].[RPFO_3015_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3015' , 'Can not reach Store Server'
	 RAISERROR ('3015 - Can not reach Store Server ', 10, 1);
	END CATCH
	
	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3016'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEAN_3016].[RPFO_3016_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3016' , 'Can not reach Store Server'
	 RAISERROR ('3016 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3017'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKT-3017].[RPFO_3017_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3017' , 'Can not reach Store Server'
	 RAISERROR ('3017 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3018'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETL-3018].[RPFO_3018_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3018' , 'Can not reach Store Server'
	 RAISERROR ('3018 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3019'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEMB_3019].[RPFO_3019_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3019' , 'Can not reach Store Server'
	 RAISERROR ('3019 - Can not reach Store Server ', 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3020'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEDS_3020].[RPFO_3020_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 INSERT INTO #ERR
	 SELECT '3020' , 'Can not reach Store Server'
	 RAISERROR ('3020 - Can not reach Store Server ', 10, 1);
	END CATCH


	
	SET @sql =N'
	SELECT CompanyCode,ItemCode,ItemName,SyncType,ModifiedBy,ModifiedOn,'+ @ReplaceColumns +'   FROM   
	(
		SELECT StoreId,CompanyCode,ItemCode,ItemName,SyncType,ModifiedBy,ModifiedOn FROM [#M_ITEM]
	) t 
	PIVOT(
		COUNT(StoreId)
		FOR StoreId  IN ('+ @columns +')
	) AS pivot_table
	WHERE 20 <> ('+@SumCols+' )';

	--SELECT @SumCols
	--SELECT @sql

	EXEC sp_executesql @sql;


	--EXEC msdb.dbo.sp_send_dbmail
	--@profile_name = 'ServayEmail',
	--@recipients = 'quang.p@tdiapj.com',
	--@subject = 'SYNC Item',
	--@execute_query_database = 'RPFO_POS_PRD',
	--@query = @sql,
	--@query_result_header = 1,
	--@query_result_separator = ',',
 --   @query_result_width = 32767,
 --   @query_result_no_padding = 1,
	--@attach_query_result_as_file = 1,
	--@query_attachment_filename = 'SYNC_Item.csv'

 	IF (OBJECT_ID('tempdb..#M_ITEM') IS NOT NULL)
	BEGIN
		 DROP Table #M_ITEM
	END

 	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM_FILLTER') IS NOT NULL)
	BEGIN
		 DROP Table #M_PARAM_ITEM_FILLTER
	END


 


END
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_CollectionDailyByCounter]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- [USP_RPT_CollectionDailyByCounter] 'CP001', '','admin','2022-12-23'
CREATE  PROCEDURE [dbo].[USP_RPT_CollectionDailyByCounter]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@Date nvarchar(50)
AS
BEGIN

	DECLARE 
    @columns NVARCHAR(MAX) = '', 
    @sql     NVARCHAR(MAX) = '', @FunctionId     NVARCHAR(150) = '',
	@nullVl NVARCHAR(10) = '';
	set @FunctionId = 'RPT_CollectionDailyByCounter';


	--select f.ControlId, ControlName, ControlType , p.Permissions
	--from M_Control f
	--left join M_Permission p on f.ControlId = p.ControlId
	
	--where f.FunctionId = 'RPT_CollectionDailyByCounter' and ;

	--select * from S_Permission

	select  @columns+=QUOTENAME( PaymentCode) + ',' 
	from (select  Distinct t1.PaymentCode PaymentCode 
		from T_SalesPayment t1 with (nolock) 
		 
		where  t1.CompanyCode =  @CompanyCode  and CONVERT(date, t1.CreatedOn) =  CONVERT(date, @Date) 
		
		and (ISNULL(@StoreId,'') = '' or StoreId=  @StoreId)) Xtemp
  
   if(isnull(@columns,'') = '')
	 begin
		select null;
		select null
		;
	 end
	 else
	 begin
		SET @columns = LEFT(@columns, LEN(@columns) - 1);
	 
	
		SET @sql ='
			SELECT * FROM   
			(
				select *, SUM(CollectedAmount) OVER(PARTITION BY StoreId, TerminalId) Total from 
				(
					select StoreId, PaymentCode, TerminalId, SUM( ISNULL( CollectedAmount,0) - ISNULL( ChangeAmt,0)) CollectedAmount
					from T_SalesPayment with (nolock) where  CompanyCode = ''' +@CompanyCode + ''' 
					and (ISNULL(''' + @StoreId+ ''','''') = '''' or StoreId='''+ @StoreId + ''')
					and CONVERT(date, CreatedOn) =  CONVERT(date, '''+@Date+''')
					group by  StoreId,PaymentCode, TerminalId
				) tmpX

			) t 

			PIVOT(
				Sum(CollectedAmount) 
				FOR PaymentCode IN ('+ @columns +') 
			) AS pivot_table;'; 
			EXECUTE sp_executesql @sql; 
	
		select * from
		(

			select  'TerminalId' controlId,  'Terminal Id' controlName, 'string' custom2, null groupNum, null groupItem
			union all
			select  'StoreId' controlId,  'Store Id' controlName, 'string' custom2, 0 groupNum , null groupItem
			union all
			select  'Total' controlId,  'Total' controlName, 'amount' custom2, null groupNum, 'sum' groupItem
			union all
			select  Distinct t1.PaymentCode controlId, t2.PaymentDesc controlName , 'amount' custom2, null groupNum, null groupItem
			from T_SalesPayment t1 with (nolock) 
			left join M_PaymentMethod t2 with (nolock) on t1.PaymentCode = t2.PaymentCode and t1.CompanyCode = t2.CompanyCode
			where  t1.CompanyCode =  @CompanyCode  and CONVERT(date, t1.CreatedOn) =  CONVERT(date, @Date) 

			and (ISNULL(@StoreId,'') = '' or StoreId=  @StoreId)
		) tmpX

	 end
	


END 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_Dashboard]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 


 --[USP_RPT_Dashboard] 'CP001','W0101','admin',''
CREATE PROCEDURE [dbo].[USP_RPT_Dashboard]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50), 
	@Date date 
AS
BEGIN

	SELECT
	Count(DISTINCT t1.TransId)                 TotalBill,
	Isnull(Sum(t2.CollectedAmount), 0)         TotalAmount,
	Count(t3.Quantity)                TotalSalesItem,
	Isnull(Isnull(Count(DISTINCT t4.TransId), 0) / NULLIF(  Count (DISTINCT t1.TransId), 0), 0) CancelPercent
	FROM   T_SalesHeader t1 WITH(nolock)
		   LEFT JOIN T_SalesPayment t2 WITH(nolock)
				  ON t1.TransId = t2.TransId
					 AND t1.CompanyCode = t2.CompanyCode AND t1.ShiftId = t2.ShiftId
		   LEFT JOIN T_SalesLine t3 WITH(nolock)
				  ON t1.TransId = t3.TransId
					 AND t1.CompanyCode = t3.CompanyCode
		   LEFT JOIN (SELECT CompanyCode,TransId
					  FROM   T_SalesHeader WITH(nolock)
					  WHERE  CONVERT(DATE, CreatedOn) = CONVERT(DATE, Getdate()) AND IsCanceled = 'Y') t4  ON t1.TransId = t4.TransId AND t1.CompanyCode = t4.CompanyCode
	WHERE  CONVERT(DATE, t1.CreatedOn) = CONVERT(DATE, Getdate())
		   AND t1.Status = 'C'
		   AND Isnull(t1.IsCanceled, 'N') = 'N'
		   AND ISNULL(t3.BomID,'') = '' 
		   AND ( Isnull(@Userlogin, '') = ''  OR t1.CreatedBy = @Userlogin )
		   AND ( Isnull(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
		   AND ( Isnull(@StoreId, '') = '' OR t1.StoreId = @StoreId ) 

END 

--[USP_RPT_Dashboard] 'CP001','JAOF007','Nhi-10243',''

--select TransId, Status, IsCanceled , CreatedBy from T_SalesHeader where StoreId ='JAOF007' and CONVERT(date, CreatedOn) = CONVERT(date,GETDATE())  
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_EOD_SummaryByDeparment]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

 
-- [USP_RPT_EOD_SummaryByDeparment]  'CP001', '3001','admin',  '2022-07-17', '2022-07-17','220717'
CREATE   PROCEDURE [dbo].[USP_RPT_EOD_SummaryByDeparment]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50), 
	@FDate date,
	@TDate date,
	@DailyId nvarchar(50) = null,
	@ShiftID nvarchar(150) = null
AS
BEGIN

	Declare @ShiftTable table
	(
		ShiftID nvarchar(50)
	)
	Insert into @ShiftTable
	Select ShiftId from T_ShiftHeader where StoreId = @StoreId and CompanyCode = @CompanyCode and CONVERT(Date, CreatedOn)  BETWEEN @FDate AND @TDate 
					and (ShiftID = @ShiftID  or ISNULL(@ShiftID, '') = '') 
	DECLARE @TblSplitPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(100),
		PromoName Nvarchar(500)
	)

	--INSERT INTO @TblSplitPromo
	--SELECT DISTINCT
	--	L.CompanyCode,
	--	L.TransId,
	--	LineId,
	--	LTRIM(RTRIM(Value)) PromoId,
	--	P.PromoName
	--FROM  T_SalesLine L WITH (NOLOCK) CROSS APPLY STRING_SPLIT(PromoID, ',')  	
	--					INNER JOIN S_PromoHeader P ON LTRIM(RTRIM(Value)) = P.PromoId	 AND L.CompanyCode = P.CompanyCode
	--					INNER JOIN T_SalesHeader H ON H.CompanyCode = P.CompanyCode AND H.TransId =  L.TransId
	--					INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
	--				    INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
	--WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
	--	  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
	--	  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
	--	  M_User.Username = @Userlogin AND
	--	  ISNULL(H.IsCanceled,'N') = 'N' AND
	--	  H.Status = 'C' 

	
	DECLARE @TblAGGPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(Max),
		PromoName Nvarchar(Max)
	)

	INSERT INTO @TblAGGPromo
	SELECT
		CompanyCode,
		TransId,
		LineId,
		STRING_AGG( ISNULL(PromoId, ' '), ',') ,
		STRING_AGG( ISNULL(PromoName, ' '), ',')
	FROM @TblSplitPromo
	GROUP BY CompanyCode,
			TransId,
			LineId

	SELECT

		L.CompanyCode,
		ST.StoreId	,
		ST.StoreName StoreName	,
		L.SLocId,
		H.ContractNo	,
		H.CusIdentifier	,
		H.ShiftId	,
		H.CusId	,
		ISNULL(H.CollectedStatus,'Closed')	HeaderStatus,
		CASE WHEN H.IsCanceled = 'Y' THEN 'Canceled' ELSE 'Normal' END IsCanceled	,
		H.Remarks	,
		H.SalesPerson	,
		H.SalesMode	HeaderSalesMode,
		H.RefTransId	,
		H.ManualDiscount ,	
		H.DataSource,
		H.POSType,
		H.Phone,
		H.CusName, 
		H.CusAddress, 
		H.CusGrpId,
		L.PriceListId,
		L.TransId,
		L.LineId,
		G.IGId ItemGroupId ,
		G.IGName ItemGroupName ,

		LEFT(G.IGId,1) SaleCategoryID ,
		CASE	WHEN LEFT(G.IGId,1) = 1 THEN 'FOOD & BEVERAGE'
				WHEN LEFT(G.IGId,1) = 2 THEN 'FRESH & FROZEN'
				WHEN LEFT(G.IGId,1) = 3 THEN 'NON FOOD'
				WHEN LEFT(G.IGId,1) = 4 THEN 'HARDLINE'
				WHEN LEFT(G.IGId,1) = 5 THEN 'SOFTLINE'
				WHEN LEFT(G.IGId,1) = 6 THEN 'SERVICES'
				WHEN LEFT(G.IGId,1) = 7 THEN 'OWN USE'
		END SaleCategoryName ,
		LEFT(I.ItemGroupId,3) SaleCategoryID2 ,
		LEFT(I.ItemGroupId,3) + '-' + MR2.MCName SaleCategoryName2 , 
		LEFT(I.ItemGroupId,5) SaleCategoryID3 ,
		LEFT(I.ItemGroupId,5) + '-' +MR3.MCName SaleCategoryName3 , 
		I.ItemCategory_1 ItemCategory1 ,
		I.ItemCategory_2 ItemCategory2,
		I.ItemCategory_3 ItemCategory3,
		L.ItemCode,		
		L.BarCode,
		L.UOMCode,
		L.Quantity ,
		CAST (L.Quantity AS NVARCHAR(50)) AS OrgQuantity,
		CAST(L.Price AS NUMERIC(19,4))  Price,
		CAST(L.LineTotal AS NUMERIC(19,4)) LineTotal,
		CAST(L.[LineTotal]   * (100-isnull( H.[DiscountRate] ,0))/100 AS NUMERIC(19,4))  FinalLineTotal ,
		L.DiscountType,
		CAST(isnull(L.DiscountAmt,0) AS NUMERIC(19,4)) DiscountAmt,
		CAST(isnull(L.DiscountRate,0) AS NUMERIC(19,4)) DiscountRate,
		H.CreatedBy,
		L.CreatedOn,
		L.ModifiedBy,
		L.ModifiedOn,
		CASE	WHEN L.Status ='O' THEN 'O-Open'
				WHEN L.Status ='C' THEN 'C-Closed'
				WHEN L.Status ='EC' THEN 'EC- Fully Exchange'
				WHEN L.Status ='EP' THEN 'EP- Partial Exchange '
				WHEN L.Status ='RC' THEN 'RC- Fully Return'
				WHEN L.Status ='RP' THEN 'RP- Partial Return'
		END Status ,
		L.Remark,
		A.PromoId,
		A.PromoName,
		L.PromoType,
		L.PromoPercent,
		L.PromoBaseItem,
		L.SalesMode,
		L.TaxRate,
		L.TaxAmt,
		L.TaxCode,
		L.MinDepositAmt,
		L.MinDepositPercent,
		L.DeliveryType,
		L.POSService,
		L.StoreAreaId,
		L.TimeFrameId,
		L.AppointmentDate,
		L.BomID,
		L.PromoPrice,
		L.PromoLineTotal,
		ISNULL( L.Description, I.ItemDescription) Description,
		L.PrepaidCardNo,
		i.CustomField1,
		i.CustomField2,
		i.CustomField3,
		i.CustomField4,
		i.CustomField5,
		i.CustomField6,
		i.CustomField7,
		i.CustomField8,
		i.CustomField9,
		i.CustomField10,
		H.SyncMWIStatus,
		H.SyncMWIDate,
		H.TerminalId CounterId,
		M_CustomerGroup.CusGrpDesc
		--,
		--BaseLine,
		--BaseTransId,
		--OpenQty
	into #reportTmp
	FROM T_SalesLine L WITH (NOLOCK) INNER JOIN T_SalesHeader H WITH (NOLOCK) ON H.TransId = L.TransId AND H.CompanyCode = L.CompanyCode
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
					   INNER JOIN M_CustomerGroup WITH (NOLOCK) ON M_CustomerGroup.CusGrpId = H.CusGrpId AND H.CompanyCode = M_CustomerGroup.CompanyCode
					   INNER JOIN M_Item I WITH (NOLOCK) on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
					   LEFT JOIN M_ItemGroup G WITH (NOLOCK) ON I.CompanyCode = G.CompanyCode AND I.ItemGroupId = G.IGId
					   LEFT JOIN @TblAGGPromo A  ON L.CompanyCode = A.CompanyCode AND L.TransId = A.TransId AND L.LineId = A.LineId
					   LEFT JOIN M_Store ST WITH (NOLOCK) on ST.StoreId = H.StoreId and ST.CompanyCode = H.CompanyCode
					   LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(I.ItemGroupId,3) = MR2.MCId AND MR2.CompanyCode = 'DF'
					   LEFT JOIN M_MerchandiseCategory MR3  WITH (NOLOCK) ON LEFT(I.ItemGroupId,5) = MR3.MCId AND MR3.CompanyCode = 'DF'
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  H.ShiftId in  (select * from @ShiftTable) And
		  --CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  ISNULL(L.BomID,'') = '' AND
		  H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' 
		  --and LEFT(I.ItemGroupId,3) = '601'
	ORDER BY L.TransId,L.LineId


	-- SaleCategoryID, SaleCategoryName, 

	--, SaleCategoryID, SaleCategoryName

	--SaleCategoryID, SaleCategoryName, 
	Select * into #reportPOS from
	(
		select SaleCategoryID Code, SaleCategoryName 'Department',    SUM(Quantity) QuantitySold, SUM(DiscountAmt) 'TotalDiscount', SUM(FinalLineTotal) 'NetSalesAmount'  , StoreId
		from #reportTmp
		where DataSource = 'POS'
		group by SaleCategoryID, SaleCategoryName, StoreId 
		Union
		-- Insert Rounding data to become last Department
		Select 999, 'Rounding' ,0,0, SUM(H.RoundingOff), h.StoreId
		From T_SalesHeader H
		WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  H.ShiftId in  (select * from @ShiftTable) And
		  --CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' 
		Group by H.StoreId	
	) A
	select SaleCategoryID Code, SaleCategoryName2 'Department',  SUM(Quantity) QuantitySold, SUM(DiscountAmt) 'TotalDiscount', SUM(FinalLineTotal) 'NetSalesAmount'  , StoreId
	into #reportEcom
	from #reportTmp
	where DataSource <> 'POS'
	group by SaleCategoryID, SaleCategoryName2, StoreId, SaleCategoryID, SaleCategoryName
	


	-- t1.SaleCategoryID, t1.SaleCategoryName,  
	select t1.StoreId, t1.Code, t1.Department,   t2.QuantitySold  QuantitySold,   t2.TotalDiscount  TotalDiscount,
	 ISNULL(t2.NetSalesAmount, 0)  NetSalesAmount,
	 ISNULL( t3.NetSalesAmount, 0)  as 'EcomNetSalesAmount' , 
	 ISNULL(t2.NetSalesAmount, 0) + ISNULL( t3.NetSalesAmount, 0)  as 'TotalNetSalesAmount'
	--into #summaryAll
	from
	(
		select distinct Code, Department, StoreId -- , SaleCategoryID, SaleCategoryName
		from #reportPOS 
		union all
		select distinct Code, Department, StoreId -- , SaleCategoryID, SaleCategoryName
		from #reportEcom 
	) t1 
	left join #reportPOS t2 on t1.Code = t2.Code -- and t1.SaleCategoryID = t2.SaleCategoryID
	left join #reportEcom t3 on t1.Code = t3.Code -- and t1.SaleCategoryID = t3.SaleCategoryID
	
	
		drop table #reportTmp
	drop table #reportPOS
	drop table #reportEcom
	--group by t1.StoreId, t1.Code, t1.Department,   t1.SaleCategoryID3, t1.SaleCategoryName3
	--select * from #reportTmp

	--[USP_RPT_EOD_SummaryByDeparment]  'CP001', '3001','admin',  '2022-07-17', '2022-07-17','220717'


	--select * from #summaryAll t1
	--left join #reportTmp t2 on t1.I

END
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_EODSummary]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 

-- EXEC USP_RPT_EODSummary '221222' , 'CP001' , '2019'
CREATE PROCEDURE [dbo].[USP_RPT_EODSummary]
	@DailyId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	

		
AS
BEGIN
	

	--DECLARE @ShiftID AS TABLE 
	--(
	--	ShiftID NVARCHAR(50)
	--)

	--INSERT INTO @ShiftID
	--SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND CompanyCode = @CompanyCode AND StoreId = @StoreId


	DECLARE @Curr Nvarchar(50)
	SET @Curr = (SELECT TOP 1 CurrencyCode FROM M_Store WHERE StoreId = @StoreID )

	DECLARE @Date Date
	SET @Date = (SELECT TOP 1 Date  FROM T_EndDate WHERE Description = @DailyId AND StoreId = @StoreID )

	DECLARE @EndDateID Nvarchar(50)
	SET @EndDateID = (SELECT TOP 1 Id  FROM T_EndDate WHERE Description = @DailyId AND StoreId = @StoreID )
	 

	--DECLARE @PRVDate Date	
	--SET @PRVDate = DATEADD(DAY,- 1, @Date )

	--DECLARE @PRVDateID Nvarchar(50)	
	--SET @PRVDateID = (SELECT TOP 1 Id  FROM T_EndDate WHERE CAST( Date AS Date) = @PRVDate )

	
	--DECLARE @PRVDailyID Nvarchar(50)	
	--SET @PRVDailyID = (SELECT TOP 1 Description  FROM T_EndDate WHERE CAST( Date AS Date) = @PRVDate )

	--SELECT @Date , @PRVDate,@PRVDateID
	
	--DECLARE @NotInBank AS TABLE
	--	(
	--		Currency NVARCHAR(50),
	--		Amount NUMERIC(19,6)
	--	)
	--DECLARE @InBank AS TABLE
	--	(
	--		Currency NVARCHAR(50),
	--		Amount NUMERIC(19,6)
	--	)
	
	--INSERT @InBank
	--SELECT
	--	  ISNULL(P.Currency,@Curr) Currency ,
	--	  SUM(BankInAmt)
	--  FROM T_EndDatePayment E INNER JOIN M_PaymentMethod P ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
	--WHERE E.CompanyCode = @CompanyCode AND
	--	  E.EndDateId = @EndDateID	AND
	--	  E.StoreId = @StoreId AND
	--	  (P.PaymentType = 'C' OR P.PaymentType = 'T' )
	--GROUP BY
	--	  P.Currency
	

	--INSERT @NotInBank
	--SELECT Currency , SUM(BankInAmtBlc)
	--FROM
	--(
	--SELECT  
	--		@Curr Currency ,
	--		ISNULL(SUM(ISNULL(AmtNotInBank,0)),0) BankInAmtBlc
	--FROM T_EndDate WHERE Description = @PRVDateID AND StoreId = @StoreID

	--UNION ALL

	
	--SELECT  
	--	  ISNULL(P.Currency,@Curr) Currency ,
	--	  SUM(CollectedAmount)
	--  FROM T_EndDatePayment E INNER JOIN M_PaymentMethod P ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
	--WHERE E.CompanyCode = @CompanyCode AND
	--	  E.EndDateId = @EndDateID	AND
	--	  E.StoreId = @StoreId AND
	--	  P.PaymentType = 'C'
	--GROUP BY
	--	  ISNULL(P.Currency,@Curr) 


	--UNION ALL

	--SELECT
	--		ISNULL(E.Currency,@Curr) Currency,
	--		-SUM(BankInAmt) BankInAmtBlc
	--FROM T_BankIn E  				  
	--WHERE	E.CompanyCode = @CompanyCode AND
	--		E.DailyId = @DailyId	AND
	--		E.StoreId = @StoreId   
	--GROUP BY
	--		E.Currency
 

	--) AS R
	--GROUP BY Currency
	
	

	DECLARE @EODData AS TABLE
		(
			EODType NVARCHAR(50),
			Currency NVARCHAR(50),
			PaymentCode NVARCHAR(150),
			PaymentDesc NVARCHAR(250),
			Amount NUMERIC(19,6),
			IsTitle  NVARCHAR(50),
			Ref  NVARCHAR(550),
			
			Date  NVARCHAR(50),
			FCAmount NVARCHAR(50) null,
			LCAmount NVARCHAR(50) null,
			Rate NVARCHAR(50) null,
			IsBankIn  NVARCHAR(50),
			InsertDate  datetime null,
			OrderNum  int null, 
			CreatedBy  NVARCHAR(250) null
		)	


 

	INSERT INTO @EODData
	SELECT
		   'B/F (Amount Not In Bank)' EODType,
		  '' Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  SUM(BankInAmt) BankInAmt,
		  'N' IsTitle,
		  '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		  '' IsBankIn
		  ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy
	FROM
	(

	SELECT
		  'B/F (Amount Not In Bank)' EODType,
		  '' Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  0 BankInAmt,
		  'N' IsTitle,
		  '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		  '' IsBankIn
		    ,GETDATE() InsertDate, 1 OrderNum , null CreatedBy
	UNION ALL

	SELECT
		Top 1
		  'B/F (Amount Not In Bank)',
		  '' Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  ISNULL(AmtNotInBank,0) BankInAmt,
		  'N' IsTitle,
		  '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		  '' IsBankIn  ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy
	FROM T_EndDate WHERE Description < @DailyId AND StoreId = @StoreID and CompanyCode = @CompanyCode order by Description desc) R

	--Id = @PRVDateID
	--select @PRVDateID
	--select * from T_EndDate WHERE Id = @PRVDateID AND StoreId = @StoreID
	--select BankInAmt from T_BankIn where DailyId ='220726' 
	--select 71.650000 - 55.000000
	--update T_EndDate set AmtNotInBank = 16.650000 where Description  = '220726'
	INSERT INTO @EODData
	SELECT
		  'Colection - Cash/Bank/Checque',
		  '' Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  0 BankInAmt,
		  'Y' IsTitle,
		  '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		  '' IsBankIn
		    ,GETDATE() InsertDate, 1, null CreatedBy

	INSERT INTO @EODData
	SELECT  
		  'Total Cash Collection' 'EODType',
		  ISNULL(P.Currency,@Curr) Currency ,
		  P.PaymentCode,
		  P.PaymentDesc,
		  SUM(CollectedAmount),
		  'N' IsTitle,
		   '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn  ,GETDATE() InsertDate, 1 AS OrderNum, null CreatedBy
	  FROM T_EndDatePayment E INNER JOIN M_PaymentMethod P ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
	WHERE E.CompanyCode = @CompanyCode AND
		  E.EndDateId = @EndDateID	AND
		  E.StoreId = @StoreId AND
		  P.PaymentType = 'C'
	GROUP BY
		  ISNULL(P.Currency,@Curr)  ,
		  P.PaymentCode,
		  P.PaymentDesc

	INSERT INTO @EODData
	SELECT
		 'Bank In Amount' 'EODType',
		   'Currency' Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  0 Amount,
		  'Y' IsTitle,
		  'Ref' Ref,
		  'Date' Date,
		  'FCAmount' FCAmount,
		  'LCAmount' LCAmount,
		  'Rate' Rate,
		   'Y' IsBankIn
	    ,GETDATE() InsertDate ,1 OrderNum, 'Created By' CreatedBy

	INSERT INTO @EODData
	SELECT
		  'Drop' + CONVERT(nvarchar(10), ROW_NUMBER() OVER(ORDER BY CreatedOn Asc) ) 'EODType',
		   Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  -ISNULL(BankInAmt,0) Amount,
		  'N' IsTitle,
		    RefNum  Ref,
		  FORMAT (DocDate, 'yyyy-MM-dd')   as Date,
		  -FCAmt FCAmount,
		  -BankInAmt LCAmount,
		  Rate Rate,
		   'Y' IsBankIn  ,GETDATE() InsertDate
		   ,ROW_NUMBER() OVER(ORDER BY CreatedOn ASC) AS OrderNum, CreatedBy CreatedBy
	  FROM T_BankIn with (nolock)
	  WHERE CompanyCode = @CompanyCode	AND
			 StoreId = @StoreId	AND
			DailyId = @DailyId
			and Status = 'A'
		  --P.PaymentType = 'B'

	INSERT INTO @EODData
	SELECT
		  'Total Bank In' 'EODType',
		   '' Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  -SUM(ISNULL(BankInAmt,0)) Amount,
		  'Y' IsTitle,
		    ''  Ref,
		  ''   as Date,
		  -Sum(FCAmt) FCAmount,
		  -Sum(BankInAmt) LCAmount,
		  '' Rate,
		   'Y' IsBankIn  ,GETDATE() InsertDate , 1 OrderNum, null CreatedBy
	  FROM T_BankIn with (nolock)
	  WHERE CompanyCode = @CompanyCode	AND
			 StoreId = @StoreId	AND
			DailyId = @DailyId
			and Status = 'A'
	--Group by DocDate
			
	INSERT INTO @EODData
	SELECT  
		  'Balance (Amount not bank in)' 'EODType',
		  @Curr Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  ( 
			(select SUM(isnull(Amount,0)) from @EODData where EODType = 'Total Cash Collection' ) 
			+ 
			(select SUM(isnull(Amount,0)) from @EODData where EODType = 'B/F (Amount Not In Bank)' ) 
			+
			(select Sum(isnull(Amount,0)) from @EODData where EODType = 'Total Bank In' ) 
		  ) 'Amount',
		  'N' IsTitle,
		   '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn  ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy
	  --FROM @EODData 

	INSERT INTO @EODData
	--SELECT
	--	 'Non Cash Amount' 'EODType',
	--	   'Currency' Currency ,
	--	  '' PaymentCode,
	--	  '' PaymentDesc,
	--	  0 Amount,
	--	  'Y' IsTitle,
	--	  '' Ref,
	--	  '' Date,
	--	  '' FCAmount,
	--	  '' LCAmount,
	--	  '' Rate,
	--	   'Y' IsBankIn
	SELECT
		'Non Cash Amount' 'EODType',
		'' Currency ,
		'' PaymentCode,
		'' PaymentDesc,
		0 BankInAmt,
		'Y' IsTitle,
		'' Ref,
		null Date,
		null FCAmount,
		null LCAmount,
		null Rate,
		'' IsBankIn    ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy

	INSERT INTO @EODData	
	SELECT
		  Case 
			when ISNULL(P.AccountCode,'') = '' then ISNULL(S.CustomF5,'') 
			Else ISNULL(P.AccountCode,'') 
			END 'EODType',
		 -- ISNULL(P.AccountCode,'') 'EODType',
		  ISNULL(P.Currency,@Curr) Currency ,
		  P.PaymentCode,
		  P.PaymentDesc, 
		  SUM(ISNULL(S.CollectedAmount,0)- ISNULL(S.ChangeAmt,0)) Amount,
		  'N' IsTitle,
		  '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn  ,GETDATE() InsertDate
		    ,1 AS OrderNum, null CreatedBy
	  FROM 
	  
			T_SalesPayment S 
			--T_EndDatePayment E 
			INNER JOIN M_PaymentMethod P ON S.CompanyCode = P.CompanyCode  AND  S.PaymentCode = P.PaymentCode 
			--LEFT JOIN M_PaymentMethodMapping M on E.PaymentCode = M.PaymentCode 
	WHERE S.CompanyCode = @CompanyCode AND
		  --E.EndDateId = @EndDateID	AND
		  S.StoreId = @StoreId AND
		  CONVERT(date,S.CreatedOn) = @Date AND
		  P.PaymentType = 'B'
	Group by P.AccountCode, P.Currency, P.PaymentCode, P.PaymentDesc, S.CustomF5


	--Group by P.AccountCode, P.Currency, P.PaymentCode, P.PaymentDesc, S.CustomF5
	--INSERT INTO @EODData
	--SELECT
	--	  'Balance (Amount Not In Bank)' 'EODType',
	--	 ISNULL(E.Currency,@Curr) Currency, 
	--	  '' PaymentCode,
	--	  '' PaymentDesc,
	--	  ISNULL(E.Amount,0) BankInAmt,
	--	  'N' IsTitle,
	--	   '' Ref,
	--	  null Date,
	--	  null FCAmount,
	--	  null LCAmount,
	--	  null Rate,
	--	   '' IsBankIn
	--FROM @NotInBank E



	--INSERT INTO @EODData
	--	SELECT
	--	  ' ' 'EODType',
	--	  ISNULL(P.Currency,@Curr) Currency ,
	--	  P.PaymentCode,
	--	  P.PaymentDesc,
	--	  SUM(CollectedAmount),
	--	  'N' IsTitle,
	--	   '' Ref,
	--	  null Date,
	--	  null FCAmount,
	--	  null LCAmount,
	--	  null Rate,
	--	   '' IsBankIn
	--  FROM T_EndDatePayment E INNER JOIN M_PaymentMethod P ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
	--WHERE E.CompanyCode = @CompanyCode AND
	--	  E.EndDateId = @EndDateID	AND
	--	  E.StoreId = @StoreId AND
	--	  P.PaymentType <> 'C'
	--GROUP BY
	--	  ISNULL(P.Currency,@Curr)  ,
	--	  P.PaymentCode,
	--	  P.PaymentDesc

	INSERT INTO @EODData
	SELECT
		  'Collection - Other' 'EODType',
		  '' Currency ,
		  ''PaymentCode,
		  ''PaymentDesc,
		  NULL Amount,
		  'Y' IsTitle,
		   '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn
		     ,GETDATE() InsertDate , 1 OrderNum, null CreatedBy

	INSERT INTO @EODData
	SELECT
		  'Collection - Other' 'EODType',
		  ISNULL(P.Currency,@Curr) Currency ,
		  P.PaymentCode,
		  P.PaymentDesc,
		  ISNULL(Amount,0) Amount,
		  'N' IsTitle,
		   '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn  ,GETDATE() InsertDate
		    ,ROW_NUMBER() OVER(ORDER BY E.PaymentCode ASC) AS OrderNum, null CreatedBy
	  FROM T_EndDatePayment E INNER JOIN M_PaymentMethod P ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
	WHERE E.CompanyCode = @CompanyCode AND
		  E.EndDateId = @EndDateID	AND
		  E.StoreId = @StoreId AND
		  P.PaymentType NOT IN ('C','T','B')	
		  
	INSERT INTO @EODData	
	SELECT
		  'Total non cash collection' as 'EODType',
		 -- ISNULL(P.AccountCode,'') 'EODType',
		 '' Currency ,
		 '' PaymentCode,
		 '' PaymentDesc, 
		  SUM(ISNULL(S.CollectedAmount,0) - ISNULL(S.ChangeAmt,0)) Amount,
		  'Y' IsTitle,
		  '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn  ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy
	  FROM 
			T_SalesPayment S 
			--T_EndDatePayment E 
			INNER JOIN M_PaymentMethod P ON S.CompanyCode = P.CompanyCode  AND  S.PaymentCode = P.PaymentCode 
			--LEFT JOIN M_PaymentMethodMapping M on E.PaymentCode = M.PaymentCode 
	WHERE S.CompanyCode = @CompanyCode AND
		  --E.EndDateId = @EndDateID	AND
		  S.StoreId = @StoreId AND
		  CONVERT(date,S.CreatedOn) = @Date AND
		  P.PaymentType <> 'C'

	INSERT INTO @EODData
	SELECT
		'CASHEXCHANGE REF NO: ' 'EODType',
		'' Currency ,
		'' PaymentCode,
		'' PaymentDesc,
		0 BankInAmt,
		'N' IsTitle,
		'' Ref,
		null Date,
		null FCAmount,
		null LCAmount,
		null Rate,
		'' IsBankIn  
		  ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy
		
	INSERT INTO @EODData
	SELECT
		  'Short/Over' 'EODType',
		  ISNULL(P.Currency,@Curr) Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  SUM(Balance),
		  'N' IsTitle,
		   '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn  ,GETDATE() InsertDate
		    ,1 AS OrderNum, null CreatedBy
	  FROM T_EndDatePayment E INNER JOIN M_PaymentMethod P ON E.CompanyCode = P.CompanyCode  AND  E.PaymentCode = P.PaymentCode 							  
	WHERE E.CompanyCode = @CompanyCode AND
		  E.EndDateId = @EndDateID	AND
		  E.StoreId = @StoreId  
	GROUP BY ISNULL(P.Currency,@Curr)
	 
		INSERT INTO @EODData
	SELECT  
		  'Total' 'EODType',
		  @Curr Currency ,
		  '' PaymentCode,
		  '' PaymentDesc,
		  ( 
			(select SUM(IsNull(Amount,0)) from @EODData where EODType = 'Total Cash Collection' ) 
			+ 
			(select SUM(IsNull(Amount,0)) from @EODData where EODType = 'Total non cash collection' ) 
			--+
			--(select SUM(Amount) from @EODData where EODType = 'Total non cash collection' ) 
		  ) 'Amount',
		  'Y' IsTitle,
		   '' Ref,
		  null Date,
		  null FCAmount,
		  null LCAmount,
		  null Rate,
		   '' IsBankIn
	  ,GETDATE() InsertDate, 1 OrderNum, null CreatedBy
	SELECT 
	EODType,Currency,PaymentCode,PaymentDesc,Amount,IsTitle ,  Ref,CreatedBy, Date, 
	--FCAmount,
	LCAmount, 
	--Rate, 
	IsBankIn 
	--,InsertDate, OrderNum
	FROM @EODData
	--order by InsertDate , OrderNum
	--UNION ALL

	--SELECT 
	--'Total',@Curr,'','',SUM(Amount), 'Y' , '' Ref,
	--	  null Date,
	--	  --null FCAmount,
	--	  null LCAmount,
	--	  --null Rate,
	--	  '' IsBankIn
	--FROM @EODData
	--WHERE IsTitle = 'N'
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_Rpt_GiftVoucher]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- EXEC z_Rpt_GiftVoucher '2021-01-01', '2021-06-01',''
create PROCEDURE [dbo].[USP_Rpt_GiftVoucher]
	@FDate date,
	@TDate date,
	@OutletID nvarchar(4000) = ''
AS
BEGIN


DECLARE @SALE  INT = 0
DECLARE @REDEEM INT = 0

DECLARE @TBL_RAW TABLE(
	GroupCode NVARCHAR(50),
	OutletCode NVARCHAR(50),
	OutletName NVARCHAR(200),
	ItemID NVARCHAR(20),
	ItemName NVARCHAR(50),
	BarCode NVARCHAR(20),
	DISTNUMBER NVARCHAR(20),
	CREATEDON DATETIME,
	EXPDATE DATETIME,
	STA NVARCHAR(10),
	PosId NVARCHAR(50)
)

	IF ISNULL(@OutletID,'') = ''
	BEGIN
		-- GIFT ĐÃ BÁN RA VÀ CÒN HẠN SỬ DỤNG
		----------------------------
		INSERT INTO @TBL_RAW(GroupCode,OutletCode,OutletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT DISTINCT
		O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode, T5.ItemName, T3.BarCode, T1.SerialNum,T1.CreatedOn, T2.ExpDate, 'SALE' AS STA , t1.TransId
		FROM T_SalesLineSerial t1 
		LEFT JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.TransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)  ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemSerial T2 ON T1.ItemCode = T2.ItemCode AND T1.SerialNum = T2.SerialNum
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_Item T5 ON T1.ItemCode = T5.ItemCode
		WHERE H.Status = 'O' AND isnull(T2.SerialNum,'') <> ''  and t5.isVoucher=1 

		INSERT INTO @TBL_RAW(GroupCode,OutletCode,OutletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT DISTINCT
		O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode, T5.ItemName, T3.BarCode, T1.VoucherNo,T1.RedeemDate, T2.ExpDate, 'SALE' AS STA , t1.RedeemTransId
		FROM T_VoucherTransaction t1 
		INNER JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.RedeemTransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)  ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemSerial T2 ON T1.VoucherNo = T2.SerialNum -- AND CONVERT(DATE, ISNULL(T2.ExpDate,GETDATE())) >= CONVERT(DATE, GETDATE())
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode  AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_ItemSerialStock T4 ON T4.SerialNum = T2.SerialNum
		LEFT JOIN M_Item T5 ON T1.ItemCode = T5.ItemCode
		WHERE isnull(T1.ItemCode,'') <> ''  AND ISNULL(t1.RedeemTransId,'') <> ''  and t5.isVoucher=1   

		INSERT INTO @TBL_RAW(GroupCode,OutletCode,OutletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT DISTINCT
		O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode, T5.ItemName, T3.BarCode, T1.VoucherNo,H.CreatedOn, T2.ExpDate, 'ISSUE' AS STA , t1.IssueTransId
		FROM T_VoucherTransaction t1 
		INNER JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.IssueTransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)   ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemSerial T2 ON T1.VoucherNo = T2.SerialNum -- AND CONVERT(DATE, ISNULL(T2.ExpDate,GETDATE())) >= CONVERT(DATE, GETDATE())
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode  AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_ItemSerialStock T4 ON T4.SerialNum = T2.SerialNum
		LEFT JOIN M_Item T5 ON T4.ItemCode = T5.ItemCode
		WHERE isnull(T1.VoucherNo,'') <> '' and  ISNULL(t1.RedeemTransId,'') = '' and t5.isVoucher=1  

		-- GIFT ĐÃ REDEEM
		----------------------------
		INSERT INTO @TBL_RAW(GroupCode,OutletCode,O.outletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode AS ItemCode, T4.ItemName, T3.BarCode, T1.VoucherNo as DistNumber,H.CreatedOn, NULL AS ExpDate, 'REDEEM' AS STA  , t1.RedeemTransId
		FROM T_VoucherTransaction T1
		INNER JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.RedeemTransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)   ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode  AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_Item T4 ON T4.ItemCode =  T1.ItemCode
		WHERE H.Status = 'O' and  ISNULL(t1.RedeemTransId,'') <> '' and t4.isVoucher=1   
		SELECT @SALE =  COUNT(*) FROM @TBL_RAW WHERE STA = 'SALE' OR STA = 'ISSUE'
		SELECT @REDEEM =  COUNT(*)  FROM @TBL_RAW WHERE STA = 'REDEEM'

	END
	ELSE
	BEGIN
		-- GIFT ĐÃ BÁN RA VÀ CÒN HẠN SỬ DỤNG
		----------------------------
		INSERT INTO @TBL_RAW(GroupCode,OutletCode,OutletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT DISTINCT
		O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode, T5.ItemName, T3.BarCode, T1.SerialNum,T1.CreatedOn, T2.ExpDate, 'SALE' AS STA , t1.TransId
		FROM T_SalesLineSerial t1 
		LEFT JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.TransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)  ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemSerial T2 ON T1.ItemCode = T2.ItemCode AND T1.SerialNum = T2.SerialNum
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_Item T5 ON T1.ItemCode = T5.ItemCode
		WHERE H.Status = 'O' AND isnull(T2.SerialNum,'') <> ''  and t5.isVoucher=1 and H.StoreId in( SELECT Value FROM STRING_SPLIT (@OutletID,';') )

		INSERT INTO @TBL_RAW(GroupCode,OutletCode,OutletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT DISTINCT
		O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode, T5.ItemName, T3.BarCode, T1.VoucherNo,T1.RedeemDate, T2.ExpDate, 'SALE' AS STA , t1.RedeemTransId
		FROM T_VoucherTransaction t1 
		INNER JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.RedeemTransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)  ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemSerial T2 ON T1.VoucherNo = T2.SerialNum -- AND CONVERT(DATE, ISNULL(T2.ExpDate,GETDATE())) >= CONVERT(DATE, GETDATE())
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode  AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_ItemSerialStock T4 ON T4.SerialNum = T2.SerialNum
		LEFT JOIN M_Item T5 ON T1.ItemCode = T5.ItemCode
		WHERE isnull(T1.ItemCode,'') <> ''  AND ISNULL(t1.RedeemTransId,'') <> ''  and t5.isVoucher=1   and H.StoreId in( SELECT Value FROM STRING_SPLIT (@OutletID,';') )

		INSERT INTO @TBL_RAW(GroupCode,OutletCode,OutletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT DISTINCT
		O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode, T5.ItemName, T3.BarCode, T1.VoucherNo,H.CreatedOn, T2.ExpDate, 'ISSUE' AS STA , t1.IssueTransId
		FROM T_VoucherTransaction t1 
		INNER JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.IssueTransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)   ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemSerial T2 ON T1.VoucherNo = T2.SerialNum -- AND CONVERT(DATE, ISNULL(T2.ExpDate,GETDATE())) >= CONVERT(DATE, GETDATE())
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode  AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_ItemSerialStock T4 ON T4.SerialNum = T2.SerialNum
		LEFT JOIN M_Item T5 ON T4.ItemCode = T5.ItemCode
		WHERE isnull(T1.VoucherNo,'') <> '' and  ISNULL(t1.RedeemTransId,'') = '' and t5.isVoucher=1   and H.StoreId in( SELECT Value FROM STRING_SPLIT (@OutletID,';') )

		-- GIFT ĐÃ REDEEM
		----------------------------
		INSERT INTO @TBL_RAW(GroupCode,OutletCode,O.outletName,ItemID, ItemName, BarCode, DISTNUMBER,CREATEDON, EXPDATE, STA, PosId)
		SELECT O.CompanyCode,H.StoreId,O.StoreName,T1.ItemCode AS ItemCode, T4.ItemName, T3.BarCode, T1.VoucherNo as DistNumber,H.CreatedOn, NULL AS ExpDate, 'REDEEM' AS STA  , t1.RedeemTransId
		FROM T_VoucherTransaction T1
		INNER JOIN T_SalesHeader H WITH (NOLOCK)  ON T1.RedeemTransId = H.TransId 
		INNER JOIN M_Store O WITH (NOLOCK)   ON H.StoreId = O.StoreId
		LEFT JOIN M_ItemUOM T3 ON T1.ItemCode =  T3.ItemCode  AND ISNULL(T3.BarCode, '') <> ''
		LEFT JOIN M_Item T4 ON T4.ItemCode =  T1.ItemCode
		WHERE H.Status = 'O' and  ISNULL(t1.RedeemTransId,'') <> '' and t4.isVoucher=1   and H.StoreId in( SELECT Value FROM STRING_SPLIT (@OutletID,';') )

		SELECT @SALE =  COUNT(*) FROM @TBL_RAW WHERE STA = 'SALE' OR STA = 'ISSUE'
		SELECT @REDEEM =  COUNT(*)  FROM @TBL_RAW WHERE STA = 'REDEEM'

	END


	SELECT  GroupCode,
			OutletCode,
			OutletName,
			ItemID,
			ItemName ,
			BarCode  ,
			DISTNUMBER SerialNum,
			CREATEDON SaleDate,
			EXPDATE  ExpDate,
			STA Status,
			PosId PosId
			--,@SALE -  @REDEEM AS instock 
	FROM @TBL_RAW
	WHERE CONVERT(date,CREATEDON,110) BETWEEN CONVERT(date,@FDate,110) AND CONVERT(date,@TDate,110)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InventoryAudit]    Script Date: 1/30/2023 9:43:32 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_RPT_InventoryAudit]  NULL, NULL,'admin', '2020-01-01', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_InventoryAudit]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	--DECLARE @Item AS TABLE
	--(
	--	CompanyCode NVARCHAR(50),
	--	StoreId NVARCHAR(500),
	--	ItemCode  NVARCHAR(50),
	--	UOMCode  NVARCHAR(50) 
	--)

	--INSERT INTO @Item
	--SELECT I.CompanyCode,S.StoreId,I.ItemCode,U.UOMCode
	--FROM M_Item I INNER JOIN M_ItemUOM U ON I.CompanyCode = U.CompanyCode AND I.ItemCode = U.ItemCode
	--			  CROSS JOIN M_Store S					  
	--WHERE NOT EXISTS ( SELECT 1 FROM M_BOMLine B WHERE I.CompanyCode = B.CompanyCode AND I.ItemCode = B.ItemCode)


	DECLARE @BeginQty AS TABLE
	(
		CompanyCode NVARCHAR(50),
		StoreId NVARCHAR(500),
		SlocId NVARCHAR(500),
		ItemCode  NVARCHAR(50),
		UOMCode  NVARCHAR(50),
		BeginQty	NUMERIC(16,2)
	)

	INSERT INTO @BeginQty
	SELECT  	  
		  S.CompanyCode,	
		  S.StoreId,
		  S.SLocId,
		  S.ItemCode,	
		  S.UOMCode ,
		  SUM(ISNULL(S.InQty,0) - ISNULL(S.OutQty,0)) BlcQty
	FROM	T_TransactionLog S 
  					   INNER JOIN M_UserStore ON S.StoreId = M_UserStore.StoreId
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
					   
	WHERE S.CompanyCode = ISNULL(@CompanyCode,S.CompanyCode) AND
		  S.StoreId = ISNULL(@StoreId,S.StoreId) AND
		  CONVERT(Date,S.TransDate)  < @FDate  AND
		  M_User.Username = @Userlogin
	GROUP BY 		  
		  S.CompanyCode,	
		  S.StoreId,
		  S.SLocId ,
		  S.ItemCode,	
		  S.UOMCode 


  SELECT  	  
	  I.CompanyCode,	
	  I.ItemCode,	
	  S.UOMCode ,
	  S.StoreId,
	  M_Store.StoreName,
	  S.SLocId,
	  ISNULL(B.BeginQty,0)  BeginQty,
	  SUM(ISNULL(S.InQty,0)) InQty,
	  SUM(ISNULL(S.OutQty,0)) OutQty,
	  ISNULL(B.BeginQty,0) + SUM(ISNULL(S.InQty,0) - ISNULL(S.OutQty,0)) EndQty,
	  I.ProductId,	
	  I.VariantId,	
	  --I.CreatedBy,	
	  --I.CreatedOn,	
	  --I.ModifiedBy,	
	  --I.ModifiedOn,	
	  I.Status,	
	  I.CapacityValue,	
	  I.ItemGroupId	,
	  I.SalesTaxCode,	
	  I.PurchaseTaxCode,	
	  I.ItemName,	
	  I.ItemDescription,	
	  I.ItemCategory_1,	
	  I.ItemCategory_2,	
	  I.ItemCategory_3,	
	  I.ForeignName,	
	  I.InventoryUOM,	
	  I.ImageURL,	
	  I.ImageLink,	
	  I.MCId,	
	  I.CustomField1,	
	  I.CustomField2,	
	  I.CustomField3,	
	  I.CustomField4,	
	  I.CustomField5,	
	  I.CustomField6,	
	  I.CustomField7,	
	  I.CustomField8,	
	  I.CustomField9,	
	  I.CustomField10,	
	  I.DefaultPrice,	
	  I.IsSerial,	
	  I.IsBOM	,
	  I.ValidFrom	,
	  I.ValidTo 

  FROM T_TransactionLog S INNER JOIN M_Item I ON I.CompanyCode = S.CompanyCode  AND I.ItemCode = S.ItemCode
  					   INNER JOIN M_UserStore ON S.StoreId = M_UserStore.StoreId
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
					   LEFT JOIN @BeginQty B ON I.CompanyCode = B.CompanyCode  AND I.ItemCode = B.ItemCode AND S.UOMCode = B.UOMCode AND S.StoreId = B.StoreId AND S.SLocId = B.SlocId
					   LEFT JOIN M_Store on S.StoreId = M_Store.StoreId
	WHERE S.CompanyCode = ISNULL(@CompanyCode,S.CompanyCode) AND
			S.StoreId = ISNULL(@StoreId,S.StoreId) AND
			CONVERT(Date,S.TransDate)  BETWEEN @FDate AND @TDate AND
			M_User.Username = @Userlogin AND
			ISNULL(I.CustomField4,'') = 'I'
	GROUP BY
	  I.CompanyCode,	
	  I.ItemCode,	
	  S.UOMCode ,
	  B.BeginQty,
	  S.StoreId,
	   M_Store.StoreName,
	   S.SLocId,
	  I.ProductId,	
	  I.VariantId,	
	  --I.CreatedBy,	
	  --I.CreatedOn,	
	  --I.ModifiedBy,	
	  --I.ModifiedOn,	
	  I.Status,	
	  I.CapacityValue,	
	  I.ItemGroupId	,
	  I.SalesTaxCode,	
	  I.PurchaseTaxCode,	
	  I.ItemName,	
	  I.ItemDescription,	
	  I.ItemCategory_1,	
	  I.ItemCategory_2,	
	  I.ItemCategory_3,	
	  I.ForeignName,	
	  I.InventoryUOM,	
	  I.ImageURL,	
	  I.ImageLink,	
	  I.MCId,	
	  I.CustomField1,	
	  I.CustomField2,	
	  I.CustomField3,	
	  I.CustomField4,	
	  I.CustomField5,	
	  I.CustomField6,	
	  I.CustomField7,	
	  I.CustomField8,	
	  I.CustomField9,	
	  I.CustomField10,	
	  I.DefaultPrice,	
	  I.IsSerial,	
	  I.IsBOM	,
	  I.ValidFrom	,
	  I.ValidTo 

	DELETE @BeginQty 
END 

GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InventoryOnHand]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_RPT_InventoryOnHand]  NULL, NULL,'admin' 
CREATE PROCEDURE [dbo].[USP_RPT_InventoryOnHand]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50) 
AS
BEGIN

  SELECT  
	  
	  I.CompanyCode,	
	  I.ItemCode,	
	  S.UOMCode ,
	  S.StoreId,
	  M_Store.StoreName,
	  S.SLocId,
	  SUM(S.Quantity) Quantity,
	  I.ProductId,	
	  I.VariantId,	
	  I.CreatedBy,	
	  I.CreatedOn,	
	  I.ModifiedBy,	
	  I.ModifiedOn,	
	  I.Status,	
	  I.CapacityValue,	
	  I.ItemGroupId	,
	  I.SalesTaxCode,	
	  I.PurchaseTaxCode,	
	  I.ItemName,	
	  I.ItemDescription,	
	  I.ItemCategory_1,	
	  I.ItemCategory_2,	
	  I.ItemCategory_3,	
	  I.ForeignName,	
	  I.InventoryUOM,	
	  I.ImageURL,	
	  I.ImageLink,	
	  I.MCId,	
	  I.CustomField1,	
	  I.CustomField2,	
	  I.CustomField3,	
	  I.CustomField4,	
	  I.CustomField5,	
	  I.CustomField6,	
	  I.CustomField7,	
	  I.CustomField8,	
	  I.CustomField9,	
	  I.CustomField10,	
	  I.DefaultPrice,	
	  I.IsSerial,	
	  I.IsBOM	,
	  I.ValidFrom	,
	  I.ValidTo 

  FROM T_ItemStorage S INNER JOIN M_Item I ON I.CompanyCode = S.CompanyCode  AND I.ItemCode = S.ItemCode
  					   INNER JOIN M_UserStore ON S.StoreId = M_UserStore.StoreId
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
					   LEFT join M_Store on S.StoreId = M_Store.StoreId
	WHERE S.CompanyCode = ISNULL(@CompanyCode,S.CompanyCode) AND
		  S.StoreId = ISNULL(@StoreId,S.StoreId) AND
		  M_User.Username = @Userlogin AND
		  ISNULL(I.CustomField4,'') = 'I'
	GROUP BY
		  I.CompanyCode,	
		  I.ItemCode,	
		  S.UOMCode ,
		  S.StoreId,
		  S.SLocId,
		  M_Store.StoreName,
		  I.ProductId,	
		  I.VariantId,	
		  I.CreatedBy,	
		  I.CreatedOn,	
		  I.ModifiedBy,	
		  I.ModifiedOn,	
		  I.Status,	
		  I.CapacityValue,	
		  I.ItemGroupId	,
		  I.SalesTaxCode,	
		  I.PurchaseTaxCode,	
		  I.ItemName,	
		  I.ItemDescription,	
		  I.ItemCategory_1,	
		  I.ItemCategory_2,	
		  I.ItemCategory_3,	
		  I.ForeignName,	
		  I.InventoryUOM,	
		  I.ImageURL,	
		  I.ImageLink,	
		  I.MCId,	
		  I.CustomField1,	
		  I.CustomField2,	
		  I.CustomField3,	
		  I.CustomField4,	
		  I.CustomField5,	
		  I.CustomField6,	
		  I.CustomField7,	
		  I.CustomField8,	
		  I.CustomField9,	
		  I.CustomField10,	
		  I.DefaultPrice,	
		  I.IsSerial,	
		  I.IsBOM	,
		  I.ValidFrom	,
		  I.ValidTo 

END 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InventoryPosting]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_RPT_InventoryPosting]  NULL, NULL,'admin', '2021-07-27',  '2021-07-27'
CREATE PROCEDURE [dbo].[USP_RPT_InventoryPosting]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	DECLARE @Remark AS TABLE
	(
		CompanyCode NVARCHAR(50),
		TransId NVARCHAR(50),
		Remark  NVARCHAR(500)
	)

	INSERT INTO @Remark

	SELECT CompanyCode,TransId,Remarks FROM T_SalesHeader WHERE CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND StoreId = ISNULL(@StoreId,StoreId) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE
	UNION
	SELECT CompanyCode,INVTId,Remark FROM T_InventoryHeader WHERE DocType = 'S' AND CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND FromStore = ISNULL(@StoreId,FromStore) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE
	UNION
	SELECT CompanyCode,INVTId,Remark FROM T_InventoryHeader WHERE DocType = 'R' AND CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND ToStore = ISNULL(@StoreId,ToStore) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE
	UNION
	SELECT CompanyCode,INVTId,Remark FROM T_GoodsIssueHeader WHERE CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND StoreId = ISNULL(@StoreId,StoreId) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE
	UNION
	SELECT CompanyCode,INVTId,Remark FROM T_GoodsReceiptHeader WHERE CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND StoreId = ISNULL(@StoreId,StoreId) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE
	UNION
	SELECT CompanyCode,PurchaseId,Comment FROM T_GoodsReceiptPOHeader WHERE CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND StoreId = ISNULL(@StoreId,StoreId) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE

  SELECT  	  
	  I.CompanyCode,
	  S.TransType,
	  S.TransDate,
	  S.TransId,
	  R.Remark,
	  I.ItemCode,	
	  S.UOMCode ,
	  S.StoreId,
	  S.SLocId SlocId,
	  SUM(ISNULL(S.InQty,0)) InQty,
	  SUM(ISNULL(S.OutQty,0)) OutQty,
	  I.ProductId,	
	  I.VariantId,	
	  --I.CreatedBy,	
	  --I.CreatedOn,	
	  --I.ModifiedBy,	
	  --I.ModifiedOn,	
	  I.Status,	
	  I.CapacityValue,	
	  I.ItemGroupId	,
	  I.SalesTaxCode,	
	  I.PurchaseTaxCode,	
	  I.ItemName,	
	  I.ItemDescription,	
	  I.ItemCategory_1,	
	  I.ItemCategory_2,	
	  I.ItemCategory_3,	
	  I.ForeignName,	
	  I.InventoryUOM,	
	  I.ImageURL,	
	  I.ImageLink,	
	  I.MCId,	
	  I.CustomField1,	
	  I.CustomField2,	
	  I.CustomField3,	
	  I.CustomField4,	
	  I.CustomField5,	
	  I.CustomField6,	
	  I.CustomField7,	
	  I.CustomField8,	
	  I.CustomField9,	
	  I.CustomField10,	
	  I.DefaultPrice,	
	  I.IsSerial,	
	  I.IsBOM	,
	  I.ValidFrom	,
	  I.ValidTo 

  FROM T_TransactionLog S INNER JOIN M_Item I ON I.CompanyCode = S.CompanyCode  AND I.ItemCode = S.ItemCode
  					   INNER JOIN M_UserStore ON S.StoreId = M_UserStore.StoreId
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
					   LEFT JOIN @Remark R ON S.TransId = R.TransId AND S.CompanyCode = R.CompanyCode
	WHERE S.CompanyCode = ISNULL(@CompanyCode,S.CompanyCode) AND
			S.StoreId = ISNULL(@StoreId,S.StoreId) AND
			CONVERT(Date,S.TransDate)  BETWEEN @FDate AND @TDate AND
			M_User.Username = @Userlogin AND 
			ISNULL(I.CustomField4,'') <> 'S'

	GROUP BY
	  I.CompanyCode,
	  S.TransType,
	  S.TransDate,
	  S.TransId,
	  R.Remark,
	  I.ItemCode,	
	  S.UOMCode ,
	  S.StoreId,
	  S.SLocId,
	  I.ProductId,	
	  I.VariantId,	
	  --I.CreatedBy,	
	  --I.CreatedOn,	
	  --I.ModifiedBy,	
	  --I.ModifiedOn,	
	  I.Status,	
	  I.CapacityValue,	
	  I.ItemGroupId	,
	  I.SalesTaxCode,	
	  I.PurchaseTaxCode,	
	  I.ItemName,	
	  I.ItemDescription,	
	  I.ItemCategory_1,	
	  I.ItemCategory_2,	
	  I.ItemCategory_3,	
	  I.ForeignName,	
	  I.InventoryUOM,	
	  I.ImageURL,	
	  I.ImageLink,	
	  I.MCId,	
	  I.CustomField1,	
	  I.CustomField2,	
	  I.CustomField3,	
	  I.CustomField4,	
	  I.CustomField5,	
	  I.CustomField6,	
	  I.CustomField7,	
	  I.CustomField8,	
	  I.CustomField9,	
	  I.CustomField10,	
	  I.DefaultPrice,	
	  I.IsSerial,	
	  I.IsBOM	,
	  I.ValidFrom	,
	  I.ValidTo 

END 

GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InventorySerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_RPT_InventorySerial]  'CP001', 'JAOF001','admin', '2021-07-27',  '2021-12-27'
CREATE PROCEDURE [dbo].[USP_RPT_InventorySerial]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN



	--DECLARE @Serial AS TABLE
	--(
	--	CompanyCode NVARCHAR(50),
	--	StoreId  NVARCHAR(50),
	--	ItemCode NVARCHAR(50),
	--	SerialNum NVARCHAR(4000),
	--	UOMCode NVARCHAR(50)
	--)

	--INSERT INTO @Serial
	--SELECT 
	--	CompanyCode
	--	,StoreId
	--	,ItemCode
	--	,STRING_AGG( ISNULL(SerialNum, ' '), ',') 
	--	,UOMCode 
	--FROM T_ItemSerial
	--WHERE CompanyCode = @CompanyCode AND
	--	  StoreId = @StoreId AND
	--	  TransDate <= @TDate
	--GROUP BY CompanyCode ,ItemCode
	--	,SerialNum
	--	,StoreId
	--	,UOMCode 
	--HAVING 	SUM(ISNULL(InQty,0) - ISNULL(OutQty,0)) > 0


	SELECT 
	StoreId,
	TransType,
	TransId,
	TransDate,
	ItemCode,
	UOMCode,
	ISNULL(InQty,0) - ISNULL(OutQty,0) Qty 
	FROM T_ItemSerial
	WHERE 
		CompanyCode = @CompanyCode AND
		StoreId = @StoreId AND	
		TransDate BETWEEN @FDate AND @TDate  
			


END
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InvoiceTransactionDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_RPT_InvoiceTransactionDetail]  NULL, NULL,'admin', '2020-01-01', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_InvoiceTransactionDetail]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	DECLARE @TblSplitPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(100),
		PromoName Nvarchar(500)
	)

	INSERT INTO @TblSplitPromo
	SELECT DISTINCT
		L.CompanyCode,
		L.TransId,
		LineId,
		LTRIM(RTRIM(Value)) PromoId,
		P.PromoName
	FROM  T_InvoiceLine L CROSS APPLY STRING_SPLIT(PromoID, ',')  	
						INNER JOIN S_PromoHeader P ON LTRIM(RTRIM(Value)) = P.PromoId	 AND L.CompanyCode = P.CompanyCode
						INNER JOIN T_InvoiceHeader H ON H.CompanyCode = P.CompanyCode AND H.TransId =  L.TransId
						INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
					    INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  M_User.Username = @Userlogin AND
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(H.InvoiceType,'') IN ('CheckOut' , 'CheckIn' )

	
	DECLARE @TblAGGPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(Max),
		PromoName Nvarchar(Max)
	)

	INSERT INTO @TblAGGPromo
	SELECT
		CompanyCode,
		TransId,
		LineId,
		STRING_AGG( ISNULL(PromoId, ' '), ',') ,
		STRING_AGG( ISNULL(PromoName, ' '), ',')
	FROM @TblSplitPromo
	GROUP BY CompanyCode,
			TransId,
			LineId

	SELECT
		L.CompanyCode,
		H.StoreId	,
		isnull(H.StoreName , st.StoreName) StoreName	,
		L.SLocId,
		H.ContractNo	,
		H.CusIdentifier	,
		H.ShiftId	,
		H.CusId	,
		H.InvoiceType,
		ISNULL(H.CollectedStatus,'Closed')	HeaderStatus,
		CASE WHEN H.IsCanceled = 'Y' THEN 'Canceled' ELSE 'Normal' END IsCanceled	,
		H.Remarks	,
		H.SalesPerson	,
		H.SalesMode	HeaderInvoiceMode,
		H.RefTransId	,
		H.ManualDiscount ,	
		H.DataSource,
		H.POSType,
		H.Phone,
		H.CusName, 
		H.CusAddress, 
		L.TransId,
		L.LineId,
		L.ItemCode,		
		L.BarCode,
		L.UOMCode,
		L.Quantity ,
		L.Price,
		L.LineTotal,
		L.[LineTotal]   * (100-H.[DiscountRate])/100 FinalLineTotal ,
		L.DiscountType,
		L.DiscountAmt,
		L.DiscountRate,
		H.CreatedBy,
		L.CreatedOn,
		L.ModifiedBy,
		L.ModifiedOn,
		L.Status,
		L.Remark,
		A.PromoId,
		A.PromoName,
		L.PromoType,
		L.PromoPercent,
		L.PromoBaseItem,
		L.SalesMode,
		L.TaxRate,
		L.TaxAmt,
		L.TaxCode,
		L.MinDepositAmt,
		L.MinDepositPercent,
		L.DeliveryType,
		L.POSService,
		L.StoreAreaId,
		L.TimeFrameId,
		L.AppointmentDate,
		L.BomID,
		L.PromoPrice,
		L.PromoLineTotal,
		L.Description,
		L.PrepaidCardNo,
		i.CustomField1,
		i.CustomField2,
		i.CustomField3,
		i.CustomField4,
		i.CustomField5,
		i.CustomField6,
		i.CustomField7,
		i.CustomField8,
		i.CustomField9,
		i.CustomField10
		--,
		--BaseLine,
		--BaseTransId,
		--OpenQty
	FROM T_InvoiceLine L INNER JOIN T_InvoiceHeader H ON H.TransId = L.TransId AND H.CompanyCode = L.CompanyCode
					   INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId  
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId AND H.CompanyCode = M_User.CompanyCode
					   LEFT JOIN M_Item I on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
					   LEFT JOIN @TblAGGPromo A ON 	L.CompanyCode = A.CompanyCode AND L.TransId = A.TransId AND L.LineId = A.LineId
						left join M_Store st on st.StoreId = H.StoreId and st.CompanyCode = H.CompanyCode
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  M_User.Username = @Userlogin AND
		  ISNULL(L.BomID,'') = '' AND
		  --H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(H.InvoiceType,'') IN ('CheckOut' , 'CheckIn' )

END 



GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InvoiceTransactionPayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_RPT_InvoiceTransactionPayment]  NULL, NULL,'admin', '2020-01-01', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_InvoiceTransactionPayment]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN


	SELECT 
		T_InvoiceHeader.CompanyCode	,
		T_InvoiceHeader.StoreId	,
		StoreName	,
		T_InvoicePayment.TransId ,
		PaymentCode ,
		T_InvoiceHeader.InvoiceType ,
		SUM(T_InvoicePayment.CollectedAmount/ ((100-T_InvoicePayment.PaymentDiscount)/100)) TotalAmt,
		SUM(T_InvoicePayment.CollectedAmount) ChargableAmount,
		T_InvoicePayment.CreatedOn,
		T_InvoicePayment.CreatedBy
	FROM T_InvoiceHeader INNER JOIN M_UserStore ON T_InvoiceHeader.StoreId = M_UserStore.StoreId
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
					   INNER JOIN T_InvoicePayment ON T_InvoiceHeader.TransId = T_InvoicePayment.TransId
	WHERE T_InvoiceHeader.CompanyCode = ISNULL(@CompanyCode,T_InvoiceHeader.CompanyCode) AND
		  T_InvoiceHeader.StoreId = ISNULL(@StoreId,T_InvoiceHeader.StoreId) AND
		  CONVERT(Date,T_InvoiceHeader.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  M_User.Username = @Userlogin AND
		  ISNULL(T_InvoiceHeader.InvoiceType,'') IN ('CheckOut' , 'CheckIn' )
	GROUP BY 		T_InvoiceHeader.CompanyCode	,
		T_InvoiceHeader.StoreId	,
		StoreName,
		T_InvoicePayment.TransId ,
		PaymentCode,
		T_InvoiceHeader.InvoiceType ,
			T_InvoicePayment.CreatedOn,
		T_InvoicePayment.CreatedBy



END 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_InvoiceTransactionSummary]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_RPT_InvoiceTransactionSummary]  NULL, NULL,'admin', '2021-07-27', '2021-07-27'
CREATE PROCEDURE [dbo].[USP_RPT_InvoiceTransactionSummary]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	SELECT 
		H.TransId	,
		H.CompanyCode	,
		H.StoreId	,
		H.InvoiceType ,
		ContractNo	,
		StoreName	,
		ShiftId	,
		CusId	,
		CusIdentifier	,
		M_Item.CustomField7 ,
		SUM(L.Quantity * L.Price)	TotalAmount,
		SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100  )	TotalPayable,
		SUM(L.Quantity * L.Price) - SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100  ) TotalDiscountAmt,
		SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100  )	TotalReceipt,
		0	AmountChange,
		0	PaymentDiscount,
		(SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100 / (100+ISNULL(L.TaxRate,0))/100)  )		TotalTax,
		H.DiscountType	,
		SUM(L.Quantity * L.Price) - SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100  )		DiscountAmount,
		H.DiscountRate	,
		H.CreatedOn	,
		H.CreatedBy	,
		H.ModifiedOn	,
		H.ModifiedBy	,
		H.Status	,
		IsCanceled	,
		Remarks	,
		SalesPerson	,
		H.SalesMode	,
		RefTransId	,
		ManualDiscount
	FROM T_InvoiceHeader H INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
					   INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
					   INNER JOIN T_InvoiceLine L ON H.TransId = L.TransId AND  H.CompanyCode = L.CompanyCode
					   LEFT JOIN M_Item  on L.ItemCode = M_Item.ItemCode
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  M_User.Username = @Userlogin AND 
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(L.BomID,'') = '' AND
		  ISNULL(H.InvoiceType,'') IN ('CheckOut' , 'CheckIn' ) 
	GROUP BY
		H.TransId	,
		H.CompanyCode	,
		H.StoreId	,
		ContractNo	,
		H.InvoiceType ,
		StoreName	,
		ShiftId	,
		CusId	,
		CusIdentifier	,
		M_Item.CustomField7 ,
		H.DiscountType	,
		H.DiscountRate	,
		H.CreatedOn	,
		H.CreatedBy	,
		H.ModifiedOn	,
		H.ModifiedBy	,
		H.Status	,
		IsCanceled	,
		Remarks	,
		SalesPerson	,
		H.SalesMode	,
		RefTransId	,
		ManualDiscount

END 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_POSPromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

-- exec USP_RPT_POSPromo 'CP001','2022-04-21' , '2022-04-23' 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_RPT_POSPromo]
	@CompanyCode NvarChar(50),
	@FDate date,
	@TDate date
AS
BEGIN
	IF @TDate IS NULL
	BEGIN
		SET @TDate = @FDate
	END

	-------- GET List Promo ID------
	DECLARE @TblPromoId AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100)
	)

	INSERT INTO @TblPromoId
	SELECT DISTINCT CompanyCode ,
			PromoId 
	FROM S_PromoHeader H 
	WHERE   CONVERT(NVARCHAR(50),@FDate,102)  <= CONVERT(NVARCHAR(50),H.ValidDateFrom,102) 
	AND  CONVERT(NVARCHAR(50),@TDate,102) <= CONVERT(NVARCHAR(50),H.ValidDateTo ,102)  
	AND H.CompanyCode = @CompanyCode

	-------- GET Addition Field Value - barcode------
	DECLARE @TblBarCodeGet AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		ItemCode  Nvarchar(50),
		UOMCode  Nvarchar(50),
		AdditionValue  varchar(MAX)
	)

	INSERT INTO @TblBarCodeGet
	SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	FROM S_PromoGet G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
					  INNER JOIN @TblPromoId H ON G.PromoId = H.PromoId AND G.CompanyCode = H.CompanyCode
	WHERE G.CompanyCode = @CompanyCode
	GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

	DECLARE @TblBarCodeBuy AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		ItemCode  Nvarchar(50),
		UOMCode  Nvarchar(50),
		AdditionValue  varchar(MAX)
	)

	INSERT INTO @TblBarCodeBuy
	SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	FROM S_PromoBuy G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
					  INNER JOIN @TblPromoId H ON G.PromoId = H.PromoId AND G.CompanyCode = H.CompanyCode
	WHERE G.CompanyCode = @CompanyCode
	GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

	DECLARE @TblBarCodeOTBuy AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		ItemCode  Nvarchar(50),
		UOMCode  Nvarchar(50),
		AdditionValue  varchar(MAX)
	)

	INSERT INTO @TblBarCodeOTBuy
	SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	FROM S_PromoBuyOTGroup G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
					  INNER JOIN @TblPromoId H ON G.PromoId = H.PromoId AND G.CompanyCode = H.CompanyCode
	WHERE G.CompanyCode = @CompanyCode
	GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

	DECLARE @TblBarCodeOTGet AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		ItemCode  Nvarchar(50),
		UOMCode  Nvarchar(50),
		AdditionValue  varchar(MAX)
	)

	INSERT INTO @TblBarCodeOTGet
	SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	FROM S_PromoGetOTGroup G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
					  INNER JOIN @TblPromoId H ON G.PromoId = H.PromoId AND G.CompanyCode = H.CompanyCode
	WHERE G.CompanyCode = @CompanyCode
	GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

	-------- GET Addition Field Value - CustomerCode------
  	DECLARE @TblCustomerCode AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		CustomerCode Varchar(100)
	)
	INSERT INTO @TblCustomerCode
	SELECT DISTINCT
			P.CompanyCode,
			P.PromoId,
			CASE WHEN P.CustomerType ='G' THEN P.CustomerValue + '-' + G.CusGrpDesc 
				ELSE P.CustomerValue END CustomerCode
	FROM @TblPromoId H INNER JOIN S_PromoCustomer P ON H.CompanyCode = P.CompanyCode AND H.PromoId = P.PromoId
						LEFT JOIN  M_CustomerGroup G ON P.CompanyCode = G.CompanyCode AND P.CustomerValue = G.CusGrpId  
	WHERE H.CompanyCode = @CompanyCode
	 


  	DECLARE @TblAGGCustomerCode AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		CustomerCode Varchar(Max)
	)

	INSERT INTO @TblAGGCustomerCode
	SELECT 
			CompanyCode,
			PromoId,
			CASE WHEN LEN(STRING_AGG( ISNULL(CustomerCode, ' '), ',')) > 7999 THEN LEFT(STRING_AGG( ISNULL(CustomerCode, ' '), ','),7999) 
				ELSE STRING_AGG( ISNULL(CustomerCode, ' '), ',') END CustomerCode
	FROM @TblCustomerCode
	GROUP BY CompanyCode,
			PromoId,
			CustomerCode

	-------- GET Addition Field Value - StoreCode------
  	DECLARE @TblStoreCode AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		StoreCode NVarchar(MAX)
	)
	INSERT INTO @TblStoreCode
	SELECT DISTINCT
			P.CompanyCode,
			P.PromoId,
			STRING_AGG(P.StoreValue + '-' + G.StoreName,',') StoreCode
	FROM @TblPromoId H INNER JOIN S_PromoStore P ON H.CompanyCode = P.CompanyCode AND H.PromoId = P.PromoId
						 LEFT JOIN  M_Store G ON P.CompanyCode = G.CompanyCode AND P.StoreValue = G.StoreId  
	WHERE H.CompanyCode = @CompanyCode
	GROUP BY
			P.CompanyCode,
			P.PromoId

	-------- GET Addition Field Value - Line Code ( item / barcode /group /collection )------
  	DECLARE @TblLineCode AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		LineCode NVarchar(MAX)
	)
	INSERT INTO @TblLineCode
	SELECT 
			P.CompanyCode,
			P.PromoId,
			ISNULL(P.LineCode,'')
	FROM @TblPromoId H INNER JOIN S_PromoGet P ON H.CompanyCode = P.CompanyCode AND H.PromoId = P.PromoId
	WHERE H.CompanyCode = @CompanyCode
	GROUP BY
			P.CompanyCode,
			P.PromoId,
			P.LineCode


	INSERT INTO @TblLineCode
	SELECT 
			P.CompanyCode,
			P.PromoId,
			ISNULL(P.LineCode,'')
	FROM @TblPromoId H INNER JOIN S_PromoBuy P ON H.CompanyCode = P.CompanyCode AND H.PromoId = P.PromoId
	WHERE H.CompanyCode = @CompanyCode
	GROUP BY
			P.CompanyCode,
			P.PromoId,
			P.LineCode

	INSERT INTO @TblLineCode
	SELECT 
			P.CompanyCode,
			P.PromoId,
			ISNULL(P.LineCode,'')
	FROM @TblPromoId H INNER JOIN S_PromoBuyOTGroup P ON H.CompanyCode = P.CompanyCode AND H.PromoId = P.PromoId
	WHERE H.CompanyCode = @CompanyCode
	GROUP BY
			P.CompanyCode,
			P.PromoId,
			P.LineCode

	INSERT INTO @TblLineCode
	SELECT 
			P.CompanyCode,
			P.PromoId,
			ISNULL(P.LineCode,'')
	FROM @TblPromoId H INNER JOIN S_PromoGetOTGroup P ON H.CompanyCode = P.CompanyCode AND H.PromoId = P.PromoId
	WHERE H.CompanyCode = @CompanyCode
	GROUP BY
			P.CompanyCode,
			P.PromoId,
			P.LineCode

	DECLARE @TblDistinctLineCode AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		LineCode NVarchar(MAX)
	)
	INSERT INTO @TblDistinctLineCode
	SELECT DISTINCT 
		CompanyCode ,
		PromoId ,
		LineCode
	FROM @TblLineCode

	DECLARE @TblAGGLineCode AS TABLE
	(
		CompanyCode Nvarchar(100),
		PromoId Nvarchar(100),
		LineCode NVarchar(MAX)
	)

	INSERT INTO @TblAGGLineCode
	SELECT 
			CompanyCode,
			PromoId,
			CASE WHEN LEN(STRING_AGG( ISNULL(LineCode, ' '), ',')) > 7999 THEN LEFT(STRING_AGG( ISNULL(LineCode, ' '), ','),7999) 
				ELSE STRING_AGG( ISNULL(LineCode, ' '), ',') END CustomerCode
	FROM @TblDistinctLineCode
	GROUP BY CompanyCode,
			PromoId


	--- Currenlty Qty
	DECLARE @PromoWillDeactive AS TABLE
	(
		CompanyCode NVARCHAR(50),
		PromoId NVARCHAR(50),
		TotalQty NUMERIC(19,6),
		MaxQtyByStore NUMERIC(19,6)
	)

	INSERT INTO @PromoWillDeactive
	SELECT  P.CompanyCode,P.PromoId , SUM(L.Quantity) Quantity , P.MaxQtyByStore
	FROM T_SalesLine L INNER JOIN S_PromoHeader P ON L.CompanyCode = P.CompanyCode AND LTRIM(RTRIM(REPLACE(L.PromoId,',','')))= P.PromoId
	WHERE ISNULL(P.MaxQtyByStore,0) <> 0 AND ISNULL(L.PromoType,'') <> '' 
	GROUP BY P.CompanyCode,P.PromoId , P.MaxQtyByStore

 
	-------- GET Data------
	
	SELECT 'Header' DataTable,H.CompanyCode,CAST(H.PromoType AS NVARCHAR(2)) + '-' + T.TypeName AS PromoTypeName,
			L.SchemaId ,
			L.Priority ,
			H.PromoId,
			H.PromoName,
			CASE WHEN H.CustomerType = 'A' THEN 'ALL' 
				WHEN H.CustomerType = 'C'THEN 'Customer'
				WHEN H.CustomerType = 'G'THEN 'Group'
				END CustomerType ,
			CASE WHEN H.CustomerType = 'A' THEN 'ALL' ELSE  C.CustomerCode END CustomerCode,
			S.StoreCode,
			H.ValidDateFrom,
			H.ValidDateTo,
			H.TotalBuyFrom,
			H.TotalBuyTo,
			H.TotalGetType,
			H.TotalGetValue,
			G.LineCode ApplyLineValue,
			H.MaxQtyByStore ,
			ISNULL(H.MaxQtyByStore,0) - ISNULL(M.TotalQty,0) RemainQty
	FROM S_PromoHeader H INNER JOIN M_PromoType T ON H.PromoType = T.PromoType
						 INNER JOIN @TblPromoId PH ON H.CompanyCode = PH.CompanyCode AND H.PromoId = PH.PromoId
						 LEFT JOIN S_SchemaLine L ON H.PromoId = L.PromoId
						 LEFT JOIN @TblAGGCustomerCode C ON H.CompanyCode = C.CompanyCode AND H.PromoId = C.PromoId
						 LEFT JOIN @TblStoreCode S ON H.CompanyCode = S.CompanyCode AND H.PromoId = S.PromoId
						 LEFT JOIN @TblAGGLineCode G ON H.CompanyCode = G.CompanyCode AND H.PromoId = G.PromoId
						 LEFT JOIN @PromoWillDeactive M ON H.CompanyCode = M.CompanyCode AND H.PromoId = M.PromoId
	WHERE H.CompanyCode = @CompanyCode
	ORDER BY L.SchemaId ,
			H.PromoId ,
			L.Priority ,
			H.MaxQtyByStore ,
			M.TotalQty 			 

	SELECT	'Get' DataTable,
			H.CompanyCode,
			H.PromoId,
			G.LineNum,
			G.LineType,
			G.LineCode,
			G.LineName,
			G.LineUom,
			B.AdditionValue, 
			G.ConditionType,
			G.Condition_1 Condition1,
			G.Value_1 Value1,
			G.Condition_2 Condition2,
			G.Value_2 Value2,
			G.ValueType,
			G.GetValue,
			G.MaxAmtDis,
			G.MaxQtyDis
	FROM @TblPromoId H INNER JOIN S_PromoGet G ON H.CompanyCode = G.CompanyCode AND H.PromoId = G.PromoId
					   LEFT JOIN @TblBarCodeGet B ON G.CompanyCode = B.CompanyCode AND G.LineCode = B.ItemCode AND G.LineUom = B.UOMCode AND H.PromoId = B.PromoId
	WHERE H.CompanyCode = @CompanyCode
	ORDER BY G.PromoId	, G.LineNum	

	SELECT	'Buy' DataTable,
			B.PromoId	,
			B.LineNum	,
			B.LineType	,
			B.LineCode	,
			B.LineName	,
			B.LineUom	,
			C.AdditionValue, 
			B.ValueType	,
			B.Condition_1	Condition1,
			B.Value_1	Value1,
			B.Condition_2	Condition2,
			B.Value_2	Value2
	FROM @TblPromoId H INNER JOIN S_PromoBuy B ON H.CompanyCode = B.CompanyCode AND H.PromoId = B.PromoId
					   LEFT JOIN @TblBarCodeBuy C ON B.CompanyCode = C.CompanyCode AND B.LineCode = C.ItemCode AND B.LineUom = C.UOMCode AND H.PromoId = C.PromoId
	WHERE H.CompanyCode = @CompanyCode
	ORDER BY B.PromoId	, B.LineNum	

	
	SELECT	'BuyOneTimeGroup' DataTable,
			H.PromoId	,
			B.LineNum	,
			B.LineType	,
			B.LineCode	,
			B.LineName	,
			B.LineUom	,
			C.AdditionValue
	FROM @TblPromoId H INNER JOIN S_PromoBuyOTGroup B ON H.CompanyCode = B.CompanyCode AND H.PromoId = B.PromoId
					   LEFT JOIN @TblBarCodeBuy C ON B.CompanyCode = C.CompanyCode AND B.LineCode = C.ItemCode AND B.LineUom = C.UOMCode AND H.PromoId = C.PromoId
	WHERE H.CompanyCode = @CompanyCode
	ORDER BY B.PromoId	, B.LineNum	


	SELECT	'GetOneTimeGroup' DataTable,
			H.PromoId	,
			B.LineNum	,
			B.LineType	,
			B.LineCode	,
			B.LineName	,
			B.LineUom	,
			C.AdditionValue
	FROM @TblPromoId H INNER JOIN S_PromoGetOTGroup B ON H.CompanyCode = B.CompanyCode AND H.PromoId = B.PromoId
					   LEFT JOIN @TblBarCodeBuy C ON B.CompanyCode = C.CompanyCode AND B.LineCode = C.ItemCode AND B.LineUom = C.UOMCode AND H.PromoId = C.PromoId
	WHERE H.CompanyCode = @CompanyCode
	ORDER BY B.PromoId	, B.LineNum	

END


GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesByHour]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

 -- EXEC USP_RPT_SalesByHour 'CP001' , '1001' , 'Admin' , '2021-09-29' , '2021-09-29'
CREATE PROCEDURE [dbo].[USP_RPT_SalesByHour]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date 
AS
BEGIN
	
	DECLARE @CountTrans AS TABLE
	(
		CompanyCode NVARCHAR(50),
		StoreId NVARCHAR(50),
		[Hour] Int,
		[NoTrans] Int
	)

	INSERT INTO @CountTrans
	SELECT  Z.CompanyCode,Z.StoreId,Z.[Hour],COUNT(Z.TransId) AS [NoTrans] 
	FROM
	(
		SELECT DISTINCT H.CompanyCode ,H.StoreId, DATEPART(hour,H.CreatedOn) [Hour]  ,TransId 
		FROM T_SalesHeader H	INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
								INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
		WHERE  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate) AS Z
	GROUP BY  Z.CompanyCode,Z.StoreId,Z.[Hour]
		
	SELECT 
		L.CompanyCode,
		H.StoreId	,
		S.StoreName	,
		--L.SLocId,
		--L.ItemCode,		
		--L.UOMCode, 
		DATEPART(hour,H.CreatedOn) Hour,
		C.[NoTrans] TotalTransId,
		SUM(ISNULL(L.Quantity,0)) TotalQuantity,
		SUM(ISNULL(L.LineTotal * (100-ISNULL(H.DiscountRate,0))/100 ,0)) TotalAmount
	
	FROM T_SalesLine L INNER JOIN T_SalesHeader H ON H.TransId = L.TransId
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId		
					   INNER JOIN M_Store S ON H.CompanyCode = S.CompanyCode AND H.StoreId = S.StoreId
					   INNER JOIN @CountTrans C ON C.CompanyCode = H.CompanyCode AND C.StoreId = H.StoreId AND C.[Hour] = DATEPART(hour,H.CreatedOn)
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(L.BomID,'') = '' 
	GROUP BY 		L.CompanyCode,
		H.StoreId	,
		S.StoreName	,
		C.[NoTrans],
		DATEPART(hour,H.CreatedOn)--,
		--L.ItemCode,		
--		L.BarCode,
		--L.UOMCode


END 

GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesBySalesPerson]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

-- EXEC USP_RPT_SalesBySalesPerson 'CP001' , 'JAOF001','admin','2020-01-01','2022-01-01'

CREATE PROCEDURE [dbo].[USP_RPT_SalesBySalesPerson]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date 
AS
BEGIN
		
	SELECT 
		L.CompanyCode,
		H.StoreId	,
		H.StoreName	,
		H.SalesPerson,
		M_Employee.EmployeeName,
		M_Item.CustomField7 ,
		--L.ItemCode,		
		--L.UOMCode, 
		DATEPART(Year,H.CreatedOn) Year,
		--COUNT(L.TransId) TotalTransId,
		SUM(ISNULL(L.Quantity,0)) TotalQuantity,
		SUM(ISNULL(L.LineTotal,0)  * (100-H.[DiscountRate])/100) TotalAmount
	
	FROM T_SalesLine L INNER JOIN T_SalesHeader H ON H.TransId = L.TransId
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId		
					   INNER JOIN M_Employee ON M_Employee.EmployeeId = H.SalesPerson AND M_Employee.CompanyCode = H.CompanyCode
					   LEFT JOIN M_Item  on L.ItemCode = M_Item.ItemCode
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(L.BomID,'') = ''  
	GROUP BY 		L.CompanyCode,
		H.StoreId	,
		H.StoreName	,
		H.SalesPerson,
		DATEPART(Year,H.CreatedOn),
		M_Employee.EmployeeName	,M_Item.CustomField7
--		L.BarCode,
		--L.UOMCode


END 




GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesByYear]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

 
CREATE PROCEDURE [dbo].[USP_RPT_SalesByYear]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date 
AS
BEGIN

	DECLARE @TblSum AS TABLE
	(
		CompanyCode Nvarchar(100),
		Store Nvarchar(100),
		TotalTransId Numeric(19,6),
		TotalAMT Numeric(19,6)
	)

	INSERT INTO @TblSum
	SELECT 
	H.CompanyCode,
	H.StoreId,
	COUNT(H.TransId) ,
	SUM(H.TotalReceipt - H.AmountChange + H.RoundingOff)
	
	FROM  T_SalesHeader H  INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId		
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  H.Status = 'C' 
	GROUP BY 	H.CompanyCode,
	H.StoreId

		
	SELECT 
		L.CompanyCode,
		H.StoreId	,
		H.StoreName	,
		--L.SLocId,
		--L.ItemCode,		
		--L.UOMCode, 
		DATEPART(Year,H.CreatedOn) Year,
		S.TotalTransId TotalTransId,
		SUM(ISNULL(L.Quantity,0)) TotalQuantity,
		S.TotalAMT TotalAmount
	
	FROM T_SalesLine L INNER JOIN T_SalesHeader H ON H.TransId = L.TransId
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId		
					   INNER JOIN @TblSum S ON H.CompanyCode = S.CompanyCode AND H.StoreId = S.Store
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(L.BomID,'') = ''  AND H.Status = 'C' 
	GROUP BY 		L.CompanyCode,
		H.StoreId	,
		H.StoreName	,
		S.TotalTransId ,
		DATEPART(Year,H.CreatedOn),
		S.TotalAMT
--		L.BarCode,
		--L.UOMCode




END 

GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesEPAYDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_RPT_SalesEPAYDetail]  NULL, NULL,'admin', '05-26-2022', '05-31-2025'
CREATE PROCEDURE [dbo].[USP_RPT_SalesEPAYDetail]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN
	
	SELECT DISTINCT R.EpayType ,R.StoreId , R.TransDate , R.TransId , R.ItemCode , R.ProductId , R.ExpDate , R.Custom3 , R.Custom4  , R.Quantity , R.LineTotal 
	FROM
	(
		SELECT 'BP' EpayType , L.StoreId , L.CreatedOn TransDate , L.TransId , L.ItemCode , ProductId , L.Custom3 , L.Custom4  , NULL ExpDate , L.Quantity , L.LineTotal
		FROM T_SalesLine L INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S INNER JOIN M_User U ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON L.StoreId = X.StoreId
		WHERE ISNULL(L.Custom3 ,'') <> '' AND L.CompanyCode = ISNULL(@CompanyCode,L.CompanyCode) AND L.StoreId = ISNULL(@StoreId,L.StoreId)  AND CONVERT(NVARCHAR(50),L.CreatedOn,110) BETWEEN CONVERT(NVARCHAR(50),@FDate,110) AND CONVERT(NVARCHAR(50),@TDate,110)
	
		UNION ALL 

		SELECT 'PIN' EpayType ,L.StoreId , L.CreatedOn TransDate , L.TransId , L.ItemCode , ProductId , RIGHT(S.BaseTransId,16) Custom3 , S.CustomF3 Custom4 , S.ExpDate , L.Quantity , L.LineTotal
		FROM T_SalesLine L INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S INNER JOIN M_User U ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON L.StoreId = X.StoreId
							INNER JOIN T_SalesLineSerial S ON L.TransId = S.TransId AND L.LineId = S.LineNum
		WHERE ISNULL(S.BaseTransId ,'') <> '' AND L.CompanyCode = ISNULL(@CompanyCode,L.CompanyCode) AND L.StoreId = ISNULL(@StoreId,L.StoreId) AND CONVERT(NVARCHAR(50),L.CreatedOn,110) BETWEEN CONVERT(NVARCHAR(50),@FDate,110) AND CONVERT(NVARCHAR(50),@TDate,110)
	) R
	ORDER BY TransDate
END


 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesStoreSummary]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- [USP_RPT_SalesStoreSummary]  NULL, NULL,'admin', '2021-09-01', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_SalesStoreSummary]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN
select CompanyCode, StoreId, CounterId, StoreName, CustomField7,SalesMode, TotalAmount, TotalPayable,
	TotalDiscountAmt, TotalReceipt, AmountChange, PaymentDiscount, TotalTax, RoundingOff, CustomF1,( TotalAmount - TotalDiscountAmt) CustomF2
	
	from 
	(
		SELECT 
			T_SalesHeader.CompanyCode	,
			T_SalesHeader.StoreId	,
			T_SalesHeader.TerminalId CounterId,
			M_Store.StoreName	,
			'' CustomField7 ,
			T_SalesHeader.SalesMode	,
			SUM(ISNULL(TotalAmount,0))	TotalAmount,
			SUM(ISNULL(TotalPayable,0))	TotalPayable,
			SUM(ISNULL(TotalDiscountAmt,0))	TotalDiscountAmt,
			SUM(ISNULL(TotalReceipt,0))	TotalReceipt,
			SUM(ISNULL(AmountChange,0))	AmountChange,
			SUM(ISNULL(PaymentDiscount,0))	PaymentDiscount,
			SUM(ISNULL(TotalTax,0))	TotalTax,
			SUM(ISNULL(RoundingOff,0))	RoundingOff,
			COUNT(TransId)	CustomF1
		FROM T_SalesHeader WITH (NOLOCK) INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON T_SalesHeader.StoreId = X.StoreId		
						   INNER JOIN M_Store WITH (NOLOCK) ON T_SalesHeader.StoreId = M_Store.StoreId AND T_SalesHeader.CompanyCode = M_Store.CompanyCode 
						   --INNER JOIN T_SalesLine ON T_SalesHeader.TransId = T_SalesLine.TransId AND  T_SalesHeader.CompanyCode = T_SalesLine.CompanyCode
						   --LEFT JOIN M_Item  on T_SalesLine.ItemCode = M_Item.ItemCode
		WHERE T_SalesHeader.CompanyCode = ISNULL(@CompanyCode,T_SalesHeader.CompanyCode) AND
			  T_SalesHeader.StoreId = ISNULL(@StoreId,T_SalesHeader.StoreId) AND
			  CONVERT(Date,T_SalesHeader.CreatedOn)  BETWEEN @FDate AND @TDate AND
			  ISNULL(T_SalesHeader.IsCanceled,'N') = 'N' AND
			  T_SalesHeader.Status <> 'H'  
		GROUP BY 		
			T_SalesHeader.CompanyCode	,
			T_SalesHeader.StoreId	, T_SalesHeader.TerminalId,
			M_Store.StoreName	,
			--M_Item.CustomField7 ,
			T_SalesHeader.SalesMode

		) tmp
END 

GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTopProduct]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_RPT_SalesTopProduct]  'CP001', '3001','admin', '2022-06-23', '2022-06-23' , 10
CREATE PROCEDURE [dbo].[USP_RPT_SalesTopProduct]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date, 
	@Top int
AS
BEGIN
		
	--select top 10 t1.CompanyCode,
	--		t4.StoreId	,
	--		t4.StoreName,   LEFT(t2.ItemGroupId, 5) + '-' + MR2.MCName   ItemCode, LEFT(t2.ItemGroupId, 5) + '-' + MR2.MCName  UOMCode , 	
	--		COUNT(t4.TransId) TotalTransId, SUM(t1.Quantity) TotalQuantity, SUM(ISNULL(t1.LineTotal,0)) TotalAmount

	--from T_SalesLine t1 with (nolock ) 
	--	left join T_SalesHeader t4 with (nolock) on t1.CompanyCode = t4.CompanyCode and t1.StoreId = t4.StoreId  and t1.TransId = t4.TransId
	--	left join M_Item t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode
	--	LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(t2.ItemGroupId, 5) = MR2.MCId AND MR2.CompanyCode = 'DF'
	--	--left join M_ItemGroup t3 with (nolock )  on t1.CompanyCode = t2.CompanyCode and t3.IGId = t2.ItemGroupId
	--where t1.CompanyCode = 'CP001' and t1.StoreId = '3001'
	--and ISNULL( t4.Status ,'') = 'C' and  ISNULL( t4.IsCanceled ,'')  = 'N' 
	--and CONVERT(date,  t1.CreatedOn) >= '2022-06-23' and CONVERT(date,  t1.CreatedOn)<= '2022-06-23'
	--group by t1.CompanyCode,
	--	t4.StoreId	,
	--	t4.StoreName,  t2.ItemGroupId ,MR2.MCName

	--select top 10 t2.ItemGroupId , LEFT(t2.ItemGroupId, 5) from T_SalesLine t1  with (nolock ) 
	--left join M_Item t2  with (nolock ) on t1.CompanyCode= t2.CompanyCode and t1.ItemCode = t2.ItemCode
 --  LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(t2.ItemGroupId, 5) = MR2.MCId AND MR2.CompanyCode = 'DF'

 --  select * from M_MerchandiseCategory where MCId = '10207'
	--select top (isnull(@Top, 10)) t3.CompanyCode,
	--		t4.StoreId	,
	--		t4.StoreName,   t3.IGId ItemCode, ISNULL(t3.IGDescription, t3.IGId)  UOMCode , 	
	--		COUNT(t4.TransId) TotalTransId, SUM(t1.Quantity) TotalQuantity, SUM(ISNULL(t1.LineTotal,0)) TotalAmount

	--from T_SalesLine t1 with (nolock ) 
	--	left join T_SalesHeader t4 with (nolock) on t1.CompanyCode = t4.CompanyCode and t1.StoreId = t4.StoreId  and t1.TransId = t4.TransId
	--	left join M_Item t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode
	--	left join M_ItemGroup t3 with (nolock )  on t1.CompanyCode = t2.CompanyCode and t3.IGId = t2.ItemGroupId
	--where t1.CompanyCode = @CompanyCode and t1.StoreId = @StoreId
	--and ISNULL( t4.Status ,'') = 'C' and  ISNULL( t4.IsCanceled ,'')  = 'N' 
	--and CONVERT(date,  t1.CreatedOn) >= @FDate and CONVERT(date,  t1.CreatedOn)<= @TDate
	--group by t3.CompanyCode,
	--	t4.StoreId	,
	--	t4.StoreName,   t3.IGId, t3.IGDescription

	--select * from T_SalesLine where CreatedOn >= '2022-06-20'
	SELECT Top 5--top (isnull(@Top, 10))
		L.CompanyCode,
		H.StoreId	,
		--H.StoreName	, 
		'' as StoreName,
		L.SLocId,
		--L.ItemCode,	
		CASE	WHEN LEFT(G.IGId,1) = 1 THEN 'FOOD & BEVERAGE'
				WHEN LEFT(G.IGId,1) = 2 THEN 'FRESH & FROZEN'
				WHEN LEFT(G.IGId,1) = 3 THEN 'NON FOOD'
				WHEN LEFT(G.IGId,1) = 4 THEN 'HARDLINE'
				WHEN LEFT(G.IGId,1) = 5 THEN 'SOFTLINE'
				WHEN LEFT(G.IGId,1) = 6 THEN 'SERVICES'
				WHEN LEFT(G.IGId,1) = 7 THEN 'OWN USE'
		END ItemCode ,
		--L.UOMCode, 
		'' as 'UOMCode',
		COUNT(L.TransId) TotalTransId,
		SUM(ISNULL(L.Quantity,0)) TotalQuantity,
		SUM(ISNULL(L.LineTotal,0)) TotalAmount
		
	FROM T_SalesLine L WITH (NOLOCK) 
	INNER JOIN T_SalesHeader H  WITH (NOLOCK) ON H.TransId = L.TransId
	INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
	INNER JOIN M_Item I WITH (NOLOCK) on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
	LEFT JOIN M_ItemGroup G WITH (NOLOCK) ON I.CompanyCode = G.CompanyCode AND I.ItemGroupId = G.IGId
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  ISNULL(H.IsCanceled,'N') = 'N'  
	GROUP BY 		L.CompanyCode,
		H.StoreId	,
		--H.StoreName	,
		L.SLocId,
		LEFT(G.IGId,1)
		--L.ItemCode,	 
		--L.UOMCode
		Order by SUM(ISNULL(L.Quantity,0)) desc , SUM(ISNULL(L.LineTotal,0)) desc

END 

	
--	SELECT top (isnull(@Top, 10))
--		L.CompanyCode,
--		H.StoreId	,
--		H.StoreName	,
--		L.SLocId,
--		L.ItemCode,		
--		L.UOMCode, 
--		COUNT(L.TransId) TotalTransId,
--		SUM(ISNULL(L.Quantity,0)) TotalQuantity,
--		SUM(ISNULL(L.LineTotal,0)) TotalAmount
	
--	FROM T_SalesLine L WITH (NOLOCK) 
--	INNER JOIN T_SalesHeader H  WITH (NOLOCK) ON H.TransId = L.TransId
--	INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
--	WHERE H.CompanyCode = 'CP001' AND
--		  H.StoreId = '1001' AND
--		  CONVERT(Date,H.CreatedOn)  BETWEEN '2022-06-23' AND '2022-06-23' AND
--		  ISNULL(H.IsCanceled,'N') = 'N'  
--	GROUP BY 		L.CompanyCode,
--		H.StoreId	,
--		H.StoreName	,
--		L.SLocId,

--		L.ItemCode,		
----		L.BarCode,
--		L.UOMCode

--select top (3) t3.CompanyCode,
--		t4.StoreId	,
--		t4.StoreName,   t3.IGId ItemCode, ISNULL(t3.IGDescription, t3.IGId)  UOMCode , 	
--		COUNT(t4.TransId) TotalTransId, SUM(t1.Quantity) TotalQuantity, SUM(ISNULL(t1.LineTotal,0)) TotalAmount

--from T_SalesLine t1 with (nolock ) 
--	left join T_SalesHeader t4 with (nolock) on t1.CompanyCode = t4.CompanyCode and t1.StoreId = t4.StoreId  
--	left join M_Item t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode
--	left join M_ItemGroup t3 with (nolock )  on t1.CompanyCode = t2.CompanyCode and t3.IGId = t2.ItemGroupId
--where t1.CompanyCode = 'CP001' and t1.StoreId = '1001'  
----and ISNULL( t4.Status ,'') = 'C' and  ISNULL( t4.IsCanceled ,'')  = 'N' 
--and t1.CreatedOn >=  '2022-06-05' and t1.CreatedOn <=  '2022-06-23' 
--group by t3.CompanyCode,
--		t4.StoreId	,
--		t4.StoreName,   t3.IGId, t3.IGDescription
--order by SUM(Quantity) desc


 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTransactionDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
-- [USP_RPT_SalesTransactionDetail]  'CP001', NULL,'admin', '2022-05-01', '2022-05-31'
CREATE PROCEDURE [dbo].[USP_RPT_SalesTransactionDetail]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	DECLARE @TblSplitPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(100),
		PromoName Nvarchar(500)
	)

	--INSERT INTO @TblSplitPromo
	--SELECT DISTINCT
	--	L.CompanyCode,
	--	L.TransId,
	--	LineId,
	--	LTRIM(RTRIM(Value)) PromoId,
	--	P.PromoName
	--FROM  T_SalesLine L WITH (NOLOCK) CROSS APPLY STRING_SPLIT(PromoID, ',')  	
	--					INNER JOIN S_PromoHeader P ON LTRIM(RTRIM(Value)) = P.PromoId	 AND L.CompanyCode = P.CompanyCode
	--					INNER JOIN T_SalesHeader H ON H.CompanyCode = P.CompanyCode AND H.TransId =  L.TransId
	--					INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
	--				    INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
	--WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
	--	  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
	--	  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
	--	  M_User.Username = @Userlogin AND
	--	  ISNULL(H.IsCanceled,'N') = 'N' AND
	--	  H.Status = 'C' 

	
	DECLARE @TblAGGPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(Max),
		PromoName Nvarchar(Max)
	)

	INSERT INTO @TblAGGPromo
	SELECT
		CompanyCode,
		TransId,
		LineId,
		STRING_AGG( ISNULL(PromoId, ' '), ',') ,
		STRING_AGG( ISNULL(PromoName, ' '), ',')
	FROM @TblSplitPromo
	GROUP BY CompanyCode,
			TransId,
			LineId

	SELECT
		L.CompanyCode,
		H.StoreId	,
		ISNULL(H.StoreName , ST.StoreName) StoreName	,
		L.SLocId,
		H.ContractNo	,
		H.CusIdentifier	,
		H.ShiftId	,
		H.CusId	,
		ISNULL(H.CollectedStatus,'Closed')	HeaderStatus,
		CASE WHEN H.IsCanceled = 'Y' THEN 'Canceled' ELSE 'Normal' END IsCanceled	,
		H.Remarks	,
		H.SalesPerson	,
		H.SalesMode	HeaderSalesMode,
		H.RefTransId	,
		H.ManualDiscount ,	
		H.DataSource,
		H.POSType,
		H.Phone,
		H.CusName, 
		H.CusAddress, 
		H.CusGrpId,
		L.PriceListId,
		L.TransId,
		L.LineId,
		G.IGId ItemGroupId ,
		G.IGName ItemGroupName ,

		LEFT(G.IGId,1) SaleCategoryID ,
		CASE	WHEN LEFT(G.IGId,1) = 1 THEN '1 - FOOD & BEVERAGE'
				WHEN LEFT(G.IGId,1) = 2 THEN '2 - FRESH & FROZEN'
				WHEN LEFT(G.IGId,1) = 3 THEN '3 - NON FOOD'
				WHEN LEFT(G.IGId,1) = 4 THEN '4 - HARDLINE'
				WHEN LEFT(G.IGId,1) = 5 THEN '5 - SOFTLINE'
				WHEN LEFT(G.IGId,1) = 6 THEN '6 - SERVICES'
				WHEN LEFT(G.IGId,1) = 7 THEN '7 - OWN USE'
		END SaleCategoryName ,
		LEFT(I.ItemGroupId,3) SaleCategoryID2 ,
		LEFT(I.ItemGroupId,3) + '-' + MR2.MCName SaleCategoryName2 , 
		LEFT(I.ItemGroupId,5) SaleCategoryID3 ,
		LEFT(I.ItemGroupId,5) + '-' +MR3.MCName SaleCategoryName3 , 
		I.ItemCategory_1 ItemCategory1 ,
		I.ItemCategory_2 ItemCategory2,
		I.ItemCategory_3 ItemCategory3,
		L.ItemCode,		
		L.BarCode,
		L.UOMCode,
		L.Quantity ,
		CAST (L.Quantity AS NVARCHAR(50)) AS OrgQuantity,
		CAST(L.Price AS NUMERIC(19,4))  Price,
		CAST(L.LineTotal AS NUMERIC(19,4)) LineTotal,
		CAST(L.[LineTotal]   * (100-H.[DiscountRate])/100 AS NUMERIC(19,4))  FinalLineTotal ,
		L.DiscountType,
		CAST(L.DiscountAmt AS NUMERIC(19,4)) DiscountAmt,
		CAST(L.DiscountRate AS NUMERIC(19,4)) DiscountRate,
		H.CreatedBy,
		L.CreatedOn,
		L.ModifiedBy,
		L.ModifiedOn,
		CASE	WHEN L.Status ='O' THEN 'O-Open'
				WHEN L.Status ='C' THEN 'C-Closed'
				WHEN L.Status ='EC' THEN 'EC- Fully Exchange'
				WHEN L.Status ='EP' THEN 'EP- Partial Exchange '
				WHEN L.Status ='RC' THEN 'RC- Fully Return'
				WHEN L.Status ='RP' THEN 'RP- Partial Return'
		END Status ,
		L.Remark,
		A.PromoId,
		A.PromoName,
		L.PromoType,
		L.PromoPercent,
		L.PromoBaseItem,
		L.SalesMode,
		L.TaxRate,
		L.TaxAmt,
		L.TaxCode,
		L.MinDepositAmt,
		L.MinDepositPercent,
		L.DeliveryType,
		L.POSService,
		isnull( L.LineTotalBefDis,0)  StoreAreaId,
		L.TimeFrameId,
		L.AppointmentDate,
		L.BomID,
		L.PromoPrice,
		L.PromoLineTotal,
		ISNULL( L.Description, I.ItemDescription) Description,
		L.PrepaidCardNo,
		i.CustomField1,
		i.CustomField2,
		i.CustomField3,
		i.CustomField4,
		i.CustomField5,
		i.CustomField6,
		i.CustomField7,
		i.CustomField8,
		i.CustomField9,
		i.CustomField10,
		H.SyncMWIStatus,
		H.SyncMWIDate,
		H.TerminalId CounterId,
		M_CustomerGroup.CusGrpDesc
		--,
		--BaseLine,
		--BaseTransId,
		--OpenQty
	FROM T_SalesLine L WITH (NOLOCK) INNER JOIN T_SalesHeader H WITH (NOLOCK) ON H.TransId = L.TransId AND H.CompanyCode = L.CompanyCode
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
					   INNER JOIN M_CustomerGroup WITH (NOLOCK) ON M_CustomerGroup.CusGrpId = H.CusGrpId AND H.CompanyCode = M_CustomerGroup.CompanyCode
					   INNER JOIN M_Item I WITH (NOLOCK) on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
					   LEFT JOIN M_ItemGroup G WITH (NOLOCK) ON I.CompanyCode = G.CompanyCode AND I.ItemGroupId = G.IGId
					   LEFT JOIN @TblAGGPromo A  ON L.CompanyCode = A.CompanyCode AND L.TransId = A.TransId AND L.LineId = A.LineId
					   LEFT JOIN M_Store ST WITH (NOLOCK) on ST.StoreId = H.StoreId and ST.CompanyCode = H.CompanyCode
					   LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(I.ItemGroupId,3) = MR2.MCId AND MR2.CompanyCode = 'DF'
					   LEFT JOIN M_MerchandiseCategory MR3  WITH (NOLOCK) ON LEFT(I.ItemGroupId,5) = MR3.MCId AND MR3.CompanyCode = 'DF'
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  ISNULL(L.BomID,'') = '' AND
		  H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' 
	ORDER BY L.TransId,L.LineId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTransactionDetail_Ex]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
-- [USP_RPT_SalesTransactionDetail]  'CP001', NULL,'admin', '2021-09-26', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_SalesTransactionDetail_Ex]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	DECLARE @TblSplitPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(100),
		PromoName Nvarchar(500)
	)

	--INSERT INTO @TblSplitPromo
	--SELECT DISTINCT
	--	L.CompanyCode,
	--	L.TransId,
	--	LineId,
	--	LTRIM(RTRIM(Value)) PromoId,
	--	P.PromoName
	--FROM  T_SalesLine L WITH (NOLOCK) CROSS APPLY STRING_SPLIT(PromoID, ',')  	
	--					INNER JOIN S_PromoHeader P ON LTRIM(RTRIM(Value)) = P.PromoId	 AND L.CompanyCode = P.CompanyCode
	--					INNER JOIN T_SalesHeader H ON H.CompanyCode = P.CompanyCode AND H.TransId =  L.TransId
	--					INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
	--				    INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
	--WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
	--	  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
	--	  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
	--	  M_User.Username = @Userlogin AND
	--	  ISNULL(H.IsCanceled,'N') = 'N' AND
	--	  H.Status = 'C' 

	
	DECLARE @TblAGGPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(Max),
		PromoName Nvarchar(Max)
	)

	INSERT INTO @TblAGGPromo
	SELECT
		CompanyCode,
		TransId,
		LineId,
		STRING_AGG( ISNULL(PromoId, ' '), ',') ,
		STRING_AGG( ISNULL(PromoName, ' '), ',')
	FROM @TblSplitPromo
	GROUP BY CompanyCode,
			TransId,
			LineId

	SELECT
		L.CompanyCode,
		H.StoreId	,
		ISNULL(H.StoreName , ST.StoreName) StoreName	,
		L.SLocId,
		H.ContractNo	,
		H.CusIdentifier	,
		H.ShiftId	,
		H.CusId	,
		ISNULL(H.CollectedStatus,'Closed')	HeaderStatus,
		CASE WHEN H.IsCanceled = 'Y' THEN 'Canceled' ELSE 'Normal' END IsCanceled	,
		H.Remarks	,
		H.SalesPerson	,
		H.SalesMode	HeaderSalesMode,
		H.RefTransId	,
		H.ManualDiscount ,	
		H.DataSource,
		H.POSType,
		H.Phone,
		H.CusName, 
		H.CusAddress, 
		H.CusGrpId,
		L.PriceListId,
		L.TransId,
		L.LineId,
		G.IGId ItemGroupId ,
		G.IGName ItemGroupName ,

		LEFT(G.IGId,1) SaleCatergoryID ,
		CASE	WHEN LEFT(G.IGId,1) = 1 THEN '1 - FOOD & BEVERAGE'
				WHEN LEFT(G.IGId,1) = 2 THEN '2 - FRESH & FROZEN'
				WHEN LEFT(G.IGId,1) = 3 THEN '3 - NON FOOD'
				WHEN LEFT(G.IGId,1) = 4 THEN '4 - HARDLINE'
				WHEN LEFT(G.IGId,1) = 5 THEN '5 - SOFTLINE'
				WHEN LEFT(G.IGId,1) = 6 THEN '6 - SERVICES'
				WHEN LEFT(G.IGId,1) = 7 THEN '7 - OWN USE'
		END SaleCaterogyName ,
		LEFT(I.ItemGroupId,3) SaleCategoryID2 ,
		LEFT(I.ItemGroupId,3) + '-' + MR2.MCName SaleCategoryName2 , 
		LEFT(I.ItemGroupId,5) SaleCategoryID3 ,
		LEFT(I.ItemGroupId,5) + '-' +MR3.MCName SaleCategoryName3 , 
		L.ItemCode,		
		L.BarCode,
		L.UOMCode,
		L.Quantity ,
		CAST (L.Quantity AS NVARCHAR(50)) AS OrgQuantity,
		L.Price,
		L.LineTotal,
		L.[LineTotal]   * (100-H.[DiscountRate])/100 FinalLineTotal ,
		L.DiscountType,
		L.DiscountAmt,
		L.DiscountRate,
		H.CreatedBy,
		L.CreatedOn,
		L.ModifiedBy,
		L.ModifiedOn,
		CASE	WHEN L.Status ='O' THEN 'O-Open'
				WHEN L.Status ='C' THEN 'C-Closed'
				WHEN L.Status ='EC' THEN 'EC- Fully Exchange'
				WHEN L.Status ='EP' THEN 'EP- Partial Exchange '
				WHEN L.Status ='RC' THEN 'RC- Fully Return'
				WHEN L.Status ='RP' THEN 'RP- Partial Return'
		END Status ,
		L.Remark,
		A.PromoId,
		A.PromoName,
		L.PromoType,
		L.PromoPercent,
		L.PromoBaseItem,
		L.SalesMode,
		L.TaxRate,
		L.TaxAmt,
		L.TaxCode,
		L.MinDepositAmt,
		L.MinDepositPercent,
		L.DeliveryType,
		L.POSService,
		--L.StoreAreaId,
		isnull( L.LineTotalBefDis,0)  StoreAreaId,
		L.TimeFrameId,
		L.AppointmentDate,
		L.BomID,
		L.PromoPrice,
		L.PromoLineTotal,
		ISNULL( L.Description, I.ItemDescription) Description,
		L.PrepaidCardNo,
		i.CustomField1,
		i.CustomField2,
		i.CustomField3,
		i.CustomField4,
		i.CustomField5,
		i.CustomField6,
		i.CustomField7,
		i.CustomField8,
		i.CustomField9,
		i.CustomField10,
		H.SyncMWIStatus,
		H.SyncMWIDate,
		H.TerminalId CounterId,
		M_CustomerGroup.CusGrpDesc
		--,
		--BaseLine,
		--BaseTransId,
		--OpenQty
	FROM T_SalesLine L WITH (NOLOCK) 
					   INNER JOIN T_SalesHeader H WITH (NOLOCK) ON H.TransId = L.TransId AND H.CompanyCode = L.CompanyCode
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
					   INNER JOIN M_CustomerGroup WITH (NOLOCK) ON M_CustomerGroup.CusGrpId = H.CusGrpId AND H.CompanyCode = M_CustomerGroup.CompanyCode
					   INNER JOIN M_Item I WITH (NOLOCK) on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
					   LEFT JOIN M_ItemGroup G WITH (NOLOCK) ON I.CompanyCode = G.CompanyCode AND I.ItemGroupId = G.IGId
					   LEFT JOIN @TblAGGPromo A  ON L.CompanyCode = A.CompanyCode AND L.TransId = A.TransId AND L.LineId = A.LineId
					   LEFT JOIN M_Store ST WITH (NOLOCK) on ST.StoreId = H.StoreId and ST.CompanyCode = H.CompanyCode
					   LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(I.ItemGroupId,3) = MR2.MCId AND MR2.CompanyCode = 'DF'
					   LEFT JOIN M_MerchandiseCategory MR3  WITH (NOLOCK) ON LEFT(I.ItemGroupId,5) = MR3.MCId AND MR3.CompanyCode = 'DF'
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  ISNULL(L.BomID,'') = '' AND
		  H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' and H.SalesMode = 'EX'
	ORDER BY L.TransId,L.LineId
END

--select distinct SalesMode from T_SalesHeader
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTransactionDetail_Return]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
-- [USP_RPT_SalesTransactionDetail]  'CP001', NULL,'admin', '2021-09-26', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_SalesTransactionDetail_Return]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	DECLARE @TblSplitPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(100),
		PromoName Nvarchar(500)
	)

	--INSERT INTO @TblSplitPromo
	--SELECT DISTINCT
	--	L.CompanyCode,
	--	L.TransId,
	--	LineId,
	--	LTRIM(RTRIM(Value)) PromoId,
	--	P.PromoName
	--FROM  T_SalesLine L WITH (NOLOCK) CROSS APPLY STRING_SPLIT(PromoID, ',')  	
	--					INNER JOIN S_PromoHeader P ON LTRIM(RTRIM(Value)) = P.PromoId	 AND L.CompanyCode = P.CompanyCode
	--					INNER JOIN T_SalesHeader H ON H.CompanyCode = P.CompanyCode AND H.TransId =  L.TransId
	--					INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
	--				    INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
	--WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
	--	  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
	--	  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
	--	  M_User.Username = @Userlogin AND
	--	  ISNULL(H.IsCanceled,'N') = 'N' AND
	--	  H.Status = 'C' 

	
	DECLARE @TblAGGPromo AS TABLE
	(
		CompanyCode Nvarchar(100),
		TransId Nvarchar(100),
		LineId INT,
		PromoId Nvarchar(Max),
		PromoName Nvarchar(Max)
	)

	INSERT INTO @TblAGGPromo
	SELECT
		CompanyCode,
		TransId,
		LineId,
		STRING_AGG( ISNULL(PromoId, ' '), ',') ,
		STRING_AGG( ISNULL(PromoName, ' '), ',')
	FROM @TblSplitPromo
	GROUP BY CompanyCode,
			TransId,
			LineId

	SELECT
		L.CompanyCode,
		H.StoreId	,
		ISNULL(H.StoreName , ST.StoreName) StoreName	,
		L.SLocId,
		H.ContractNo	,
		H.CusIdentifier	,
		H.ShiftId	,
		H.CusId	,
		ISNULL(H.CollectedStatus,'Closed')	HeaderStatus,
		CASE WHEN H.IsCanceled = 'Y' THEN 'Canceled' ELSE 'Normal' END IsCanceled	,
		H.Remarks	,
		H.SalesPerson	,
		H.SalesMode	HeaderSalesMode,
		H.RefTransId	,
		H.ManualDiscount ,	
		H.DataSource,
		H.POSType,
		H.Phone,
		H.CusName, 
		H.CusAddress, 
		H.CusGrpId,
		L.PriceListId,
		L.TransId,
		L.LineId,
		G.IGId ItemGroupId ,
		G.IGName ItemGroupName ,

		LEFT(G.IGId,1) SaleCatergoryID ,
		CASE	WHEN LEFT(G.IGId,1) = 1 THEN '1 - FOOD & BEVERAGE'
				WHEN LEFT(G.IGId,1) = 2 THEN '2 - FRESH & FROZEN'
				WHEN LEFT(G.IGId,1) = 3 THEN '3 - NON FOOD'
				WHEN LEFT(G.IGId,1) = 4 THEN '4 - HARDLINE'
				WHEN LEFT(G.IGId,1) = 5 THEN '5 - SOFTLINE'
				WHEN LEFT(G.IGId,1) = 6 THEN '6 - SERVICES'
				WHEN LEFT(G.IGId,1) = 7 THEN '7 - OWN USE'
		END SaleCaterogyName ,

		LEFT(I.ItemGroupId,3) SaleCategoryID2 ,
		LEFT(I.ItemGroupId,3) + '-' + MR2.MCName SaleCategoryName2 , 
		LEFT(I.ItemGroupId,5) SaleCategoryID3 ,
		LEFT(I.ItemGroupId,5) + '-' +MR3.MCName SaleCategoryName3 , 
		L.ItemCode,		
		L.BarCode,
		L.UOMCode,
		L.Quantity ,
		CAST (L.Quantity AS NVARCHAR(50)) AS OrgQuantity,
		L.Price,
		L.LineTotal,
		L.[LineTotal]   * (100-H.[DiscountRate])/100 FinalLineTotal ,
		L.DiscountType,
		L.DiscountAmt,
		L.DiscountRate,
		H.CreatedBy,
		L.CreatedOn,
		L.ModifiedBy,
		L.ModifiedOn,
		CASE	WHEN L.Status ='O' THEN 'O-Open'
				WHEN L.Status ='C' THEN 'C-Closed'
				WHEN L.Status ='EC' THEN 'EC- Fully Exchange'
				WHEN L.Status ='EP' THEN 'EP- Partial Exchange '
				WHEN L.Status ='RC' THEN 'RC- Fully Return'
				WHEN L.Status ='RP' THEN 'RP- Partial Return'
		END Status ,
		L.Remark,
		A.PromoId,
		A.PromoName,
		L.PromoType,
		L.PromoPercent,
		L.PromoBaseItem,
		L.SalesMode,
		L.TaxRate,
		L.TaxAmt,
		L.TaxCode,
		L.MinDepositAmt,
		L.MinDepositPercent,
		L.DeliveryType,
		L.POSService,
		--L.StoreAreaId,
			isnull( L.LineTotalBefDis,0)  StoreAreaId,
		L.TimeFrameId,
		L.AppointmentDate,
		L.BomID,
		L.PromoPrice,
		L.PromoLineTotal,
		ISNULL( L.Description, I.ItemDescription) Description,
		L.PrepaidCardNo,
		i.CustomField1,
		i.CustomField2,
		i.CustomField3,
		i.CustomField4,
		i.CustomField5,
		i.CustomField6,
		i.CustomField7,
		i.CustomField8,
		i.CustomField9,
		i.CustomField10,
		H.SyncMWIStatus,
		H.SyncMWIDate,
		H.TerminalId CounterId,
		M_CustomerGroup.CusGrpDesc
		--,
		--BaseLine,
		--BaseTransId,
		--OpenQty
	FROM T_SalesLine L WITH (NOLOCK) 
					   INNER JOIN T_SalesHeader H WITH (NOLOCK) ON H.TransId = L.TransId AND H.CompanyCode = L.CompanyCode
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
					   INNER JOIN M_CustomerGroup WITH (NOLOCK) ON M_CustomerGroup.CusGrpId = H.CusGrpId AND H.CompanyCode = M_CustomerGroup.CompanyCode
					   INNER JOIN M_Item I WITH (NOLOCK) on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
					   LEFT JOIN M_ItemGroup G WITH (NOLOCK) ON I.CompanyCode = G.CompanyCode AND I.ItemGroupId = G.IGId
					   LEFT JOIN @TblAGGPromo A  ON L.CompanyCode = A.CompanyCode AND L.TransId = A.TransId AND L.LineId = A.LineId
					   LEFT JOIN M_Store ST WITH (NOLOCK) on ST.StoreId = H.StoreId and ST.CompanyCode = H.CompanyCode
					   LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(I.ItemGroupId,3) = MR2.MCId AND MR2.CompanyCode = 'DF'
					   LEFT JOIN M_MerchandiseCategory MR3  WITH (NOLOCK) ON LEFT(I.ItemGroupId,5) = MR3.MCId AND MR3.CompanyCode = 'DF'
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  ISNULL(L.BomID,'') = '' AND
		  H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' and H.SalesMode = 'RETURN'
	ORDER BY L.TransId,L.LineId
END

--select distinct SalesMode from T_SalesHeader
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTransactionDetail_SummaryByDeparment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 
-- [USP_RPT_SalesTransactionDetail_SummaryByDeparment]  'CP001', '2019','admin',  '2022-12-03', '2022-12-03'
CREATE PROCEDURE [dbo].[USP_RPT_SalesTransactionDetail_SummaryByDeparment]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50), 
	@FDate date,
	@TDate date,
	@DailyId nvarchar(50) = null
AS
BEGIN

	--DECLARE @TblSplitPromo AS TABLE
	--(
	--	CompanyCode Nvarchar(100),
	--	TransId Nvarchar(100),
	--	LineId INT,
	--	PromoId Nvarchar(100),
	--	PromoName Nvarchar(500)
	--)

	--INSERT INTO @TblSplitPromo
	--SELECT DISTINCT
	--	L.CompanyCode,
	--	L.TransId,
	--	LineId,
	--	LTRIM(RTRIM(Value)) PromoId,
	--	P.PromoName
	--FROM  T_SalesLine L WITH (NOLOCK) CROSS APPLY STRING_SPLIT(PromoID, ',')  	
	--					INNER JOIN S_PromoHeader P ON LTRIM(RTRIM(Value)) = P.PromoId	 AND L.CompanyCode = P.CompanyCode
	--					INNER JOIN T_SalesHeader H ON H.CompanyCode = P.CompanyCode AND H.TransId =  L.TransId
	--					INNER JOIN M_UserStore ON H.StoreId = M_UserStore.StoreId
	--				    INNER JOIN M_User ON M_UserStore.UserId = M_User.UserId
	--WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
	--	  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
	--	  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
	--	  M_User.Username = @Userlogin AND
	--	  ISNULL(H.IsCanceled,'N') = 'N' AND
	--	  H.Status = 'C' 

	
	--DECLARE @TblAGGPromo AS TABLE
	--(
	--	CompanyCode Nvarchar(100),
	--	TransId Nvarchar(100),
	--	LineId INT,
	--	PromoId Nvarchar(Max),
	--	PromoName Nvarchar(Max)
	--)

	--INSERT INTO @TblAGGPromo
	--SELECT
	--	CompanyCode,
	--	TransId,
	--	LineId,
	--	STRING_AGG( ISNULL(PromoId, ' '), ',') ,
	--	STRING_AGG( ISNULL(PromoName, ' '), ',')
	--FROM @TblSplitPromo
	--GROUP BY CompanyCode,
	--		TransId,
	--		LineId

	SELECT

		L.CompanyCode,
		H.StoreId + ' | '	+ ISNULL(H.StoreName , ST.StoreName) StoreId,
		ISNULL(H.StoreName , ST.StoreName) StoreName	,
		L.SLocId,
		H.ContractNo	,
		H.CusIdentifier	,
		H.ShiftId	,
		H.CusId	,
		ISNULL(H.CollectedStatus,'Closed')	HeaderStatus,
		CASE WHEN H.IsCanceled = 'Y' THEN 'Canceled' ELSE 'Normal' END IsCanceled	,
		H.Remarks	,
		H.SalesPerson	,
		H.SalesMode	HeaderSalesMode,
		H.RefTransId	,
		H.ManualDiscount ,	
		H.DataSource,
		H.POSType,
		H.Phone,
		H.CusName, 
		H.CusAddress, 
		H.CusGrpId,
		L.PriceListId,
		L.TransId,
		L.LineId,
		G.IGId ItemGroupId ,
		G.IGName ItemGroupName ,

		LEFT(G.IGId,1) SaleCategoryID ,
		CASE	WHEN LEFT(G.IGId,1) = 1 THEN '1 - FOOD & BEVERAGE'
				WHEN LEFT(G.IGId,1) = 2 THEN '2 - FRESH & FROZEN'
				WHEN LEFT(G.IGId,1) = 3 THEN '3 - NON FOOD'
				WHEN LEFT(G.IGId,1) = 4 THEN '4 - HARDLINE'
				WHEN LEFT(G.IGId,1) = 5 THEN '5 - SOFTLINE'
				WHEN LEFT(G.IGId,1) = 6 THEN '6 - SERVICES'
				WHEN LEFT(G.IGId,1) = 7 THEN '7 - OWN USE'
		END SaleCategoryName ,
		LEFT(I.ItemGroupId,3) SaleCategoryID2 ,
		LEFT(I.ItemGroupId,3) + '-' + MR2.MCName SaleCategoryName2 , 
		LEFT(I.ItemGroupId,5) SaleCategoryID3 ,
		LEFT(I.ItemGroupId,5) + '-' +MR3.MCName SaleCategoryName3 , 
		I.ItemCategory_1 ItemCategory1 ,
		I.ItemCategory_2 ItemCategory2,
		I.ItemCategory_3 ItemCategory3,
		L.ItemCode,		
		L.BarCode,
		L.UOMCode,
		L.Quantity ,
		CAST (L.Quantity AS NVARCHAR(50)) AS OrgQuantity,
		CAST(L.Price AS NUMERIC(19,4))  Price,
		CAST(L.LineTotal AS NUMERIC(19,4)) LineTotal,
		CAST(L.[LineTotal]   * (100-isnull( H.[DiscountRate] ,0))/100 AS NUMERIC(19,4))  FinalLineTotal ,
		L.DiscountType,
		CAST(isnull(L.DiscountAmt,0) AS NUMERIC(19,4)) DiscountAmt,
		CAST(isnull(L.DiscountRate,0) AS NUMERIC(19,4)) DiscountRate,
		H.CreatedBy,
		L.CreatedOn,
		L.ModifiedBy,
		L.ModifiedOn,
		CASE	WHEN L.Status ='O' THEN 'O-Open'
				WHEN L.Status ='C' THEN 'C-Closed'
				WHEN L.Status ='EC' THEN 'EC- Fully Exchange'
				WHEN L.Status ='EP' THEN 'EP- Partial Exchange '
				WHEN L.Status ='RC' THEN 'RC- Fully Return'
				WHEN L.Status ='RP' THEN 'RP- Partial Return'
		END Status ,
		L.Remark,
		'' PromoId,--A.PromoId,
		'' PromoName,--A.PromoName,
		L.PromoType,
		L.PromoPercent,
		L.PromoBaseItem,
		L.SalesMode,
		L.TaxRate,
		L.TaxAmt,
		L.TaxCode,
		L.MinDepositAmt,
		L.MinDepositPercent,
		L.DeliveryType,
		L.POSService,
		--L.StoreAreaId,
		isnull( L.LineTotalBefDis,0)  StoreAreaId,
		L.TimeFrameId,
		L.AppointmentDate,
		L.BomID,
		L.PromoPrice,
		L.PromoLineTotal,
		ISNULL( L.Description, I.ItemDescription) Description,
		L.PrepaidCardNo,
		i.CustomField1,
		i.CustomField2,
		i.CustomField3,
		i.CustomField4,
		i.CustomField5,
		i.CustomField6,
		i.CustomField7,
		i.CustomField8,
		i.CustomField9,
		i.CustomField10,
		H.SyncMWIStatus,
		H.SyncMWIDate,
		H.TerminalId CounterId,
		M_CustomerGroup.CusGrpDesc
		--,
		--BaseLine,
		--BaseTransId,
		--OpenQty
	into #reportTmp
	FROM T_SalesLine L WITH (NOLOCK) INNER JOIN T_SalesHeader H WITH (NOLOCK) ON H.TransId = L.TransId AND H.CompanyCode = L.CompanyCode
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId	
					   INNER JOIN M_CustomerGroup WITH (NOLOCK) ON M_CustomerGroup.CusGrpId = H.CusGrpId AND H.CompanyCode = M_CustomerGroup.CompanyCode
					   INNER JOIN M_Item I WITH (NOLOCK) on I.ItemCode = L.ItemCode AND H.CompanyCode = I.CompanyCode
					   LEFT JOIN M_ItemGroup G WITH (NOLOCK) ON I.CompanyCode = G.CompanyCode AND I.ItemGroupId = G.IGId
					   --LEFT JOIN @TblAGGPromo A  ON L.CompanyCode = A.CompanyCode AND L.TransId = A.TransId AND L.LineId = A.LineId
					   LEFT JOIN M_Store ST WITH (NOLOCK) on ST.StoreId = H.StoreId and ST.CompanyCode = H.CompanyCode
					   LEFT JOIN M_MerchandiseCategory MR2  WITH (NOLOCK) ON LEFT(I.ItemGroupId,3) = MR2.MCId AND MR2.CompanyCode = 'DF'
					   LEFT JOIN M_MerchandiseCategory MR3  WITH (NOLOCK) ON LEFT(I.ItemGroupId,5) = MR3.MCId AND MR3.CompanyCode = 'DF'
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND 
		  ISNULL(L.BomID,'') = '' AND
		  H.Status = 'C' AND
		  ISNULL(H.IsCanceled,'N') = 'N' 
		  --and LEFT(I.ItemGroupId,3) = '601'
	ORDER BY L.TransId,L.LineId
	 

	select SaleCategoryID2 Code, SaleCategoryName2 'Department', SUM(Quantity) QuantitySold, SUM(DiscountAmt) 'TotalDiscount', SUM(FinalLineTotal) 'NetSalesAmount'  , StoreId
	into #reportPOS
	from #reportTmp
	where DataSource = 'POS'
	group by SaleCategoryID2, SaleCategoryName2, StoreId

	select SaleCategoryID2 Code, SaleCategoryName2 'Department', SUM(Quantity) QuantitySold, SUM(DiscountAmt) 'TotalDiscount', SUM(FinalLineTotal) 'NetSalesAmount'  , StoreId
	into #reportEcom
	from #reportTmp
	where DataSource <> 'POS'
	group by SaleCategoryID2, SaleCategoryName2, StoreId

	--select * from #reportPOS order by StoreId, Code
	select t1.StoreId, t1.Code, t1.Department, t2.QuantitySold, t2.TotalDiscount, ISNULL(t2.NetSalesAmount, 0) NetSalesAmount, ISNULL( t3.NetSalesAmount, 0) as 'EcomNetSalesAmount' , ISNULL(t2.NetSalesAmount, 0) + ISNULL( t3.NetSalesAmount, 0) as 'TotalNetSalesAmount'
	from
	(
		select distinct Code, Department, StoreId
		from #reportPOS 
		union
		select distinct Code, Department, StoreId
		from #reportEcom 
	) t1 
	left join #reportPOS t2 on t1.Code = t2.Code and  ISNULL( t1.Department,'') = ISNULL( t2.Department,'') and t1.StoreId = t2.StoreId	
	left join #reportEcom t3 on t1.Code = t3.Code
	--order by StoreId, Code
	--select * from #reportTmp
	drop table #reportTmp
	drop table #reportPOS
	drop table #reportEcom


END
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTransactionPayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

-- [USP_RPT_SalesTransactionPayment]  NULL, '1001','admin', '2020-01-01', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_RPT_SalesTransactionPayment]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN


	SELECT 
		T_SalesHeader.CompanyCode	,
		T_SalesHeader.StoreId	,
		M_Store.StoreName	,
		T_SalesPayment.TransId ,
		T_SalesPayment.PaymentCode +' - '+ M_PaymentMethod.ShortName  PaymentCode, 
		T_SalesPayment.Currency, 
		CASE WHEN T_SalesPayment.Currency = (SELECT MAX(CurrencyCode) FROM M_Store WHERE StoreId = T_SalesHeader.StoreId) THEN NULL ELSE T_SalesPayment.FCAmount END FCAmount,
		SUM((ISNULL(T_SalesPayment.CollectedAmount,0)-ISNULL(T_SalesPayment.ChangeAmt,0))/ ((100-ISNULL(T_SalesPayment.PaymentDiscount,0))/100)) TotalAmt,
		SUM(T_SalesPayment.CollectedAmount-ISNULL(T_SalesPayment.ChangeAmt,0)) ChargableAmount, 
		T_SalesHeader.TotalReceipt CollectedAmount,
		SUM(ISNULL(T_SalesPayment.Forfeit,0)) Forfeit,
		--T_SalesPayment.VoucherSerial,
		T_SalesPayment.RefNumber,
		T_SalesPayment.CustomF1,
		T_SalesPayment.CustomF3,
		T_SalesPayment.CustomF4,
		T_SalesPayment.CreatedOn,
		T_SalesPayment.ShiftId,
		T_SalesPayment.TerminalId CounterId,
		T_SalesPayment.CreatedBy
		
	FROM T_SalesHeader WITH (NOLOCK) INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON T_SalesHeader.StoreId = X.StoreId	
					   INNER JOIN M_Store WITH (NOLOCK) ON T_SalesHeader.StoreId = M_Store.StoreId AND T_SalesHeader.CompanyCode = M_Store.CompanyCode
					   INNER JOIN T_SalesPayment WITH (NOLOCK) ON T_SalesPayment.CompanyCode = T_SalesHeader.CompanyCode  AND T_SalesHeader.TransId = T_SalesPayment.TransId --AND T_SalesHeader.ShiftId = T_SalesPayment.ShiftId
					   INNER JOIN M_PaymentMethod WITH (NOLOCK) ON T_SalesPayment.CompanyCode = M_PaymentMethod.CompanyCode  AND  T_SalesPayment.PaymentCode = M_PaymentMethod.PaymentCode
	WHERE T_SalesHeader.CompanyCode = ISNULL(@CompanyCode,T_SalesHeader.CompanyCode) AND
		  T_SalesHeader.StoreId = ISNULL(@StoreId,T_SalesHeader.StoreId) AND
		  CONVERT(Date,T_SalesHeader.CreatedOn)  BETWEEN @FDate AND @TDate AND
		  T_SalesHeader.Status = 'C' 
	GROUP BY 		T_SalesHeader.CompanyCode	,
		T_SalesHeader.StoreId	,
		T_SalesPayment.TransId ,
		M_Store.StoreName,
		T_SalesPayment.PaymentCode +' - '+ M_PaymentMethod.ShortName ,  T_SalesPayment.Currency, T_SalesPayment.FCAmount, T_SalesPayment.CreatedOn,
		--T_SalesPayment.VoucherSerial,
		T_SalesHeader.TotalReceipt,
		T_SalesPayment.RefNumber,
		T_SalesPayment.CustomF1,
		T_SalesPayment.CustomF3,
		T_SalesPayment.CustomF4,
		T_SalesPayment.ShiftId,
		T_SalesPayment.TerminalId ,
		T_SalesPayment.CreatedBy

END 



--SELECT * FROM T_SalesPayment WHERE TransId LIKE 'SOCP001100100000036%'
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SalesTransactionSummary]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 




-- [USP_RPT_SalesTransactionSummary]  'CP001', 'HU01','admin', '2022-04-01' ,  '2022-04-30'
CREATE PROCEDURE [dbo].[USP_RPT_SalesTransactionSummary]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@Userlogin nvarchar(50),
	@FDate date,
	@TDate date
AS
BEGIN

	SELECT 
		H.TransId	,
		H.CompanyCode	,
		M_Store.StoreId	,
		ContractNo	,
		M_Store.StoreName	,
		ShiftId	,
		CusId	,
		CusIdentifier	,
		SUM(L.Quantity * L.Price)	TotalAmount,
		(SUM(L.Quantity * L.Price) - SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100  ))		TotalDiscountAmt,		
		ISNULL(H.RoundingOff,0) RoundingOff,
		CASE WHEN ISNULL(H.TotalReceipt,0) >= 0 THEN ABS(TotalReceipt) - ABS(AmountChange) ELSE (ABS(TotalReceipt) - ABS(AmountChange)) * -1 END  TotalReceipt,
		ISNULL(H.TotalPayable,0)	TotalPayable,
		ISNULL(H.AmountChange,0)	AmountChange,
		0	PaymentDiscount,
		(SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100 / (100+ISNULL(L.TaxRate,0))/100)  )		TotalTax,	
		H.DiscountType	,
		CASE WHEN SUM(L.Quantity * L.Price) <> 0 THEN (SUM(L.Quantity * L.Price) - SUM(L.Quantity * L.Price * (100-ISNULL(L.[DiscountRate],0))/100    * (100-ISNULL(H.[DiscountRate],0))/100  ))	 / SUM(L.Quantity * L.Price) * 100 END DiscountRate,
		H.CreatedOn	,
		H.CreatedBy	,
		H.ModifiedOn	,
		H.ModifiedBy	,
		H.Status	,
		IsCanceled	,
		Remarks	,
		SalesPerson	,
		H.SalesMode	,
		RefTransId	,
		ManualDiscount
	FROM T_SalesHeader H WITH (NOLOCK)  
						INNER JOIN M_Store WITH (NOLOCK) ON H.StoreId = M_Store.StoreId AND H.CompanyCode = M_Store.CompanyCode
					   INNER JOIN (SELECT DISTINCT StoreId from M_UserStore S WITH (NOLOCK) INNER JOIN M_User U WITH (NOLOCK) ON S.UserId = U.UserId WHERE U.Username =  ISNULL(@Userlogin,U.Username) ) X ON H.StoreId = X.StoreId				   
					   INNER JOIN T_SalesLine L WITH (NOLOCK) ON H.TransId = L.TransId AND  H.CompanyCode = L.CompanyCode
					   LEFT JOIN M_Item  on L.ItemCode = M_Item.ItemCode
	WHERE H.CompanyCode = ISNULL(@CompanyCode,H.CompanyCode) AND
		  H.StoreId = ISNULL(@StoreId,H.StoreId) AND
		  CONVERT(Date,H.CreatedOn)  BETWEEN @FDate AND @TDate AND
 
		  ISNULL(H.IsCanceled,'N') = 'N' AND
		  ISNULL(L.BomID,'') = ''  AND H.Status = 'C' 

		  -- AND H.TransId NOT IN (SELECT TransId FROM T_SalesHeader WHERE POSType = 'E' AND Status = 'C' AND CONVERT(Date,CreatedOn)  BETWEEN @FDate AND @TDate )
	GROUP BY
		H.TransId	,
		H.CompanyCode	,
		M_Store.StoreId	,
		ContractNo	,
		M_Store.StoreName	,
		ShiftId	,
		CusId	,
		CusIdentifier	,		
		ISNULL(H.RoundingOff,0) ,
		CASE WHEN ISNULL(H.TotalReceipt,0) >= 0 THEN ABS(TotalReceipt) - ABS(AmountChange) ELSE (ABS(TotalReceipt) - ABS(AmountChange)) * -1 END ,
		ISNULL(H.TotalPayable,0)	,
		ISNULL(H.AmountChange,0)	,
		H.DiscountType	,
		H.CreatedOn	,
		H.CreatedBy	,
		H.ModifiedOn	,
		H.ModifiedBy	,
		H.Status	,
		IsCanceled	,
		Remarks	,
		SalesPerson	,
		H.SalesMode	,
		RefTransId	,
		ManualDiscount

END 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SYNC_ITEM_CMP]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 


--  [USP_RPT_SYNC_ITEM_CMP] '10000003', '10000010' , '2020-01-01' , '2022-05-06'
CREATE PROCEDURE [dbo].[USP_RPT_SYNC_ITEM_CMP]
	@FItem nvarchar(50) = NULL,
	@TItem nvarchar(50) = NULL,
	@FDate DateTime = NULL,
	@TDate DateTime = NULL
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @Err NVARCHAR(4000)
	SET @Err = ''

	IF @FDate IS NULL 
	BEGIN
		SET @FDate = '1990-01-01'
	END

	IF @TDate IS NULL 
	BEGIN
		SET @TDate =  '2990-01-01'
	END

	IF @FItem IS NULL 
	BEGIN
		SET @FItem = (SELECT MIN(ItemCode) FROM M_Item)
	END

	IF @TItem IS NULL 
	BEGIN
		SET @TItem =  (SELECT MAX(ItemCode) FROM M_Item)
	END

	IF (OBJECT_ID('tempdb..#M_ITEM') IS NOT NULL)
	BEGIN
		 DROP Table #M_ITEM
	END

 	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM_FILLTER') IS NOT NULL)
	BEGIN
		 DROP Table #M_PARAM_ITEM_FILLTER
	END
 

	CREATE TABLE #M_ITEM  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		ItemCode NVARCHAR(50),
		ItemName NVARCHAR(250),
		SyncType NVARCHAR(50),
		--CreatedBy NVARCHAR(50),
		--CreatedOn DATETIME,
		ModifiedBy NVARCHAR(50),
		ModifiedOn DATETIME 
	)

	CREATE TABLE #M_PARAM_ITEM_FILLTER  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		ItemCode NVARCHAR(50),
		ItemName NVARCHAR(250)
	)



	DECLARE 
		@columns NVARCHAR(MAX) = '', 
		@ReplaceColumns NVARCHAR(MAX) = '', 
		@SumCols NVARCHAR(MAX) = '', 
		@sql     NVARCHAR(MAX) = '',
		@LinkSvr   NVARCHAR(MAX) = '';

	-- select the category names
	SELECT 
		@columns+=QUOTENAME(StoreId) + ',' ,
		@SumCols+=QUOTENAME(StoreId) + ' + ',
		@ReplaceColumns+='CASE WHEN '+QUOTENAME(StoreId) + ' = 0 THEN ''N'' ELSE ''Y'' END '+QUOTENAME(StoreId) + '  ,' 
	FROM 
		M_Store
	ORDER BY 
		StoreId;

	-- remove the last comma
	SET @columns =  LEFT(@columns, LEN(@columns) - 1);;
	SET @SumCols =  LEFT(@SumCols, LEN(@SumCols) - 1);;
	SET @ReplaceColumns =  LEFT(@ReplaceColumns, LEN(@ReplaceColumns) - 1);;
 

	SET @sql =N'
	SELECT CompanyCode,ItemCode,ItemName,SyncType,ModifiedBy,ModifiedOn,'+ @ReplaceColumns +'   FROM   
	(
		SELECT StoreId,CompanyCode,ItemCode,ItemName,SyncType,ModifiedBy,ModifiedOn FROM [#M_ITEM]
	) t 
	PIVOT(
		COUNT(StoreId)
		FOR StoreId  IN ('+ @columns +')
	) AS pivot_table
	WHERE 20 <> ('+@SumCols+' )';

	INSERT INTO #M_PARAM_ITEM_FILLTER  
	SELECT  'Central',I.CompanyCode,I.ItemCode,I.ItemName
	FROM [RPFO_POS_PRD].dbo.M_Item I
	WHERE I.ItemCode BETWEEN ISNULL(@FItem,I.ItemCode) AND ISNULL(@TItem,I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	INSERT INTO #M_ITEM
	SELECT 'Central' StoreId,CompanyCode,ItemCode,ItemName,SalesTaxCode,--CreatedBy,CreatedOn,
		ModifiedBy,ModifiedOn--,SyncDate
	FROM [RPFO_POS_PRD].dbo.M_Item 
	WHERE ItemCode BETWEEN ISNULL(@FItem,ItemCode) AND ISNULL(@TItem,ItemCode) AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3001'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKM_3001].[RPFO_3001_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err +  '-3001-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3002'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SELM_3002].[RPFO_3002_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3002-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3003'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SERG_3003].[RPFO_3003_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3003-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3004'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETR_3004].[RPFO_3004_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3004-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3005'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEBF_3005].[RPFO_3005_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3005-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3006'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKV-3006].[RPFO_3006_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3006-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3007'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKN_3007].[RPFO_3007_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3007-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3008'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEPM-3008].[RPFO_3008_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3008-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3009'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETF_3009].[RPFO_3009_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3009-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3010'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SELK_3010].[RPFO_3010_RPD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3010-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3011'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKR_3011].[RPFO_3011_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3011-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3012'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETA_3012].[RPFO_3012_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3012-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3013'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKP_3013].[RPFO_3013_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3013-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3014'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SELW-3014].[RPFO_3014_RPD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3014-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3015'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEAP_3015].[RPFO_3015_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3015-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH
	
	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3016'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEAN_3016].[RPFO_3016_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3016-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3017'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEKT-3017].[RPFO_3017_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3017-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3018'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SETL-3018].[RPFO_3018_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3018-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3019'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEMB_3019].[RPFO_3019_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3019-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = 
		N'SET LOCK_TIMEOUT 30;  INSERT INTO #M_ITEM
		SELECT ''3020'' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,I.SalesTaxCode,I.ModifiedBy,I.ModifiedOn
		FROM [SEDS_3020].[RPFO_3020_PRD].[dbo].[M_Item] I WHERE I.ItemCode BETWEEN ISNULL('''+@FItem+''',I.ItemCode) AND ISNULL('''+@TItem+''',I.ItemCode)  AND CONVERT(NVARCHAR(50),ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3020-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	EXEC sp_executesql @sql;
	SELECT @Err ErrorMsg
 	IF (OBJECT_ID('tempdb..#M_ITEM') IS NOT NULL)
	BEGIN
		 DROP Table #M_ITEM
	END

 	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM_FILLTER') IS NOT NULL)
	BEGIN
		 DROP Table #M_PARAM_ITEM_FILLTER
	END
 

END 

 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SYNC_LISTING_CMP]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
-- [USP_RPT_SYNC_LISTING_CMP] '10000003', '10000010' , '2020-01-01' , '2022-05-06'
CREATE PROCEDURE [dbo].[USP_RPT_SYNC_LISTING_CMP]
	@FItem nvarchar(50) = NULL,
	@TItem nvarchar(50) = NULL,
	@FDate DateTime = NULL,
	@TDate DateTime = NULL
AS
BEGIN
	DECLARE @Err NVARCHAR(4000)
	SET @Err = ''
	IF @FDate IS NULL 
	BEGIN
		SET @FDate = '1990-01-01'
	END

	IF @TDate IS NULL 
	BEGIN
		SET @TDate =  '2990-01-01'
	END

	IF (OBJECT_ID('tempdb..#M_LISTING') IS NOT NULL)
	BEGIN
		 DROP Table #M_LISTING
	END

 --	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM') IS NOT NULL)
	--BEGIN
	--	 DROP Table #M_PARAM_ITEM
	--END
 

	CREATE TABLE #M_LISTING  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		ItemCode NVARCHAR(50),
		ItemName NVARCHAR(250),
		Status NVARCHAR(50),
		ModifiedBy NVARCHAR(50),
		ModifiedOn DATETIME 		
	)



	DECLARE 
		@columns NVARCHAR(MAX) = '', 
		@sql   NVARCHAR(MAX) = '',
		@LinkSvr   NVARCHAR(MAX) = '';

	-- select the category names
	SELECT 
		@columns+=QUOTENAME(StoreId) + ','
	FROM 
		M_Store
	ORDER BY 
		StoreId;

	-- remove the last comma
	SET @columns = 'Central,' + LEFT(@columns, LEN(@columns) - 1);
 



	INSERT INTO #M_LISTING
	SELECT 'CENTRAL' StoreId,L.CompanyCode,L.ItemCode,I.ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn
	FROM [RPFO_POS_PRD].dbo.M_ItemStoreListing L INNER JOIN [RPFO_POS_PRD].dbo.M_Item I ON L.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode 
	WHERE I.ItemCode BETWEEN ISNULL(@FItem,I.ItemCode) AND ISNULL(@TItem,I.ItemCode) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	BEGIN TRY  
		
		SET @LinkSvr = 
		N'INSERT INTO #M_LISTING
		SELECT ''3001'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn
		FROM [SEKM_3001].[RPFO_3001_PRD].[dbo].[M_ItemStoreListing] L 
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3001''';		

		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err +  '-3001-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

		
	BEGIN TRY  
		SET @LinkSvr = 
		N'INSERT INTO #M_LISTING
		SELECT ''3002'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SELM_3002].[RPFO_3002_PRD].[dbo].[M_ItemStoreListing] L 
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND L.StoreId = ''3002''';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3002-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3003'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SERG_3003].[RPFO_3003_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3003'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3003-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3004'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SETR_3004].[RPFO_3004_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND L.StoreId = ''3004'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3004-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3005'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEBF_3005].[RPFO_3005_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3005'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3005-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3006'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEKV-3006].[RPFO_3006_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND L.StoreId = ''3006'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3006-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3007'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEKN_3007].[RPFO_3007_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND L.StoreId = ''3007'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3007-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3008'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEPM-3008].[RPFO_3008_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3008'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3008-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3009'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SETF_3009].[RPFO_3009_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3009'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3009-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3010'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SELK_3010].[RPFO_3010_RPD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3010'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3010-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N' 
		INSERT INTO #M_LISTING
		SELECT ''3011'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEKR_3011].[RPFO_3011_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3011'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3011-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3012'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SETA_3012].[RPFO_3012_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3012'' 	';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3012-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3013'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEKP_3013].[RPFO_3013_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3013''
		';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3013-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3014'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SELW-3014].[RPFO_3014_RPD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3014'' 	';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3014-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3015'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEAP_3015].[RPFO_3015_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3015'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3015-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH
	
	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3016'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEAN_3016].[RPFO_3016_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3016'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3016-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N' 
		INSERT INTO #M_LISTING
		SELECT ''3017'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEKT-3017].[RPFO_3017_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3017'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3017-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3018'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SETL-3018].[RPFO_3018_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)   AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3018'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3018-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3019'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEMB_3019].[RPFO_3019_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3019'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3019-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_LISTING
		SELECT ''3020'' StoreId,L.CompanyCode,L.ItemCode,NULL ItemName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) ModifiedOn  
		FROM [SEDS_3020].[RPFO_3020_PRD].[dbo].[M_ItemStoreListing] L
 		WHERE L.ItemCode BETWEEN ISNULL('''+@FItem+''',L.ItemCode) AND ISNULL('''+@TItem+''',L.ItemCode)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND L.StoreId = ''3020'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3020-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH
 



	SET @sql =N'
	SELECT * FROM 
	(
		SELECT L.StoreId,L.CompanyCode,L.ItemCode,I.ItemName,L.Status,L.ModifiedBy,L.ModifiedOn
		FROM [#M_LISTING] L INNER JOIN  [RPFO_POS_PRD].dbo.M_Item I ON L.ItemCode = I.ItemCode AND L.CompanyCode = I.CompanyCode
	) t 
	PIVOT(
		COUNT(StoreId)
		FOR StoreId  IN ('+ @columns +')
	) AS pivot_table
	ORDER BY ItemCode;';


	EXEC sp_executesql @sql;
	SELECT @Err AS ErrorMsg
 	IF (OBJECT_ID('tempdb..#M_LISTING') IS NOT NULL)
	BEGIN
		 DROP Table #M_LISTING
	END

 --	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM') IS NOT NULL)
	--BEGIN
	--	 DROP Table #M_PARAM_ITEM
	--END
 
 
END 

 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SYNC_PRICE_CMP]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
-- [USP_RPT_SYNC_PRICE_CMP]  '10000003', '10000010' , '2020-01-01' , '2022-05-06'
CREATE PROCEDURE [dbo].[USP_RPT_SYNC_PRICE_CMP]
	@FItem nvarchar(50) = NULL,
	@TItem nvarchar(50) = NULL,
	@FDate DateTime = NULL,
	@TDate DateTime = NULL
AS
BEGIN
	DECLARE @Err NVARCHAR(4000)
	SET @Err = ''
	IF @FDate IS NULL 
	BEGIN
		SET @FDate = '1990-01-01'
	END

	IF @TDate IS NULL 
	BEGIN
		SET @TDate =  '2990-01-01'
	END

	IF (OBJECT_ID('tempdb..#M_PRICE') IS NOT NULL)
	BEGIN
		 DROP Table #M_PRICE
	END

 --	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM') IS NOT NULL)
	--BEGIN
	--	 DROP Table #M_PARAM_ITEM
	--END
 

	CREATE TABLE #M_PRICE  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		ItemCode NVARCHAR(50),
		ItemName NVARCHAR(250),
		UOMCOde NVARCHAR(250),
		BarCode NVARCHAR(250),
		PriceListID NVARCHAR(50),
		PriceValue NUMERIC(19,6),
		--CreatedBy NVARCHAR(50),
		--CreatedOn DATETIME,
		ValidFrom DATETIME,
		ValidTo DATETIME,
		ModifiedBy NVARCHAR(50),
		ModifiedOn DATETIME 		
	)



	DECLARE 
		@columns NVARCHAR(MAX) = '', 
		@sql   NVARCHAR(MAX) = '',
		@LinkSvr   NVARCHAR(MAX) = '';

	-- select the category names
	SELECT 
		@columns+=QUOTENAME(StoreId) + ','
	FROM 
		M_Store
	ORDER BY 
		StoreId;

	-- remove the last comma
	SET @columns = 'Central,' + LEFT(@columns, LEN(@columns) - 1);
 


	--INSERT INTO #M_PARAM_ITEM  
	--SELECT  'Central',I.CompanyCode,I.ItemCode,I.ItemName
	--FROM [RPFO_POS_PRD].dbo.M_Item I
	--WHERE I.ItemCode BETWEEN ISNULL(@FItem,I.ItemCode) AND ISNULL(@TItem,I.ItemCode)


	INSERT INTO #M_PRICE
	SELECT DISTINCT 'Central' StoreId,I.CompanyCode,I.ItemCode,I.ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn
	FROM [RPFO_POS_PRD].dbo.M_PriceList P INNER JOIN [RPFO_POS_PRD].dbo.M_Item I ON P.CompanyCode = I.CompanyCode AND P.ItemCode = I.ItemCode 
	WHERE I.ItemCode BETWEEN ISNULL(@FItem,I.ItemCode) AND ISNULL(@TItem,I.ItemCode) AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	BEGIN TRY  
		
		SET @LinkSvr = 
		N'INSERT INTO #M_PRICE
		SELECT ''3001'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEKM_3001].[RPFO_3001_PRD].[dbo].[M_PriceList] P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3001''';
		 
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err +  '-3001-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

		
	BEGIN TRY  
		SET @LinkSvr = 
		N'INSERT INTO #M_PRICE
		SELECT ''3002'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SELM_3002].[RPFO_3002_PRD].[dbo].[M_PriceList] P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND P.StoreId = ''3002''';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3002-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3003'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SERG_3003].[RPFO_3003_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3003'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3003-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3004'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SETR_3004].[RPFO_3004_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode) AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND P.StoreId = ''3004'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3004-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3005'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEBF_3005].[RPFO_3005_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode) AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3005'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3005-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3006'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEKV-3006].[RPFO_3006_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND P.StoreId = ''3006'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3006-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3007'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEKN_3007].[RPFO_3007_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  AND P.StoreId = ''3007'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3007-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3008'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEPM-3008].[RPFO_3008_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3008'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3008-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3009'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SETF_3009].[RPFO_3009_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3009'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3009-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3010'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SELK_3010].[RPFO_3010_RPD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode) AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3010'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3010-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N' 
		INSERT INTO #M_PRICE
		SELECT ''3011'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEKR_3011].[RPFO_3011_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3011'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3011-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3012'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SETA_3012].[RPFO_3012_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode) AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3012'' 	';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3012-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3013'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEKP_3013].[RPFO_3013_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3013''
		';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3013-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3014'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SELW-3014].[RPFO_3014_RPD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3014'' 	';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3014-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3015'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEAP_3015].[RPFO_3015_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3015'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3015-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH
	
	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3016'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEAN_3016].[RPFO_3016_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3016'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3016-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N' 
		INSERT INTO #M_PRICE
		SELECT ''3017'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEKT-3017].[RPFO_3017_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3017'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3017-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3018'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SETL-3018].[RPFO_3018_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)   AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3018'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3018-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3019'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEMB_3019].[RPFO_3019_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode) AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3019'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3019-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PRICE
		SELECT ''3020'' StoreId,P.CompanyCode,P.ItemCode,NULL ItemName,P.UOMCOde,P.BarCode,P.PriceListId,P.PriceAfterTax,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn  
		FROM [SEDS_3020].[RPFO_3020_PRD].[dbo].[M_PriceList]  P 
 		WHERE P.ItemCode BETWEEN ISNULL('''+@FItem+''',P.ItemCode) AND ISNULL('''+@TItem+''',P.ItemCode)  AND CONVERT(NVARCHAR(50),P.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' AND P.StoreId = ''3020'' ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3020-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH


	--CREATE TABLE #M_PARAM_ITEM  
	--(
	--	StoreId NVARCHAR(50),
	--	CompanyCode NVARCHAR(50),
	--	ItemCode NVARCHAR(50),
	--	ItemName NVARCHAR(250),
	--	UOMCOde NVARCHAR(250),
	--	BarCode NVARCHAR(250),
	--	PriceListID NVARCHAR(50),
	--	PriceValue NUMERIC(19,6),
	--	ValidFrom DATETIME,
	--	ValidTo DATETIME,
	--	ModifiedBy NVARCHAR(50),
	--	ModifiedOn DATETIME 	
	--)

	--INSERT INTO #M_PARAM_ITEM
	--SELECT P.StoreId,P.CompanyCode,P.ItemCode,I.ItemName,P.UOMCOde,P.BarCode,P.PriceListID,P.PriceValue,P.ValidFrom,P.ValidTo,P.ModifiedBy,P.ModifiedOn
	--FROM  [#M_PRICE] P INNER JOIN  [RPFO_POS_PRD].dbo.M_Item I ON P.ItemCode = I.ItemCode AND P.CompanyCode = I.CompanyCode
	  

	

	SET @sql =N'
	SELECT * FROM 
	(
		SELECT P.StoreId,P.CompanyCode,P.ItemCode,I.ItemName,P.UOMCOde,P.BarCode,P.PriceListID,P.PriceValue
		FROM [#M_PRICE] P INNER JOIN  [RPFO_POS_PRD].dbo.M_Item I ON P.ItemCode = I.ItemCode AND P.CompanyCode = I.CompanyCode
	) t 
	PIVOT(
		COUNT(StoreId)
		FOR StoreId  IN ('+ @columns +')
	) AS pivot_table
	ORDER BY ItemCode;';


	EXEC sp_executesql @sql;
	SELECT @Err AS ErrorMsg
 	IF (OBJECT_ID('tempdb..#M_PRICE') IS NOT NULL)
	BEGIN
		 DROP Table #M_PRICE
	END

 --	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM') IS NOT NULL)
	--BEGIN
	--	 DROP Table #M_PARAM_ITEM
	--END
 
 
END 

 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SYNC_PROMO_CMP]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

-- [USP_RPT_SYNC_PROMO_CMP] 'PRCP00100000001', 'PRCP00100000020' ,  '2020-01-01' , '2022-05-06'
CREATE PROCEDURE [dbo].[USP_RPT_SYNC_PROMO_CMP]
	@FPromoID nvarchar(50) = NULL,
	@TPromoID nvarchar(50) = NULL,
	@FDate DateTime = NULL,
	@TDate DateTime = NULL
AS
BEGIN
	DECLARE @Err NVARCHAR(500)
	SET @Err = ''
	IF @FDate IS NULL 
	BEGIN
		SET @FDate = '1990-01-01'
	END

	IF @TDate IS NULL 
	BEGIN
		SET @TDate =  '2990-01-01'
	END

	IF (OBJECT_ID('tempdb..#M_PROMO') IS NOT NULL)
	BEGIN
		 DROP Table #M_PROMO
	END

 --	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM') IS NOT NULL)
	--BEGIN
	--	 DROP Table #M_PARAM_ITEM
	--END
 

	CREATE TABLE #M_PROMO  
	(
		StoreId NVARCHAR(50),
		CompanyCode NVARCHAR(50),
		PromoId NVARCHAR(50),
		PromoName NVARCHAR(250),
		Status NVARCHAR(50),
		ModifiedBy NVARCHAR(50),
		ModifiedOn DATETIME 		
	)



	DECLARE 
		@columns NVARCHAR(MAX) = '', 
		@sql   NVARCHAR(MAX) = '',
		@LinkSvr   NVARCHAR(MAX) = '';

	-- select the category names
	SELECT 
		@columns+=QUOTENAME(StoreId) + ','
	FROM 
		M_Store
	ORDER BY 
		StoreId;

	-- remove the last comma
	SET @columns = 'Central,' + LEFT(@columns, LEN(@columns) - 1);
 



	INSERT INTO #M_PROMO
	SELECT 'CENTRAL' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) 
	FROM [RPFO_POS_PRD].dbo.S_PromoHeader L  
	WHERE L.PromoId BETWEEN ISNULL(@FPromoID,L.PromoId) AND ISNULL(@TPromoID,L.PromoId) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN CONVERT(NVARCHAR(50),@FDate,102) AND CONVERT(NVARCHAR(50),@TDate,102) 

	BEGIN TRY  
		
		SET @LinkSvr = 
		N'INSERT INTO #M_PROMO
		SELECT ''3001'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn) 
		FROM [SEKM_3001].[RPFO_3001_PRD].[dbo].[S_PromoHeader] L 
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+''' ';		


		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err +  '-3001-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

		
	BEGIN TRY  
		SET @LinkSvr = 
		N'INSERT INTO #M_PROMO
		SELECT ''3002'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SELM_3002].[RPFO_3002_PRD].[dbo].[S_PromoHeader] L 
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3002-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3003'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SERG_3003].[RPFO_3003_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3003-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3004'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SETR_3004].[RPFO_3004_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3004-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3005'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEBF_3005].[RPFO_3005_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3005-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3006'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEKV-3006].[RPFO_3006_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3006-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3007'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEKN_3007].[RPFO_3007_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3007-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3008'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEPM-3008].[RPFO_3008_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3008-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3009'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SETF_3009].[RPFO_3009_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3009-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3010'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SELK_3010].[RPFO_3010_RPD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3010-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N' 
		INSERT INTO #M_PROMO
		SELECT ''3011'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEKR_3011].[RPFO_3011_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3011-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3012'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SETA_3012].[RPFO_3012_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3012-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3013'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEKP_3013].[RPFO_3013_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3013-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3014'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SELW-3014].[RPFO_3014_RPD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3014-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3015'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEAP_3015].[RPFO_3015_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3015-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH
	
	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3016'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEAN_3016].[RPFO_3016_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3016-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N' 
		INSERT INTO #M_PROMO
		SELECT ''3017'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEKT-3017].[RPFO_3017_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3017-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3018'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SETL-3018].[RPFO_3018_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)   AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3018-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3019'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEMB_3019].[RPFO_3019_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId) AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3019-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH

	BEGIN TRY  
		SET @LinkSvr = N'
		INSERT INTO #M_PROMO
		SELECT ''3020'' StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,ISNULL(L.ModifiedBy,L.CreatedBy) ModifiedBy,ISNULL(L.ModifiedOn,L.CreatedOn)   
		FROM [SEDS_3020].[RPFO_3020_PRD].[dbo].[S_PromoHeader] L
 		WHERE L.PromoId BETWEEN ISNULL('''+@FPromoID+''',L.PromoId) AND ISNULL('''+@TPromoID+''',L.PromoId)  AND CONVERT(NVARCHAR(50),L.ModifiedOn,102) BETWEEN '''+CONVERT(NVARCHAR(50),@FDate,102)+''' AND '''+CONVERT(NVARCHAR(50),@TDate,102)+'''  ';
		SET LOCK_TIMEOUT 30;   
		EXEC sp_executesql @LinkSvr;
	END TRY  
	BEGIN CATCH
	 SET @Err = @Err + '-3020-' + ERROR_MESSAGE();
	 RAISERROR (@Err, 10, 1);
	END CATCH
 



	SET @sql =N'
	SELECT * FROM 
	(
		SELECT L.StoreId,L.CompanyCode,L.PromoId,L.PromoName,L.Status,L.ModifiedBy,L.ModifiedOn
		FROM [#M_PROMO] L  
	) t 
	PIVOT(
		COUNT(StoreId)
		FOR StoreId  IN ('+ @columns +')
	) AS pivot_table
	ORDER BY PromoId;';


	EXEC sp_executesql @sql;
	SELECT @Err AS ErrorMsg
 	IF (OBJECT_ID('tempdb..#M_PROMO') IS NOT NULL)
	BEGIN
		 DROP Table #M_PROMO
	END

 --	IF (OBJECT_ID('tempdb..#M_PARAM_ITEM') IS NOT NULL)
	--BEGIN
	--	 DROP Table #M_PARAM_ITEM
	--END
 
 
END 

 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_RPT_SyncDataStatusByIdoc]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_RPT_SyncDataStatusByIdoc 'CP001', '562542', 'MasterData'
-- USP_RPT_SyncDataStatusByIdoc 'CP001', '562543', 'SellingPrice'
-- USP_RPT_SyncDataStatusByIdoc 'CP001', '562525', 'Promotions'
-- =============================================
CREATE PROCEDURE [dbo].[USP_RPT_SyncDataStatusByIdoc] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@IdocNum nvarchar(50),
	@DataType nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	DECLARE @idoc nvarchar(50)
	SET @idoc = @IdocNum

	IF @DataType = 'MasterData'
	BEGIN

		SELECT DISTINCT A.ModifiedBy AS 'Idoc'
						, A.ModifiedOn AS 'Last Modify'
						, MAX(A.SyncDate) AS 'Received From SAP'
						, I.ModifiedBy AS 'Idoc In RPFO'
						, I.SyncDate AS 'Received In RPFO'
						, S.StoreId
						, S.SyncStatus AS 'Sync Store Status'
						, S.SyncDate AS 'Sync Store Date'
		FROM ABEO_MWI_PRD.dbo.M_Item A
		LEFT JOIN M_Item I ON A.CompanyCode = I.CompanyCode AND A.ItemCode = I.ItemCode
		LEFT JOIN T_SyncActionData S ON I.CompanyCode = S.CompanyCode AND I.StatusGuid = S.StatusGuid
		WHERE S.TableName = 'M_Item' AND A.ModifiedBy like '%' + @idoc + '%' 
		GROUP BY A.ModifiedBy, A.ModifiedOn, I.ModifiedBy, I.SyncDate, S.StoreId, S.SyncStatus, S.SyncDate
		ORDER BY S.StoreId, S.SyncDate

	END

	IF @DataType = 'SellingPrice'
	BEGIN

		SELECT DISTINCT A.ModifiedBy AS 'Idoc'
						, A.ModifiedOn AS 'Last Modify'
						, MAX(A.SyncDate) AS 'Received From SAP'
						, I.ModifiedBy AS 'Idoc In RPFO'
						, I.SyncDate AS 'Received In RPFO'
						, S.StoreId
						, S.SyncStatus AS 'Sync Store Status'
						, S.SyncDate AS 'Sync Store Date'
		FROM ABEO_MWI_PRD.dbo.M_PriceList A
		LEFT JOIN M_PriceList I ON A.CompanyCode = I.CompanyCode AND A.ItemCode = I.ItemCode
		LEFT JOIN T_SyncActionData S ON I.CompanyCode = S.CompanyCode AND I.StatusGuid = S.StatusGuid
		WHERE S.TableName = 'M_PriceList' AND A.ModifiedBy like '%' + @idoc + '%' 
		GROUP BY A.ModifiedBy, A.ModifiedOn, I.ModifiedBy, I.SyncDate, S.StoreId, S.SyncStatus, S.SyncDate
		ORDER BY S.StoreId, S.SyncDate

	END

	IF @DataType = 'Promotions'
	BEGIN

		SELECT DISTINCT A.ModifiedBy AS 'Idoc'
						, A.ModifiedOn AS 'Last Modify'
						, MAX(A.SyncDate) AS 'Received From SAP'
						, I.ModifiedBy AS 'Idoc In RPFO'
						, I.SyncDate AS 'Received In RPFO'
						, S.StoreId
						, S.SyncStatus AS 'Sync Store Status'
						, S.SyncDate AS 'Sync Store Date'
		FROM ABEO_MWI_PRD.dbo.S_PromoHeader A
		LEFT JOIN S_PromoHeader I ON A.CompanyCode = I.CompanyCode AND A.POSPromoId = I.PromoId
		LEFT JOIN T_SyncActionData S ON I.CompanyCode = S.CompanyCode AND I.StatusGuid = S.StatusGuid
		WHERE S.TableName = 'S_PromoHeader' AND A.ModifiedBy like '%' + @idoc + '%'
		GROUP BY A.ModifiedBy, A.ModifiedOn, I.ModifiedBy, I.SyncDate, S.StoreId, S.SyncStatus, S.SyncDate
		ORDER BY S.StoreId, S.SyncDate

	END

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_BankTerminalByCounter]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_BankTerminalByCounter]  'CP001','1001','TRUAT01'
CREATE PROCEDURE [dbo].[USP_S_BankTerminalByCounter] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50),
	@CounterId	nvarchar(50)	= null
 
AS	
begin

	select distinct t1.PaymentMethod, ISNULL( t2.ShortName , t1.PaymentMethod) ShortName,   t1.TerminalIdDefault , t1.CounterId, t1.Id, t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
			into #BankterminalTmp
			from M_BankTerminal t1  
			left join M_PaymentMethod t2  with(nolock) on t1.CompanyCode = t2.CompanyCode and  t1.PaymentMethod = t2.PaymentCode  
			left join  S_StoreClient t3  with(nolock) on t1.CompanyCode=  t3.CompanyCode and t3.PublicIP = t1.CounterId 
			where  ( t2.PaymentType = 'B' or  t1.PaymentMethod in (select distinct FatherId  from M_PaymentMethod where ISNULL(FatherId, '') <> ''))
			and t3.PublicIP = @CounterId
			and t1.CompanyCode = @CompanyCode and StoreId = @StoreId and isnull(t3.PublicIP,'') <> '' 

			select * from #BankterminalTmp

			union all

			select distinct t1.FatherId PaymentMethod, t1.FatherId ShortName , '' TerminalIdDefault , @CounterId CounterId,null Id, null CustomF1, null CustomF2, null CustomF3,null CustomF4,null CustomF5
			from M_PaymentMethod t1 with (nolock)  

			--left join M_BankTerminal t2 with (nolock)  on t1.CompanyCode = t2.CompanyCode and t1.FatherId = t2.PaymentMethod
			where t1.CompanyCode =@CompanyCode and ISNULL( t1.FatherId,'') <> ''  and t1.FatherId not in (select PaymentMethod from #BankterminalTmp)
			--and isnull(t2.PaymentMethod,'') = ''
			--

			union all
	
			select distinct t1.PaymentCode PaymentMethod, t1.ShortName , '' TerminalIdDefault , @CounterId CounterId,null Id, t2.CustomF1, t2.CustomF2, t2.CustomF3, t2.CustomF4, t2.CustomF5
			from  M_PaymentMethod t1  with(nolock)  
			left join  S_StoreClient t3  with(nolock) on t1.CompanyCode=  t3.CompanyCode  
			left join M_BankTerminal t2 with(nolock) on t1.CompanyCode = t2.CompanyCode and t1.PaymentCode= t2.PaymentMethod  and t2.CounterId = t3.PublicIP
			where   t1.PaymentType = 'B' and ISNULL(t2.PaymentMethod,'') = ''
			and t1.CompanyCode = @CompanyCode and StoreId = @StoreId and t3.PublicIP = @CounterId 
	 
			drop table #BankterminalTmp

	--select distinct t1.PaymentMethod, t2.ShortName ,   t1.TerminalIdDefault , t1.CounterId, t1.Id
	--from M_BankTerminal t1  
	--left join M_PaymentMethod t2  with(nolock) on t1.CompanyCode = t2.CompanyCode and t1.PaymentMethod = t2.PaymentCode 
	--left join  S_StoreClient t3  with(nolock) on t1.CompanyCode=  t3.CompanyCode and t3.PublicIP = t1.CounterId 
	--where   t2.PaymentType = 'B' and t3.PublicIP = @CounterId
	--and t1.CompanyCode = @CompanyCode and StoreId = @StoreId and isnull(t3.PublicIP,'') <> '' 

	--union all

	--select distinct t1.PaymentCode PaymentMethod, t1.ShortName , '' TerminalIdDefault , @CounterId CounterId,null Id
	--from  M_PaymentMethod t1  with(nolock)  
	--left join  S_StoreClient t3  with(nolock) on t1.CompanyCode=  t3.CompanyCode  
	--left join M_BankTerminal t2 with(nolock) on t1.CompanyCode = t2.CompanyCode and t1.PaymentCode= t2.PaymentMethod  and t2.CounterId = t3.PublicIP
	--where   t1.PaymentType = 'B' and ISNULL(t2.PaymentMethod,'') = ''
	--and t1.CompanyCode = @CompanyCode and StoreId = @StoreId and t3.PublicIP = @CounterId 
end
--[USP_S_M_PaymentMethod] '','CP001','JAOF001'

GO
/****** Object:  StoredProcedure [dbo].[USP_S_BOMLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_EndOfDateDetail] 'CP001', 'W0101','2021-03-25'
create PROCEDURE [dbo].[USP_S_BOMLine]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@BOMId nvarchar(100)
 
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select * from M_BOMLine with (nolock) where BOMId=@BOMId and  CompanyCode = @CompanyCode
END
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_CheckOutByDate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_CheckOutByDate] 'CP001', '1'
CREATE  PROCEDURE [dbo].[USP_S_CheckOutByDate]
	@CompanyCode nvarchar(50),
	@EventCode	nvarchar(50) 
	 
AS
begin
select t1.* from T_InvoiceHeader t1 with (nolock)
left join T_SalesHeader t2   with (nolock) on t2.TransId = t1.RefTransId
where (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode ) and  t1.ContractNo = @EventCode 
 --and isnull( t1.TransId, '') = ''
	   
--where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
--	AND (UomCode = @UomCode  or ISNULL(@UomCode, '')='')  
 
--	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_CounterInforEpay]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_CounterInforEpay] @CompanyCode nvarchar(50), @StoreId	nvarchar(150), @TerminalId	nvarchar(150) AS begin  select * from S_StoreClient  where CompanyCode = @CompanyCode and StoreId = @StoreId and PublicIP = @TerminalId end 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_EndDatePayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_EndDatePayment] 'CP001', '3006' ,'2021-11-01'
CREATE   PROCEDURE [dbo].[USP_S_EndDatePayment]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date
AS	

Begin
 
	Declare @Currency nvarchar(15) set @Currency = (select top 1 CurrencyCode  from M_Store with (nolock) where StoreId = @StoreId and CompanyCode = @CompanyCode)
	select distinct t1.CounterId, t1.ShiftId , t2.CreatedBy,'' as FullName,  t2.Status , t1.Currency, case @Currency when t1.Currency then 0 else  t1.FCAmount end FCAmount
	, t1.PaymentCode
	,ISNULL( t3.ShortName, t1.PaymentCode ) ShortName , 
	t1.Amount AS TotalAmt,
	0 AS ChargableAmount,
	0 AS PaymentDiscount,
	t1.CollectedAmount AS CollectedAmount,
	t1.Balance  as Balance, 
	isnull(t1.ChangeAmt, 0) ChangeAmt, t1.EOD_Code
	from  T_EndDatePayment t1 with (nolock)
	left join T_ShiftHeader t2 with (nolock) on t1.ShiftId = t2.ShiftId and t1.CompanyCode = t2.CompanyCode
	left join M_PaymentMethod t3 with (nolock) on   t1.CompanyCode = t3.CompanyCode and t3.PaymentCode = t1.PaymentCode
	where CONVERT(date, t2.CreatedOn ) =  CONVERT(date, @Date) and t1.StoreId = @StoreId and t1.CompanyCode = @CompanyCode
	--and t2.Status = 'C' and t2.IsCanceled = 'N' 

end


 --select * from T_EndDatePayment
GO
/****** Object:  StoredProcedure [dbo].[USP_S_EndDateSummary]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_S_EndDateSummary]'CP001', '3005' ,'2022-05-09'
CREATE   PROCEDURE [dbo].[USP_S_EndDateSummary]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date
AS	
Begin

	    Declare @Currency nvarchar(15); 

		Declare @DailyId nvarchar(15); 
		set @DailyId = (select dbo.[fnc_GetDailyID]( @StoreId, @CompanyCode, @Date))

		set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode)

		select distinct t1.TerminalId CounterId, t1.ShiftId,t1.PaymentCode, isnull( t7.ShortName, t1.PaymentCode) ShortName, isnull(t1.Currency, @Currency) Currency,  isnull( t1.Rate, 1) Rate, case isnull(t1.Rate, 1) when 1 then 0 else SUM(t1.FCAmount ) end FCAmount,
		--t1.CreatedBy, t4.FirstName + ' ' + t4.LastName as FullName, 
		'' CreatedBy, '' as FullName, 
		t5.Status,
		SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt,
		-- Lập sửa để get End Amount của Shift đã được ghi nhận 
		case t5.Status when 'C' then isnull(t6.CollectAmount,0) else  CASE WHEN t7.PaymentType <> 'C' 
		THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) 
		ELSE 
		 0
			--SUM(ISNULL(t8.Amount,0))
		END end CollectedAmount, 
		
		t7.EODCode EOD_Code,
	
		SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt, 
		
		
		case t5.Status when 'C' then isnull(t6.BankInAmt,0) else  CASE WHEN t7.PaymentType <> 'C' THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) ELSE 0 END end   BankInAmt ,
		0 BankInBalance
		--t6.BankInBalance
		--SUM(t2.TotalTax) TotalTax, Sum(TotalDiscountAmt) DiscountTotal,SUM( TotalPayable) PaymentTotal,  COUNT(*) LineItemCount , 
		--Count(TotalTax) TaxCount, Count(TotalDiscountAmt) DiscountCount ,Count(t1.PaymentCode) PaymentCount

		from T_SalesPayment t1 with (nolock)
		left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId  
		--left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
		left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
		left join T_ShiftLine t6  with (nolock) on t6.ShiftId = t5.ShiftId and t6.CompanyCode = t5.CompanyCode   
		and isnull(t6.Currency, @Currency) = isnull(t1.Currency, @Currency) and t1.PaymentCode = t6.PaymentCode 
		left Join M_PaymentMethod t7  with (nolock) on t1.CompanyCode = t7.CompanyCode and t1.PaymentCode = t7.PaymentCode
		--left join T_PickupAmount t8 with (nolock) on t5.CompanyCode = t8.CompanyCode and t8.ShiftId = t5.ShiftId
		where t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId   
				and ISNULL(t2.IsCanceled,'N') = 'N'  and t2.Status = 'C' 

				and	T1.ShiftId  IN (
				    --CONVERT(date, CreatedOn ) =  CONVERT(date, @Date)
					SELECT ShiftId FROM T_ShiftHeader WHERE DailyId = @DailyId AND StoreId = @StoreId 
					AND CompanyCode = @CompanyCode
				) 
				--and isnull(t7.EODApply, 0) = 1 
				
		Group by  t7.PaymentType,t1.TerminalId ,  t6.CounterId, t1.ShiftId,t1.PaymentCode,t7.ShortName , t1.Currency,  t1.Rate,  t5.Status, t6.CollectAmount, t7.EODCode, t6.BankInAmt ,t6.BankInBalance
		








	--select distinct t1.ShiftId, t1.CreatedBy, t4.FirstName + ' ' + t4.LastName as FullName, t1.Status
	--, t3.PaymentCode, 
	--Sum(t3.CollectedAmount) OVER(PARTITION BY t3.PaymentCode, t1.ShiftId ) AS TotalAmt,
	--Sum(t3.ChargableAmount) OVER(PARTITION BY t3.PaymentCode, t1.ShiftId ) AS ChargableAmount,
	--Sum(t3.PaymentDiscount) OVER(PARTITION BY t3.PaymentCode, t1.ShiftId ) AS PaymentDiscount,
	--t1.EndAmt AS CollectedAmount, -- Sum(t3.CollectedAmount) OVER(PARTITION BY t3.PaymentCode, t1.ShiftId ) Sum(t3.CollectedAmount) OVER(PARTITION BY t3.PaymentCode, t1.ShiftId )
	--t1.EndAmt - Sum(t3.TotalAmt) OVER(PARTITION BY t3.PaymentCode, t1.ShiftId  )  as Balance
	--from T_ShiftHeader t1 with (nolock) 
	--left join T_SalesHeader t2 with (nolock) on t1.ShiftId = t2.ShiftId and t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId
	--left join T_SalesPayment t3 with (nolock) on t3.TransId = t2.TransId and t3.CompanyCode = t2.CompanyCode and t2.ShiftId = t3.ShiftId
	--left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
	--where T1.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)
	--and t1.StoreId = @StoreId and t1.CompanyCode = @CompanyCode
	--and t2.Status = 'C' 
	-- -ISNULL(t1.ChangeAmt / t1.Rate,0)
		--Declare @Currency nvarchar(15); 
		--set @Currency = ( select top 1 CurrencyCode from M_Store with (nolock)  where StoreId = @StoreId and CompanyCode= @CompanyCode)

		--select distinct t1.TerminalId CounterId, t1.ShiftId,t1.PaymentCode, isnull( t7.ShortName, t1.PaymentCode) ShortName, isnull(t1.Currency, @Currency) Currency,  isnull( t1.Rate, 1) Rate, case isnull(t1.Rate, 1) when 1 then 0 else SUM(t1.FCAmount ) end FCAmount,
		----t1.CreatedBy, t4.FirstName + ' ' + t4.LastName as FullName, 
		--'' CreatedBy, '' as FullName, 
		--t5.Status,
		--SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt,
		---- Lập sửa để get End Amount của Shift đã được ghi nhận 
		--case t5.Status when 'C' then isnull(t6.CollectAmount,0) else  CASE WHEN t7.PaymentType <> 'C' THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) ELSE 0 END end CollectedAmount, 
		--t7.EODCode EOD_Code,
	
		--SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt, 
		
		
		--case t5.Status when 'C' then isnull(t6.BankInAmt,0) else  CASE WHEN t7.PaymentType <> 'C' THEN SUM(ISNULL(t1.CollectedAmount,0)-ISNULL(t1.ChangeAmt,0)) ELSE 0 END end   BankInAmt ,
		--0 BankInBalance
		----t6.BankInBalance
		----SUM(t2.TotalTax) TotalTax, Sum(TotalDiscountAmt) DiscountTotal,SUM( TotalPayable) PaymentTotal,  COUNT(*) LineItemCount , 
		----Count(TotalTax) TaxCount, Count(TotalDiscountAmt) DiscountCount ,Count(t1.PaymentCode) PaymentCount

		--from T_SalesPayment t1 with (nolock)
		--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId  
		----left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
		--left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
		--left join T_ShiftLine t6  with (nolock) on t6.ShiftId = t5.ShiftId and t6.CompanyCode = t5.CompanyCode   
		--and isnull(t6.Currency, @Currency) = isnull(t1.Currency, @Currency) and t1.PaymentCode = t6.PaymentCode 
		--left Join M_PaymentMethod t7  with (nolock) on t1.CompanyCode = t7.CompanyCode and t1.PaymentCode = t7.PaymentCode
		--where t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId   
		--		and ISNULL(t2.IsCanceled,'N') = 'N'  and t2.Status = 'C' 
		--		and	T1.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId 
		--		AND CompanyCode = @CompanyCode) 
		--		--and isnull(t7.EODApply, 0) = 1 
				
		--Group by  t7.PaymentType,t1.TerminalId ,  t6.CounterId, t1.ShiftId,t1.PaymentCode,t7.ShortName , t1.Currency,  t1.Rate,  t5.Status, t6.CollectAmount, t7.EODCode, t6.BankInAmt ,t6.BankInBalance
		
		--UNION ALL
		---- -ISNULL(t1.ChangeAmt / t1.Rate,0)
		--select  t6.CounterId , t1.ShiftId, t1.PaymentCode, isnull( t7.ShortName, t1.PaymentCode) ShortName , isnull( t1.Currency, @Currency) Currency,  isnull( t1.Rate, 1) Rate, case isnull(t1.Rate, 1) when 1 then 0 else SUM(t1.FCAmount) end FCAmount,  t1.CreatedBy, t4.FirstName + ' ' + t4.LastName as FullName, t5.Status,
		--SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt, 
		---- Lập sửa để get End Amount của Shift đã được ghi nhận SUM(t1.CollectedAmount) CollectedAmount,
		--case t5.Status when 'C' then isnull(t6.CollectAmount,0) else 0 end CollectedAmount , t7.EODCode EOD_Code,
	
		--SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt
		----SUM(t2.TotalTax) TotalTax, Sum(TotalDiscountAmt) DiscountTotal,SUM( TotalPayable) PaymentTotal,  COUNT(*) LineItemCount , 
		----Count(TotalTax) TaxCount, Count(TotalDiscountAmt) DiscountCount ,Count(t1.PaymentCode) PaymentCount

		--from T_InvoicePayment t1 with (nolock)
		--left join T_InvoiceHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		--left join M_User t4 with (nolock) on t4.Username = t1.CreatedBy
		--left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
		--left join T_ShiftLine t6  with (nolock) on t6.ShiftId = t5.ShiftId and t6.CompanyCode = t5.CompanyCode   
		--and isnull(t6.Currency, @Currency) = isnull(t1.Currency, @Currency) and t1.PaymentCode = t6.PaymentCode and t6.CounterId = t1.TerminalId
		--left Join M_PaymentMethod t7  with (nolock) on t1.CompanyCode = t7.CompanyCode and t1.PaymentCode = t7.PaymentCode
		--where t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
		--		and	T1.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)  and isnull(t7.EODApply,1) = 1
		
		--Group by  t1.TerminalId ,  t6.CounterId,  t1.ShiftId ,t1.PaymentCode,t1.Currency, t7.ShortName ,t1.Rate,  t1.CreatedBy, t4.FirstName + ' ' + t4.LastName , t5.Status, t6.CollectAmount, t7.EODCode


end


--select * from T_EndDatePayment where ShiftId = '100121082500002'
--select * from T_ShiftLine where ShiftId ='100121101900001'

--select * from T_SalesPayment where ShiftId ='100121101900001' and PaymentCode = 'C010' or PaymentCode = 'CA00'

--CA00
GO
/****** Object:  StoredProcedure [dbo].[USP_S_EndOfDateDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_EndOfDateDetail] 'CP001', '3006' ,'2021-11-01'
CREATE PROCEDURE [dbo].[USP_S_EndOfDateDetail]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@StoreId nvarchar(50) ,
	@Date datetime
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select distinct t1.ItemCode, t1.UOMCode , t1.BarCode, ISNULL( t1.Description, t3.ItemName) Description, t1.Price,
	--t1.Quantity, t1.LineTotal ,
	SUM( t1.Quantity) OVER(PARTITION BY t1.ItemCode, t1.UOMCode, t1.BarCode  ) Quantity,
	SUM( t1.LineTotalDisIncludeHeader) OVER(PARTITION BY t1.ItemCode, t1.UOMCode , t1.BarCode ) LineTotal   
	from T_SalesLine t1 with (nolock)
	left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId 
	left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	where t2.ShiftId  in (
				select ShiftId from T_ShiftHeader with (nolock)
				where Status = 'C' and CompanyCode = @CompanyCode
				and StoreId = @StoreId
				and CONVERT(varchar, CreatedOn, 23)  = CONVERT(varchar, @Date, 23) )   
	order by t1.ItemCode
END
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_EndOfDateList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_EndOfDateList] 'CP001', '3001'
CREATE PROCEDURE [dbo].[USP_S_EndOfDateList]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@StoreId nvarchar(50) 
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select distinct t1.CompanyCode, t1.StoreId, t2.CreateOn, t2.CreateBy,  CONVERT(varchar, t1.CreatedOn, 23) as Date  , 'O' Status, ''  Id
	into #EndateTableListTmp
	from T_ShiftHeader t1 with (nolock)
	left join T_EndDate t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId  and CONVERT(varchar, t1.CreatedOn, 23) = CONVERT(varchar, t2.Date , 23) 
	where t1.CompanyCode = @CompanyCode and t1.StoreId = @StoreId and ISNULL(convert(nvarchar(50), t2.Id) ,'') = ''
	
	select * from  (
		select * from  #EndateTableListTmp
		union all 
		select distinct t1.CompanyCode, t1.StoreId,  t1.CreateOn, t1.CreateBy,   CONVERT(varchar, t1.Date, 23) as Date  , 'C' Status,   t1.Id  Id
		from T_EndDate t1 with (nolock)
		--join T_ShiftHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId  and CONVERT(varchar, t2.CreatedOn, 23) = CONVERT(varchar, t1.Date , 23)
		where t1.CompanyCode = @CompanyCode and t1.StoreId = @StoreId 
		and CONVERT(varchar, t1.Date, 23) not in (select Date from  #EndateTableListTmp)
		
	) t1
	order by Date desc

	drop table #EndateTableListTmp

   
END
 
-- select distinct t1.Id  Id, t1.CompanyCode, t1.StoreId,  t1.CreateOn, t1.CreateBy,   CONVERT(varchar, t1.Date, 23) as Date  , 'C' Status  , 
--  t2.CreatedOn, t1.Date 
--	from T_EndDate t1 with (nolock)
--	left join T_ShiftHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId 
 
--	where t1.CompanyCode = 'CP001' and t1.StoreId = '3001' 
--	--and CONVERT(date, t2.CreatedOn) = CONVERT(date, t1.Date  )



--select * from T_EndDate
GO
/****** Object:  StoredProcedure [dbo].[USP_S_EndOfDatePayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_EndOfDateDetail] 'CP001', 'W0101','2021-03-25'
create PROCEDURE [dbo].[USP_S_EndOfDatePayment]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@StoreId nvarchar(50) ,
	@Date datetime
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	select t1.PaymentCode, SUM( t1.Value) OVER(PARTITION BY t1.PaymentCode  ) Amount 
	from T_ShiftLine  t1 with (nolock)
	--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId 
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	where t1.ShiftId    in (
				select ShiftId from T_ShiftHeader with (nolock)
				where Status = 'C' and CompanyCode = @CompanyCode
				and StoreId = @StoreId
				and CONVERT(varchar, CreatedOn, 23)  = CONVERT(varchar, @Date, 23) )   
END
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_EOD_SummaryHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_EOD_SummaryHeader] 'CP001', '1001' , '2021-10-25'
CREATE   PROCEDURE [dbo].[USP_S_EOD_SummaryHeader]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Date	Date
AS
begin 
	
	Declare @StoreName Nvarchar(250)
	Declare @ChargableAmount Numeric(19,6)
	Declare @TotalAmount Numeric(19,6)
	Declare @TotalReceipt Numeric(19,6)
	Declare @AmountChange Numeric(19,6)
	Declare @TotalDiscountAmt Numeric(19,6)
	Declare @CompletedTotalQty Numeric(19,6)
	Declare @CompletedTotalAmt Numeric(19,6)
	Declare @CanceledTotalQty Numeric(19,6)
	Declare @CanceledTotalAmt Numeric(19,6)
	Declare @TransTotalQty Numeric(19,6)
	Declare @TransTotalAmt Numeric(19,6)


	SELECT
		--@Date AS Date,
		--@CompanyCode AS CompanyCode ,
		--@StoreId AS StoreId ,
		@StoreName = S.StoreName
	FROM M_Store S
	WHERE S.CompanyCode = @CompanyCode AND S.StoreId = @StoreId

	SELECT
		--@ChargableAmount ,
		--@TotalAmount ,
		@TotalReceipt = COUNT(*) , 
		--@AmountChange ,
		--@TotalDiscountAmt ,
		@CompletedTotalQty = COUNT(*),
		--@CompletedTotalAmt ,
		--@CanceledTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty ,
		@TransTotalQty = COUNT(*)
		--@TransTotalAmt 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'N'


	SELECT
		--@ChargableAmount = SUM(ISNULL(ChargableAmount,0)),
		@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(ChargableAmount,0)),
		@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty = COUNT(*)--,
		@CompletedTotalAmt = SUM(ISNULL(TotalPayable,0)) ,
		--@CanceledTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty ,
		--@TransTotalQty ,
		@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'N'


	SELECT
		--@ChargableAmount = SUM(ISNULL(ChargableAmount,0)),
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(ChargableAmount,0)),
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		@CanceledTotalQty = COUNT(*)
		--@CanceledTotalAmt ,
		--@CanceledTotalQty ,
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'C'


	SELECT
		--@ChargableAmount = SUM(ISNULL(ChargableAmount,0)),
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		--@AmountChange = SUM(ISNULL(ChargableAmount,0)),
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty = COUNT(*)
		--@CompletedTotalAmt ,
		@CanceledTotalAmt = SUM(ISNULL(TotalPayable,0)) 
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'C'


	SELECT
		@ChargableAmount = SUM(T_SalesPayment.CollectedAmount-ISNULL(T_SalesPayment.ChangeAmt,0)) ,
		--@TotalAmount = SUM(ISNULL(TotalReceipt,0)) ,
		--@TotalReceipt = COUNT(*)
		@AmountChange = SUM(ISNULL(T_SalesPayment.ChangeAmt,0)) 
		--@TotalDiscountAmt = SUM(ISNULL(TotalDiscountAmt,0)) , 
		--@CompletedTotalQty ,
		--@CompletedTotalAmt ,
		--@CanceledTotalQty = COUNT(*)
		--@CompletedTotalAmt ,
		--@CanceledTotalAmt = SUM(ISNULL(TotalPayable,0)) 
		--@TransTotalQty ,
		--@TransTotalAmt = SUM(ISNULL(TotalPayable,0)) 
	FROM T_SalesHeader INNER JOIN T_SalesPayment ON T_SalesHeader.TransId = T_SalesPayment.TransId
	WHERE CONVERT(date, T_SalesHeader.CreatedOn ) =  CONVERT(date, @Date) AND ISNULL(T_SalesHeader.Status,'O') <> 'H' AND T_SalesHeader.IsCanceled = 'C'


	SELECT
		@ChargableAmount AS ChargableAmount ,
		@TotalAmount AS TotalAmount ,
		@TotalReceipt AS TotalReceipt ,
		@AmountChange AS AmountChange ,
		@TotalDiscountAmt AS TotalDiscountAmt ,
		@CompletedTotalQty AS CompletedTotalQty ,
		@CompletedTotalAmt AS CompletedTotalAmt ,
		@CanceledTotalQty AS CanceledTotalQty ,
		@CanceledTotalAmt AS CanceledTotalAmt ,
		@TransTotalQty AS TransTotalQty ,
		@TransTotalAmt AS TransTotalAmt
	
	




	--select distinct @Date Date, ISNULL(T6.Status, 'O') Status, @CompanyCode CompanyCode, @StoreId StoreId, t7.StoreName,
	--SUM(t3.ChargableAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS ChargableAmount 
	--, SUM(t2.TotalAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS TotalAmount, 

	--SUM(t2.TotalReceipt) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS TotalReceipt, 
	--SUM(t2.AmountChange)
	--OVER(PARTITION BY t1.StoreId, T1.companyCode) AS AmountChange,  
	-- SUM(t2.TotalDiscountAmt) OVER(PARTITION BY t1.StoreId, T1.companyCode) AS TotalDiscountAmt,

	-- ISNULL( count(t2.TransId) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) AS CompletedTotalQty, 
	-- ISNULL( SUM(t2.TotalReceipt) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) AS CompletedTotalAmt, 
	-- ISNULL(count(t4.TransId)OVER(PARTITION BY t1.StoreId, T1.companyCode), 0)   AS CanceledTotalQty,
	-- ISNULL( SUM(t4.TotalReceipt) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) AS CanceledTotalAmt,
	-- ISNULL( count(t2.TransId) OVER(PARTITION BY t1.StoreId, T1.companyCode) + count(t4.TransId) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) as TransTotalQty ,
	-- ISNULL( SUM(t2.TotalAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode) + SUM(t4.TotalAmount) OVER(PARTITION BY t1.StoreId, T1.companyCode), 0) as TransTotalAmt

	--from T_ShiftHeader t1 with(nolock)  
	--left join T_SalesHeader t2  with(nolock) on t1.ShiftId = t2.ShiftId  and t1.StoreId = t2.StoreId  and t2.Status = 'C' and t2.IsCanceled = 'N' 
	--left join T_SalesPayment t3 with(nolock) on t3.TransId = t2.TransId and t2.ShiftId = t3.ShiftId
	--left join T_SalesHeader t4  with(nolock) on t1.ShiftId = t4.ShiftId  and t1.StoreId = t4.StoreId  and t4.Status = 'C' and t2.IsCanceled = 'Y'
	--left join T_SalesPayment t5 with(nolock) on t4.TransId = t5.TransId and t4.ShiftId = t5.ShiftId
	--left join T_EndDate t6 with(nolock) on t6.CompanyCode = t1.CompanyCode and CONVERT(date, t6.Date) = CONVERT(date, @Date)
	--left join M_Store t7  with(nolock) on t1.CompanyCode = t7.CompanyCode and t1.StoreId = t7.StoreId
	--where t1.companyCode = @CompanyCode  and cONVERT(date, t1.CreatedOn ) =  CONVERT(date, @Date)


	--and CONVERT(date, t6.Date) = CONVERT(date, @Date) and t6.StoreId = @StoreId and t6.CompanyCode=@CompanyCode
	--t1.ShiftId = @ShiftId
	
 end

 --select * from T_ShiftHeader


 --select * from T_ShiftHeader where ShiftId = 'ST00012012010009'
 --select * from T_ShiftLine
GO
/****** Object:  StoredProcedure [dbo].[USP_S_FunctionExpandAll]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--[USP_GetControlPermissionListByFunction]   'Adm_Warehouse', 'B03F1D02-7F3D-4A16-91D1-2196C6A7D2B7'

--select * from M_Control where FunctionId = 'Adm_Warehouse'
--select * from M_Control
CREATE PROCEDURE [dbo].[USP_S_FunctionExpandAll]    
	 @UserId nvarchar(50)
AS

begin
  	   SELECT distinct
				c.*
				
			FROM 
				M_Function c with (nolock)
				left join M_Permission p  with (nolock)  on p.FunctionId = c.FunctionId  
				 left join M_UserRole r  with (nolock)  on r.RoleId = p.RoleId
				 left join M_User u  with (nolock)  on r.UserId = u.UserId
			where u.Username = @UserId and p.Permissions = 'V' 
			and c.FunctionId <>'Adm_Component' and c.ParentId <> 'Adm_Component' and isnull(c.ParentId  ,'') <> ''
			and c.Status = 'A'
end

-- [USP_S_FunctionExpandAll] 'admin'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_FunctionMenuShow]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_FunctionMenuShow]
create PROCEDURE [dbo].[USP_S_FunctionMenuShow]
	 
AS
begin
	select * from M_Function where isShowMenu = 1 
	order by MenuOrder 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_GetCheckInById]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_RPT_InventoryAudit]  NULL, NULL,'admin', '2020-01-01', '2022-01-01'
CREATE PROCEDURE [dbo].[USP_S_GetCheckInById]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@TransId nvarchar(50)
	 
AS
BEGIN

select * from T_SalesHeader with (nolock) where TransId= @TransId and CompanyCode= @CompanyCode and StoreId= @StoreId 
and DataSource = 'Ecom'
and ISNULL( POSType,'') <> 'E'
END 

GO
/****** Object:  StoredProcedure [dbo].[USP_S_GetCheckOutById]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_RPT_InventoryAudit]  NULL, NULL,'admin', '2020-01-01', '2022-01-01'
create PROCEDURE [dbo].[USP_S_GetCheckOutById]
	@CompanyCode nvarchar(50) = NULL,
	@StoreId nvarchar(50) = NULL,
	@TransId nvarchar(50)
	 
AS
BEGIN

select * from T_SalesHeader 
with (nolock) where TransId= @TransId and CompanyCode= @CompanyCode and StoreId= @StoreId and DataSource = 'Ecom' and POSType = 'E'
END 

GO
/****** Object:  StoredProcedure [dbo].[USP_S_GetControlByFunction]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_GetControlByFunction] @CompanyCode nvarchar(50), @Function	nvarchar(150) AS begin  select * from M_Control with(nolock) where CompanyCode = @CompanyCode  and Status = 'A'  and FunctionId = @Function order By OrderNum end 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_GetItemSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- USP_S_GetItemSerial N'CP001', N'' , N'' , N''
CREATE   PROCEDURE [dbo].[USP_S_GetItemSerial]
	@CompanyCode nvarchar(50), 
	@ItemCode nvarchar(50),
	@Keyword nvarchar(50),
	@SlocId  nvarchar(50)
AS
begin
	select distinct  t1.[CompanyCode]
      ,t1.[ItemCode]
      ,t1.[SerialNum],
	  t3.SLocId
      , t3.StockQty  [Quantity]
      ,t1.[ExpDate]
      ,t1.[StoredDate]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,t1.[Prefix]
	  
	from  M_ItemSerial t1 with (nolock)
	--left join T_SalesLineSerial t2 on t1.SerialNum = t2.SerialNum and T1.CompanyCode = t2.CompanyCode
	left join M_ItemSerialStock t3  on t3.SerialNum = t1.SerialNum and T1.CompanyCode = t3.CompanyCode
	where  t1.CompanyCode = @CompanyCode 
	 
	and (ISNULL(@ItemCode, '') = '' OR t1.ItemCode = @ItemCode)
	--and t2.SerialNum is null  and t1.Status = 'A' 
	AND (t1.SerialNum like N'%'+@Keyword+'%'   or ISNULL(@Keyword, '')='') 
	--and t3.StockQty > 0
	--and CONVERT(Date, ISNULL( t1.ExpDate, '2999-12-12')) >= CONVERT(Date,GETDATE()) 
	--and t3.SLocId = @SlocId
	and (ISNULL(@SlocId, '') = '' OR t3.SLocId = @SlocId)
end 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_GetItemSerialAvailable]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- USP_S_GetItemSerialAvailable N'CP001', N'JA040402005' , N'' , N'W0102'
CREATE   PROCEDURE [dbo].[USP_S_GetItemSerialAvailable]
	@CompanyCode nvarchar(50), 
	@ItemCode nvarchar(50),
	@Keyword nvarchar(50),
	@SlocId  nvarchar(50)
AS
begin
	select distinct t1.* 
	from  M_ItemSerial t1 with (nolock)
	left join T_SalesLineSerial t2 on t1.SerialNum = t2.SerialNum and T1.CompanyCode = t2.CompanyCode
	left join M_ItemSerialStock t3  on t3.SerialNum = t1.SerialNum and T1.CompanyCode = t3.CompanyCode
	where  t1.CompanyCode = @CompanyCode and t1.Status = 'A' and t1.ItemCode= @ItemCode and t2.SerialNum is null
	AND (t1.SerialNum like N'%'+@Keyword+'%'   or ISNULL(@Keyword, '')='')  and t3.StockQty > 0
	and CONVERT(Date, ISNULL( t1.ExpDate, '2999-12-12')) >= CONVERT(Date,GETDATE()) and t3.SLocId = @SlocId
end 
 
 --select * from M_ItemSerial
GO
/****** Object:  StoredProcedure [dbo].[USP_S_GetSOToDivision]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- [USP_S_GetSOToDivision] 'CP001', '2022-10-25','', ''
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_GetSOToDivision]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@Date Datetime = null,
	@CusId nvarchar(400) = null,
	@TransId nvarchar(400) = null,
	@InComplete bit = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON; 

	if(ISNULL(@Date, '') = '') 
	begin
		set @Date = (select getdate());
	end
	
	DECLARE 
		@columns NVARCHAR(MAX) = '', 
		@sql     NVARCHAR(MAX) = '';
 
	
	select distinct  t1.CusId, t2.ItemCode, t2.Description,  t2.UOMCode,  Sum(t2.Quantity) Quantity, t3.Quantity OnHand
	
	into #tmpSalesTable
	from T_SalesHeader t1 with (nolock)
		 left join T_SalesLine t2 with (nolock) on t1.TransId = t2.TransId and t1.CompanyCode = t2.CompanyCode
		 left join T_ItemStorage t3 with (nolock) on t3.ItemCode = t2.ItemCode and t3.UOMCode = t2.UOMCode  
	where  CONVERT(date, t1.CreatedOn) = CONVERT( date,  @Date) and t1.CusGrpId = '2'
	and (CusId = @CusId  or ISNULL(@CusId, '') = '')      
	and (t1.TransId = @TransId  or ISNULL(@TransId, '') = '')      
	group by CusId, t2.ItemCode, t2.Description,  t2.UOMCode, t3.Quantity
	order by CusId, t2.ItemCode

	SELECT  @columns+=QUOTENAME(CONVERT( nvarchar(200), CusId) ) + ',' + QUOTENAME(CONVERT( nvarchar(200), CusId + 'Division') ) + ','
	
	FROM (select distinct  CusId  from #tmpSalesTable  ) tmp
	ORDER BY  CusId;


	--select * 
	--from  #tmpSalesTable
	--where isnull(ItemCode,'''') <> ''''
	--drop table #tmpSalesTable
	--[USP_S_GetSOToDivision] 'CP001', '2022-10-25',''
	if (isnull(@columns, '') = '')
	begin 
		drop table #tmpSalesTable
		select null
	end
	else 
	begin
	 
		SET @columns = LEFT(@columns, LEN(@columns) - 1);
		
		if(ISNULL(@InComplete, '') = '')
		begin
			SET @sql ='
			SELECT * FROM   
			( 
				select * ,  SUM(Quantity) OVER(PARTITION BY ItemCode) Total
				from  #tmpSalesTable
				where isnull(ItemCode,'''') <> ''''

			) t 

			PIVOT(
				SUM( Quantity ) 
				FOR CusId IN ('+ @columns +') 
			) AS pivot_table;';
		end
		
		else
		begin 
			SET @sql ='
			SELECT * FROM   
			( 
				select * ,  SUM(Quantity) OVER(PARTITION BY  ItemCode) Total
				from  #tmpSalesTable
				where isnull(ItemCode,'''') <> ''''
				
			) t 

			PIVOT(
				SUM( Quantity ) 
				FOR CusId IN ('+ @columns +') 
			) AS pivot_table where Total < OnHand;';
		end
			

		-- execute the dynamic SQL
		--print @sql;

		
		EXECUTE sp_executesql @sql;

		select distinct  'ItemCode' Id, 'Item Code' Title, 'string' ControlType, null GroupNum, 1 OrderNum, 0 IsAutoColumn    union all
		select distinct  'Description' Id, 'Description' Title , 'string' ControlType, null GroupNum, 1 OrderNum, 0 IsAutoColumn    union all
		select distinct  'UOMCode' Id, 'UoM' Title , 'string' ControlType, null GroupNum , 1 OrderNum, 0 IsAutoColumn   union all 
		select distinct  'OnHand' Id, 'OnHand' Title , 'quantity' ControlType, null GroupNum , 1 OrderNum, 0 IsAutoColumn   union all 
		select distinct  'Total' Id, 'Total' Title , 'quantity' ControlType, null GroupNum , 1 OrderNum, 0 IsAutoColumn   union all 

	    select distinct  CusId Id, CusId Title, 'quantity'  ControlType, null GroupNum, 1 OrderNum, 1 IsAutoColumn    from #tmpSalesTable    tmp  union all 
	    select distinct  CusId + 'Division' Id, CusId+ 'Division' Title, 'quantity'  ControlType, null GroupNum, 1 OrderNum, 1 IsAutoColumn    from #tmpSalesTable    tmp  
		drop table #tmpSalesTable
	end

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_InventorySummaryShiftDate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_InventorySummaryShiftDate]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date
AS	
Begin
	DECLARE @Remark AS TABLE
	(
		CompanyCode NVARCHAR(50),
		ShiftId NVARCHAR(50),
		ItemCode NVARCHAR(50),
		TotalQty decimal(19, 6),
		Description  NVARCHAR(500),
		UomCode NVARCHAR(50),
		Type NVARCHAR(50),
		Remarks NVARCHAR(250)
	)

	--INSERT INTO @Remark
	--	SELECT t2.CompanyCode, t2.ShiftId, T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity, t1.Description , t1.UOMCode, 'GI' , ''
	--	FROM T_GoodsIssueLine t1 with (nolock)
	--	left join T_GoodsIssueHeader t2 with (nolock) on t1.INVTId = t2.INVTId 
	--	left join T_ShiftHeader t3 with (nolock) on t2.ShiftId = t3.ShiftId and t3.CompanyCode = t2.CompanyCode
	--	WHERE (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.StoreId = @StoreId  or ISNULL(@StoreId, '')='') 
	--	and  CONVERT(date, t3.CreatedOn ) =  CONVERT(date, @Date) and t2.Status = 'C' and t2.IsCanceled = 'N'
	--	AND ISNULL(t1.BOMId,'') = '' -- theo yeu cau cua Jump
	--	--t2.ShiftId = @ShiftId
	--INSERT INTO @Remark
	--SELECT t2.CompanyCode, t2.ShiftId, T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity, t1.Description , t1.UOMCode, 'Shipment' , ''
	--	FROM T_InventoryLine t1 with (nolock)
	--	left join T_InventoryHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--	left join T_ShiftHeader t3 with (nolock) on t2.ShiftId = t3.ShiftId and t3.CompanyCode = t2.CompanyCode
	--	WHERE t2.DocType = 'S' and(t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.FromStore = @StoreId  or ISNULL(@StoreId, '')='') 
	--	and  CONVERT(date, t3.CreatedOn ) =  CONVERT(date, @Date) and t2.Status = 'C' and t2.IsCanceled = 'N'
	--	--and t2.ShiftId = @ShiftId
	--INSERT INTO @Remark
	--SELECT t2.CompanyCode, t2.ShiftId, T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity, t1.Description , t1.UOMCode, 'Receipt' , ''
	--	FROM T_InventoryLine t1 with (nolock)
	--	left join T_InventoryHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--    left join T_ShiftHeader t3 with (nolock) on t2.ShiftId = t3.ShiftId and t3.CompanyCode = t2.CompanyCode
	--	WHERE t2.DocType = 'R' and (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.ToStore = @StoreId  or ISNULL(@StoreId, '')='')  
	--	and  CONVERT(date, t3.CreatedOn ) =  CONVERT(date, @Date) and t2.Status = 'C' and t2.IsCanceled = 'N'
	--	--and t2.ShiftId = @ShiftId
 --   INSERT INTO @Remark
	--  SELECT t2.CompanyCode, t2.ShiftId, T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity , t1.Description , t1.UOMCode, 'GR' , ''
	--	FROM T_GoodsReceiptLine t1 with (nolock)
	--	left join T_GoodsReceiptHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--	left join T_ShiftHeader t3 with (nolock) on t2.ShiftId = t3.ShiftId and t3.CompanyCode = t2.CompanyCode
	--	WHERE (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.StoreId = @StoreId  or ISNULL(@StoreId, '')='')  
	--	and  CONVERT(date, t3.CreatedOn ) =  CONVERT(date, @Date) and t2.Status = 'C' and t2.IsCanceled = 'N'
	--	--and t2.ShiftId = @ShiftId
 --   INSERT INTO @Remark
	-- SELECT t2.CompanyCode, t2.ShiftId, T1.ItemCode ,SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity , t1.Description , t1.UOMCode, 'GRPO' , ''
	--	FROM T_GoodsReceiptPOLine t1 with (nolock)
	--	left join T_GoodsReceiptPOHeader t2 with (nolock) on t1.PurchaseId = t2.PurchaseId
	--	left join T_ShiftHeader t3 with (nolock) on t2.ShiftId = t3.ShiftId and t3.CompanyCode = t2.CompanyCode
	--	WHERE (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.StoreId = @StoreId  or ISNULL(@StoreId, '')='') 
	--	and  CONVERT(date, t3.CreatedOn ) =  CONVERT(date, @Date) and t2.Status = 'C' and t2.IsCanceled = 'N'
	 
	--select * from @Remark
end
  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_InventorySummaryShiftDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_InventorySummaryShiftDetail]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	DECLARE @Inventory AS TABLE
	(
		CompanyCode NVARCHAR(50),
		TransId NVARCHAR(50),
		ItemCode NVARCHAR(50),
		TotalQty decimal(19, 6),
		Description  NVARCHAR(500),
		UomCode NVARCHAR(50),
		Type NVARCHAR(50),
		Remarks NVARCHAR(250)
	)

	--INSERT INTO @Inventory
	--	SELECT t2.CompanyCode, '', T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity, t1.Description , t1.UOMCode, 'GI' , ''
	--	FROM T_GoodsIssueLine t1 with (nolock)
	--	left join T_GoodsIssueHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--	WHERE (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.StoreId = @StoreId  or ISNULL(@StoreId, '')='')  and t2.ShiftId = @ShiftId  and t2.Status = 'C' and t2.IsCanceled = 'N'
	--		AND ISNULL(t1.BOMId,'') = '' -- theo yeu cau cua Jump
	--INSERT INTO @Inventory
	--SELECT t2.CompanyCode, '', T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity, t1.Description , t1.UOMCode, 'Shipment' , ''
	--	FROM T_InventoryLine t1 with (nolock)
	--	left join T_InventoryHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--	WHERE t2.DocType = 'S' and(t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.FromStore = @StoreId  or ISNULL(@StoreId, '')='') and t2.ShiftId = @ShiftId  and t2.Status = 'C' and t2.IsCanceled = 'N'
	--INSERT INTO @Inventory
	--SELECT t2.CompanyCode, '', T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity, t1.Description , t1.UOMCode, 'Receipt' , ''
	--	FROM T_InventoryLine t1 with (nolock)
	--	left join T_InventoryHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--	WHERE t2.DocType = 'R' and (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.ToStore = @StoreId  or ISNULL(@StoreId, '')='')  and t2.ShiftId = @ShiftId  and t2.Status = 'C' and t2.IsCanceled = 'N'
 --   INSERT INTO @Inventory
	--  SELECT t2.CompanyCode, '', T1.ItemCode , SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity , t1.Description , t1.UOMCode, 'GR' , ''
	--	FROM T_GoodsReceiptLine t1 with (nolock)
	--	left join T_GoodsReceiptHeader t2 with (nolock) on t1.INVTId = t2.INVTId
	--	WHERE (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.StoreId = @StoreId  or ISNULL(@StoreId, '')='')  and t2.ShiftId = @ShiftId  and t2.Status = 'C' and t2.IsCanceled = 'N'
 --   INSERT INTO @Inventory
	-- SELECT t2.CompanyCode, '', T1.ItemCode ,SUM(t1.Quantity) OVER(PARTITION BY T1.ItemCode, t1.UOMCode, t2.ShiftId, T1.companyCode) AS  Quantity , t1.Description , t1.UOMCode, 'GRPO' , ''
	--	FROM T_GoodsReceiptPOLine t1 with (nolock)
	--	left join T_GoodsReceiptPOHeader t2 with (nolock) on t1.PurchaseId = t2.PurchaseId
	--	WHERE (t2.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  AND (t2.StoreId = @StoreId  or ISNULL(@StoreId, '')='') and t2.ShiftId = @ShiftId  and t2.Status = 'C' and t2.IsCanceled = 'N'
	----SELECT CompanyCode,PurchaseId,Comment FROM T_GoodsReceiptPOHeader WHERE CompanyCode = ISNULL(@CompanyCode,CompanyCode) AND StoreId = ISNULL(@StoreId,StoreId) AND   CONVERT(Date,CreatedOn)  BETWEEN @FDATE AND @TDATE

	select * from @Inventory
end
  

  --select * from T_InventoryHeader


  --USP_S_InventorySummaryShiftDetail 'CP001','','JAOF0012107120042'

  --SELECT t2.CompanyCode, t1.INVTId, T1.ItemCode , t1.Quantity , t1.Description , t1.UOMCode, 'GI' , ''
		--FROM T_GoodsIssueLine t1 with (nolock)
		--left join T_GoodsIssueHeader t2 with (nolock) on t1.INVTId = t2.INVTId
		--WHERE t2.CompanyCode = 'CP001' AND t2.StoreId = ISNULL('', t2.StoreId) and t2.ShiftId = 'JAOF0012107120042'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_ItemPriceList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_ItemPriceList] 'CP001', '','',''
CREATE PROCEDURE [dbo].[USP_S_ItemPriceList]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@Keyword nvarchar(50),
	@Merchandise nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select * from (
    -- Insert statements for procedure here 
	select t2.StoreId
		  ,t1.[ItemCode]
		  --,t1.[ItemName]
		  ,t1.[CompanyCode]
		  ,t1.[ProductId]
		  ,t1.[VariantId]
		  ,t1.[CreatedBy]
		  ,t1.[CreatedOn]
		  ,t1.[ModifiedBy]
		  ,t1.[ModifiedOn]
		  ,t1.[Status]
		  ,t1.[CapacityValue]
		  ,t1.[ItemGroupId]
		  ,t1.[SalesTaxCode]
		  ,t1.[PurchaseTaxCode]
		  ,t1.[ItemName]
		  ,t1.[ItemDescription]
		  ,t1.[ItemCategory_1]
		  ,t1.[ItemCategory_2]
		  ,t1.[ItemCategory_3]
		  ,t1.[ForeignName]
		  ,t1.[InventoryUOM]
		  ,t1.[ImageURL]
		  ,t1.[ImageLink]
		  ,t1.[MCId]
		  ,t1.[CustomField1]
		  ,t1.[CustomField2]
		  ,t1.[CustomField3]
		  ,t1.[CustomField4]
		  ,t1.[CustomField5]
		  ,t1.[CustomField6]
		  ,t1.[CustomField7]
		  ,t1.[CustomField8]
		  ,t1.[CustomField9]
		  ,t1.[CustomField10]
		  ,isnull(t2.PriceAfterTax, t1.DefaultPrice) [DefaultPrice]
		  ,t1.[IsSerial]
		  ,t1.[IsBOM]
		  ,t1.[ValidFrom]
		  ,t1.[ValidTo] 
	from M_Item t1 with (nolock)
		--left join M_ItemUOM t3 with (nolock) on t1.ItemCode = t3.ItemCode
		left join M_PriceList t2 with (nolock) on t1.CompanyCode= t2.CompanyCode and t1.ItemCode = t2.ItemCode 
		
	where 1=1 
	--and t3.ItemCode is null
	 
	AND (t1.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')   
	--and t2.StoreId = 
	AND (t1.MCId = @Merchandise  or ISNULL(@Merchandise, '')='')   
	and (isnull(t2.PriceBeforeTax ,0) > 0 or isnull(t2.PriceAfterTax ,0) > 0)
	 and t1.ItemCode like  N'%'+@Keyword+'%' or t1.ProductId like  N'%'+@Keyword+'%' or t1.ItemName like N'%'+@Keyword+'%' or t1.ItemDescription like  N'%'+@Keyword+'%' 
	 --or  t3.BarCode like  N'%'+@Keyword+'%'
	 ) tmp where isnull([DefaultPrice] ,0) > 0
   
END

--select t1.* 
--from  M_Item t1 with (nolock)
-- join M_ItemUOM t3 with (nolock) on t1.ItemCode = t3.ItemCode  
--where t3.ItemCode is null
 

-- select * from M_Pricelist

--   JA060601001
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_BankTerminal]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_M_BankTerminal]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@Id nvarchar(50),
	@CounterId nvarchar(50),
	@PaymentMethod nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	select * from M_BankTerminal where  (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)
	 AND (ISNULL(Convert(nvarchar(50),  @Id), '') = '' OR Id = @Id)
	 and (ISNULL(@CounterId, '') = '' OR CounterId = @CounterId)
	 and (ISNULL(@PaymentMethod, '') = '' OR PaymentMethod = @PaymentMethod)

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Collection]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_M_Collection]
	 
	AS	

  select distinct * from 
  (
  select ItemCategory_1 ItemCategory from M_Item with (nolock) where ISNULL(ItemCategory_1 , '') <> '' 
  union all
  
  select ItemCategory_2 ItemCategory from M_Item  with (nolock) where ISNULL(ItemCategory_2 , '') <> '' 
    union all

  select ItemCategory_3 ItemCategory from M_Item with (nolock) where ISNULL(ItemCategory_3 , '') <> ''
  ) tmp  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Currency]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_S_M_Currency] 
	@CurrencyCode	nvarchar(50) 
AS	
	select * from M_Currency with (nolock)  where   (CurrencyCode = @CurrencyCode  or ISNULL(@CurrencyCode, '') = '')  
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Customer]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_Customer]
	@CompanyCode nvarchar(50),
	@CustomerGrpId	nvarchar(50),
	@CustomerId	nvarchar(50), 
	@Status	nvarchar(50),
	@Key nvarchar(50),
	@Type nvarchar(50),
	@CustomerName nvarchar(50),
	@Address nvarchar(50),
	@Phone	nvarchar(50),
	@DOB	date,
    @CustomerRank nvarchar(50) = null
AS
begin
select * from M_Customer  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (CustomerGrpId = @CustomerGrpId  or ISNULL(@CustomerGrpId, '')='')  
	AND (CustomerId = @CustomerId  or ISNULL(@CustomerId, '')='') 
	and (Status = @Status  or ISNULL(@Status, '') = '')    
	and (CusType = @Type  or ISNULL(@Type, '') = '')   
	and (DOB = @DOB  or ISNULL(convert(nvarchar, @DOB), '') = '') 
	AND (ISNULL(@CustomerRank, '') = '' or CustomerRank like N'%'+@CustomerRank+'%' )  
	AND (ISNULL(@CustomerName, '') = '' or CustomerName like N'%'+@CustomerName+'%' )  
	AND (ISNULL(@Address, '') = '' OR  Address like N'%'+@Address+'%'  )  
	AND (ISNULL(@Phone, '') = '' OR  Phone like N'%'+@Phone+'%'  )  
	AND (ISNULL(@Key, '') = '' OR  CustomerId like N'%'+@Key+'%' OR  CustomerName like N'%'+@Key+'%' OR  Phone like N'%'+@Key+'%' )  
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_CustomerGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_S_M_CustomerGroup '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_CustomerGroup]
	@CompanyCode nvarchar(50),
	@CusGrpId	nvarchar(50),
	@Status	nvarchar(50)
AS
begin
select * from M_CustomerGroup with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (CusGrpId = @CusGrpId  or ISNULL(@CusGrpId, '')='')  
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_DeliveryInfor]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE   PROCEDURE [dbo].[USP_S_M_DeliveryInfor]
	@Id	uniqueidentifier,
	@CustomerId	nvarchar(150)	,
	@CompanyCode	nvarchar(50)	,
	@DeliveryPartner nvarchar(250) NULL,
	@DeliveryId nvarchar(150) NULL,
	@Phone	nvarchar(50)	,
	@Fax	nvarchar(150),
	@Email	nvarchar(150)	,
	@TaxCode	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Name	nvarchar(250)	, 
	@Remarks	nvarchar(MAX)	,
	@Status	char(1)					
AS
begin
select * from M_DeliveryInfor  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (CustomerId = @CustomerId  or ISNULL(@CustomerId, '')='')  
	AND (Phone = @Phone  or ISNULL(@Phone, '')='') 
	and (Fax = @Fax  or ISNULL(@Fax, '') = '')    
	and (Email = @Email  or ISNULL(@Email, '') = '') 
	and (taxCode = @TaxCode  or ISNULL(@TaxCode, '') = '') 
	and (Address = @Address  or ISNULL(@Address, '') = '') 
	and (DeliveryPartner = @DeliveryPartner  or ISNULL(@DeliveryPartner, '') = '') 
	and (DeliveryId = @DeliveryId  or ISNULL(@DeliveryId, '') = '') 
	and (name = @Name  or ISNULL(@Name, '') = '') 
	and (Remarks = @Remarks  or ISNULL(@Remarks, '') = '') 
	and (Status = @Status  or ISNULL(@Status, '') = '') 
	and  (Id = @Id  or ISNULL(Convert(nvarchar(50), @Id), '') = '') 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Denomination]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_EndOfDateList] 'CP001', 'W0101'
CREATE PROCEDURE [dbo].[USP_S_M_Denomination]
	-- Add the parameters for the stored procedure here 
    @Currency nvarchar(50),
	@Value nvarchar(50)
	 
AS
BEGIN 
	 
	select t1.Id, t1.Currency, t1.Name , t1.Description , t1.Value , t1.Status, t1.Remarks, t1.ShowOnPayment ,
	t1.ShowOnDiscount
	from M_Denomination t1 with (nolock) 
	where (ISNULL(@Currency, '') = '' OR t1.Currency = @Currency )    and (ISNULL(@Value, '') = '' OR  t1.Value = @Value )
	order by  t1.Value
	  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Employee]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Employee]
	@CompanyCode nvarchar(50),
	@Position	nvarchar(50),
	@EmployeeId	nvarchar(50), 
	@Status	nvarchar(50)
AS
begin
select * from M_Employee  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (Position = @Position  or ISNULL(@Position, '')='')  
	AND (EmployeeId = @EmployeeId  or ISNULL(@EmployeeId, '')='') 
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_EmployeeByStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_EmployeeByStore] 'CP001', 'ST001' 
CREATE PROCEDURE [dbo].[USP_S_M_EmployeeByStore]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50) 
AS
begin
	select t1.* 
	from M_Employee t1 with (nolock)
	left join M_EmployeeStore t2 with (nolock) on t1.EmployeeId = t2.EmployeeId
	where t1.CompanyCode = @CompanyCode and  t2.StoreId = @StoreId
	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 
 
 --select * from M_EmployeeStore
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_EmployeeByUser]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_EmployeeByUser] 'CP001', 'admin' 
CREATE PROCEDURE [dbo].[USP_S_M_EmployeeByUser]
	@CompanyCode nvarchar(50),
	@UserCode	nvarchar(50) 
AS
begin
	select distinct t1.* 
	from M_Employee t1 with (nolock)
	left join M_EmployeeStore t2 with (nolock) on t1.EmployeeId = t2.EmployeeId
	left JOIN M_UserStore t3 ON t3.StoreId = t2.StoreId
     INNER JOIN M_User t4 ON t4.UserId = t3.UserId
	where t1.CompanyCode = @CompanyCode and  t4.Username = @UserCode
	--isnull(t3.PriceBeforeTax ,0) > 0 and isnull(t3.PriceAfterTax ,0) > 0 or
	 --   
	 --and isnull(t3.PriceAfterTax, isnull( t1.DefaultPrice, 0)) > 0
	
	--and t3.PriceAfterTax > 0 and t3.PriceBeforeTax > 0
end 
 
 --select * from M_Employee where EmployeeId = 'Seng'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ExchangeRate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_M_ExchangeRate] 
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@FromDate Datetime,
	@ToDate Datetime,
	@Currency	nvarchar(50) 
AS	
	select distinct * from M_ExchangeRate  with (nolock) where  CompanyCode = @CompanyCode
	and (StoreId = @StoreId  or ISNULL(@StoreId, '') = '')  
	and (convert(Date, Date) >= convert(Date, @FromDate)  or ISNULL(@FromDate, '') = '')  
	and (convert(Date, Date) <= convert(Date, @ToDate)  or ISNULL(@ToDate, '') = '')  
	and (Currency = @Currency  or ISNULL(@Currency, '') = '')  
    and Status = 'A'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ExchangeRate_ByStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_M_ExchangeRate_ByStore] 
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50), 
	@Currency	nvarchar(50) 
AS	
	select Distinct StoreId, Currency, Status 
	
	from M_StoreCurrency  with (nolock) 
	where  CompanyCode = @CompanyCode
	and (StoreId = @StoreId  or ISNULL(@StoreId, '') = '')   
	and (Currency = @Currency  or ISNULL(@Currency, '') = '')  
	and Status = 'A'



	--select * from M_StoreCurrency
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ExchangeRateIsNullByDate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_ExchangeRateIsNullByDate] 'CP001','JAOF001','2021-08-11'
create   PROCEDURE [dbo].[USP_S_M_ExchangeRateIsNullByDate]
	 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50) ,
	@Date DateTime
AS	

begin
	select t1.*
	from M_StoreCurrency t1 with (nolock)
	left join M_ExchangeRate t2  with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.Currency = t2.Currency  and CONVERT( Date, t2.Date) =  CONVERT( Date, @Date) 
	where t2.Rate is null and  t1.CompanyCode = @CompanyCode and t1.StoreId = @StoreId
	and t1.Status = 'A' and t2.Status = 'A'
end




GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Holiday]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_M_Holiday]
	 
	@CompanyCode	nvarchar(50)	,
	@HldCode	nvarchar(250)	,
	@StrDate	datetime,
	@EndDate	datetime,
	@Rmrks	nvarchar(50)	, 
	@Status	char(1)	,
	@Keyword	char(1)	
	 
AS	 

	select * from M_Holiday with (nolock)
	where  (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	and (ISNULL(@HldCode, '') = '' OR HldCode = @HldCode )
	and (ISNULL(@StrDate, '') = '' OR StrDate = @StrDate )
	and (ISNULL(@EndDate, '') = '' OR EndDate = @EndDate )
	and (ISNULL(@Rmrks, '') = '' OR Rmrks = @Rmrks )
	and (ISNULL(@Status, '') = '' OR Status = @Status )
		AND (ISNULL(@Keyword, '') = '' OR  HldCode like N'%'+@Keyword+'%' OR  Rmrks like N'%'+@Keyword+'%' )  
--		   StrDate	datetime	Checked
--EndDate	datetime	Checked
--Rmrks	nvarchar(150)	Checked
--Status	nvarchar(1)	Checked
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Image]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Image] 'CP001', '', '',''
CREATE PROCEDURE [dbo].[USP_S_M_Image]
	@CompanyCode nvarchar(50),
	@Code	nvarchar(50),  
	@CustomerPhone	nvarchar(50),  
	@Type	nvarchar(50)
AS
begin
select  [Id]
      ,[CompanyCode]
      ,[Type]
      ,[Num]
      --, CONVERT(nvarchar(MAX), [Image] , 0) Image
	  , s  Image
      ,[Description]
      ,[CreateOn]
      ,[CustomerPhone]
      ,[CustomerName] from M_Image  with (nolock)
	   cross apply (select [Image] as '*' for xml path('')) T (s)
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	--AND (Id = @Code  or ISNULL(@Code, '')='')  
	AND (CustomerPhone = @CustomerPhone  or ISNULL(@CustomerPhone, '')='')  
 
	and (Type = @Type  or ISNULL(@Type, '') = '')     
end 


 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_InvoiceInfor]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_InvoiceInfor]
	@Id	uniqueidentifier,
	@CustomerId	nvarchar(150)	,
	@CompanyCode	nvarchar(50)	,
	@Phone	nvarchar(50)	,
	@Fax	nvarchar(150),
	@Email	nvarchar(150)	,
	@TaxCode	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Name	nvarchar(250)	, 
	@Remarks	nvarchar(MAX)	,
	@Status	char(1)					
AS
begin
select * from M_InvoiceInfor  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (CustomerId = @CustomerId  or ISNULL(@CustomerId, '')='')  
	AND (Phone = @Phone  or ISNULL(@Phone, '')='') 
	and (Fax = @Fax  or ISNULL(@Fax, '') = '')    
	and (Email = @Email  or ISNULL(@Email, '') = '') 
	and (taxCode = @TaxCode  or ISNULL(@TaxCode, '') = '') 
	and (Address = @Address  or ISNULL(@Address, '') = '') 
	and (name = @Name  or ISNULL(@Name, '') = '') 
	and (Remarks = @Remarks  or ISNULL(@Remarks, '') = '') 
	and (Status = @Status  or ISNULL(@Status, '') = '') 
	and  (Id = @Id  or ISNULL(Convert(nvarchar(50), @Id), '') = '') 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ItemCollection]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_M_ItemCollection]
	 
	AS	

  select distinct * from 
  (
  select ItemCategory_1 keyId  from M_Item with (nolock) where ISNULL(ItemCategory_1 , '') <> '' 
  union all
  
  select ItemCategory_2 keyId from M_Item  with (nolock) where ISNULL(ItemCategory_2 , '') <> '' 
    union all

  select ItemCategory_3 keyId from M_Item with (nolock) where ISNULL(ItemCategory_3 , '') <> ''
  ) tmp  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ItemGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_ItemGroup]
	@CompanyCode nvarchar(50),
	@IGId	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_ItemGroup  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (IGId = @IGId  or ISNULL(@IGId, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Items]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_S_M_Items 'CP001', NULL
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_M_Items]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@ItemCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT TOP 10000 I.[ItemCode]
		  ,I.[ProductId]
		  ,I.[VariantId]
		  ,I.[ItemName]
		  ,I.[ItemDescription]
		  ,I.[ForeignName]
		  ,I.[InventoryUOM]
		  ,I.[ItemGroupId]
		  ,I.[Status]
		  ,I.[DefaultPrice]
		  ,I.[IsSerial]
		  ,I.[IsBOM]
		  ,I.[CustomField1]
		  ,I.[CustomField2]
		  ,I.[CustomField3]
		  ,I.[CustomField4]
		  ,I.[CustomField5]
		  ,I.[CustomField6]
		  ,I.[CustomField7]
		  ,I.[CustomField8]
		  ,I.[CustomField9]
		  ,I.[CustomField10]
		  ,I.[SalesTaxCode]
		  ,ISNULL(TS.TaxPercent, 0) AS 'SaleTaxPercent'
		  ,I.[PurchaseTaxCode]
		  ,I.[CapacityValue]
		  ,I.[ItemCategory_1]
		  ,I.[ItemCategory_2]
		  ,I.[ItemCategory_3]
		  ,I.[ImageURL]
		  ,I.[ImageLink]
		  ,I.[MCId]
		  ,I.[IsVoucher]
		  ,I.[ValidFrom]
		  ,I.[ValidTo]
	FROM [dbo].[M_Item] I WITH(NOLOCK)
	LEFT JOIN [dbo].[M_Tax] TS WITH(NOLOCK) ON I.CompanyCode = TS.CompanyCode AND I.SalesTaxCode = Ts.TaxCode
	WHERE I.CompanyCode = @CompanyCode AND I.ItemCode LIKE '%' + ISNULL(@ItemCode, '') + '%'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ItemSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_ItemSerial]
	@CompanyCode nvarchar(50),
	@ItemCode	nvarchar(50),  
	@SerialNum	nvarchar(50)
AS
begin
select * from M_ItemSerial  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
 
	and (SerialNum = @SerialNum  or ISNULL(@SerialNum, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ItemSerialStock]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_ItemSerialStock]
	@CompanyCode nvarchar(50),
	@ItemCode	nvarchar(50),  
	@SlocId	nvarchar(50),  
	@SerialNum	nvarchar(50)
AS
begin
select * from M_ItemSerialStock  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')  
	AND (SlocId = @SlocId  or ISNULL(@SlocId, '')='') 
	and (SerialNum = @SerialNum  or ISNULL(@SerialNum, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ItemStoreListing]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_S_M_ItemStoreListing] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ItemCode	nvarchar(50) 
AS	
	select * from M_ItemStoreListing with (nolock) 
	where  CompanyCode =@CompanyCode and  (ItemCode = @ItemCode  or ISNULL(@ItemCode, '') = '')  
          and  (StoreId = @StoreId  or ISNULL(@StoreId, '') = '') 
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ItemUOM]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_ItemUOM]
	@ItemCode nvarchar(50),
	@UomCode	nvarchar(50),   
	@Barcode	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_ItemUOM  with (nolock)
	   
where (ISNULL(@ItemCode, '') = '' OR ItemCode = @ItemCode )
	AND (UomCode = @UomCode  or ISNULL(@UomCode, '')='')   
	AND (Barcode = @Barcode  or ISNULL(@Barcode, '')='') 
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_KeyCap]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_M_KeyCap] 
	@Id	nvarchar(50),
	@Keyword	nvarchar(250)
 
AS	
select [Id]
      ,ISNULL([Name],  UPPER(Id)) [Name]
      ,ISNULL([Description],  UPPER(Id)) [Description]
      ,isnull(Status, 'A') Status
from M_KeyCap 
where  (Id = @Id  or ISNULL(@Id, '') = '')  
          
 and (Id like '%'+@Keyword+'%'   or Name like '%'+@Keyword+'%'   or  Description like '%'+@Keyword+'%'   or  ISNULL(@Keyword, '') = '')  
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_LoyaltyType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_M_LoyaltyType]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [LoyaltyType]
      ,TypeName
      ,[PriorityNo]
      ,[Status]
	FROM [dbo].[M_LoyaltyType]
	WHERE [Status] = 'Y'
	ORDER BY [PriorityNo]
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Merchandise]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Merchandise]
	@CompanyCode nvarchar(50),
	@MCId	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_MerchandiseCategory  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (MCId = @MCId  or ISNULL(@MCId, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_MerchandiseCategory]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_MerchandiseCategory] 'CP001','','',''
CREATE PROCEDURE [dbo].[USP_S_M_MerchandiseCategory]
	
	@CompanyCode	nvarchar(50),
	@MCID	nvarchar(50),
	@Status	nvarchar(50),
	@Keyword 	nvarchar(50)
AS	
begin 
	 select distinct [MCId]
      ,[CompanyCode]
      ,[MCHier]
      ,[MCName]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status]
      ,[isShow]
      ,[OrderNum]
      ,[BarcodePrefix]
      ,[Custom1]
      ,[Custom2]
      ,[Custom3]
	from M_MerchandiseCategory t1 with(nolock) 
	--right join M_Item t2 with(nolock)  on t1.MCId = t2.MCId 

	where ISNULL(t1.MCId,'')<>'' 
	--and ( t1.CompanyCode= @CompanyCode or ISNULL(@CompanyCode, '')='')
	and (t1.MCId= @MCID or ISNULL(@MCID, '')='' )
	and ( t1.Status= @Status or ISNULL(@Status, '')='')
	and (ISNULL(@Keyword, '')='' or t1.MCName like N'%'+@Keyword+'%' or t1.MCId  like N'%'+@Keyword+'%')

end

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_MerchandiseCategoryShow]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_MerchandiseCategoryShow] '','','',''
CREATE PROCEDURE [dbo].[USP_S_M_MerchandiseCategoryShow] 
	@CompanyCode	nvarchar(50),
	@MCID	nvarchar(50),
	@Status	nvarchar(50),
	@Keyword 	nvarchar(50)
AS	
begin 
	declare @Num int= (select count(*)  
	from M_MerchandiseCategory t1 with(nolock) where isShow = 1 )
	if(@Num> 0)
	begin
		select * from M_MerchandiseCategory t1 with(nolock) where isShow = 1 and Status = 'A'
	end
	else
	begin
		 select distinct t1.*  
		from M_MerchandiseCategory t1 with(nolock) 
		right join M_Item t2 with(nolock)  on t1.MCId = t2.MCId 
		left join M_ItemUOM t4 with (nolock) on t4.ItemCode = t2.ItemCode 
		left join M_PriceList t3 with (nolock) on t3.ItemCode = t2.ItemCode and t3.UOMCode= t4.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE()) 
		left join M_UOM t5 with (nolock) on t4.UOMCode = t5.UOMCode

		where ISNULL(t1.MCId,'')<>'' 
		and ( t1.CompanyCode= @CompanyCode or ISNULL(@CompanyCode, '')='')
		and (t1.MCId= @MCID or ISNULL(@MCID, '')='' )
		and ( t1.Status= @Status or ISNULL(@Status, '')='')
		and (ISNULL(@Keyword, '')='' or t1.MCName like N'%'+@Keyword+'%' or t1.MCId  like N'%'+@Keyword+'%')
		and isnull(t3.PriceAfterTax,  0) >0 
		and t1.Status = 'A'
	end
	
end

--select * from M_MerchandiseCategory
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Payment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Payment]
	@CompanyCode nvarchar(50),
	@PaymentCode	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_PaymentMethod  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (PaymentCode = @PaymentCode  or ISNULL(@PaymentCode, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PaymentMethod]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_PaymentMethod] '','CP001','1001'
CREATE PROCEDURE [dbo].[USP_S_M_PaymentMethod]
	@PaymentCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	 
 
AS	
begin
	select t1.PaymentCode, t1.ApiURL ,  t1.Currency ,  t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange, isnull(t1.Status,'A') Status
	,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, isnull(t1.RejectReturn, 0) RejectReturn , 
	isnull(t1.RejectVoid, 0) RejectVoid , isnull(t1.RejectExchange, 0) RejectExchange ,  isnull(t1.EODApply, 1) EODApply,   t1.EODCode , isnull(t1.AllowRefund, 1) AllowRefund,
	t1.RequireTerminal, t1.VoucherCategory  
	--,	isnull(t2.AllowMix, 1) AllowMix, t2.OrderNum
	--, t2.Status,   t2.StoreId,  t2.isShow,
	from M_PaymentMethod t1 with (nolock) 
	--left join M_StorePayment t2 with(nolock) on t1.PaymentCode = t2.PaymentCode
	where t1.CompanyCode =@CompanyCode   
	  --and  (t2.StoreId =@StoreId  or ISNULL(@StoreId, '')='')
	 and  (t1.PaymentCode =@PaymentCode  or ISNULL(@PaymentCode, '')='') 
	 and isnull(t1.Status,'A') = 'A'
	-- and isnull(t2.Status,'A') = 'A'
	--order by t2.OrderNum


end
--[USP_S_M_PaymentMethod] '','CP001','JAOF001'


--select * from M_PaymentMethod
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PaymentMethodMapping]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_M_PaymentMethodMapping] @CompanyCode nvarchar(50), @PaymentCode	nvarchar(150) AS  begin  SELECT * FROM M_PaymentMethodMapping P WITH (NOLOCK)  WHERE (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode ) AND (P.PaymentCode = @PaymentCode OR ISNULL(@PaymentCode, '') = '')  end 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PaymentStoreMapping]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_M_PaymentStoreMapping]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PaymentCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@Status	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT S.StoreId, P.PaymentCode, P.PaymentDesc
	FROM [M_PaymentMethod] P WITH (NOLOCK)
	INNER JOIN [M_StorePayment] S ON S.PaymentCode = P.PaymentCode
	WHERE (ISNULL(@CompanyCode, '') = '' OR P.CompanyCode = @CompanyCode )
	AND (P.PaymentCode = @PaymentCode OR ISNULL(@PaymentCode, '') = '')   
	AND (S.StoreId = @StoreId OR ISNULL(@StoreId, '') = '')
	AND (S.[Status] = @Status  or ISNULL(@Status, '') = '')

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PriceList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_PriceList] 'CP001', '3001', '','',''
CREATE PROCEDURE [dbo].[USP_S_M_PriceList]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),   
	@ItemCode	nvarchar(50),  
	@UomCode	nvarchar(50),  
	@Status	nvarchar(50),
	@PriceListId nvarchar(50) = null
AS
begin



select t1.[CompanyCode]
      ,T1.StoreId
      ,t1.[ItemCode]
      ,[UOMCode]
      ,[BarCode]
      ,t1.[PriceListId]
	  , t3.ItemName
	  , t3.ItemGroupId 
	  , t4.IGName ItemGroupName
	   ,isnull( t2.[PriceListName], t1.[PriceListId]) PriceListName
      ,[PriceBeforeTax]
      ,[PriceAfterTax]

      ,t1.[ValidFrom]
      ,t1.[ValidTo]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
	  ,CASE WHEN ISNULL(t5.ItemCode,'')  = '' then 'Not Listed' else 'Listed' END ListingStatus
from M_PriceList t1 with (nolock)
	  left join M_PriceListName t2  with (nolock) on t1.CompanyCode= t2.CompanyCode and t1.PriceListId = t2.PriceListId
	  left join M_Item t3  with (nolock) on t1.CompanyCode= t3.CompanyCode and t1.ItemCode = t3.ItemCode
	  left join M_ItemGroup t4  with (nolock) on t1.CompanyCode= t3.CompanyCode and t3.ItemGroupId = t4.IGId
	  left join M_ItemStoreListing T5 with (nolock) on t1.CompanyCode= t5.CompanyCode and t1.StoreId = t5.StoreId and t1.ItemCode = t5.ItemCode 
where (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
	AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	 
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='') 
	AND (t1.UomCode = @UomCode  or ISNULL(@UomCode, '')='') 
	and (t1.Status = @Status  or ISNULL(@Status, '') = '')
	AND (t1.PriceListId = @PriceListId or ISNULL(@PriceListId, '') = '')

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PriceListName]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_PriceListName] 'CP001'
CREATE PROCEDURE [dbo].[USP_S_M_PriceListName] 
	@CompanyCode	nvarchar(50)	 
	 
AS	

select distinct t2.PriceListId, isnull(t2.PriceListName, '') PriceListName , isnull(CONVERT(nvarchar(50), t2.Id),'')  Id
	from M_PriceListName t2   with (nolock)  
	left join M_PriceList t1 with (nolock)  on t2.CompanyCode = t1.CompanyCode  and t2.PriceListId = t1.PriceListId 
where   t2.CompanyCode = @CompanyCode
        
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PriorityPriceList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_S_M_PriorityPriceList]
	 
	@CompanyCode	nvarchar(50),
	@CusGrpId	nvarchar(50),
	@Id	nvarchar(50)
 
	
AS	 
begin
	
select [Id]
      ,[CompanyCode]
      ,[CusGrpId]
      ,[CusGrpDesc]
      ,[PriceListId]
      ,[Priority]
      ,LTRIM(RTRIM( [Status])) Status
      ,[CreatedOn]
      ,[CreatedBy]
      ,[ModifiedOn]
      ,[ModifiedBy]
from M_PriorityPriceList with (nolock) 
where CompanyCode = @CompanyCode
	and (CusGrpId = @CusGrpId  or ISNULL(@CusGrpId, '') = '')  
	and (convert( nvarchar(50),Id) = @Id  or ISNULL(@Id, '') = '')  
    end
	 
	-- [USP_S_M_PriorityPriceList] '', 'CP001',''
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Product]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Product]
	@CompanyCode nvarchar(50),
	@ProductId	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_Product  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (ProductId = @ProductId  or ISNULL(@ProductId, '')='')    
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_PromoType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_M_PromoType]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PromoType]
      ,TypeName
      ,[PriorityNo]
      ,[Status]
	FROM [dbo].[M_PromoType] WITH (NOLOCK) 
	WHERE [Status] = 'Y'
	ORDER BY [PriorityNo]
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Reason]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_M_Reason]
	@Id nvarchar(50),
	@CompanyCode	nvarchar(50) 
	 
	
AS	select * from [dbo].[M_Reason]
       
		where  CompanyCode = @CompanyCode and  (CONVERT(nvarchar(50), Id) = @Id  or ISNULL(@Id, '')='')  
  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Serial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_S_M_Serial]
	@Id	nvarchar(50),
	@CompanyCode	nvarchar(50), 
	@Prefix	nvarchar(50), 
	@Keyword	nvarchar(150)
 

AS	 
select * from M_Serial with (nolock) where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
and (ISNULL( @Id, '') = '' OR Id = @Id )
and (ISNULL(@Prefix, '') = '' OR Prefix = @Prefix )
   
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Shipping]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_S_M_Shipping]
	@CompanyCode	nvarchar(50)	,
    @ShippingCode	nvarchar(50)	 ,
	@Key	nvarchar(50)

 
AS	
	select * from M_Shipping with (nolock) 
	where CompanyCode= @CompanyCode 
	and ( isnull(@ShippingCode, '') = '' or ShippingCode= @ShippingCode)
	and ( isnull(@ShippingCode, '') = '' or ShippingCode like @Key)

 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ShortcutKeyboard]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesInvoice( 'SOCP001JAOF00100000452;', 'CP001')
-- =============================================
CREATE   PROCEDURE [dbo].[USP_S_M_ShortcutKeyboard]
	-- Add the parameters for the stored procedure here
	 
	@CompanyCode nvarchar(50),
	@Id nvarchar(50),
	@Name nvarchar(50),
	@Filter nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select * from M_ShortcutKeyboard with (nolock) 
	where CompanyCode = @CompanyCode 
	AND (convert(nvarchar(50), Id) = @Id  or ISNULL(@Id, '')='')  
	 
	and Name like '%'+@Name+'%' 
	and FunctionCode like '%'+@Filter+'%'
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_ShortcutKeyboardByFunction]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesInvoice( 'SOCP001JAOF00100000452;', 'CP001')
-- =============================================
CREATE   PROCEDURE [dbo].[USP_S_M_ShortcutKeyboardByFunction]
	-- Add the parameters for the stored procedure here
	 
	@CompanyCode nvarchar(50), 
	@FunctionCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select * from M_ShortcutKeyboard with (nolock) 
	where CompanyCode = @CompanyCode  
	and FunctionCode = @FunctionCode 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Storage]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_Storage]
	@CompanyCode nvarchar(50),
	@SlocId	nvarchar(50),   
	@WhsCode nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_Storage  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (SlocId = @SlocId  or ISNULL(@SlocId, '')='')   
	AND (WhsCode = @WhsCode  or ISNULL(@WhsCode, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Store]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Store]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_Store  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_StoreArea]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_StoreArea]
	@CompanyCode nvarchar(50),
	@StoreAreaType	nvarchar(50), 
	@StoreAreaId	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_StoreArea  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (StoreAreaType = @StoreAreaType  or ISNULL(@StoreAreaType, '')='')    
	AND (StoreAreaId = @StoreAreaId  or ISNULL(@StoreAreaId, '')='')    
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_StoreCapacity]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_StoreCapacity]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),  
	@StoreAreaId	nvarchar(50),  
	@TimeFrameId	nvarchar(50),  
	@Status	nvarchar(50)
AS
begin
select * from M_StoreCapacity  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')  
	AND (StoreAreaId = @StoreAreaId  or ISNULL(@StoreAreaId, '')='') 
	and (TimeFrameId = @TimeFrameId  or ISNULL(@TimeFrameId, '') = '')    
	and (Status = @Status  or ISNULL(@Status, '') = '')  
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_StoreCurrency]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_S_M_StoreCurrency] 
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@Currency	nvarchar(50) 
AS	
	select distinct t1.Id, t1.CompanyCode, t1.StoreId, t1.Currency, t1.Status, t2.CurrencyName, t2.Rounding RoundingMethod
	--isnull( t3.Rate, 1) Rate ,
	from M_StoreCurrency t1 with (nolock)
	left join M_Currency t2 with (nolock) on t1.Currency = t2.CurrencyCode
	--left join M_ExchangeRate t3 with (nolock) on t1.CompanyCode = t3.CompanyCode and t1.StoreId = t3.StoreId and t3.Currency = t1.Currency
	where  t1.CompanyCode = @CompanyCode
	and (t1.StoreId = @StoreId  or ISNULL(@StoreId, '') = '')  
	and (t1.Currency = @Currency  or ISNULL(@Currency, '') = '')
	--and t3.Date = (select top 1 Date from M_ExchangeRate with (nolock) where CompanyCode = @CompanyCode and StoreId = @StoreId and Currency = t1.Currency order by Date desc)

	--and t3.Status = 'A'

-- select * from M_ExchangeRate

--[USP_S_M_StoreCurrency] 'CP001','1001',''

	--select * from M_ExchangeRate
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_StoreGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_StoreGroup]
	@CompanyCode nvarchar(50),
	@StoreGroupId	nvarchar(50),  
 
	@Status	nvarchar(50)
AS
begin
select * from M_StoreGroup  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (StoreGroupId = @StoreGroupId  or ISNULL(@StoreGroupId, '')='')  
 
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_StorePayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_StorePayment]
	 
	@StoreId	nvarchar(50),  
	@PaymentCode	nvarchar(50),  
	@Status	nvarchar(50)
AS
begin
select * from M_StorePayment  with (nolock)
	   
where  (StoreId = @StoreId  or ISNULL(@StoreId, '')='')  
 and (PaymentCode = @PaymentCode  or ISNULL(@PaymentCode, '') = '')   
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_StorePaymentByStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_StorePaymentByStore] '','CP001','1001', 'SystemTest' , '1'
CREATE PROCEDURE [dbo].[USP_S_M_StorePaymentByStore]
	@PaymentCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50),
	@CounterId	nvarchar(50)	= null,
	@IsSetup	bit	= null
 
AS	
begin
     
    if(isnull(@CounterId,'') = '')
	begin
		select * 
		into #tmpStorePayment from 
		(
		 --  select distinct t1.PaymentCode, t1.ApiURL , t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange,  ISNULL(t1.AllowRefund, 1)  AllowRefund
			--,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, ISNULL(t1.RejectReturn, 0)  RejectReturn, ISNULL(t1.RejectVoid, 0) RejectVoid, ISNULL(t1.RejectExchange, 0) RejectExchange
			--,	1 AllowMix, 1 OrderNum, t1.FatherId
			--,'A' Status, @StoreId  StoreId, 1 isShow,  1 EODApply,  t1.EODCode, t1.Currency, '' TerminalIdDefault, t1.RequireTerminal, t1.VoucherCategory, t1.BankPaymentType, t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
			--,'' BankCustomF1, '' BankCustomF2, '' BankCustomF3, '' BankCustomF4, '' BankCustomF5
			--from M_PaymentMethod t1 with (nolock) 
		 
			--where t1.CompanyCode =@CompanyCode    
			-- and t1.PaymentCode in (select distinct FatherId  from M_PaymentMethod where ISNULL(FatherId, '') <> '')
			 
			-- union all

			select distinct t1.PaymentCode, t1.ApiURL , t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange,  ISNULL(t1.AllowRefund, 1)  AllowRefund
			,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, ISNULL(t1.RejectReturn, 0)  RejectReturn, ISNULL(t1.RejectVoid, 0) RejectVoid, ISNULL(t1.RejectExchange, 0) RejectExchange
			,	isnull(t2.AllowMix, 1) AllowMix, t2.OrderNum, 
				t3.CustomF1 BankPaymentType, t3.FatherId FatherId 
				 --t1.BankPaymentType,t1.FatherId
			, t2.Status,   t2.StoreId, ISNULL( t2.isShow, 1) isShow,  ISNULL( t1.EODApply, 1) EODApply,  t1.EODCode, t1.Currency, '' TerminalIdDefault,
			t1.RequireTerminal, t1.VoucherCategory, t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
			,'' BankCustomF1, '' BankCustomF2, '' BankCustomF3, '' BankCustomF4, '' BankCustomF5
			from M_PaymentMethod t1 with (nolock) 
			left join M_StorePayment t2 with(nolock) on t1.PaymentCode = t2.PaymentCode
			-- Chỉnh sửa lại ngày 10/5/2022 để 1 con nhiều cha
			left join M_PaymentMethodMapping t3 with(nolock) on t1.PaymentCode = t3.PaymentCode and t1.CompanyCode = t3.CompanyCode
			--left join M_BankTerminal t3  with(nolock) on t1.CompanyCode =t3.CompanyCode and t1.PaymentCode = t3.PaymentMethod and  (t3.CounterId =@CounterId  or ISNULL(@CounterId, '')='') 
			where t1.CompanyCode =@CompanyCode   
			  and  (t2.StoreId =@StoreId  or ISNULL(@StoreId, '')='')
			 and  (t2.PaymentCode =@PaymentCode  or ISNULL(@PaymentCode, '')='') 
	 
			 and isnull(t1.Status,'A') = 'A' 


			

		 ) tmp
		 --and isnull(t2.Status,'A') = 'A'
		order by OrderNum


		if @IsSetup = 1
		begin
			select distinct PaymentCode, ApiURL , IsRequireRefnum, PaymentType , AllowChange,  AllowRefund, CompanyCode, PaymentDesc, ShortName,ForfeitCode,
			 RejectReturn,  RejectVoid,  RejectExchange, AllowMix, OrderNum,  '' BankPaymentType, '' FatherId , Status,   StoreId,  isShow,    EODApply, EODCode, Currency,
			 TerminalIdDefault,  RequireTerminal, VoucherCategory,CustomF1,CustomF2, CustomF3,CustomF4, CustomF5 , BankCustomF1,   BankCustomF2,  BankCustomF3, 
			 BankCustomF4,   BankCustomF5 
			from
			(
				select * from #tmpStorePayment
				union all
				select distinct t1.PaymentCode, t1.ApiURL , t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange,  ISNULL(t1.AllowRefund, 1)  AllowRefund
				,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, ISNULL(t1.RejectReturn, 0)  RejectReturn, 
				ISNULL(t1.RejectVoid, 0) RejectVoid, ISNULL(t1.RejectExchange, 0) RejectExchange, 0 AllowMix, null OrderNum, t1.BankPaymentType, t1.FatherId
				, 'I' Status,   @StoreId StoreId, 0 isShow,  ISNULL( t1.EODApply, 1) EODApply,  t1.EODCode, t1.Currency, '' TerminalIdDefault, t1.RequireTerminal, 
				t1.VoucherCategory,  t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
				,'' BankCustomF1, '' BankCustomF2, '' BankCustomF3, '' BankCustomF4, '' BankCustomF5 
				from M_PaymentMethod t1
				left join #tmpStorePayment  t2 on t1.CompanyCode= t2.CompanyCode and t1.PaymentCode = t2.PaymentCode
				where t1.CompanyCode = @CompanyCode and t2.PaymentCode is null
				and isnull(t1.Status,'A') = 'A' 
			) tmp
			order by OrderNum
			drop table #tmpStorePayment
		end
		else
		begin
			select * from #tmpStorePayment order by OrderNum
			drop table #tmpStorePayment
		end 
	end
	else
	begin
		select * 
		into #tmpStorePayment2 
		from  
		(
	  --    select distinct t1.PaymentCode, t1.ApiURL , t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange,  ISNULL(t1.AllowRefund, 1)  AllowRefund
			--,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, ISNULL(t1.RejectReturn, 0)  RejectReturn, ISNULL(t1.RejectVoid, 0) RejectVoid, ISNULL(t1.RejectExchange, 0) RejectExchange
			--,	1 AllowMix, 1 OrderNum, t1.FatherId
			--,'A' Status, @StoreId  StoreId, 1 isShow,  1 EODApply,  t1.EODCode, t1.Currency, '' TerminalIdDefault, t1.RequireTerminal, t1.VoucherCategory, t1.BankPaymentType, t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
			--,'' BankCustomF1, '' BankCustomF2, '' BankCustomF3, '' BankCustomF4, '' BankCustomF5
			--from M_PaymentMethod t1 with (nolock) 
		 
			--where t1.CompanyCode =@CompanyCode   
		 
			-- and t1.PaymentCode in (select distinct FatherId  from M_PaymentMethod where ISNULL(FatherId, '') <> '')
		 
			-- union all

			select distinct t1.PaymentCode, t1.ApiURL , t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange,  ISNULL(t1.AllowRefund, 1)  AllowRefund
			,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, ISNULL(t1.RejectReturn, 0)  RejectReturn, ISNULL(t1.RejectVoid, 0) RejectVoid, ISNULL(t1.RejectExchange, 0) RejectExchange
			,	isnull(t2.AllowMix, 1) AllowMix, t2.OrderNum,
			t4.CustomF1 BankPaymentType, t4.FatherId FatherId 
			--t1.BankPaymentType, t1.FatherId
			, t2.Status,   t2.StoreId, ISNULL( t2.isShow, 1) isShow,  ISNULL( t1.EODApply, 1) EODApply,  t1.EODCode, t1.Currency, t3.TerminalIdDefault,
			t1.RequireTerminal, t1.VoucherCategory,  t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
			, t3.CustomF1 BankCustomF1, t3.CustomF2 BankCustomF2, t3.CustomF3 BankCustomF3, t3.CustomF4 BankCustomF4,t3.CustomF5 BankCustomF5
			from M_PaymentMethod t1 with (nolock) 
			left join M_StorePayment t2 with(nolock) on t1.PaymentCode = t2.PaymentCode
				-- Chỉnh sửa lại ngày 10/5/2022 để 1 con nhiều cha
			left join M_PaymentMethodMapping t4 with(nolock) on t1.PaymentCode = t4.PaymentCode and t1.CompanyCode = t4.CompanyCode
			left join M_BankTerminal t3  with(nolock) on t1.CompanyCode =t3.CompanyCode and t1.PaymentCode = t3.PaymentMethod and  (t3.CounterId =@CounterId  or ISNULL(@CounterId, '')='') 
			--left join M_BankTerminal t4  with(nolock) on t1.CompanyCode =t4.CompanyCode and t1.FatherId = t4.PaymentMethod  and  (t4.CounterId =@CounterId  or ISNULL(@CounterId, '')='') 
			where t1.CompanyCode =@CompanyCode   
			  and  (t2.StoreId =@StoreId  or ISNULL(@StoreId, '')='')
			 and  (t2.PaymentCode =@PaymentCode  or ISNULL(@PaymentCode, '')='') 
	 
			 and isnull(t1.Status,'A') = 'A' 
		 --and isnull(t2.Status,'A') = 'A'
		 ) tmp
		 --and isnull(t2.Status,'A') = 'A'
		order by OrderNum

		if @IsSetup = 1
		begin
			select distinct PaymentCode, ApiURL , IsRequireRefnum, PaymentType , AllowChange,  AllowRefund, CompanyCode, PaymentDesc, ShortName,ForfeitCode,
			 RejectReturn,  RejectVoid,  RejectExchange, AllowMix, OrderNum,  '' BankPaymentType, '' FatherId , Status,   StoreId,  isShow,    EODApply, EODCode, Currency,
			 TerminalIdDefault,  RequireTerminal, VoucherCategory,CustomF1,CustomF2, CustomF3,CustomF4, CustomF5 , BankCustomF1,   BankCustomF2,  BankCustomF3, 
			 BankCustomF4,   BankCustomF5 
			from
			(
				select * from #tmpStorePayment2
				union all
				select distinct t1.PaymentCode, t1.ApiURL , t1.IsRequireRefnum, t1.PaymentType , t1.AllowChange,  ISNULL(t1.AllowRefund, 1)  AllowRefund
				,t1.CompanyCode, t1.PaymentDesc, isnull(t1.ShortName, t1.PaymentDesc) ShortName,  t1.ForfeitCode, ISNULL(t1.RejectReturn, 0)  RejectReturn, 
				ISNULL(t1.RejectVoid, 0) RejectVoid, ISNULL(t1.RejectExchange, 0) RejectExchange, 0 AllowMix, null OrderNum,  t1.BankPaymentType, t1.FatherId
				, 'I' Status,   @StoreId StoreId, 0 isShow,  ISNULL( t1.EODApply, 1) EODApply,  t1.EODCode, t1.Currency, '' TerminalIdDefault, t1.RequireTerminal, 
				t1.VoucherCategory, t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
				,'' BankCustomF1, '' BankCustomF2, '' BankCustomF3, '' BankCustomF4, '' BankCustomF5 
				from M_PaymentMethod t1
				left join #tmpStorePayment2  t2 on t1.CompanyCode= t2.CompanyCode and t1.PaymentCode = t2.PaymentCode
				where t1.CompanyCode = @CompanyCode and t2.PaymentCode is null
				and isnull(t1.Status,'A') = 'A' 
			) tmp
			order by OrderNum
			drop table #tmpStorePayment2
		end
		else
		begin
			select * from #tmpStorePayment2 order by OrderNum
			drop table #tmpStorePayment2
		end 
	end
	


end
--[USP_S_M_PaymentMethod] '','CP001','JAOF001'


--[USP_S_M_StorePaymentByStore] '','CP001','8002' ,'SystemTest', 1


 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Tax]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Tax]
	@CompanyCode nvarchar(50),
	@TaxCode	nvarchar(50),  
	@Status	nvarchar(50)
AS
begin
select * from M_Tax  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (TaxCode = @TaxCode  or ISNULL(@TaxCode, '')='')  
 
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_TimeFrame]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_TimeFrame]
	@CompanyCode nvarchar(50),
	@TimeFrameId nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select * from M_TimeFrame  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (TimeFrameId = @TimeFrameId  or ISNULL(@TimeFrameId, '')='')   
	and (Status = @Status  or ISNULL(@Status, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_UOM]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_M_UOM]
	@CompanyCode nvarchar(50),
	@UomCode	nvarchar(50),  
	@Status	nvarchar(50)
AS
begin
select [UOMCode]
      ,[CompanyCode]
      ,[UOMName]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status] 
      ,isnull([AllowDecimal], 1) AllowDecimal

from M_UOM  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (UomCode = @UomCode  or ISNULL(@UomCode, '')='')  
 
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_User]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_User]
	@CompanyCode nvarchar(50),
	@UserName	nvarchar(50), 
	@Status	nvarchar(50)
AS
begin
select * from M_User  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (UserName = @UserName  or ISNULL(@UserName, '')='')  
 
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_UserStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_UserStore]
	@UserId nvarchar(50),
	@StoreId	nvarchar(50) 
AS
begin
select * from M_UserStore  with (nolock)
	   
where StoreId = @StoreId and UserId = @UserId   
 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_UserWRole]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_S_M_UserWRole] @CompanyCode nvarchar(50), @UserId	nvarchar(150), @UserName	nvarchar(150) = null AS begin  
select a.* , b.RoleId RoleId, c.RoleName RoleName  
from M_User a with (nolock)  left join M_UserRole b with (nolock) on a.UserId = b.UserId  
left join M_Role c with (nolock) on c.RoleId = b.RoleId  
where (ISNULL(@CompanyCode, '') = '' OR a.CompanyCode = @CompanyCode ) 
AND (convert(nvarchar(150), a.UserId) = @UserId  or ISNULL(@UserId, '')='') 
and (ISNULL(@UserName, '') = '' OR a.Username = @UserName ) 
end
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_Warehouse]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_M_Warehouse]
	@CompanyCode nvarchar(50),
	@WhsCode	nvarchar(50),
	@WhsType	nvarchar(50), 
	@Status	nvarchar(50)
AS
begin
select * from M_Warehouse  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (WhsCode = @WhsCode  or ISNULL(@WhsCode, '')='')  
	AND (WhsType = @WhsType  or ISNULL(@WhsType, '')='') 
	and (Status = @Status  or ISNULL(@Status, '') = '')    

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_M_WhsbyStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec [USP_S_M_WhsbyStore] 'CP001', 'FMDC', ''
Create PROCEDURE [dbo].[USP_S_M_WhsbyStore]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),   
	@Status	nvarchar(50)
AS
begin
select DISTINCT t1.StoreID,t3.*
from M_StoreWarehouse t1 with (nolock)
inner join M_Warehouse t3 on t1.StoreID = t3.StoreId
	   
where (ISNULL(@CompanyCode, '') = '' OR t3.CompanyCode = @CompanyCode )
	AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (t3.Status = @Status  or ISNULL(@Status, '') = '') 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_POSOption]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_POSOption] 
	@Type	nvarchar(50) 
 
AS
begin
select * from S_POSOption with (nolock)  
	   
where   (Type = @Type  or ISNULL(@Type, '')='')  
	 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_POSOptionType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_S_POSOptionType] 
 
AS
begin
select distinct Type from S_POSOption with (nolock)  where Status = 'A'
	  
	 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_BarcodeSetup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_S_BarcodeSetup]
	@CompanyCode [nvarchar](50) ,
	@Id [nvarchar](50)  , 
	@Keyword [nvarchar](250)  
	 
AS	
select * from S_BarcodeSetup with (nolock)
   

where  (CompanyCode =@CompanyCode  or ISNULL(@CompanyCode, '')='')     
and  (convert(nvarchar(50) , Id) =@Id  or ISNULL(@Id, '')='')   and (Name like '%'+@Keyword+'%'  or ISNULL(@Keyword, '')='')   
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_CheckPromotions]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_S_CheckPromotions]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@PromoType int,
	@CustomerCode nvarchar(50),
	@CustomerGrp nvarchar(50),
	@CurrentDate date,
	@CurrentTime int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@TotalBuy decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	-- logic đi kèm ở store USP_S_S_GetSchemaPromo, USP_S_S_SchemaLineCheck, USP_S_S_CheckPromotions
	
	DECLARE @OPROMO AS TABLE
      ( 
		PromoId nvarchar(50),
		CompanyCode nvarchar(50),
		PromoType int,
		PromoName NVARCHAR(250)
      ) ;

	INSERT INTO @OPROMO
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
 
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 WITH (NOLOCK)  ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 WITH (NOLOCK) on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'C'
		AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		AND T1.CustomerValue = @CustomerCode
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

		 
	UNION ALL
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 WITH (NOLOCK)  ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 WITH (NOLOCK)  on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'G'
		AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

	UNION ALL
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  
	FROM S_PromoHeader T0
		--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
		INNER Join S_PromoStore T2 WITH (NOLOCK)  on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'A'
		AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		--AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

	--------------------------------------------------------------------------------------
	UNION ALL

	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
 
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		INNER JOIN S_SchemaLine T3 ON T0.CompanyCode = T3.CompanyCode AND T0.PromoId = T3.PromoId
		INNER JOIN S_PromoSchema T4 ON T4.CompanyCode = T3.CompanyCode AND T4.SchemaId = T3.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'C'
		AND ISNULL(T0.IsCombine, 'N') = 'Y'
		AND ISNULL(T4.[Status], 'N') <> 'Y'	-----------------------
		AND T1.CustomerValue = @CustomerCode
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

		 
	UNION ALL
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		INNER JOIN S_SchemaLine T3 ON T0.CompanyCode = T3.CompanyCode AND T0.PromoId = T3.PromoId
		INNER JOIN S_PromoSchema T4 ON T4.CompanyCode = T3.CompanyCode AND T4.SchemaId = T3.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'G'
		AND ISNULL(T0.IsCombine, 'N') = 'Y'
		AND ISNULL(T4.[Status], 'N') <> 'Y'	-----------------------
		AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

	UNION ALL
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  
	FROM S_PromoHeader T0
		--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
		INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		INNER JOIN S_SchemaLine T3 ON T0.CompanyCode = T3.CompanyCode AND T0.PromoId = T3.PromoId
		INNER JOIN S_PromoSchema T4 ON T4.CompanyCode = T3.CompanyCode AND T4.SchemaId = T3.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'A'
		AND ISNULL(T0.IsCombine, 'N') = 'Y'
		AND ISNULL(T4.[Status], 'N') <> 'Y'	-----------------------
		--AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)
	
	--SELECT T0.[PromoId]
	--	  ,T0.[CompanyCode]
	--	  ,T0.[PromoType]
	--	  ,T0.[PromoName]
		  
	--FROM S_PromoHeader T0
	--	--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
	--		--INNER Join S_PromoStore t2 on t0.PromoId = t2.PromoId
	--WHERE T0.CompanyCode = @CompanyCode
	----and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 
	--	AND ISNULL(T0.Status, 'N') = 'Y'
	--	AND ISNULL(T0.IsVoucher, 0) = 1


	--SELECT DISTINCT H.PromoId, H.CompanyCode, H.PromoName, T.TypeName, H.CreatedOn
	SELECT DISTINCT H.PromoId
		,H.CompanyCode
		,H.PromoType
		,T.TypeName AS 'PromoTypeName'
		,H.PromoName
		,H.[CustomerType]
		,H.[ValidDateFrom]
		,H.[ValidDateTo]
		,H.[ValidTimeFrom]
		,H.[ValidTimeTo]
		,H.[IsMon]
		,H.[IsTue]
		,H.[IsWed]
		,H.[IsThu]
		,H.[IsFri]
		,H.[IsSat]
		,H.[IsSun]
		,H.[TotalBuyFrom]
		,H.[TotalBuyTo]
		,H.[TotalGetType]
		,H.[TotalGetValue]
		,H.[MaxTotalGetValue]
		,H.[IsCombine]
		,H.[IsVoucher]
		,H.[CreatedBy]
		,H.[CreatedOn]
		,H.[ModifiedBy]
		,H.[ModifiedOn]
		,H.[Status]
		,H.[SAPPromoId]
		,H.[SAPBonusBuyId]
		,H.[MaxQtyByReceipt]
		,H.[MaxQtyByStore]
	FROM S_PromoHeader H
	INNER JOIN @OPROMO P ON H.PromoId = P.PromoId AND H.CompanyCode = P.CompanyCode
	INNER JOIN M_PromoType T WITH (NOLOCK)  ON H.PromoType = T.PromoType

	ORDER BY H.CreatedOn DESC

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_CheckPromotionsBySchema]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- USP_S_S_CheckPromotionsBySchema 'CP001', '1001', '0', '1001', '2', '2022-01-22', 058, 'Y', '', '', '', '', '', '', '222', 'PSCP00100000017'

CREATE PROCEDURE [dbo].[USP_S_S_CheckPromotionsBySchema]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@PromoType int,
	@CustomerCode nvarchar(50),
	@CustomerGrp nvarchar(50),
	@CurrentDate date,
	@CurrentTime int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@TotalBuy decimal(19, 6),
	@SchemaId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	-- logic đi kèm ở store USP_S_S_GetSchemaPromo, USP_S_S_SchemaLineCheck, USP_S_S_CheckPromotions
	
	DECLARE @OPROMO AS TABLE
      ( 
		PromoId nvarchar(50),
		CompanyCode nvarchar(50),
		PromoType int,
		PromoName NVARCHAR(250),
		IsApply CHAR(1)
      ) ;

	INSERT INTO @OPROMO
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T3.[IsApply]
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
		INNER JOIN S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		INNER JOIN S_SchemaLine T3 ON T0.CompanyCode = T3.CompanyCode AND T0.PromoId = T3.PromoId
		INNER JOIN S_PromoSchema T4 ON T4.CompanyCode = T3.CompanyCode AND T4.SchemaId = T3.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'C'
		AND ISNULL(T0.IsCombine, 'N') = 'Y'
		AND ISNULL(T4.[Status], 'N') = 'Y'	-----------------------
		AND T1.CustomerValue = @CustomerCode
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)
		AND T4.SchemaId = @SchemaId

		 
	UNION ALL
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T3.[IsApply]
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
		INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		INNER JOIN S_SchemaLine T3 ON T0.CompanyCode = T3.CompanyCode AND T0.PromoId = T3.PromoId
		INNER JOIN S_PromoSchema T4 ON T4.CompanyCode = T3.CompanyCode AND T4.SchemaId = T3.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'G'
		AND ISNULL(T0.IsCombine, 'N') = 'Y'
		AND ISNULL(T4.[Status], 'N') = 'Y'	-----------------------
		AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)
		AND T4.SchemaId = @SchemaId

	UNION ALL
	
	SELECT DISTINCT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T3.[IsApply]
	FROM S_PromoHeader T0
		--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
		INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		INNER JOIN S_SchemaLine T3 ON T0.CompanyCode = T3.CompanyCode AND T0.PromoId = T3.PromoId
		INNER JOIN S_PromoSchema T4 ON T4.CompanyCode = T3.CompanyCode AND T4.SchemaId = T3.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.[Status], 'N') = 'Y'
		AND (ISNULL(@PromoType, 0) = 0 OR T0.PromoType = @PromoType)
		AND T0.CustomerType = 'A'
		AND ISNULL(T0.IsCombine, 'N') = 'Y'
		AND ISNULL(T4.[Status], 'N') = 'Y'	-----------------------
		--AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)
		AND T4.SchemaId = @SchemaId
	
	--SELECT T0.[PromoId]
	--	  ,T0.[CompanyCode]
	--	  ,T0.[PromoType]
	--	  ,T0.[PromoName]
		  
	--FROM S_PromoHeader T0
	--	--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
	--		--INNER Join S_PromoStore t2 on t0.PromoId = t2.PromoId
	--WHERE T0.CompanyCode = @CompanyCode
	----and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 
	--	AND ISNULL(T0.Status, 'N') = 'Y'
	--	AND ISNULL(T0.IsVoucher, 0) = 1


	--SELECT DISTINCT H.PromoId, H.CompanyCode, H.PromoName, T.TypeName, H.CreatedOn
	SELECT DISTINCT H.PromoId
		,H.CompanyCode
		,H.PromoType
		,T.TypeName AS 'PromoTypeName'
		,H.PromoName
		,H.[CustomerType]
		,H.[ValidDateFrom]
		,H.[ValidDateTo]
		,H.[ValidTimeFrom]
		,H.[ValidTimeTo]
		,H.[IsMon]
		,H.[IsTue]
		,H.[IsWed]
		,H.[IsThu]
		,H.[IsFri]
		,H.[IsSat]
		,H.[IsSun]
		,H.[TotalBuyFrom]
		,H.[TotalBuyTo]
		,H.[TotalGetType]
		,H.[TotalGetValue]
		,H.[MaxTotalGetValue]
		,H.[IsCombine]
		,H.[IsVoucher]
		,H.[CreatedBy]
		,H.[CreatedOn]
		,H.[ModifiedBy]
		,H.[ModifiedOn]
		,H.[Status]
		,H.[SAPPromoId]
		,H.[SAPBonusBuyId]
		,P.[IsApply]
		,H.[MaxQtyByReceipt]
		,H.[MaxQtyByStore]
	FROM S_PromoHeader H
	INNER JOIN @OPROMO P ON H.PromoId = P.PromoId AND H.CompanyCode = P.CompanyCode
	INNER JOIN M_PromoType T WITH (NOLOCK)  ON H.PromoType = T.PromoType

	ORDER BY H.CreatedOn DESC

END

-- USP_S_S_CheckPromotionsBySchema 'CP001', '1001', '0', '1001', '2', '2022-01-22', 058, 'Y', '', '', '', '', '', '', '222', 'PSCP00100000017'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_CurrencyRoundingOff]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_S_CurrencyRoundingOff] 
	@Id	nvarchar(50), 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)
	 
AS	


select * from   [dbo].[S_CurrencyRoundingOff] with (nolock)
        
		where  CompanyCode= @CompanyCode AND (ISNULL( CONVERT(nvarchar(50),@Id) , '') = '' OR CONVERT(nvarchar(50),Id) = @Id) AND (ISNULL(@StoreId, '') = '' OR StoreId = @StoreId)
           
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_DataSourceEdit]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create   PROCEDURE [dbo].[USP_S_S_DataSourceEdit]
	 
	@CompanyCode	nvarchar(50),
	@DataSource	nvarchar(50)	,
	@Id	nvarchar(50)	 
	 
AS
BEGIN
	select * from S_S_DataSourceEdit where CompanyCode= @CompanyCode and   (DataSource =@DataSource  or ISNULL(@DataSource, '')='')    
	 and   (CONVERT(nvarchar(50), Id) =@Id  or ISNULL(@Id, '')='')   
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_GetLoyaltyByType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_S_S_GetLoyaltyByType 'CP001', 'W0101', '0', 'CUS00002', '', '2021-06-22', 1806, 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '9240000'
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_GetLoyaltyByType]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@LoyaltyType int,
	@CustomerCode nvarchar(50),
	@CustomerGrp nvarchar(50),
	@CurrentDate date,
	@CurrentTime int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@TotalBuy decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CustomerRank nvarchar(50)
	SET @CustomerRank = (SELECT TOP 1 CustomerRank FROM M_Customer WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerCode)

	DECLARE @OLOYALTY AS TABLE
      ( 
		LoyaltyId nvarchar(50),
		CompanyCode nvarchar(50),
		LoyaltyType int,
		LoyaltyName NVARCHAR(250)
      ) ;

    -- Insert statements for procedure here
	--SELECT T0.[LoyaltyId]
	--	  ,T0.[CompanyCode]
	--	  ,T0.[LoyaltyType]
	--	  ,T0.[LoyaltyName]
	--	  ,T0.[CustomerType]
	--	  ,T0.[ValidDateFrom]
	--	  ,T0.[ValidDateTo]
	--	  ,T0.[ValidTimeFrom]
	--	  ,T0.[ValidTimeTo]
	--	  ,T0.[IsMon]
	--	  ,T0.[IsTue]
	--	  ,T0.[IsWed]
	--	  ,T0.[IsThu]
	--	  ,T0.[IsFri]
	--	  ,T0.[IsSat]
	--	  ,T0.[IsSun]
	--	  ,T0.[TotalBuyFrom]
	--	  ,T0.[TotalBuyTo]
	--	  ,T0.[TotalEarnType]
	--	   ,T0.[TotalEarnValue]
	--	   ,T0.MaxTotalEarnValue
	--	  ,T0.[CreatedBy]
	--	  ,T0.[CreatedOn]
	--	  ,T0.[ModifiedBy]
	--	  ,T0.[ModifiedOn]
	--	  ,T0.[Status]
	INSERT INTO @OLOYALTY
	SELECT T0.[LoyaltyId]
		  ,T0.[CompanyCode]
		  ,T0.[LoyaltyType]
		  ,T0.[LoyaltyName]
	FROM S_LoyaltyHeader T0
		INNER JOIN S_LoyaltyCustomer T1 ON T0.LoyaltyId = T1.LoyaltyId
		--INNER Join S_LoyaltyStore t2 on t0.LoyaltyId = t2.LoyaltyId
	WHERE T0.CompanyCode = @CompanyCode
		--and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND (ISNULL(@LoyaltyType, 0) = 0 OR T0.LoyaltyType = @LoyaltyType)
		AND T0.CustomerType = 'C'
		AND T1.CustomerValue = @CustomerCode
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy 
		AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

		 
	UNION ALL

	SELECT T0.[LoyaltyId]
		  ,T0.[CompanyCode]
		  ,T0.[LoyaltyType]
		  ,T0.[LoyaltyName]
		  --,T0.[CustomerType]
		  --,T0.[ValidDateFrom]
		  --,T0.[ValidDateTo]
		  --,T0.[ValidTimeFrom]
		  --,T0.[ValidTimeTo]
		  --,T0.[IsMon]
		  --,T0.[IsTue]
		  --,T0.[IsWed]
		  --,T0.[IsThu]
		  --,T0.[IsFri]
		  --,T0.[IsSat]
		  --,T0.[IsSun]
		  --,T0.[TotalBuyFrom]
		  --,T0.[TotalBuyTo]
		  --,T0.[TotalEarnType]
		  --  ,T0.[TotalEarnValue]
			 --,T0.MaxTotalEarnValue
		  --,T0.[CreatedBy]
		  --,T0.[CreatedOn]
		  --,T0.[ModifiedBy]
		  --,T0.[ModifiedOn]
		  --,T0.[Status]
		  
	FROM S_LoyaltyHeader T0
		INNER JOIN S_LoyaltyCustomer T1 ON T0.LoyaltyId = T1.LoyaltyId
		--INNER JOIN S_LoyaltyStore t2 on t0.LoyaltyId = t2.LoyaltyId
	WHERE T0.CompanyCode = @CompanyCode
	--and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND (ISNULL(@LoyaltyType, 0) = 0 OR T0.LoyaltyType = @LoyaltyType)
		AND T0.CustomerType = 'G'
		--AND (ISNULL(@CustomerGrp, '') = '' OR T1.CustomerValue = @CustomerGrp)
		AND (ISNULL(@CustomerRank, '') = '' OR T1.CustomerValue = @CustomerRank)
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

	UNION ALL
	
	SELECT T0.[LoyaltyId]
		  ,T0.[CompanyCode]
		  ,T0.[LoyaltyType]
		  ,T0.[LoyaltyName]
		  --,T0.[CustomerType]
		  --,T0.[ValidDateFrom]
		  --,T0.[ValidDateTo]
		  --,T0.[ValidTimeFrom]
		  --,T0.[ValidTimeTo]
		  --,T0.[IsMon]
		  --,T0.[IsTue]
		  --,T0.[IsWed]
		  --,T0.[IsThu]
		  --,T0.[IsFri]
		  --,T0.[IsSat]
		  --,T0.[IsSun]
		  --,T0.[TotalBuyFrom]
		  --,T0.[TotalBuyTo]
		  --,T0.[TotalEarnType]
		  --  ,T0.[TotalEarnValue]
			 --,T0.MaxTotalEarnValue
		  --,T0.[CreatedBy]
		  --,T0.[CreatedOn]
		  --,T0.[ModifiedBy]
		  --,T0.[ModifiedOn]
		  --,T0.[Status]
		  
	FROM S_LoyaltyHeader T0
		--INNER JOIN S_LoyaltyCustomer T1 ON T0.LoyaltyId = T1.LoyaltyId
			--INNER Join S_LoyaltyStore t2 on t0.LoyaltyId = t2.LoyaltyId
	WHERE T0.CompanyCode = @CompanyCode
	--and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND (ISNULL(@LoyaltyType, 0) = 0 OR T0.LoyaltyType = @LoyaltyType)
		AND T0.CustomerType = 'A'
		--AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)


	SELECT DISTINCT T0.[LoyaltyId]
		  ,T0.[CompanyCode]
		  ,T0.[LoyaltyType]
		  ,T0.[LoyaltyName]
		  ,T0.[CustomerType]
		  ,T0.[ValidDateFrom]
		  ,T0.[ValidDateTo]
		  ,T0.[ValidTimeFrom]
		  ,T0.[ValidTimeTo]
		  ,T0.[IsMon]
		  ,T0.[IsTue]
		  ,T0.[IsWed]
		  ,T0.[IsThu]
		  ,T0.[IsFri]
		  ,T0.[IsSat]
		  ,T0.[IsSun]
		  ,T0.[TotalBuyFrom]
		  ,T0.[TotalBuyTo]
		  ,T0.[TotalEarnType]
		  ,T0.[TotalEarnValue]
		  ,T0.MaxTotalEarnValue
		  ,T0.[CreatedBy]
		  ,T0.[CreatedOn]
		  ,T0.[ModifiedBy]
		  ,T0.[ModifiedOn]
		  ,T0.[Status]
	FROM S_LoyaltyHeader T0
	INNER JOIN @OLOYALTY T1 ON T0.CompanyCode = T1.CompanyCode AND T0.LoyaltyId = T1.LoyaltyId AND T0.LoyaltyType = T1.LoyaltyType
	ORDER BY T0.CreatedOn DESC
	
END

GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_GetPromoByType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_S_S_GetPromoByType 'CP001', 'W0101', 4, '84123456789', '', '2021-05-24', 1245, 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 2640000
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_GetPromoByType]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@PromoType int,
	@CustomerCode nvarchar(50),
	@CustomerGrp nvarchar(50),
	@CurrentDate date,
	@CurrentTime int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@TotalBuy decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T0.[CustomerType]
		  ,T0.[ValidDateFrom]
		  ,T0.[ValidDateTo]
		  ,T0.[ValidTimeFrom]
		  ,T0.[ValidTimeTo]
		  ,T0.[IsMon]
		  ,T0.[IsTue]
		  ,T0.[IsWed]
		  ,T0.[IsThu]
		  ,T0.[IsFri]
		  ,T0.[IsSat]
		  ,T0.[IsSun]
		  ,T0.[TotalBuyFrom]
		  ,T0.[TotalBuyTo]
		  ,T0.[TotalGetType]
		   ,T0.[TotalGetValue]
		   ,T0.MaxTotalGetValue
		  ,T0.[IsCombine]
		  ,T0.IsVoucher
		  ,T0.[CreatedBy]
		  ,T0.[CreatedOn]
		  ,T0.[ModifiedBy]
		  ,T0.[ModifiedOn]
		  ,T0.[Status]
		   
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 WITH (NOLOCK) ON T0.PromoId = T1.PromoId
		INNER Join S_PromoStore t2 WITH (NOLOCK)  on t0.PromoId = t2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
		and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND T0.PromoType = @PromoType
		AND T0.CustomerType = 'C'
		AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		AND T1.CustomerValue = @CustomerCode
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)
			-- USP_S_S_GetPromoByType 'CP001', 2, '84123456789', '', '2021-05-19', 1418, 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 500000
			-- USP_S_S_GetPromoByType 'CP001', 1, 'CUS00000', 'None', '2021-01-25', 1700, 'Y', null, null, '', '', '', '', 15000
			--USP_S_S_GetPromoByType 'CP001', 1, 'CUS00000', 'None', '2021-01-25', 1727, 'Y', null, null, '', '', '', '', '15000'

		 
	UNION ALL
	
	SELECT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T0.[CustomerType]
		  ,T0.[ValidDateFrom]
		  ,T0.[ValidDateTo]
		  ,T0.[ValidTimeFrom]
		  ,T0.[ValidTimeTo]
		  ,T0.[IsMon]
		  ,T0.[IsTue]
		  ,T0.[IsWed]
		  ,T0.[IsThu]
		  ,T0.[IsFri]
		  ,T0.[IsSat]
		  ,T0.[IsSun]
		  ,T0.[TotalBuyFrom]
		  ,T0.[TotalBuyTo]
		  ,T0.[TotalGetType]
		    ,T0.[TotalGetValue]
			 ,T0.MaxTotalGetValue
		  ,T0.[IsCombine]
		   ,T0.IsVoucher
		  ,T0.[CreatedBy]
		  ,T0.[CreatedOn]
		  ,T0.[ModifiedBy]
		  ,T0.[ModifiedOn]
		  ,T0.[Status]
		  
	FROM S_PromoHeader T0
		INNER JOIN S_PromoCustomer T1 WITH (NOLOCK) ON T0.PromoId = T1.PromoId
			INNER Join S_PromoStore t2 WITH (NOLOCK) on t0.PromoId = t2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
	and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND T0.PromoType = @PromoType
		AND T0.CustomerType = 'G'
		AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

	UNION ALL
	
	SELECT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T0.[CustomerType]
		  ,T0.[ValidDateFrom]
		  ,T0.[ValidDateTo]
		  ,T0.[ValidTimeFrom]
		  ,T0.[ValidTimeTo]
		  ,T0.[IsMon]
		  ,T0.[IsTue]
		  ,T0.[IsWed]
		  ,T0.[IsThu]
		  ,T0.[IsFri]
		  ,T0.[IsSat]
		  ,T0.[IsSun]
		  ,T0.[TotalBuyFrom]
		  ,T0.[TotalBuyTo]
		  ,T0.[TotalGetType]
		    ,T0.[TotalGetValue]
			 ,T0.MaxTotalGetValue
		  ,T0.[IsCombine]
		   ,T0.IsVoucher
		  ,T0.[CreatedBy]
		  ,T0.[CreatedOn]
		  ,T0.[ModifiedBy]
		  ,T0.[ModifiedOn]
		  ,T0.[Status]
		  
	FROM S_PromoHeader T0
		--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
			INNER Join S_PromoStore t2 WITH (NOLOCK) on t0.PromoId = t2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
	and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		AND ISNULL(T0.IsVoucher, 0) = 0
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND T0.PromoType = @PromoType
		AND T0.CustomerType = 'A'
		AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		--AND T1.CustomerValue = @CustomerGrp
		AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		AND ((T0.IsMon = @IsMon)
			OR (T0.IsTue = @IsTue)
			OR (T0.IsWed = @IsWed)
			OR (T0.IsThu = @IsThu)
			OR (T0.IsFri = @IsFri)
			OR (T0.IsSat = @IsSat)
			OR (T0.IsSun = @IsSun)
			)

	UNION ALL
	
	SELECT T0.[PromoId]
		  ,T0.[CompanyCode]
		  ,T0.[PromoType]
		  ,T0.[PromoName]
		  ,T0.[CustomerType]
		  ,T0.[ValidDateFrom]
		  ,T0.[ValidDateTo]
		  ,T0.[ValidTimeFrom]
		  ,T0.[ValidTimeTo]
		  ,T0.[IsMon]
		  ,T0.[IsTue]
		  ,T0.[IsWed]
		  ,T0.[IsThu]
		  ,T0.[IsFri]
		  ,T0.[IsSat]
		  ,T0.[IsSun]
		  ,T0.[TotalBuyFrom]
		  ,T0.[TotalBuyTo]
		  ,T0.[TotalGetType]
		    ,T0.[TotalGetValue]
			 ,T0.MaxTotalGetValue
		  ,T0.[IsCombine]
		   ,T0.IsVoucher
		  ,T0.[CreatedBy]
		  ,T0.[CreatedOn]
		  ,T0.[ModifiedBy]
		  ,T0.[ModifiedOn]
		  ,T0.[Status]
		  
	FROM S_PromoHeader T0 WITH (NOLOCK) 
		--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
			--INNER Join S_PromoStore t2 on t0.PromoId = t2.PromoId
	WHERE T0.CompanyCode = @CompanyCode
	--and ( T2.StoreValue = @StoreId  or ISNULL(@StoreId, '') = '')   
		 
		AND ISNULL(T0.Status, 'N') = 'Y'
		AND ISNULL(T0.IsVoucher, 0) = 1
		--AND T0.PromoType = @PromoType
		--AND T0.CustomerType = 'G'
		--AND ISNULL(T0.IsCombine, 'N') <> 'Y'
		--AND T1.CustomerValue = @CustomerGrp
		--AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
		--AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
		--AND (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
		--AND ((T0.IsMon = @IsMon)
		--	OR (T0.IsTue = @IsTue)
		--	OR (T0.IsWed = @IsWed)
		--	OR (T0.IsThu = @IsThu)
		--	OR (T0.IsFri = @IsFri)
		--	OR (T0.IsSat = @IsSat)
		--	OR (T0.IsSun = @IsSun)
		--	)
	
END

--select * from S_PromoHeader where PromoId ='PICP00100000024'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_GetSchemaPromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--USP_S_S_SearchPromo 'CP001','','','','','','','','','','','','','','','','','',''
CREATE PROCEDURE [dbo].[USP_S_S_GetSchemaPromo] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@CustomerCode nvarchar(50),
	@CustomerGrp nvarchar(50),
	@CurrentDate date,
	@CurrentTime int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@TotalBuy decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- logic đi kèm ở store USP_S_S_GetSchemaPromo, USP_S_S_SchemaLineCheck, USP_S_S_CheckPromotions

    -- Insert statements for procedure here
	DECLARE @OPROMO AS TABLE
      ( 
		CompanyCode nvarchar(50),
		PromoId nvarchar(50),
		PromoType int,
		PromoName NVARCHAR(250)
      ) ;
	
	INSERT INTO @OPROMO
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0 
			INNER JOIN S_PromoCustomer T1 WITH (NOLOCK) ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 WITH (NOLOCK) on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			AND T0.CustomerType = 'C'
			AND (T2.StoreValue = @StoreId  OR ISNULL(@StoreId, '') = '')
			AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 0
			AND T1.CustomerValue = @CustomerCode
			AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			AND ((T0.IsMon = @IsMon)
				OR (T0.IsTue = @IsTue)
				OR (T0.IsWed = @IsWed)
				OR (T0.IsThu = @IsThu)
				OR (T0.IsFri = @IsFri)
				OR (T0.IsSat = @IsSat)
				OR (T0.IsSun = @IsSun)
				)
				
		UNION ALL
		
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			INNER JOIN S_PromoCustomer T1 WITH (NOLOCK) ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 WITH (NOLOCK) on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			AND T0.CustomerType = 'G'
			AND (T2.StoreValue = @StoreId  OR ISNULL(@StoreId, '') = '')
			AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 0
			AND T1.CustomerValue = @CustomerGrp
			AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			AND ((T0.IsMon = @IsMon)
				OR (T0.IsTue = @IsTue)
				OR (T0.IsWed = @IsWed)
				OR (T0.IsThu = @IsThu)
				OR (T0.IsFri = @IsFri)
				OR (T0.IsSat = @IsSat)
				OR (T0.IsSun = @IsSun)
				)

		UNION ALL
		
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 WITH (NOLOCK) on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			AND T0.CustomerType = 'A'
			AND (T2.StoreValue = @StoreId  OR ISNULL(@StoreId, '') = '')
			AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 0
			--AND T1.CustomerValue = @CustomerGrp
			AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			AND ((T0.IsMon = @IsMon)
				OR (T0.IsTue = @IsTue)
				OR (T0.IsWed = @IsWed)
				OR (T0.IsThu = @IsThu)
				OR (T0.IsFri = @IsFri)
				OR (T0.IsSat = @IsSat)
				OR (T0.IsSun = @IsSun)
				)

		UNION ALL
		
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			INNER JOIN S_PromoCustomer T1 WITH (NOLOCK) ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			--INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			--AND T0.CustomerType = 'A'
			--AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 1
			--AND T1.CustomerValue = @CustomerGrp
			--AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			--AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			--AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			--AND ((T0.IsMon = @IsMon)
			--	OR (T0.IsTue = @IsTue)
			--	OR (T0.IsWed = @IsWed)
			--	OR (T0.IsThu = @IsThu)
			--	OR (T0.IsFri = @IsFri)
			--	OR (T0.IsSat = @IsSat)
			--	OR (T0.IsSun = @IsSun)
			--	)
	
	--select * from #OPROMO;
	SELECT DISTINCT T0.SchemaId, T0.CompanyCode, T0.SchemaName, T0.[Status], T0.AllowChain, T0.CreatedOn	--, T1.IsApply
	FROM S_PromoSchema T0
		INNER JOIN S_SchemaLine T1 WITH (NOLOCK) ON T1.CompanyCode = T0.CompanyCode AND T1.SchemaId = T0.SchemaId
		INNER JOIN @OPROMO T2 ON T2.CompanyCode = T1.CompanyCode AND T1.PromoId = T2.PromoId
	WHERE ISNULL(T0.Status, 'N') = 'Y' AND ISNULL(T1.IsApply, 'N') = 'Y'
	ORDER BY T0.CreatedOn DESC
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyBuy]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyBuy]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

    -- Insert statements for procedure here
	SELECT LoyaltyId
      ,CompanyCode
      ,LineNum
      ,LineType
      ,LineCode
      ,LineName
      ,LineUom
      ,ValueType
      ,UPPER(Condition_1) 'Condition1'
      ,Value_1 'Value1'
      ,UPPER(Condition_2) 'Condition2'
      ,Value_2 'Value2'
	FROM dbo.S_LoyaltyBuy WITH (NOLOCK)
	WHERE LoyaltyId = @LoyaltyId AND CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyCustomer]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyCustomer]
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [LoyaltyId]
      ,[CompanyCode]
      ,[LineNum]
      ,[CustomerValue]
      ,[CustomerType]
	FROM [dbo].[S_LoyaltyCustomer] WITH (NOLOCK)
	WHERE [CompanyCode] = @CompanyCode AND [LoyaltyId] = @LoyaltyId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyEarn]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_S_S_LoyaltyEarn 'CP001', 'PICP00100000004'
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyEarn]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [LoyaltyId]
      ,[CompanyCode]
      ,[LineNum]
      ,[LineType]
      ,[LineCode]
      ,[LineName]
      ,[LineUom]
      ,[ConditionType]
      ,UPPER([Condition_1]) AS 'Condition1'
      ,[Value_1] 'Value1'
      ,UPPER([Condition_2]) 'Condition2'
      ,[Value_2] 'Value2'
      ,[ValueType]
      ,[EarnValue]
	  ,[MaxPointApply]
	FROM [dbo].[S_LoyaltyEarn] WITH (NOLOCK)
	WHERE [LoyaltyId] = @LoyaltyId AND [CompanyCode] = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyExclude]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyExclude]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	SELECT L.[CompanyCode]
		,L.[LoyaltyId]
		,L.[LineType]
		,L.[LineCode]
		,L.[LineName]
	FROM [dbo].[S_LoyaltyExclude] L
	WHERE L.[CompanyCode] = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyHeader]
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	SELECT [LoyaltyId]
      ,[CompanyCode]
      ,[LoyaltyType]
      ,[LoyaltyName]
      ,[CustomerType]
      ,[ValidDateFrom]
      ,[ValidDateTo]
      ,[ValidTimeFrom]
      ,[ValidTimeTo]
      ,[IsMon]
      ,[IsTue]
      ,[IsWed]
      ,[IsThu]
      ,[IsFri]
      ,[IsSat]
      ,[IsSun]
      ,[TotalBuyFrom]
      ,[TotalBuyTo]
      ,[TotalEarnType]
	  ,[TotalEarnValue]
	  ,[MaxTotalEarnValue]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status]
	FROM [dbo].[S_LoyaltyHeader] WITH (NOLOCK)
	WHERE [LoyaltyId] = @LoyaltyId AND [CompanyCode] = @CompanyCode
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyPointConvert]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyPointConvert]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [CompanyCode]
		,[StoreId]
		,[Point]
		,[Amount]
		,[CreatedOn]
		,[CreatedBy]
		,[ModifiedOn]
		,[ModifiedBy]
	FROM [dbo].[S_LoyaltyPointConvert]
	WHERE (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode)
		AND (ISNULL(@StoreId, '') = '' OR StoreId = @StoreId)


END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyRank]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyRank]
	@CompanyCode	nvarchar(50),
	@RankId	nvarchar(10), 
	@Keyword nvarchar(250)
	
AS	
begin
	select * from S_LoyaltyRank with (nolock) where 
	(ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	 and (ISNULL(@RankId, '') = '' OR RankId = @RankId )
	  and (ISNULL(@Keyword, '') = '' OR RankId like '%'+ @Keyword + '%' or RankName like '%'+ @Keyword + '%' )
end
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_LoyaltyStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_LoyaltyStore]
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [LoyaltyId]
      ,[CompanyCode]
      ,[LineNum]
      ,[StoreValue]
      
	FROM [dbo].[S_LoyaltyStore] WITH (NOLOCK)
	WHERE [CompanyCode] = @CompanyCode AND [LoyaltyId] = @LoyaltyId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PrepaidCard]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PrepaidCard]
	-- Add the parameters for the stored procedure here
	
	@CompanyCode nvarchar(50),
	@PrepaidCard nvarchar(50),
	@Status nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   select * from M_PrepaidCard with (nolock)  
	WHERE  CompanyCode = @CompanyCode and ISNULL(PrepaidCardNo,'') <> ''
	AND (PrepaidCardNo = @PrepaidCard  or ISNULL(@PrepaidCard, '')='')  
	AND (Status = @Status  or ISNULL(@Status, '')='')  

END


--[USP_S_S_SchemaLine] 'PSCP00100000004','CP001'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PrepaidCardHistory]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- [USP_S_S_PrepaidCardHistory] 'CP001', 'JA050105001' 
-- =============================================
CREATE   PROCEDURE [dbo].[USP_S_S_PrepaidCardHistory] 
	@CompanyCode nvarchar(50),
	@PrepaidCard nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   select   [CompanyCode]
	, CreatedBy, CreatedOn
      ,[TransId]
      ,[PrepaidCardNo]
      ,[LineNum]
      , [TransType]
      , case [TransType] when 'SALES' then [MainBalance]  when 'Payment' then -[MainBalance] end [MainBalance]
      ,case [TransType] when 'SALES' then [SubBalance]  when 'Payment' then -[SubBalance] end  [SubBalance] from T_PrepaidCardTransaction with (nolock)  
	WHERE  CompanyCode = @CompanyCode and ISNULL(PrepaidCardNo,'') <> ''
	AND (PrepaidCardNo = @PrepaidCard  or ISNULL(@PrepaidCard, '')='')  
	
END


--[USP_S_S_SchemaLine] 'PSCP00100000004','CP001'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoBuy]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoBuy]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--DECLARE @TblBarCode AS TABLE
	--(
	--	CompanyCode Nvarchar(100),
	--	PromoId Nvarchar(100),
	--	ItemCode  Nvarchar(50),
	--	UOMCode  Nvarchar(50),
	--	BarCode  varchar(MAX)
	--)

	--INSERT INTO @TblBarCode
	--SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	--FROM S_PromoGet G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
	--WHERE PromoId = @PromoId AND G.CompanyCode = @CompanyCode
	--GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

    -- Insert statements for procedure here
	SELECT G.PromoId
      ,G.CompanyCode
      ,LineNum
      ,LineType
      ,LineCode
      ,LineName
      ,LineUom
	  --,B.BarCode
      ,ValueType
      ,UPPER(Condition_1) 'Condition1'
      ,Value_1 'Value1'
      ,UPPER(Condition_2) 'Condition2'
      ,Value_2 'Value2'
	FROM dbo.S_PromoBuy G WITH (NOLOCK) --LEFT JOIN @TblBarCode B ON G.CompanyCode = B.CompanyCode AND G.LineCode = B.ItemCode AND G.LineUom = B.UOMCode
	WHERE G.PromoId = @PromoId AND G.CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoBuyOTGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoBuyOTGroup]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE @TblBarCode AS TABLE
	--(
	--	CompanyCode Nvarchar(100),
	--	PromoId Nvarchar(100),
	--	ItemCode  Nvarchar(50),
	--	UOMCode  Nvarchar(50),
	--	BarCode  varchar(MAX)
	--)

	--INSERT INTO @TblBarCode
	--SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	--FROM S_PromoBuyOTGroup G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
	--WHERE PromoId = @PromoId AND G.CompanyCode = @CompanyCode
	--GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

    -- Insert statements for procedure here
	SELECT G.PromoId
		,G.CompanyCode
		,GroupID
		,LineNum
		,LineType
		,LineCode
		,LineName
		,LineUoM
		--,B.BarCode
	FROM dbo.S_PromoBuyOTGroup G WITH (NOLOCK) --LEFT JOIN @TblBarCode B ON G.CompanyCode = B.CompanyCode AND G.LineCode = B.ItemCode AND G.LineUom = B.UOMCode
	WHERE G.PromoId = @PromoId AND G.CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoCustomer]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoCustomer]
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PromoId]
      ,[CompanyCode]
      ,[LineNum]
      ,[CustomerValue]
      ,[CustomerType]
	FROM [dbo].[S_PromoCustomer] WITH (NOLOCK)
	WHERE [CompanyCode] = @CompanyCode AND [PromoId] = @PromoId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoGet]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_S_S_PromoGet 'CP001', 'PICP00100000004'
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoGet]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	--DECLARE @TblBarCode AS TABLE
	--(
	--	CompanyCode Nvarchar(100),
	--	PromoId Nvarchar(100),
	--	ItemCode  Nvarchar(50),
	--	UOMCode  Nvarchar(50),
	--	BarCode  varchar(MAX)
	--)

	--INSERT INTO @TblBarCode
	--SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	--FROM S_PromoGet G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
	--WHERE PromoId = @PromoId AND G.CompanyCode = @CompanyCode
	--GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

    -- Insert statements for procedure here
	SELECT G.PromoId
      ,G.CompanyCode
      ,LineNum
      ,LineType
      ,LineCode
      ,LineName
      ,LineUom
	  --,B.BarCode
      ,ConditionType
      ,UPPER(Condition_1) AS 'Condition1'
      ,Value_1 'Value1'
      ,UPPER(Condition_2) 'Condition2'
      ,Value_2 'Value2'
      ,ValueType
      ,GetValue
	  ,MaxAmtDis
	  ,MaxQtyDis
	FROM dbo.S_PromoGet G WITH (NOLOCK) --LEFT JOIN @TblBarCode B ON G.CompanyCode = B.CompanyCode AND G.LineCode = B.ItemCode AND G.LineUom = B.UOMCode
	WHERE G.PromoId = @PromoId AND G.CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoGetOTGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoGetOTGroup]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE @TblBarCode AS TABLE
	--(
	--	CompanyCode Nvarchar(100),
	--	PromoId Nvarchar(100),
	--	ItemCode  Nvarchar(50),
	--	UOMCode  Nvarchar(50),
	--	BarCode  varchar(MAX)
	--)

	--INSERT INTO @TblBarCode
	--SELECT G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode , STRING_AGG(U.BarCode,',') BarCode 
	--FROM S_PromoGetOTGroup G INNER JOIN M_ItemUOM U ON G.LineCode = U.ItemCode AND G.LineUom = U.UOMCode AND G.CompanyCode = U.CompanyCode
	--WHERE PromoId = @PromoId AND G.CompanyCode = @CompanyCode
	--GROUP BY  G.CompanyCode , G.PromoId , U.ItemCode,U.UOMCode

    -- Insert statements for procedure here
	SELECT G.PromoId
		,G.CompanyCode
		,GroupID
		,LineNum
		,LineType
		,LineCode
		,LineName
		,LineUoM
		--,B.BarCode
	FROM dbo.S_PromoGetOTGroup G WITH (NOLOCK) --LEFT JOIN @TblBarCode B ON G.CompanyCode = B.CompanyCode AND G.LineCode = B.ItemCode AND G.LineUom = B.UOMCode
	WHERE G.PromoId = @PromoId AND G.CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoHeader]
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	SELECT T1.[PromoId]
      ,T1.[CompanyCode]
      ,T1.[PromoType]
	  ,T2.[TypeName] AS 'PromoTypeName'
      ,T1.[PromoName]
      ,T1.[CustomerType]
      ,T1.[ValidDateFrom]
      ,T1.[ValidDateTo]
      ,T1.[ValidTimeFrom]
      ,T1.[ValidTimeTo]
      ,T1.[IsMon]
      ,T1.[IsTue]
      ,T1.[IsWed]
      ,T1.[IsThu]
      ,T1.[IsFri]
      ,T1.[IsSat]
      ,T1.[IsSun]
      ,T1.[TotalBuyFrom]
      ,T1.[TotalBuyTo]
      ,T1.[TotalGetType]
	  ,T1.[TotalGetValue]
	  ,T1.[MaxTotalGetValue]
      ,T1.[IsCombine]
	  ,T1.[IsVoucher]
      ,T1.[CreatedBy]
      ,T1.[CreatedOn]
      ,T1.[ModifiedBy]
      ,T1.[ModifiedOn]
      ,T1.[Status]
	  ,T1.[SAPPromoId]
	  ,T1.[SAPBonusBuyId]
	  ,case when t3.promoCode is not null then 'Y' ELSE 'N' END IsUsed
	  ,T1.[MaxApplyType]
	  ,T1.[MaxApplyValue]
	FROM [dbo].[S_PromoHeader] T1 WITH (NOLOCK)
	left join M_PromoType T2  WITH (NOLOCK) on t1.PromoType = t2.PromoType
	left join (
		SELECT distinct LTRIM(RTRIM(value)) promoCode FROM  STRING_SPLIT ( stuff(( 
        select distinct '' + PromoId from T_SalesLine WITH (NOLOCK) where ISNULL( PromoId,'')<>''
        FOR XML PATH('')),1,1,'')  , ',' )   where isnull(LTRIM(RTRIM(value)),'')<>''
	) t3 on t3.promoCode= T1.PromoId
	WHERE [PromoId] = @PromoId AND [CompanyCode] = @CompanyCode
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoSchema]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_PromoSchema]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [SchemaId]
      ,[CompanyCode]
      ,[SchemaName]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status]
	  ,[AllowChain]
	FROM [dbo].[S_PromoSchema] WITH (NOLOCK)
	WHERE SchemaId = @SchemaId AND CompanyCode = @CompanyCode

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_PromoStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_S_S_PromoStore]
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [PromoId]
      ,[CompanyCode]
      ,[LineNum]
      ,[StoreValue]
      
	FROM [dbo].[S_PromoStore] WITH (NOLOCK)
	WHERE [CompanyCode] = @CompanyCode AND [PromoId] = @PromoId

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_ReleaseNote]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   PROCEDURE [dbo].[USP_S_S_ReleaseNote]
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@Version	nvarchar(250)	, 
    @Status nvarchar(15),
    @Keyword nvarchar(250)	


AS	

select t1.[Id]
      ,t1.[CompanyCode]
      ,t1.[Version]
      ,t1.[Description]
      ,t1.[ReleaseTime]
      ,t1.[ReleaseContent]
      ,t1.[ReleaseContentForeign]
      ,t1.[CustomF1]
      ,t1.[CustomF2]
      ,t1.[CustomF3]
      ,t1.[CustomF4]
      ,t1.[CustomF5]
      ,t1.[Status]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn] 
	  ,t2.Description VersionDescription
	  ,t2.CreatedBy VersionBy
	  ,t2.ReleaseTime VersionReleaseTime
	  
	 from S_ReleaseNote t1 with (nolock)
	 left join S_Version t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.Version = t2.Version
     where 1 = 1
     and t1.CompanyCode = @CompanyCode
     and   (t1.Version = @Version  or ISNULL(@Version, '')='')   
	  and   (  ISNULL(@Keyword, '')='' or t1.Version like N'%'+@Version+'%' or t1.Description like N'%'+@Version+'%'  )   
	  and   (CONVERT(nvarchar(50), t1.Id)  = @Id  or ISNULL(@Id, '')='') 

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_SchemaLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_SchemaLine]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [SchemaId]
      ,T1.[CompanyCode]
      ,[LineNum]
      ,T1.[PromoId], T2.PromoName, T2.PromoType, T3.PromoType , T3.TypeName PromoTypeName
      ,[Description]
      ,[Priority]
      ,[IsApply]
	FROM [dbo].[S_SchemaLine] T1 WITH (NOLOCK)
	left join S_PromoHeader T2 WITH (NOLOCK) on T1.PromoId = T2.PromoId
	left join M_PromoType  T3 with (nolock) on T2.PromoType = T3.PromoType
	WHERE SchemaId = @SchemaId AND T1.CompanyCode = @CompanyCode
	ORDER BY T1.[Priority] ASC

END


--[USP_S_S_SchemaLine] 'PSCP00100000004','CP001'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_SchemaLineCheck_del]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_SchemaLineCheck_del]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@PromoType int,
	@CustomerCode nvarchar(50),
	@CustomerGrp nvarchar(50),
	@CurrentDate date,
	@CurrentTime int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@TotalBuy decimal(19, 6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- logic đi kèm ở store USP_S_S_GetSchemaPromo, USP_S_S_SchemaLineCheck, USP_S_S_CheckPromotions

	DECLARE @OPROMO AS TABLE
      ( 
		CompanyCode nvarchar(50),
		PromoId nvarchar(50),
		PromoType int,
		PromoName NVARCHAR(250)
      ) ;
	
	INSERT INTO @OPROMO
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			AND T0.CustomerType = 'C'
			AND (T2.StoreValue = @StoreId  OR ISNULL(@StoreId, '') = '')
			AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 0
			AND T1.CustomerValue = @CustomerCode
			AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			AND ((T0.IsMon = @IsMon)
				OR (T0.IsTue = @IsTue)
				OR (T0.IsWed = @IsWed)
				OR (T0.IsThu = @IsThu)
				OR (T0.IsFri = @IsFri)
				OR (T0.IsSat = @IsSat)
				OR (T0.IsSun = @IsSun)
				)
				
		UNION ALL
		
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			AND T0.CustomerType = 'G'
			AND (T2.StoreValue = @StoreId  OR ISNULL(@StoreId, '') = '')
			AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 0
			AND T1.CustomerValue = @CustomerGrp
			AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			AND ((T0.IsMon = @IsMon)
				OR (T0.IsTue = @IsTue)
				OR (T0.IsWed = @IsWed)
				OR (T0.IsThu = @IsThu)
				OR (T0.IsFri = @IsFri)
				OR (T0.IsSat = @IsSat)
				OR (T0.IsSun = @IsSun)
				)

		UNION ALL
		
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			--INNER JOIN S_PromoCustomer T1 ON T0.PromoId = T1.PromoId
			INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			AND T0.CustomerType = 'A'
			AND (T2.StoreValue = @StoreId  OR ISNULL(@StoreId, '') = '')
			AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 0
			--AND T1.CustomerValue = @CustomerGrp
			AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			AND ((T0.IsMon = @IsMon)
				OR (T0.IsTue = @IsTue)
				OR (T0.IsWed = @IsWed)
				OR (T0.IsThu = @IsThu)
				OR (T0.IsFri = @IsFri)
				OR (T0.IsSat = @IsSat)
				OR (T0.IsSun = @IsSun)
				)

		UNION ALL
		
		SELECT DISTINCT T0.CompanyCode, T0.PromoId, T0.PromoType, T0.PromoName
		FROM S_PromoHeader T0
			INNER JOIN S_PromoCustomer T1 ON T1.CompanyCode = T0.CompanyCode AND T0.PromoId = T1.PromoId
			--INNER Join S_PromoStore T2 on T2.CompanyCode = T0.CompanyCode AND T0.PromoId = T2.PromoId
		WHERE T0.CompanyCode = @CompanyCode AND ISNULL(T0.Status, 'N') = 'Y'
			--AND T0.CustomerType = 'A'
			--AND ISNULL(T0.IsCombine, 'N') = 'Y'
			AND ISNULL(T0.IsVoucher, 0) = 1
			--AND T1.CustomerValue = @CustomerGrp
			--AND T0.ValidDateFrom <= @CurrentDate AND T0.ValidDateTo >= @CurrentDate
			--AND T0.ValidTimeFrom <= @CurrentTime AND T0.ValidTimeTo >= @CurrentTime
			--AND  (CASE WHEN ISNULL(T0.TotalBuyFrom, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyFrom END) <= @TotalBuy AND (CASE WHEN ISNULL(T0.TotalBuyTo, 0) = 0 THEN @TotalBuy ELSE T0.TotalBuyTo END) >= @TotalBuy
			--AND ((T0.IsMon = @IsMon)
			--	OR (T0.IsTue = @IsTue)
			--	OR (T0.IsWed = @IsWed)
			--	OR (T0.IsThu = @IsThu)
			--	OR (T0.IsFri = @IsFri)
			--	OR (T0.IsSat = @IsSat)
			--	OR (T0.IsSun = @IsSun)
			--	)


	--SELECT DISTINCT H.PromoId, H.CompanyCode, H.PromoName, T.TypeName, H.CreatedOn
	--FROM S_PromoHeader H
	--INNER JOIN @OPROMO P ON H.PromoId = P.PromoId AND H.CompanyCode = P.CompanyCode
	--INNER JOIN M_PromoType T ON H.PromoType = T.PromoType

	--ORDER BY H.CreatedOn DESC

    -- Insert statements for procedure here
	--SELECT [SchemaId]
 --     ,T1.[CompanyCode]
 --     ,[LineNum]
 --     ,T1.[PromoId]
	--  ,T2.PromoName
	--  ,T2.PromoType
	--  ,T3.PromoType 
	--  ,T3.TypeName PromoTypeName
 --     ,[Description]
 --     ,[Priority]
 --     ,[IsApply]
	SELECT DISTINCT T1.PromoId
		,T1.CompanyCode
		,T2.PromoType
		,T3.TypeName AS 'PromoTypeName'
		,T2.PromoName
		,T2.[CustomerType]
		,T2.[ValidDateFrom]
		,T2.[ValidDateTo]
		,T2.[ValidTimeFrom]
		,T2.[ValidTimeTo]
		,T2.[IsMon]
		,T2.[IsTue]
		,T2.[IsWed]
		,T2.[IsThu]
		,T2.[IsFri]
		,T2.[IsSat]
		,T2.[IsSun]
		,T2.[TotalBuyFrom]
		,T2.[TotalBuyTo]
		,T2.[TotalGetType]
		,T2.[TotalGetValue]
		,T2.[MaxTotalGetValue]
		,T2.[IsCombine]
		,T2.[IsVoucher]
		,T2.[CreatedBy]
		,T2.[CreatedOn]
		,T2.[ModifiedBy]
		,T2.[ModifiedOn]
		,T2.[Status]
		,T2.[SAPPromoId]
		,T2.[SAPBonusBuyId]
		,T1.[Priority]
	FROM [dbo].[S_SchemaLine] T1 WITH (NOLOCK)
	INNER JOIN @OPROMO P ON P.CompanyCode = T1.CompanyCode AND P.PromoId = T1.PromoId
	INNER JOIN S_PromoHeader T2 WITH (NOLOCK) ON T1.PromoId = T2.PromoId
	LEFT JOIN M_PromoType  T3 with (nolock) ON T2.PromoType = T3.PromoType
	WHERE SchemaId = @SchemaId 
		AND T1.CompanyCode = @CompanyCode
		AND T1.IsApply = 'Y'
	ORDER BY T1.[Priority] ASC

END

GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_SchemaLinePromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_SchemaLinePromo]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT T1.PromoId
		,T1.CompanyCode
		,T2.PromoType
		,T3.TypeName AS 'PromoTypeName'
		,T2.PromoName
		,T2.[CustomerType]
		,T2.[ValidDateFrom]
		,T2.[ValidDateTo]
		,T2.[ValidTimeFrom]
		,T2.[ValidTimeTo]
		,T2.[IsMon]
		,T2.[IsTue]
		,T2.[IsWed]
		,T2.[IsThu]
		,T2.[IsFri]
		,T2.[IsSat]
		,T2.[IsSun]
		,T2.[TotalBuyFrom]
		,T2.[TotalBuyTo]
		,T2.[TotalGetType]
		,T2.[TotalGetValue]
		,T2.[MaxTotalGetValue]
		,T2.[IsCombine]
		,T2.[IsVoucher]
		,T2.[CreatedBy]
		,T2.[CreatedOn]
		,T2.[ModifiedBy]
		,T2.[ModifiedOn]
		,T2.[Status]
		,T2.[SAPPromoId]
		,T2.[SAPBonusBuyId]
		,T1.[Priority]
		,T1.[IsApply]
		,T2.[MaxQtyByReceipt]
		,T2.[MaxQtyByStore]
	FROM [dbo].[S_SchemaLine] T1 WITH (NOLOCK)
	INNER JOIN S_PromoHeader T2 WITH (NOLOCK) ON T1.PromoId = T2.PromoId
	LEFT JOIN M_PromoType  T3 with (nolock) ON T2.PromoType = T3.PromoType
	WHERE SchemaId = @SchemaId 
		AND T1.CompanyCode = @CompanyCode
		--AND T1.IsApply = 'Y'
	ORDER BY T1.[Priority] ASC, T2.CreatedOn DESC

END


--[USP_S_S_SchemaLine] 'PSCP00100000004','CP001'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_SearchLoyalty]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--USP_S_S_SearchLoyalty 'CP001','','','','','','','','','','','','','','','','','',''
CREATE PROCEDURE [dbo].[USP_S_S_SearchLoyalty]
	@CompanyCode nvarchar(50),
	@LoyaltyId nvarchar(50),
	@LoyaltyType int,
	@LoyaltyName nvarchar(250),
	@CustomerType char(1),
	@CustomerValue nvarchar(50),
	@ValidDateFrom date,
	@ValidDateTo date,
	@ValidTimeFrom int,
	@ValidTimeTo int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@Status nvarchar(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT P.LoyaltyId AS 'LoyaltyId'
		, P.LoyaltyName
		, T.TypeName AS 'LoyaltyType' 
		, p.[ValidDateFrom]
		,p.[ValidDateTo]
		,CASE WHEN P.Status = 'Y' THEN 'A' ELSE 'I' END 'Status'
	FROM [S_LoyaltyHeader] P  WITH (NOLOCK)
		LEFT JOIN [S_LoyaltyCustomer] C  WITH (NOLOCK) ON C.LoyaltyId = P.LoyaltyId
		LEFT JOIN [M_LoyaltyType] T  WITH (NOLOCK) ON T.LoyaltyType = P.LoyaltyType
	WHERE P.CompanyCode = @CompanyCode
		AND (ISNULL(@Status, '') = '' OR ISNULL(P.Status, 'N') = @Status)
		AND (ISNULL(@LoyaltyId, '') = '' OR P.LoyaltyId = @LoyaltyId)
		AND (ISNULL(@LoyaltyType, '') = '' OR P.LoyaltyType = @LoyaltyType)
		AND (ISNULL(@LoyaltyName, '') = '' OR P.LoyaltyName LIKE '%' + @LoyaltyName + '%')
		AND (ISNULL(@CustomerType, '') = '' OR P.CustomerType = @CustomerType)
		AND (ISNULL(@CustomerValue, '') = '' OR C.CustomerValue  LIKE '%' + @CustomerValue + '%')
		AND (ISNULL(@ValidDateFrom, '1900-01-01') = '1900-01-01' OR @ValidDateFrom >=  P.ValidDateFrom)
		AND (ISNULL(@ValidDateTo, '2100-12-31') = '2100-12-31' OR @ValidDateTo <= P.ValidDateTo)
		AND (ISNULL(@ValidTimeFrom, 0) = 0 OR @ValidTimeFrom BETWEEN P.ValidTimeFrom AND P.ValidTimeTo)
		AND (ISNULL(@ValidTimeTo, 0) = 0 OR @ValidTimeTo BETWEEN P.ValidTimeFrom AND P.ValidTimeTo)
		AND ((ISNULL(@IsMon, '') = '' OR P.IsMon = @IsMon)
			OR (ISNULL(@IsTue, '') = '' OR P.IsTue = @IsTue)
			OR (ISNULL(@IsWed, '') = '' OR P.IsWed = @IsWed)
			OR (ISNULL(@IsThu, '') = '' OR P.IsThu = @IsThu)
			OR (ISNULL(@IsFri, '') = '' OR P.IsFri = @IsFri)
			OR (ISNULL(@IsSat, '') = '' OR P.IsSat = @IsSat)
			OR (ISNULL(@IsSun, '') = '' OR P.IsSun = @IsSun)
			)
	ORDER BY P.LoyaltyId
	-- USP_S_S_SearchLoyalty 'CP001',NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
	--USP_S_S_SearchLoyalty 'CP001','','','','','','','','','','','','','','','','','',''
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_SearchPromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--USP_S_S_SearchPromo 'CP001','','','','','','','','','','','','','','','','','',''
CREATE PROCEDURE [dbo].[USP_S_S_SearchPromo]
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50),
	@PromoType int,
	@PromoName nvarchar(250),
	@CustomerType char(1),
	@CustomerValue nvarchar(50),
	@ValidDateFrom date,
	@ValidDateTo date,
	@ValidTimeFrom int,
	@ValidTimeTo int,
	@IsMon nvarchar(1),
	@IsTue nvarchar(1),
	@IsWed nvarchar(1),
	@IsThu nvarchar(1),
	@IsFri nvarchar(1),
	@IsSat nvarchar(1),
	@IsSun nvarchar(1),
	@IsCombine nvarchar(1),
	@Status nvarchar(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--,CASE WHEN P.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT P.PromoId AS 'PromoId', P.PromoName , p.SAPPromoId, p.SAPBonusBuyId
		, T.TypeName AS 'PromoType' ,  p.[ValidDateFrom]
		,p.[ValidDateTo]
		,CASE WHEN P.Status = 'Y' THEN 'A' ELSE 'I' END 'Status'
		,case when t3.promoCode is not null then 'Y' ELSE 'N' END IsUsed
		,P.CreatedOn
	FROM [S_PromoHeader] P  WITH (NOLOCK)
		LEFT JOIN [S_PromoCustomer] C  WITH (NOLOCK) ON C.PromoId = P.PromoId
		LEFT JOIN [M_PromoType] T  WITH (NOLOCK) ON T.PromoType = P.PromoType
		left join (
			SELECT distinct LTRIM(RTRIM(value)) promoCode FROM  STRING_SPLIT ( stuff(( 
           select distinct '' + PromoId from T_SalesLine WITH (NOLOCK)  where ISNULL( PromoId,'')<>''
           FOR XML PATH('')),1,1,'')  , ',' )   where isnull(LTRIM(RTRIM(value)),'')<>''
		) t3 on t3.promoCode= P.PromoId
	WHERE P.CompanyCode = @CompanyCode
		AND (ISNULL(@Status, '') = '' OR ISNULL(P.Status, 'N') = @Status)
		AND (ISNULL(@PromoId, '') = '' OR P.PromoId = @PromoId)
		AND (ISNULL(@PromoType, '') = '' OR P.PromoType = @PromoType)
		AND (ISNULL(@PromoName, '') = '' OR P.PromoName LIKE '%' + @PromoName + '%')
		AND (ISNULL(@CustomerType, '') = '' OR P.CustomerType = @CustomerType)
		AND (ISNULL(@CustomerValue, '') = '' OR C.CustomerValue  LIKE '%' + @CustomerValue + '%')
		AND (ISNULL(@ValidDateFrom, '1900-01-01') = '1900-01-01' OR @ValidDateFrom >=  P.ValidDateFrom)
		AND (ISNULL(@ValidDateTo, '2100-12-31') = '2100-12-31' OR @ValidDateTo <= P.ValidDateTo)
		AND (ISNULL(@ValidTimeFrom, 0) = 0 OR @ValidTimeFrom BETWEEN P.ValidTimeFrom AND P.ValidTimeTo)
		AND (ISNULL(@ValidTimeTo, 0) = 0 OR @ValidTimeTo BETWEEN P.ValidTimeFrom AND P.ValidTimeTo)
		AND ((ISNULL(@IsMon, '') = '' OR P.IsMon = @IsMon)
			OR (ISNULL(@IsTue, '') = '' OR P.IsTue = @IsTue)
			OR (ISNULL(@IsWed, '') = '' OR P.IsWed = @IsWed)
			OR (ISNULL(@IsThu, '') = '' OR P.IsThu = @IsThu)
			OR (ISNULL(@IsFri, '') = '' OR P.IsFri = @IsFri)
			OR (ISNULL(@IsSat, '') = '' OR P.IsSat = @IsSat)
			OR (ISNULL(@IsSun, '') = '' OR P.IsSun = @IsSun)
			)
		AND (ISNULL(@IsCombine, '') = '' OR ISNULL(P.IsCombine, 'N') = @IsCombine)
	--ORDER BY P.PromoId DESC
	ORDER BY P.CreatedOn DESC
	-- USP_S_S_SearchPromo 'CP001',NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
	--USP_S_S_SearchPromo 'CP001','','','','','','','','','','','','','','','','','',''
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_SearchSchema]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_S_SearchSchema]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
    @CompanyCode nvarchar(50),
    @SchemaName nvarchar(250),
	@PromoId nvarchar(50),
    @Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT DISTINCT T0.SchemaId AS 'SchemaId', T0.SchemaName, 
	CASE WHEN T0.Status = 'Y' THEN 'Yes' ELSE 'No' END 'Status'
	FROM [S_PromoSchema] T0  WITH (NOLOCK)
	LEFT JOIN [S_SchemaLine] T1  WITH (NOLOCK) ON T1.SchemaId = T0.SchemaId
	WHERE T0.CompanyCode = @CompanyCode
	AND (ISNULL(@SchemaId, '') = '' OR T0.SchemaId = @SchemaId)
	AND (ISNULL(@SchemaName, '') = '' OR T0.SchemaName LIKE '%' + @SchemaName + '%')
	AND (ISNULL(@PromoId, '') = '' OR T1.PromoId = @PromoId)
	AND (ISNULL(@Status, '') = '' OR T0.[Status] = @Status)
	ORDER BY T0.SchemaId DESC
	;
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_StoreClient]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_S_StoreClient] 'CP001', '1001', '','','','',''
CREATE PROCEDURE [dbo].[USP_S_S_StoreClient]
	@CompanyCode nvarchar(50),
	
	@StoreId	nvarchar(50),  
	@Id	nvarchar(50),  
	@LocalIP	nvarchar(50),  
    @PublicIP	nvarchar(50),  
	@FromDate	DateTime,  
	@ToDate	DateTime  
	 
AS
begin
select * from S_StoreClient  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode ) 
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')    
	AND (LocalIP = @LocalIP  or ISNULL(@LocalIP, '')='')    
	AND (PublicIP = @PublicIP  or ISNULL(@PublicIP, '')='')    
	and ( Convert( nvarchar(50), Id) = @Id  or ISNULL(@Id, '') = '')     
	and ( Convert(date, @FromDate) >=  Convert(date, FromDate)  or ISNULL(@FromDate, '') = '')  
	and ( Convert(date, @ToDate) <=  Convert( date, ToDate)  or ISNULL(@ToDate, '') = '')  
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_S_Version]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_S_T_SalesHeader_ByTransId] 'CP001', '1001', 'SOCP001100100001023' 
create   PROCEDURE [dbo].[USP_S_S_Version]
	@CompanyCode nvarchar(50)  ,
	@Id nvarchar(50),
	@Version nvarchar(50),
	@Keyword nvarchar(250),
	@Status nvarchar(50)
AS
begin
	select * from S_Version with (nolock)
	where    1=1
		and CompanyCode = @CompanyCode
		 and   (Version = @Version  or ISNULL(@Version, '')='')   
	   and   (  ISNULL(@Keyword, '')='' or Version like N'%'+@Version+'%' or Description like N'%'+@Version+'%'  )   
	  and   (CONVERT(nvarchar(50), Id)  = @Id  or ISNULL(@Id, '')='') 


end 


GO
/****** Object:  StoredProcedure [dbo].[USP_S_StoreAreaIdByStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_S_StoreAreaIdByStore] 
	@CompanyCode	nchar(10)	, 
	@StoreId	nvarchar(50) 
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select top 1 StoreAreaId from M_StoreCapacity with (nolock)
	--where StoreId = 'JAOF001' and StoreAreaId = 'A'
       where   [CompanyCode]= @CompanyCode and
            StoreId = @StoreId 
          
	 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryLinesShiftDate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_SummaryLinesShiftDate]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date
AS	
Begin
	-- select T2.ShiftId ,t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(t1.Quantity) TotalQty, t1.Price,  SUM(t1.LineTotal) LineTotal
	--from T_SalesLine t1 with (nolock)
	--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	--left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	--where  t1.CompanyCode = @CompanyCode 
	--and cONVERT(date, t4.CreatedOn ) =  CONVERT(date, @Date) and isnull(t1.BomID, '') = '' and t2.Status = 'C' and t2.IsCanceled = 'N'
	----T2.ShiftId = @ShiftId and
	--Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName,  t1.UOMCode 


	select t2.ShiftId ,t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(t1.Quantity) TotalQty, t1.Price,  SUM(t1.LineTotalDisIncludeHeader) LineTotal
	from T_SalesLine t1 with (nolock)
	left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	where t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = '' and t2.Status = 'C' and ISNULL(t2.IsCanceled,'N') = 'N' 
	and	T2.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)
	Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode
	--UNION ALL
	--select t2.ShiftId ,t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(t1.Quantity) TotalQty, t1.Price,  SUM( ((t1.Quantity *  t1.Price * (100-T1.[DiscountRate])/100 )  * (100-T2.[DiscountRate])/100 ) ) LineTotal
	--from T_InvoiceLine t1 with (nolock)
	--left join T_InvoiceHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	--left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	--where t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = ''  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
	--and	T2.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)
	--Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode


end
  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryLinesShiftDate_Check]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_SummaryLinesShiftDate_Check] 'CP001', '3001', '2022-06-29'
CREATE   PROCEDURE [dbo].[USP_S_SummaryLinesShiftDate_Check]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date
AS	
Begin
	SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode

	--select t2.ShiftId ,t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(t1.Quantity) TotalQty, t1.Price,  SUM(t1.LineTotalDisIncludeHeader) LineTotal
	--from T_SalesLine t1 with (nolock)
	--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	--left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	--where t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = '' and t2.Status = 'C' and ISNULL(t2.IsCanceled,'N') = 'N' 
	--and	T2.ShiftId  IN ()
	--Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode
	 

end
  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShifRetailDiscount]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC [USP_S_SummaryShifRetailDiscount] 'CP001' , '1001' , '100121090800001'

CREATE PROCEDURE [dbo].[USP_S_SummaryShifRetailDiscount]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	
	DECLARE @DetailTable AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		CusGrpId NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisAmt NUMERIC(19,6)
	)

	DECLARE @CountTable AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTable
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , H.CusGrpId , H.TerminalId , H.CreatedOn , ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0)
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 --INNER JOIN M_Item I ON H.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId
		AND ISNULL(L.Price,0) * ISNULL(L.Quantity,0) -  ISNULL(L.LineTotalDisIncludeHeader ,0) > 0
	--GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTable
	SELECT CusGrpId ,TerminalId, COUNT(*) 
	FROM @DetailTable 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY CusGrpId ,TerminalId


	SELECT H.CompanyCode , H.StoreId , H.ShiftId , H.CusGrpId , H.TerminalId , H.CreatedOn , SUM(H.LineTotalDisAmt) DiscountTotal , C.CType		
	FROM @DetailTable H INNER JOIN @CountTable C ON H.CusGrpId = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , H.CusGrpId , H.TerminalId , H.CreatedOn, C.CType



end

GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShifRetailTax]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC [USP_S_SummaryShifReailtotals] 'CP001' , '1001' , '100121081700001'

CREATE PROCEDURE [dbo].[USP_S_SummaryShifRetailTax]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	
	DECLARE @DetailTable AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		TaxAmt NUMERIC(19,6)
	)

	DECLARE @CountTable AS TABLE 
	(

		TaxCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTable
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.TaxCode , H.TerminalId , H.CreatedOn , L.TaxAmt 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 --INNER JOIN M_Item I ON H.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId
	--GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTable
	SELECT TaxCode ,TerminalId, COUNT(*) 
	FROM @DetailTable 
	GROUP BY TaxCode ,TerminalId


	SELECT H.CompanyCode , H.StoreId , H.ShiftId , H.TaxCode , H.TerminalId , H.CreatedOn , SUM(H.TaxAmt) SalesTotal , C.CType		
	FROM @DetailTable H INNER JOIN @CountTable C ON H.TaxCode = C.TaxCode AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , H.TaxCode , H.TerminalId , H.CreatedOn, C.CType



end

GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShifRetailTender]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- EXEC [USP_S_SummaryShifRetailTender] 'CP001' , '1001' , '100121082400001'

CREATE PROCEDURE [dbo].[USP_S_SummaryShifRetailTender]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	
	DECLARE @DetailTender AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		CollectedAmount NUMERIC(19,6)
	)

	DECLARE @CountTender AS TABLE 
	(

		PaymentCode NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTender
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.PaymentCode , H.TerminalId , H.CreatedOn , L.CollectedAmount
	FROM T_SalesHeader H INNER JOIN T_SalesPayment L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId



	INSERT INTO @CountTender
	SELECT PaymentCode ,TerminalId, COUNT(*) 
	FROM @DetailTender 
	--WHERE LineTotalDisAmt <> 0
	GROUP BY PaymentCode ,TerminalId


	SELECT H.CompanyCode , H.StoreId , H.ShiftId , H.PaymentCode , H.TerminalId , H.CreatedOn , SUM(H.CollectedAmount) DiscountTotal , C.CType		
	FROM @DetailTender H INNER JOIN @CountTender C ON H.PaymentCode = C.PaymentCode AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , H.PaymentCode , H.TerminalId , H.CreatedOn, C.CType



end

GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShifRetailtotals]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC [USP_S_SummaryShifRetailtotals] 'CP001' , '1001' , '100121081700001'

CREATE PROCEDURE [dbo].[USP_S_SummaryShifRetailtotals]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	
	DECLARE @DetailTable AS TABLE 
	(
		CompanyCode NVARCHAR(50),
		StoreId  NVARCHAR(50),
		ShiftId NVARCHAR(50),
		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CreatedOn Date,
		LineTotalDisIncludeHeader NUMERIC(19,6)
	)

	DECLARE @CountTable AS TABLE 
	(

		ItemType NVARCHAR(50),
		TerminalId NVARCHAR(50),
		CType INT
	)

	INSERT INTO @DetailTable
	SELECT H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn , L.LineTotalDisIncludeHeader 
	FROM T_SalesHeader H INNER JOIN T_SalesLine L On H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
						 --INNER JOIN M_Item I ON H.CompanyCode = I.CompanyCode AND L.ItemCode = I.ItemCode
	WHERE H.CompanyCode = @CompanyCode AND H.StoreId = @StoreId AND H.ShiftId = @ShiftId
	--GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , L.ItemType , H.TerminalId , H.CreatedOn 

	INSERT INTO @CountTable
	SELECT ItemType ,TerminalId, COUNT(*) 
	FROM @DetailTable 
	GROUP BY ItemType ,TerminalId


	SELECT H.CompanyCode , H.StoreId , H.ShiftId , H.ItemType , H.TerminalId , H.CreatedOn , SUM(H.LineTotalDisIncludeHeader) SalesTotal , C.CType		
	FROM @DetailTable H INNER JOIN @CountTable C ON H.ItemType = C.ItemType AND  H.TerminalId  = C.TerminalId
	GROUP BY H.CompanyCode , H.StoreId , H.ShiftId , H.ItemType , H.TerminalId , H.CreatedOn, C.CType



end

GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShiftDate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_S_SummaryShiftDate]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@Date	Date
AS	
Begin
	 select t1.ItemCode, t3.ItemName Description,   SUM(t1.Quantity) TotalQty, t1.Price,  SUM(t1.LineTotalDisIncludeHeader) LineTotal
	from T_SalesLine t1 with (nolock)
	left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  
	left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	where  t1.CompanyCode = @CompanyCode 
	and cONVERT(date, t4.CreatedOn ) =  CONVERT(date, @Date) and t2.Status = 'C' and t2.IsCanceled = 'N'
	--T2.ShiftId = @ShiftId and
	Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName


	--select t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(t1.Quantity) TotalQty, t1.Price,  SUM(t1.LineTotalDisIncludeHeader) LineTotal
	--from T_SalesLine t1 with (nolock)
	--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	--left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	--where t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = '' and t2.Status = 'C' and ISNULL(t2.IsCanceled,'N') = 'N' 
	--and	T2.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)
	--Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode
	--UNION ALL
	--select t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(t1.Quantity) TotalQty, t1.Price,  SUM( ((t1.Quantity *  t1.Price * (100-T1.[DiscountRate])/100 )  * (100-T2.[DiscountRate])/100 ) ) LineTotal
	--from T_InvoiceLine t1 with (nolock)
	--left join T_InvoiceHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	--left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	--where t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = ''  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
	--and	T2.ShiftId  IN (SELECT ShiftId FROM T_ShiftHeader WHERE CONVERT(date, CreatedOn ) =  CONVERT(date, @Date) AND StoreId = @StoreId AND CompanyCode = @CompanyCode)
	--Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode

end
  
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShiftDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_S_SummaryShiftDetail]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	select t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(ISNULL(t1.Quantity,0)) TotalQty, t1.Price,  SUM(ISNULL(t1.LineTotalDisIncludeHeader,0)) LineTotal
	from T_SalesLine t1 with (nolock)
	left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	where T2.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = '' and t2.Status = 'C' and ISNULL(t2.IsCanceled,'N') = 'N' 
	Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode
	--UNION ALL
	--select t1.ItemCode, t3.ItemName Description, t1.UOMCode,  SUM(ISNULL(t1.Quantity,0)) TotalQty, t1.Price,   SUM(ISNULL(t1.LineTotalDisIncludeHeader,0)) LineTotal
	--from T_InvoiceLine t1 with (nolock)
	--left join T_InvoiceHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId  and t2.StoreId = @StoreId
	--left join M_Item t3 with (nolock) on t1.ItemCode = t3.ItemCode
	--left join T_ShiftHeader t4 with (nolock) on t2.ShiftId = t4.ShiftId and t2.CompanyCode = t4.CompanyCode and t2.StoreId = t4.StoreId
	--where T2.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode and t2.StoreId = t4.StoreId  and isnull(t1.BomID, '') = ''  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
	--Group by  t2.ShiftId, t1.ItemCode,  t1.Price, t3.ItemName ,t1.UOMCode

end
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShiftPayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--USP_S_SummaryShiftPayment 'CP001','JAOF001','JAOF00121091700001'
-- [USP_S_SummaryShiftPayment] 'CP001','3001','30012208125500001'

--select * from T_ShiftHeader
--order by CreatedOn desc
CREATE   PROCEDURE [dbo].[USP_S_SummaryShiftPayment]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin
	declare @currency nvarchar(50) set @currency = (select CurrencyCode from M_Store where StoreId = @StoreId and CompanyCode = @CompanyCode)

    select distinct   TerminalId CounterId, PaymentCode, ShortName, Currency,  Rate, Sum(FCAmount) FCAmount, Sum(TotalAmt) TotalAmt,Sum(CollectedAmount)  CollectedAmount,Sum(ChargableAmount)  ChargableAmount,Sum(ChangeAmt)  ChangeAmt

	from 
	(
		 ---Chị thanh y/c bỏ trừ change Amount  ngày 26/8/2021I: SNULL(t1.ChangeAmt / t1.Rate,0)
	
		select distinct  t2.TerminalId, t1.PaymentCode,isnull(t7.ShortName, t1.PaymentCode) ShortName,isnull(t1.Currency, @currency) Currency,isnull(  t1.Rate, 1) Rate, 
		SUM( case isnull(t1.Rate,1) when 1 then 0 else t1.FCAmount end ) FCAmount,
		SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt, 
		--SUM(t1.CollectedAmount) CollectedAmount, 
		case isnull(t7.EODApply, 0)  when 1 then 
		--0
			SUM(ISNULL(t8.Amount,0))	--90 
		else SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) end CollectedAmount,
		--SUM(ISNULL(t1.ChangeAmt,0))
		SUM(t1.ChargableAmount) ChargableAmount, 0 ChangeAmt
		from T_SalesPayment t1 with (nolock)
		left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		left join T_ShiftHeader t5 with (nolock) on t2.ShiftId = t5.ShiftId and t2.CompanyCode = t5.CompanyCode and t5.StoreId = t2.StoreId
		left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode
		left join (Select CompanyCode,ShiftId,Sum(Amount) Amount from T_PickupAmount with (nolock) group by CompanyCode,ShiftId ) t8  on t5.CompanyCode = t8.CompanyCode and t8.ShiftId = t5.ShiftId
		where  T2.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode 
		--and isnull(t7.EODApply, 0) = 1 
		and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' and t2.Status = 'C'
		Group by   t2.TerminalId, t1.PaymentCode, t7.ShortName, t1.Currency ,  t1.Rate , t7.EODApply
		--UNION ALL
		----  -ISNULL(t1.ChangeAmt / t1.Rate,0)
		--select distinct  t2.TerminalId, t1.PaymentCode, isnull(t7.ShortName, t1.PaymentCode) ShortName,isnull(t1.Currency, @currency) Currency,isnull(  t1.Rate, 1) Rate,  SUM( case isnull(t1.Rate,1) when 1 then 0 else t1.FCAmount end ) FCAmount, SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt, SUM(t1.CollectedAmount) CollectedAmount, SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt
		--from T_InvoicePayment t1 with (nolock)
		--left join T_InvoiceHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		--left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode
		--where T2.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
		--Group by  t2.TerminalId, t1.PaymentCode,t7.ShortName, t1.Currency,  t1.Rate

		--UNION ALL

		--select distinct   t1.PaymentCode, isnull(t7.ShortName, t1.PaymentCode) ShortName,isnull(t1.Currency, @currency) Currency, isnull(  t1.Rate, 1) Rate,  SUM( case isnull(t1.Rate,1) when 1 then 0 else t1.FCAmount end ) FCAmount, SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt, SUM(t1.CollectedAmount) CollectedAmount, SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt
		--from T_SalesPayment t1 with (nolock)
		--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		--left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode
		--where T1.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
		--Group by   t1.PaymentCode,t7.ShortName, t1.Currency,  t1.Rate
	) tmp
	Group by   TerminalId, PaymentCode, ShortName,  Currency ,  Rate
end

 
 --select * from M_PaymentMethod
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SummaryShiftPaymentGroupCashier]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- 
--USP_S_SummaryShiftPayment 'CP001','JAOF001','100121112800002'
-- [USP_S_SummaryShiftPaymentGroupCashier] 'CP001','1001','100121112800002'
CREATE PROCEDURE [dbo].[USP_S_SummaryShiftPaymentGroupCashier]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50) 
AS	
Begin
	declare @currency nvarchar(50) set @currency = (select CurrencyCode from M_Store where StoreId = @StoreId and CompanyCode = @CompanyCode)

    select distinct  CreatedBy,  CreatedBy Cashier, TerminalId CounterId, PaymentCode, ShortName, Currency,  Rate, Sum(FCAmount) FCAmount, Sum(TotalAmt) TotalAmt,
	Sum(CollectedAmount)  CollectedAmount,  BankInAmt, 
	Sum(ChargableAmount)  ChargableAmount,Sum(ChangeAmt)  ChangeAmt, EODApply

	from 
	(
		 ---Chị thanh y/c bỏ trừ change Amount  ngày 26/8/2021I: SNULL(t1.ChangeAmt / t1.Rate,0)
	
		select distinct t2.CreatedBy, t2.TerminalId, t1.PaymentCode,isnull(t7.ShortName, t1.PaymentCode) ShortName,isnull(t1.Currency, @currency) Currency,isnull(  t1.Rate, 1) Rate, SUM( case isnull(t1.Rate,1) when 1 then 0 else t1.FCAmount end ) FCAmount,
		SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt,
		--SUM(t1.CollectedAmount) CollectedAmount,
		case isnull(t7.EODApply, 0)  
		when 1 then SUM(t8.Amount) OVER(PARTITION BY t2.StoreId, t2.TerminalId)  
		else SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) end CollectedAmount, 
		0  BankInAmt,  
	     isnull(t7.EODApply, 0) EODApply,
		SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt
		from T_SalesPayment t1 with (nolock)
		left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		left join T_ShiftHeader t3 with (nolock) on t1.CompanyCode = t3.CompanyCode and t3.ShiftId = t1.ShiftId 
		left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode 
		left join T_PickupAmount t8 with (nolock) on t8.CompanyCode = t2.CompanyCode and t2.StoreId= t8.StoreId  
		 and t8.CounterId = t2.TerminalId and CONVERT(date, t8.CreatedOn)  = CONVERT(date, t3.CreatedOn)   and isnull(t8.Status,'O') = 'O' 

		where T2.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' and t2.Status = 'C' 
		
		Group by  t2.CreatedBy, t2.StoreId,  t2.TerminalId, t1.PaymentCode, t7.ShortName, t1.Currency ,  t1.Rate,t7.EODApply , t8.Amount
		--UNION ALL  
		----  -ISNULL(t1.ChangeAmt / t1.Rate,0)
		--select distinct  t2.TerminalId, t1.PaymentCode, isnull(t7.ShortName, t1.PaymentCode) ShortName,isnull(t1.Currency, @currency) Currency,isnull(  t1.Rate, 1) Rate,  SUM( case isnull(t1.Rate,1) when 1 then 0 else t1.FCAmount end ) FCAmount, SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt, SUM(t1.CollectedAmount) CollectedAmount, SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt
		--from T_InvoicePayment t1 with (nolock)
		--left join T_InvoiceHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		--left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode
		--where T2.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
		--Group by  t2.TerminalId, t1.PaymentCode,t7.ShortName, t1.Currency,  t1.Rate

		--UNION ALL

		--select distinct   t1.PaymentCode, isnull(t7.ShortName, t1.PaymentCode) ShortName,isnull(t1.Currency, @currency) Currency, isnull(  t1.Rate, 1) Rate,  SUM( case isnull(t1.Rate,1) when 1 then 0 else t1.FCAmount end ) FCAmount, SUM(t1.CollectedAmount-ISNULL(t1.ChangeAmt,0)) TotalAmt, SUM(t1.CollectedAmount) CollectedAmount, SUM(t1.ChargableAmount) ChargableAmount, SUM(ISNULL(t1.ChangeAmt,0)) ChangeAmt
		--from T_SalesPayment t1 with (nolock)
		--left join T_SalesHeader t2 with (nolock) on t1.CompanyCode = t2.CompanyCode and t1.TransId = t2.TransId   and t1.ShiftId = t2.ShiftId   
		--left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode
		--where T1.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode   and t2.StoreId = @StoreId  and ISNULL(t2.IsCanceled,'N') = 'N' AND T2.POSType = 'E'-- and t2.Status = 'C'
		--Group by   t1.PaymentCode,t7.ShortName, t1.Currency,  t1.Rate
	) tmp
	Group by   CreatedBy, TerminalId, PaymentCode, ShortName,  Currency ,  Rate, BankInAmt , EODApply
end

 
 --select * from T_PickupAmount
GO
/****** Object:  StoredProcedure [dbo].[USP_S_SumPromotion]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- USP_S_SumPromotion 'CP001', 'PRCP00100000079', '', null, null
-- =============================================
CREATE PROCEDURE [dbo].[USP_S_SumPromotion]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@PromoId nvarchar(50),
	@StoreId nvarChar(50),
	@FromDate datetime,
	@ToDate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT DISTINCT TransId	--, PromoId	--, * 
	--FROM T_SalesLine 
	--WHERE PromoId like '%PRCP00100000079%' --ISNULL(PromoId, '') <> ''

	SELECT COUNT(DISTINCT H.TransId)
	FROM T_SalesHeader H
	INNER JOIN T_SalesLine L ON H.CompanyCode = L.CompanyCode AND H.TransId = L.TransId
	WHERE H.CompanyCode = @CompanyCode
	AND (H.PromoId LIKE '%' + @PromoId + '%' OR L.PromoId LIKE '%' + @PromoId + '%')
	AND (H.StoreId = @StoreId OR ISNULL(@StoreId, '') = '')
	AND (ISNULL(@FromDate, '2000-01-01') <= ISNULL(H.DocDate, H.CreatedOn))
	AND (ISNULL(@ToDate, '2100-12-31') >= ISNULL(H.DocDate, H.CreatedOn))

END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_BankIn]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_T_BankIn] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
    @Id	nvarchar(50) 
												
AS	
select * from [dbo].[T_BankIn] with (nolock)
         
			where CompanyCode = @CompanyCode 
			and StoreId= @StoreId    
			and (DailyId = @DailyId  or ISNULL(@DailyId, '') = '')   
			and (CONVERT(nvarchar(50), Id)  = @Id  or ISNULL(@Id, '') = '')   
     

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_DeliveryOrderLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReceiptPOLine] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_DeliveryOrderLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TransId	nvarchar(50)
	 
AS
BEGIN
       select * from T_DeliveryLine with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (TransId = @TransId  or ISNULL(@TransId, '') = '')   
		order by LineId
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_DeliveryOrderLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReceiptPOLine] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_DeliveryOrderLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TransId	nvarchar(50)
	 
AS
BEGIN
       select * from T_DeliveryLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (TransId = @TransId  or ISNULL(@TransId, '') = '')   
		order by LineId
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_DivisionHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_T_DivisionHeader]
	@CompanyCode nvarchar(50),
	@Id	nvarchar(50),
	@FromDate	nvarchar(50), 
	@ToDate	nvarchar(50)
AS
begin
select * from T_DivisionHeader  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (Id = @Id  or ISNULL(@Id, '')='')  
	AND (CONVERT(date, CreatedOn) >= CONVERT(date,  @FromDate)  or ISNULL(@FromDate, '')='') 
	AND (CONVERT(date, CreatedOn) <= CONVERT(date,  @ToDate)  or ISNULL(@ToDate, '')='') 
	 

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_DivisionLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_S_T_DivisionLine]  'CP001', 'DICP00100000001' 
CREATE PROCEDURE [dbo].[USP_S_T_DivisionLine]
	@CompanyCode nvarchar(50),
	@Id	nvarchar(50), 
	@ViewType  nvarchar(250) =null 
AS
begin
 
		SET NOCOUNT ON; 
 
	
	

DECLARE @columns NVARCHAR(MAX) = '', 
		@sql     NVARCHAR(MAX) = '';
		--@CompanyCode     NVARCHAR(MAX) = '',
  --      @Id NVARCHAR(200) = '';
		--set @CompanyCode= 'CP001'
		--set @Id = 'DICP00100000001';

	SELECT  @columns+=QUOTENAME(CONVERT( nvarchar(200), StoreId) ) + ','
	
	--+ QUOTENAME(CONVERT( nvarchar(200), StoreId + 'Division') ) + ','
	
	FROM (select distinct StoreId from T_DivisionLine with (nolock) where Id= @Id and CompanyCode = @CompanyCode ) tmp
	ORDER BY  StoreId;

	SET @columns = LEFT(@columns, LEN(@columns) - 1);
		 
		SET @sql ='
		SELECT * FROM   
		( 
			select t1.ItemCode, t1.UOMCode, ISNULL(t2.itemname, t2.ItemDescription ) Description, t1.Quantity, t1.StoreId ,  SUM(t1.Quantity) OVER(PARTITION BY t1.ItemCode) Total
			from  T_DivisionLine t1 with (nolock)  
			left join M_Item t2 with (nolock) on t1.CompanyCode = t2.CompanyCode  and t1.ItemCode= t2.ItemCode
			where isnull(t1.ItemCode,'''') <> ''''

		) t 

		PIVOT(
			SUM( Quantity ) 
			FOR StoreId IN ('+ @columns +') 
		) AS pivot_table;';
	 --select ISNULL(itemname, ItemDescription ) from M_Item
	 EXECUTE sp_executesql @sql;

	select distinct  'ItemCode' Id, 'Item Code' Title, 'string' ControlType, null GroupNum, 1 OrderNum, 0 IsAutoColumn    union all
	select distinct  'Description' Id, 'Description' Title , 'string' ControlType, null GroupNum, 1 OrderNum, 0 IsAutoColumn    union all
	select distinct  'UOMCode' Id, 'UoM' Title , 'string' ControlType, null GroupNum , 1 OrderNum, 0 IsAutoColumn   union all  
	select distinct  'Total' Id, 'Total' Title , 'quantity' ControlType, null GroupNum , 1 OrderNum, 0 IsAutoColumn   union all  
	select distinct  StoreId Id, StoreId Title, 'quantity'  ControlType, null GroupNum, 1 OrderNum, 1 IsAutoColumn    from T_DivisionLine with (nolock)    
	where Id= @Id and CompanyCode = @CompanyCode 
	--order by StoreId desc
end 


 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_EndDateDetail]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_EndDateDetail] 'CP001', 'W0101','F6C620E4-074A-4692-8469-E0F37A7256EC'
CREATE PROCEDURE [dbo].[USP_S_T_EndDateDetail]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@StoreId nvarchar(50) ,
	@Id nvarchar(50)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select * from T_EndDateDetail with (nolock)
	where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (EnddateId = @Id  or ISNULL(@Id, '')='')   
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	 
END
 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsIssueHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_GoodsIssueHeader] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_GoodsIssueHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50)
AS
BEGIN
       select * from T_GoodsIssueHeader with (nolock) 
	   where 
	   StoreId=@StoreId and CompanyCode=@CompanyCode 
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		order by CreatedOn desc
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsIssueLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_GoodsIssueLine] 'CP001', 'W0101','GICP001W010100000010'
create PROCEDURE [dbo].[USP_S_T_GoodsIssueLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50)
AS
BEGIN
       select * from T_GoodsIssueLine with (nolock)
	   where  CompanyCode=@CompanyCode 
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsIssueLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsIssueLineSerial] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_GoodsIssueLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50)
AS
BEGIN
       select * from T_GoodsIssueLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		and LineId = @LineId
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReceiptHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_GoodsReceiptHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_GoodsReceiptHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50)
AS
BEGIN
       select * from T_GoodsReceiptHeader with (nolock)
	   where  CompanyCode=@CompanyCode and StoreId=@StoreId
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		order by CreatedOn desc 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReceiptLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [T_GoodsReceiptLine] 'CP001', 'W0101','GICP001W010100000010'
CREATE PROCEDURE [dbo].[USP_S_T_GoodsReceiptLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50)
AS
BEGIN
       select INVTId,
		t1.CompanyCode,
		t1.LineId,
		t1.ItemCode,
		t1.SLocId,
		t1.BarCode,
		isnull(t1.Description, t2.ItemName ) Description,
		t1.UOMCode,
		t1.Quantity,
		t1.Price,
		t1.LineTotal,
		t1.CurrencyCode,
		t1.CurrencyRate,
		t1.TaxCode,
		t1.TaxRate,
		t1.TaxAmt,
		t1.Remark,
		t1.CreatedOn,
		t1.CreatedBy,
		t1.ModifiedOn,
		t1.ModifiedBy,
		t1.Status
 from T_GoodsReceiptLine t1 with (nolock)
 left join M_Item t2 on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode
	   where  t1.CompanyCode=@CompanyCode 
 		and (t1.INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReceiptLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReceiptLineSerial] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_GoodsReceiptLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50)
AS
BEGIN
       select * from T_GoodsReceiptLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		and LineId = @LineId
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReceiptPOHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReceiptPOHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_GoodsReceiptPOHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@PurchaseId	nvarchar(50)
	 
AS
BEGIN
       select * from T_GoodsReceiptPOHeader with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (PurchaseId = @PurchaseId  or ISNULL(@PurchaseId, '') = '')   
		order by CreatedOn desc
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReceiptPOLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReceiptPOLine] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_GoodsReceiptPOLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@PurchaseId	nvarchar(50)
	 
AS
BEGIN
       select * from T_GoodsReceiptPOLine with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (PurchaseId = @PurchaseId  or ISNULL(@PurchaseId, '') = '')   
		order by LineId
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReceiptPOLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_S_T_GoodsReceiptPOLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@PurchaseId	nvarchar(50)
	 
AS
BEGIN
       select * from T_GoodsReceiptPOLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (PurchaseId = @PurchaseId  or ISNULL(@PurchaseId, '') = '')    
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReturnHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReturnHeader] 'CP001', 'W0101',''
Create PROCEDURE [dbo].[USP_S_T_GoodsReturnHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@PurchaseId	nvarchar(50)
	 
AS
BEGIN
       select * from T_GoodsReturnHeader with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (PurchaseId = @PurchaseId  or ISNULL(@PurchaseId, '') = '')   
		order by CreatedOn desc
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReturnLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_GoodsReturnLine] 'CP001', 'W0101',''
Create PROCEDURE [dbo].[USP_S_T_GoodsReturnLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@PurchaseId	nvarchar(50)
	 
AS
BEGIN
       select * from T_GoodsReturnLine with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (PurchaseId = @PurchaseId  or ISNULL(@PurchaseId, '') = '')   
		order by LineId
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_GoodsReturnLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [dbo].[USP_S_T_GoodsReturnLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@PurchaseId	nvarchar(50)
	 
AS
BEGIN
       select * from T_GoodsReturnLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (PurchaseId = @PurchaseId  or ISNULL(@PurchaseId, '') = '')    
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryCountingHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_InventoryCountingHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ICId	nvarchar(50) 
	 
AS
BEGIN
       select * from T_InventoryCountingHeader with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (ICId = @ICId  or ISNULL(@ICId, '') = '')   
		order by CreatedOn desc 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryCountingLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_InventoryCountingLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ICId	nvarchar(50) 
	 
AS
BEGIN
       select * from T_InventoryCountingLine with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (ICId = @ICId  or ISNULL(@ICId, '') = '')   
		order by CreatedOn desc 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryCountingLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_S_T_InventoryCountingLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ICId	nvarchar(50),
	@LineId nvarchar(50)
	 
AS
BEGIN
       select * from T_InventoryCountingLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (ICId = @ICId  or ISNULL(@ICId, '') = '')   
		and LineId = @LineId
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_InventoryHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50) 
	 
AS
BEGIN
       select * from T_InventoryHeader with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		 
		order by CreatedOn desc 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryHeader] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_InventoryLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50) 
	 
AS
BEGIN
   select t1.[INVTId]
      ,t1.[CompanyCode]
      ,t1.[LineId]
      ,t1.[ItemCode]
      ,t1.[FrSLocId]
      ,t1.[ToSlocId]
      ,t1.[DocType]
      ,t1.[BarCode]
      ,t1.[Description]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[ShipDate]
      ,case  t1.[DocType] when 'R' then t1.OpenQty else  t1.Quantity - Sum(isnull(t2.Quantity,0)) end [OpenQty]
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status] 
	  from T_InventoryLine t1 with (nolock)
	   left join T_InventoryLine t2 with (nolock) on t1.LineId = t2.BaseLine and t1.INVTId = t2.baseTransId and t1.CompanyCode = @CompanyCode
	   where  t1.CompanyCode=@CompanyCode  
 		and (t1.INVTId = @INVTId  or ISNULL(@INVTId, '') = '')   
		group by t1.[INVTId]
      ,t1.[CompanyCode]
      ,t1.[LineId]
      ,t1.[ItemCode]
      ,t1.[FrSLocId]
      ,t1.[ToSlocId]
      ,t1.[DocType]
      ,t1.[BarCode]
      ,t1.[Description]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[ShipDate]
     ,t1.OpenQty
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status] 
		order by t1.LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryLineSerial] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_InventoryLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50)
AS
BEGIN
       select * from T_InventoryLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (INVTId = @INVTId  or ISNULL(@INVTId, '') = '')  
		and LineId = @LineId
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryPostingHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryPostingHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_InventoryPostingHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@IPId	nvarchar(50)
	 
AS
BEGIN
       select * from T_InventoryPostingHeader with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (IPId = @IPId  or ISNULL(@IPId, '') = '')   
		order by CreatedOn desc 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryPostingLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryPostingHeader] 'CP001', 'W0101',''
create PROCEDURE [dbo].[USP_S_T_InventoryPostingLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@IPId	nvarchar(50)
	 
AS
BEGIN
       select * from T_InventoryPostingLine with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (IPId = @IPId  or ISNULL(@IPId, '') = '')   
		order by LineId
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryPostingLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_S_T_InventoryPostingLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@IPId	nvarchar(50),
	@LineId nvarchar(50)
	 
AS
BEGIN
       select * from T_InventoryPostingLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (IPId = @IPId  or ISNULL(@IPId, '') = '')   
		and LineId = @LineId
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryTransferHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryTransferHeader] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_InventoryTransferHeader]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTTransId	nvarchar(50) 
	 
AS
BEGIN
       select * from T_InventoryTransferHeader with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (INVTTransId = @INVTTransId  or ISNULL(@INVTTransId, '') = '')  
		 
		order by CreatedOn desc 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryTransferLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryHeader] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_InventoryTransferLine]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTTransId	nvarchar(50) 
	 
AS
BEGIN
   select t1.[INVTTransId]
      ,t1.[CompanyCode]
      ,t1.[LineId]
      ,t1.[ItemCode]
      ,t1.[FrSLocId]
      ,t1.[ToSlocId]
      ,t1.[DocType]
      ,t1.[BarCode]
      ,t1.[Description]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[ShipDate]
      ,case  t1.[DocType] when 'R' then t1.OpenQty else  t1.Quantity - Sum(isnull(t2.Quantity,0)) end [OpenQty]
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status] 
	  from T_InventoryTransferLine t1 with (nolock)
	   left join T_InventoryTransferLine t2 with (nolock) on t1.LineId = t2.BaseLine and t1.INVTTransId = t2.baseTransId and t1.CompanyCode = @CompanyCode
	   where  t1.CompanyCode=@CompanyCode  
 		and (t1.INVTTransId = @INVTTransId  or ISNULL(@INVTTransId, '') = '')   
		group by t1.[INVTTransId]
      ,t1.[CompanyCode]
      ,t1.[LineId]
      ,t1.[ItemCode]
      ,t1.[FrSLocId]
      ,t1.[ToSlocId]
      ,t1.[DocType]
      ,t1.[BarCode]
      ,t1.[Description]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[ShipDate]
     ,t1.OpenQty
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status] 
		order by t1.LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InventoryTransferLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_S_T_InventoryTransferLineSerial] 'CP001', 'W0101',''
CREATE PROCEDURE [dbo].[USP_S_T_InventoryTransferLineSerial]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@INVTTransId	nvarchar(50),
	@LineId	nvarchar(50)
AS
BEGIN
       select * from T_InventoryLineSerial with (nolock)
	   where  CompanyCode=@CompanyCode  
 		and (INVTId = @INVTTransId  or ISNULL(@INVTTransId, '') = '')  
		and LineId = @LineId
		order by LineId 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InvoiceHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetSumaryHeaderShift] 'CP001', 'JAOF0012107120042'
create   PROCEDURE [dbo].[USP_S_T_InvoiceHeader]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Id nvarchar(50)	
AS
begin 
	 select * from T_InvoiceHeader with (nolock) 
	where companyCode = @CompanyCode  and StoreId = @StoreId  and TransId = @Id
	--and CONVERT(date, t6.Date) = CONVERT(date, @Date) and t6.StoreId = @StoreId and t6.CompanyCode=@CompanyCode
	--t1.ShiftId = @ShiftId
	
 end

 --select * from T_ShiftHeader


 --select * from T_ShiftHeader where ShiftId = 'ST00012012010009'
 --select * from T_ShiftLine

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InvoiceHeaderByType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [USP_S_T_SalesHeader_ByTransId] 'CP001', '1001', 'SOCP001100100001023' 
create PROCEDURE [dbo].[USP_S_T_InvoiceHeaderByType]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),   
	@TransId	nvarchar(50) ,
	@Type nvarchar(50) ,
	@FromDate nvarchar(50) ,
	@ToDate nvarchar(50) 
	 
AS
begin
     select * from T_InvoiceHeader t1 with (nolock) 
	 	 
		  where  (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			and   (ISNULL(@StoreId, '') = '' OR t1.StoreId = @StoreId )
			and   (ISNULL(@Fromdate, '') = '' OR CONVERT( date, t1.CreatedOn) >= CONVERT( date, @Fromdate) )
			and   (ISNULL(@Todate, '') = '' OR CONVERT( date, t1.CreatedOn) <= CONVERT( date, @Todate) )
			 
			and   (ISNULL(@TransId, '') = '' OR  t1.TransId = @TransId )
			order by CreatedOn desc
		 
end 


--
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InvoiceLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- USP_S_T_InvoiceLine 'CP001','JAOF001','ARCP001JAOF00101010529'
CREATE   PROCEDURE [dbo].[USP_S_T_InvoiceLine]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@Id nvarchar(50)	
AS
begin 
	select T1.[TransId]
      ,T1.[LineId]
      ,T1.[CompanyCode]
	  , t1.StoreId
      ,T1.[ItemCode]
      ,T1.[SLocId]
      ,T1.[BarCode]
      ,T1.[UOMCode]
      ,T1.[Quantity]
      ,T1.[Price]
      ,T1.[LineTotal]
      ,T1.[DiscountType]
      ,T1.[DiscountAmt]
      ,T1.[DiscountRate]
      ,T1.[CreatedBy]
      ,T1.[CreatedOn]
      ,T1.[ModifiedBy]
      ,T1.[ModifiedOn]
      ,T1.[Status]
      ,T1.[Remark]
      ,T1.[PromoId]
      ,T1.[PromoType]
      ,T1.[PromoPercent]
      ,T1.[PromoBaseItem]
      ,T1.[SalesMode]
      ,T1.[TaxRate]
      ,T1.[TaxAmt]
      ,T1.[TaxCode]
      ,T1.[MinDepositAmt]
      ,T1.[MinDepositPercent]
      ,T1.[DeliveryType]
      ,T1.[POSService]
      ,T1.[StoreAreaId]
      ,T1.[TimeFrameId]
      ,T1.[Duration]
      ,T1.[AppointmentDate]
      ,T1.[BomID]
      ,T1.[PromoPrice]
      ,T1.[PromoLineTotal]
      ,T1.[BaseLine]
      ,T1.[BaseTransId]
      ,T1.[OpenQty]
      ,T1.[PromoDisAmt]
      ,T1.[IsPromo]
      ,T1.[IsSerial]
      ,T1.[IsVoucher]
      , ISNULL(T1.[Description], t2.ItemName) Description
      ,T1.[PrepaidCardNo]
      ,T1.[MemberDate]
      ,T1.[MemberValue]
      ,T1.[StartDate]
      ,T1.[EndDate]
      ,T1.[ItemType]
	  , t2.ItemName from T_InvoiceLine t1 with(nolock)  
	left join T_InvoiceHeader t4 with(nolock)   on t4.TransId = t1.TransId  
	left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode  
	where t1.companyCode = @CompanyCode  and t4.StoreId = @StoreId  and t1.TransId = @Id
	--and CONVERT(date, t6.Date) = CONVERT(date, @Date) and t6.StoreId = @StoreId and t6.CompanyCode=@CompanyCode
	--t1.ShiftId = @ShiftId
	
 end

 --select * from T_ShiftHeader


 --select * from T_ShiftHeader where ShiftId = 'ST00012012010009'
 --select * from T_ShiftLine

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_InvoicePayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_T_InvoicePayment]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@EventId	nvarchar(50)	 
 
AS	
	
	
	select t1.[PaymentCode] ,t1.[CompanyCode] , t1.StoreId,  t1.[TransId] ,t1.[LineId] ,t1.[TotalAmt] ,t1.[ReceivedAmt] ,t1.[PaidAmt] ,t1.[ChangeAmt]
		  ,t1.[PaymentMode] ,t1.[CardType] ,t1.[CardHolderName] ,t1.[CardNo] ,t1.[VoucherBarCode] ,t1.[VoucherSerial]
		  ,t1.[CreatedBy] ,t1.[CreatedOn] ,t1.[ModifiedBy] ,t1.[ModifiedOn] ,t1.[Status] ,t1.[ChargableAmount] ,t1.[PaymentDiscount] ,t1.[CollectedAmount] ,t1.[RefNumber]
	from  T_InvoicePayment t1 with (nolock) 
	left join T_InvoiceHeader t2 with (nolock) on t1.TransId = t2.TransId and t2.CompanyCode= t1.CompanyCode and t1.ShiftId = t2.ShiftId
	where t2.ContractNo = @EventId and  t2.CompanyCode= @CompanyCode and t2.StoreId= @StoreId
	union all 
	select t1.[PaymentCode] ,t1.[CompanyCode] , t1.StoreId,  t1.[TransId] ,t1.[LineId] ,t1.[TotalAmt] ,t1.[ReceivedAmt] ,t1.[PaidAmt] ,t1.[ChangeAmt]
		  ,t1.[PaymentMode] ,t1.[CardType] ,t1.[CardHolderName] ,t1.[CardNo] ,t1.[VoucherBarCode] ,t1.[VoucherSerial]
		  ,t1.[CreatedBy] ,t1.[CreatedOn] ,t1.[ModifiedBy] ,t1.[ModifiedOn] ,t1.[Status] ,t1.[ChargableAmount] ,t1.[PaymentDiscount] ,t1.[CollectedAmount] ,t1.[RefNumber]
	from  T_SalesPayment t1 with (nolock) 
	left join T_SalesHeader t2 with (nolock) on t1.TransId = t2.TransId and t2.CompanyCode= t1.CompanyCode  and t1.ShiftId = t2.ShiftId
	where t2.ContractNo = @EventId and  t2.CompanyCode= @CompanyCode and t2.StoreId= @StoreId

GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_ItemStorage]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_ItemStorage] '','','','',''
CREATE PROCEDURE [dbo].[USP_S_T_ItemStorage] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@SLocId	nvarchar(50),
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 
	select  t1.[SLocId]
      ,t1.[CompanyCode]
      ,t1.[ItemCode]
	  ,t2.ItemName
	  ,t3.BarCode
      ,t1.[UOMCode]
      ,t1.[StoreId]
      ,t1.[Quantity] 
	from T_ItemStorage t1 with (nolock)
	  left join M_Item t2 with (nolock) on t1.ItemCode = t2.ItemCode and t1.CompanyCode = t2.CompanyCode
	  left join M_ItemUOM t3 with (nolock) on t1.ItemCode = t3.ItemCode  and t1.UOMCode = t3.UOMCode
	where (t1.CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')    
	AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	AND (t1.SLocId = @SLocId  or ISNULL(@SLocId, '')='') 
	AND (t1.ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='') 
	AND (t1.UOMCode = @UOMCode  or ISNULL(@UOMCode, '')='') 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_OpenShift]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_T_OpenShift] 'CP001','3006','2021/11/3','admin', 'XXXX'
CREATE PROCEDURE [dbo].[USP_S_T_OpenShift]
	@CompanyCode	nvarchar(50)	,
	@StoreId nvarchar(50),
	@TransDate nvarchar(50),
	@UserId nvarchar(50),
	@CounterId nvarchar(50) = null
AS	
select * from T_ShiftHeader with (nolock)
where 
Status = 'O'
and CompanyCode = @CompanyCode and StoreId = @StoreId and CONVERT( date, CreatedOn) = @TransDate    
	--AND (CreatedBy =@UserId  or ISNULL(@UserId, '')='')    
	AND (DeviceId =@CounterId  or ISNULL(@CounterId, '')='')    
   
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_Payment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_T_Payment] 'CP001', '', '','',null ,'DICP00100000002', null
CREATE PROCEDURE [dbo].[USP_S_T_Payment] 
	@CompanyCode	nvarchar(50),  
	@CusId	nvarchar(50),  
	@FromDate datetime,
	@ToDate datetime,
	@Top	nvarchar(50)= null, 
	@Id	nvarchar(50)= null,
	@Status nvarchar(50) = null
AS
begin
    select * from T_PaymentHeader  with (nolock)
	   
	where  (CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  
	 and (CusId = @CusId  or ISNULL(@CusId, '') = '')   
	 and (CONVERT(date, @FromDate) <= CONVERT(date,CreatedOn)  or ISNULL(@FromDate, '') = '')   
	 and (CONVERT(date, @ToDate) >= CONVERT(date,CreatedOn)  or ISNULL(@ToDate, '') = '')   
	 and (TransId = @Id  or ISNULL(@Id, '') = '')    
	  and (Status = @Status  or ISNULL(@Status, '') = '')    
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_PaymentLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_T_PaymentLine] 
	@CompanyCode	nvarchar(50),   
	@Id	nvarchar(50)= null 
	 
AS
begin
    select * from T_PaymentLine  with (nolock)
	   
	where  (CompanyCode = @CompanyCode  or ISNULL(@CompanyCode, '')='')  
	 
	 and (TransId = @Id  or ISNULL(@Id, '') = '')    
	 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_PickupAmount]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- USP_S_T_PickupAmount '','CP001','1001','211129','','','','','',''
CREATE   PROCEDURE [dbo].[USP_S_T_PickupAmount] 
	@Id	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@CounterId	nvarchar(50),
	@ShiftId	nvarchar(50),
	@PickupBy	nvarchar(50),
    @CreatedBy	nvarchar(50),
	@FDate	datetime, 
	@TDate	datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 select  [Id]
      ,[CompanyCode]
      ,[StoreId]
      ,[CounterId]
      ,[ShiftId]
      ,[PickupBy]
      ,[Amount]
      ,[Remarks]
      ,[CustomF1]
      ,[CustomF2]
      ,[CustomF3]
      ,[CustomF4]
      ,[CustomF5]
      ,[CreatedBy]
      ,[CreatedOn]
      ,isnull([Status],'O') [Status],
	   DailyId
	   from T_PickupAmount  with (nolock)
	   
	where  CompanyCode = @CompanyCode 
	 and (ISNULL(@FDate, '') = '' or  CONVERT(Date, CreatedOn) >= CONVERT(Date, @FDate))
	 and ( ISNULL(@TDate, '') = '' or CONVERT(Date, CreatedOn) <= CONVERT(Date, @TDate))
	
	
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (CounterId = @CounterId  or ISNULL(@CounterId, '') = '')   
	and (ShiftId = @ShiftId  or ISNULL(@ShiftId, '') = '')   
	and (PickupBy = @PickupBy  or ISNULL(@PickupBy, '') = '')   
	and (CreatedBy = @CreatedBy  or ISNULL(@CreatedBy, '') = '')   
	and (CONVERT(nvarchar(50), id)  = @Id  or ISNULL(  @Id , '')='')   
	and (  ISNULL(@DailyId, '') = ''  or 
	ShiftId in (select ShiftId from T_ShiftHeader 
	where DailyId = @DailyId
	and CompanyCode = @CompanyCode	
	AND (StoreId = @StoreId  or ISNULL(@StoreId, '')='')   
	and (CounterId = ''  or ISNULL(@CounterId, '') = '') ) )
	 
END

GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SaleLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
	--[USP_S_T_SaleLine]	'CP001','SO301100019296'

CREATE   PROCEDURE [dbo].[USP_S_T_SaleLine]
	-- Add the parameters for the stored procedure here
	
	@CompanyCode nvarchar(50),@TransId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select [TransId]
      ,[LineId]
      ,[CompanyCode]
      ,[ItemCode]
      ,[SLocId]
      ,[BarCode]
      ,[UOMCode]
      ,[Quantity]
      ,[Price]
      ,[LineTotal]
      ,[DiscountType]
      ,[DiscountAmt]
      ,[DiscountRate]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status]
      ,[Remark]
      ,[PromoId]
      ,[PromoType]
      ,[PromoPercent]
      ,[PromoBaseItem]
      ,[SalesMode]
      ,[TaxRate]
      ,[TaxAmt]
      ,[TaxCode]
      ,[MinDepositAmt]
      ,[MinDepositPercent]
      ,[DeliveryType]
      ,[POSService]
      ,[StoreAreaId]
      ,[TimeFrameId]
      ,[AppointmentDate]
      ,[BomID]
      ,[PromoPrice]
      ,[PromoLineTotal]
      ,[BaseLine]
      ,[BaseTransId]
      , ISNULL(abs(OpenQty),0) as  OpenQty 
      ,[PromoDisAmt]
      ,[IsPromo]
      ,[IsSerial]
      ,[IsVoucher]
      ,[PrepaidCardNo]
      ,[MemberDate]
      ,[MemberValue]
      ,[StartDate]
      ,[EndDate]
      ,[ItemType]
      ,[Description] , 
	  ItemName
	  , Phone, Name, SerialNum
	  , PriceListId,
	  Custom1,
	   Custom2,
	    Custom3,
		 Custom4,
		  Custom5,
		    ProductId, WeightScaleBarcode, LineTotalBefDis, LineTotalDisIncludeHeader, BookletNo
	from 
	(
	--select distinct t1.[TransId]
 --     ,t1.[LineId]
 --     ,t1.[CompanyCode]
 --     ,t1.[ItemCode]
 --     ,t1.[SLocId]
 --     ,t1.[BarCode]
 --     ,t1.[UOMCode]
 --     ,t1.[Quantity]
 --     ,t1.[Price]
 --     ,t1.[LineTotal]
 --     ,t1.[DiscountType]
 --     ,t1.[DiscountAmt]
 --     ,t1.[DiscountRate]
 --     ,t1.[CreatedBy]
 --     ,t1.[CreatedOn]
 --     ,t1.[ModifiedBy]
 --     ,t1.[ModifiedOn]
 --     ,t1.[Status]
 --     ,t1.[Remark]
 --     ,t1.[PromoId]
 --     ,t1.[PromoType]
 --     ,t1.[PromoPercent]
 --     ,t1.[PromoBaseItem]
 --     ,t1.[SalesMode]
 --     ,t1.[TaxRate]
 --     ,t1.[TaxAmt]
 --     ,t1.[TaxCode]
 --     ,t1.[MinDepositAmt]
 --     ,t1.[MinDepositPercent]
 --     ,t1.[DeliveryType]
 --     ,t1.[POSService]
 --     ,t1.[StoreAreaId]
 --     ,t1.[TimeFrameId]
 --     ,t1.[AppointmentDate]
 --     ,t1.[BomID]
 --     ,t1.[PromoPrice]
 --     ,t1.[PromoLineTotal]
 --     ,t1.[BaseLine]
 --     ,t1.[BaseTransId]
 --     ,t1.Quantity -  SUM( ISNULL(abs(t5.Quantity),0)) OVER(PARTITION BY t1.TransId, t1.LineId, t1.ItemCode, t1.UomCode) AS    OpenQty 
 --     ,t1.[PromoDisAmt]
 --     ,t1.[IsPromo]
 --     ,t1.[IsSerial]
 --     ,t1.[IsVoucher]
 --     ,t1.[PrepaidCardNo]
 --     ,t1.[MemberDate]
 --     ,t1.[MemberValue]
 --     ,t1.[StartDate]
 --     ,t1.[EndDate]
 --     ,t1.[ItemType]
 --     ,t1.[Description] , t2.ItemName
	--  , t1.Phone, t1.Name, t1.SerialNum
	--  , t1.PriceListId,
	--  t1.Custom1,
	--   t1.Custom2,
	--    t1.Custom3,
	--	 t1.Custom4,
	--	  t1.Custom5,
	--	    t1.ProductId, t1.WeightScaleBarcode, t1.LineTotalBefDis, t1.LineTotalDisIncludeHeader, t1.BookletNo
	--from T_SalesLine t1 with(nolock)  
	--left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode 
	--left join  T_SalesLine t5 with(nolock)  on t5.CompanyCode = t1.CompanyCode and t5.BaseTransId = t1.TransId and t5.BaseLine = t1.LineId
	--left join  T_SalesHeader t6 with(nolock)  on t6.CompanyCode = t1.CompanyCode and t5.TransId = t6.TransId and t6.SalesMode ='RETURN'



	--where t1.TransId = @TransId and t1.CompanyCode = @CompanyCode
	select distinct t1.[TransId]
      ,t1.[LineId]
      ,t1.[CompanyCode]
      ,t1.[ItemCode]
      ,t1.[SLocId]
      ,t1.[BarCode]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[DiscountType]
      ,t1.[DiscountAmt]
      ,t1.[DiscountRate]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,t1.[Remark]
      ,t1.[PromoId]
      ,t1.[PromoType]
      ,t1.[PromoPercent]
      ,t1.[PromoBaseItem]
      ,t1.[SalesMode]
      ,t1.[TaxRate]
      ,t1.[TaxAmt]
      ,t1.[TaxCode]
      ,t1.[MinDepositAmt]
      ,t1.[MinDepositPercent]
      ,t1.[DeliveryType]
      ,t1.[POSService]
      ,t1.[StoreAreaId]
      ,t1.[TimeFrameId]
      ,t1.[AppointmentDate]
      ,t1.[BomID]
      ,t1.[PromoPrice]
      ,t1.[PromoLineTotal]
      ,t1.[BaseLine]
      ,t1.[BaseTransId]
      --,t1.Quantity -  SUM( ISNULL(abs(t5.Quantity),0)) OVER(PARTITION BY t5.TransId, t5.LineId, t5.ItemCode, t5.UomCode) AS    OpenQty 
	  ,t1.Quantity -  SUM( ISNULL(abs(t5.Quantity),0)) OVER(PARTITION BY t5.TransId, t5.LineId, t5.ItemCode, t5.UomCode) -  SUM( ISNULL(abs(t8.Quantity),0)) OVER(PARTITION BY t8.TransId, t8.LineId, t8.ItemCode, t8.UomCode) AS    OpenQty 
      ,t1.[PromoDisAmt]
      ,t1.[IsPromo]
      ,t1.[IsSerial]
      ,t1.[IsVoucher]
      ,t1.[PrepaidCardNo]
      ,t1.[MemberDate]
      ,t1.[MemberValue]
      ,t1.[StartDate]
      ,t1.[EndDate]
      ,t1.[ItemType]
      ,t1.[Description] , t2.ItemName
	  , t1.Phone, t1.Name, t1.SerialNum
	  , t1.PriceListId,
	  t1.Custom1,
	   t1.Custom2,
	   t1.Custom3,
		 t1.Custom4,
		  t1.Custom5,
		    t1.ProductId, t1.WeightScaleBarcode, t1.LineTotalBefDis, t1.LineTotalDisIncludeHeader, t1.BookletNo
	from T_SalesLine t1 with(nolock)  
	left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode 
	left join  T_SalesHeader t6 with(nolock)  on t6.CompanyCode = t1.CompanyCode and t1.TransId = t6.RefTransId and t6.SalesMode ='RETURN'
	left join  T_SalesLine t5 with(nolock)  on t5.CompanyCode = t1.CompanyCode and t5.TransId = t6.TransId and t5.BaseLine = t1.LineId
	
	left join  T_SalesHeader t7 with(nolock)  on t7.CompanyCode = t1.CompanyCode and t1.TransId = t7.RefTransId and t7.SalesMode ='EX'
	left join  T_SalesLine t8 with(nolock)  on t8.CompanyCode = t1.CompanyCode and t8.TransId = t7.TransId and t8.BaseLine = t1.LineId

	where t1.TransId = @TransId and t1.CompanyCode = @CompanyCode

	--union all
 --	select distinct t1.[TransId]
	--	  ,t1.[LineId]
	--	  ,t1.[CompanyCode]
	--	  ,t1.[ItemCode]
	--	  ,t1.[SLocId]
	--	  ,t1.[BarCode]
	--	  ,t1.[UOMCode]
	--	  ,t1.[Quantity]
	--	  ,t1.[Price]
	--	  ,t1.[LineTotal]
	--	  ,t1.[DiscountType]
	--	  ,t1.[DiscountAmt]
	--	  ,t1.[DiscountRate]
	--	  ,t1.[CreatedBy]
	--	  ,t1.[CreatedOn]
	--	  ,t1.[ModifiedBy]
	--	  ,t1.[ModifiedOn]
	--	  ,t1.[Status]
	--	  ,t1.[Remark]
	--	  ,t1.[PromoId]
	--	  ,t1.[PromoType]
	--	  ,t1.[PromoPercent]
	--	  ,t1.[PromoBaseItem]
	--	  ,t1.[SalesMode]
	--	  ,t1.[TaxRate]
	--	  ,t1.[TaxAmt]
	--	  ,t1.[TaxCode]
	--	  ,t1.[MinDepositAmt]
	--	  ,t1.[MinDepositPercent]
	--	  ,t1.[DeliveryType]
	--	  ,t1.[POSService]
	--	  ,t1.[StoreAreaId]
	--	  ,t1.[TimeFrameId]
	--	  ,t1.[AppointmentDate]
	--	  ,t1.[BomID]
	--	  ,t1.[PromoPrice]
	--	  ,t1.[PromoLineTotal]
	--	  ,t1.[BaseLine]
	--	  ,t1.[BaseTransId]
	--	  ,t1.Quantity -  SUM( ISNULL(abs(t5.Quantity),0)) OVER(PARTITION BY t1.TransId, t1.LineId, t1.ItemCode, t1.UomCode) AS    OpenQty 
	--	  ,t1.[PromoDisAmt]
	--	  ,t1.[IsPromo]
	--	  ,t1.[IsSerial]
	--	  ,t1.[IsVoucher]
	--	  ,t1.[PrepaidCardNo]
	--	  ,t1.[MemberDate]
	--	  ,t1.[MemberValue]
	--	  ,t1.[StartDate]
	--	  ,t1.[EndDate]
	--	  ,t1.[ItemType]
	--	  ,t1.[Description] , t2.ItemName
	--	  , t1.Phone, t1.Name, t1.SerialNum
	--	  , t1.PriceListId,
	--	  t1.Custom1,
	--	   t1.Custom2,
	--		t1.Custom3,
	--		 t1.Custom4,
	--		  t1.Custom5,
	--			t1.ProductId, t1.WeightScaleBarcode, t1.LineTotalBefDis, t1.LineTotalDisIncludeHeader, t1.BookletNo
	--from T_SalesLine t1 with(nolock)  
	--left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode 
	--left join  T_SalesLine t5 with(nolock)  on t5.CompanyCode = t1.CompanyCode and t5.BaseTransId = t1.TransId and t5.BaseLine = t1.LineId
	--left join  T_SalesHeader t6 with(nolock)  on t6.CompanyCode = t1.CompanyCode and t5.TransId = t6.TransId and t6.SalesMode ='EX'
	--where t1.TransId = @TransId and t1.CompanyCode = @CompanyCode

	) tmp

	group by   [TransId]
      ,[LineId]
      ,[CompanyCode]
      ,[ItemCode]
      ,[SLocId]
      ,[BarCode]
      ,[UOMCode]
      ,[Quantity]
      ,[Price]
      ,[LineTotal]
      ,[DiscountType]
      ,[DiscountAmt]
      ,[DiscountRate]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status]
      ,[Remark]
      ,[PromoId]
      ,[PromoType]
      ,[PromoPercent]
      ,[PromoBaseItem]
      ,[SalesMode]
      ,[TaxRate]
      ,[TaxAmt]
      ,[TaxCode]
      ,[MinDepositAmt]
      ,[MinDepositPercent]
      ,[DeliveryType]
      ,[POSService]
      ,[StoreAreaId]
      ,[TimeFrameId]
      ,[AppointmentDate]
      ,[BomID]
      ,[PromoPrice]
      ,[PromoLineTotal]
      ,[BaseLine]
      ,[BaseTransId]
      ,OpenQty
      ,[PromoDisAmt]
      ,[IsPromo]
      ,[IsSerial]
      ,[IsVoucher]
      ,[PrepaidCardNo]
      ,[MemberDate]
      ,[MemberValue]
      ,[StartDate]
      ,[EndDate]
      ,[ItemType]
      ,[Description] , 
	  ItemName
	  , Phone, Name, SerialNum
	  , PriceListId,
	  Custom1,
	   Custom2,
	    Custom3,
		 Custom4,
		  Custom5,
		    ProductId, WeightScaleBarcode, LineTotalBefDis, LineTotalDisIncludeHeader,  BookletNo
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SaleLine_CheckIn]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
	--[USP_S_T_SaleLine_CheckIn]	'CP001','SOCP001W010100000416'

CREATE PROCEDURE [dbo].[USP_S_T_SaleLine_CheckIn]
	-- Add the parameters for the stored procedure here 
	@CompanyCode nvarchar(50),@TransId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select distinct t1.[TransId]
      ,t1.[LineId]
      ,t1.[CompanyCode]
      ,t1.[ItemCode]
      ,t1.[SLocId]
      ,t1.[BarCode]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[DiscountType]
      ,t1.[DiscountAmt]
      ,t1.[DiscountRate]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,t1.[Remark]
      ,t1.[PromoId]
      ,t1.[PromoType]
      ,t1.[PromoPercent]
      ,t1.[PromoBaseItem]
      ,t1.[SalesMode]
      ,t1.[TaxRate]
      ,t1.[TaxAmt]
      ,t1.[TaxCode]
      ,t1.[MinDepositAmt]
      ,t1.[MinDepositPercent]
      ,t1.[DeliveryType]
      ,t1.[POSService]
      ,t1.[StoreAreaId]
      ,t1.[TimeFrameId]
      ,t1.[AppointmentDate]
      ,t1.[BomID]
      ,t1.[PromoPrice]
      ,t1.[PromoLineTotal]
      ,t1.[BaseLine]
      ,t1.[BaseTransId]
	 
      ,t1.Quantity -  SUM( ISNULL(t5.Quantity,0)) OVER(PARTITION BY t1.TransId, t1.LineId, t1.ItemCode, t1.UomCode) AS    OpenQty 
      ,t1.[PromoDisAmt]
      ,t1.[IsPromo]
      ,t1.[IsSerial]
      ,t1.[IsVoucher]
      ,t1.[PrepaidCardNo]
      ,t1.[MemberDate]
      ,t1.[MemberValue]
      ,t1.[StartDate]
      ,t1.[EndDate]
      ,t1.[ItemType]
      ,t1.[Description] , t2.ItemName 
from T_SalesLine t1 with(nolock)  
	left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode
	left join  T_InvoiceHeader t6 with(nolock)  on t6.CompanyCode = t1.CompanyCode and t6.RefTransId = t1.TransId  and t6.InvoiceType = 'CheckIn'
	left join  T_InvoiceLine t5 with(nolock)  on t5.CompanyCode = t1.CompanyCode and t5.TransId = t6.TransId and t5.BaseLine = t1.LineId
	
--left join T_InvoiceHeader t7 with(nolock)  on t7.T = 
where t1.TransId = @TransId and t1.CompanyCode = @CompanyCode 

 


END
--select * from T_InvoiceHeader where TransId = 'ARCP001W010100000570'

--select * from T_InvoiceLine where BaseTransId = 'SOCP001W010100000629'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SaleLine_CheckOut]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
	--[USP_S_T_SaleLine_CheckIn]	'CP001','SOCP001W010100000416'

create PROCEDURE [dbo].[USP_S_T_SaleLine_CheckOut]
	-- Add the parameters for the stored procedure here 
	@CompanyCode nvarchar(50), @TransId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	select distinct t1.[TransId]
      ,t1.[LineId]
      ,t1.[CompanyCode]
      ,t1.[ItemCode]
      ,t1.[SLocId]
      ,t1.[BarCode]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[DiscountType]
      ,t1.[DiscountAmt]
      ,t1.[DiscountRate]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,t1.[Remark]
      ,t1.[PromoId]
      ,t1.[PromoType]
      ,t1.[PromoPercent]
      ,t1.[PromoBaseItem]
      ,t1.[SalesMode]
      ,t1.[TaxRate]
      ,t1.[TaxAmt]
      ,t1.[TaxCode]
      ,t1.[MinDepositAmt]
      ,t1.[MinDepositPercent]
      ,t1.[DeliveryType]
      ,t1.[POSService]
      ,t1.[StoreAreaId]
      ,t1.[TimeFrameId]
      ,t1.[AppointmentDate]
      ,t1.[BomID]
      ,t1.[PromoPrice]
      ,t1.[PromoLineTotal]
      ,t1.[BaseLine]
      ,t1.[BaseTransId]
	 
      ,t1.Quantity -  SUM( ISNULL(t5.Quantity,0)) OVER(PARTITION BY t1.TransId, t1.LineId, t1.ItemCode, t1.UomCode) AS    OpenQty 
      ,t1.[PromoDisAmt]
      ,t1.[IsPromo]
      ,t1.[IsSerial]
      ,t1.[IsVoucher]
      ,t1.[PrepaidCardNo]
      ,t1.[MemberDate]
      ,t1.[MemberValue]
      ,t1.[StartDate]
      ,t1.[EndDate]
      ,t1.[ItemType]
      ,t1.[Description] , t2.ItemName 
from T_SalesLine t1 with(nolock)  
	left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode
	left join  T_InvoiceHeader t6 with(nolock)  on t6.CompanyCode = t1.CompanyCode and t6.RefTransId = t1.TransId  and t6.InvoiceType = 'CheckOut'
	left join  T_InvoiceLine t5 with(nolock)  on t5.CompanyCode = t1.CompanyCode and t5.TransId = t6.TransId and t5.BaseLine = t1.LineId
	
--left join T_InvoiceHeader t7 with(nolock)  on t7.T = 
where t1.TransId = @TransId and t1.CompanyCode = @CompanyCode 

 


END
--select * from T_InvoiceHeader where TransId = 'ARCP001W010100000570'

--select * from T_InvoiceLine where BaseTransId = 'SOCP001W010100000629'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesEcom]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_T_SalesEcom]
	@CompanyCode	nvarchar(50), 	@EcomId	nvarchar(50)
	AS	  
	select * from T_SalesHeader with (nolock) where DataSource <> 'POS' and OMSId = @EcomId
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_T_SalesHeader]
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(50)	,
	@StoreId	nvarchar(50)	 
 
AS	
	select * from T_SalesHeader with (nolock) 
where TransId= @TransId and CompanyCode= @CompanyCode and StoreId= @StoreId
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesHeader_ByTransId]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_T_SalesHeader_ByTransId] 'CP001', '3011', 'SO301100019293' 
CREATE PROCEDURE [dbo].[USP_S_T_SalesHeader_ByTransId]
	@CompanyCode nvarchar(50),
	@StoreId	nvarchar(50),   
	@TransId	nvarchar(50) 
	 
AS
begin
	Declare @OtherTerminalId nvarchar(100) ;
	Declare @PinSerialDisplayUpper nvarchar(100) ;
	--CustomField4
	select distinct top 1 @OtherTerminalId = CustomField3, @PinSerialDisplayUpper  = CustomField4   from S_GeneralSetting t1 with (nolock) where t1.CompanyCode = @CompanyCode and StoreId=@StoreId  and t1.SettingId = 'MWIEpay'

	
SELECT  t1.[TransId]
			  ,t1.[CompanyCode]
			  ,t4.[CompanyName]
			  ,t1.[StoreId]
			  ,t1.[ContractNo]
			  --,t1.[StoreName]
			  ,t5.[StoreName]  + '<br />'  + '(' + ISNULL(t5.CustomField3, '') +')' as 'StoreName'
			  ,t1.[ShiftId]
			  ,t1.[CusId]
			  ,t1.[CusIdentifier]
			  ,t1.[TotalAmount]
			  ,t1.[TotalPayable]
			  ,t1.[TotalDiscountAmt]
			  ,t1.[TotalReceipt]
			  ,t1.[AmountChange]
			  ,t1.[PaymentDiscount]
			  ,t1.[TotalTax]
			  ,t1.[DiscountType]
			  ,t1.[DiscountAmount]
			  ,t1.[DiscountRate]
			  ,t1.[CreatedOn]
			  ,t1.[CreatedBy]
			  ,t1.[ModifiedOn]
			  ,t1.[ModifiedBy]
			  --,t1.Status
			   ,case when t1.IsCanceled = 'Y' then 'Canceled' else case when t1.Status = 'H' then 'Hold' when t1.Status = 'O' then 'Open' when t1.Status = 'C' then 'Closed' end end as Status
			  ,t1.[IsCanceled]
			  ,t1.[Remarks]
			  ,t1.[SalesPerson]
			  ,isnull(t1.[SalesPersonName], t2.EmployeeName) SalesPersonName
			  ,t1.[SalesMode]
			  ,t1.[SalesType]
			  ,isnull(t3.[TransId], t1.[RefTransId]) RefTransId
			  ,t1.[ManualDiscount]
			  ,t1.[DataSource]
			  ,t1.[POSType]
			  ,t1.[SyncMWIStatus]
			  ,t1.[SyncMWIDate]
			  ,t1.[SyncMWIMsg]
			  ,t1.[EInvoice]
			  ,t1.[SyncJAStatus]
			  ,t1.[SyncJADate]
			  ,t1.[SyncJAMsg]
			  ,t1.[Phone]
			  ,t1.[CusName]
			  ,t1.OMSId
			  ,t1.OMSStatus
			  ,t1.[CusAddress]
			 ,isnull(t3.Reason, t1.Reason) Reason
			 ,t1.CollectedStatus
			 ,t1.SyncMWIDate
			 ,t1.SyncMWIMsg
			 ,isnull(t1.SyncMWIStatus, 'N') SyncMWIStatus,
			 t4.Email,
			 t4.Website,
			 t5.Address StoreAddress,
			 t5.Phone StorePhone,
			 t4.Phone CompanyPhone,
			 t1.RoundingOff
			 ,t1.ApprovalId,
			 t1.CusGrpId
			 ,t1.RewardPoints,
			 t1.ExpiryDate, t1.TerminalId, t1.LuckyNo, ISNULL(t6.LoyaltyName , t1.LoyaltyId) LoyaltyName
			 --ISNULL(t1.CustomF1, @OtherTerminalId )
			 , @OtherTerminalId  OtherTerminalId
			 ,@PinSerialDisplayUpper PinSerialDisplayUpper
		  FROM [T_SalesHeader] t1 with (nolock ) 
		  left join M_Employee t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.SalesPerson = t2.EmployeeId
		  left join M_Company t4 with (nolock ) on t1.CompanyCode = t4.CompanyCode
		  left join M_Store t5 with (nolock ) on t1.CompanyCode = t4.CompanyCode and t5.StoreId = t1.StoreId
		  left join T_SalesHeader  t3 with (nolock) on t1.TransId = t3.RefTransId and t1.CompanyCode = t3.CompanyCode and t1.StoreId = t3.StoreId and t3.IsCanceled = 'C'
		    left join S_LoyaltyHeader t6 with (nolock ) on t1.CompanyCode = t6.CompanyCode and t6.LoyaltyId = t1.LoyaltyId
		  where  (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			and   (ISNULL(@StoreId, '') = '' OR t1.StoreId = @StoreId )
			and t1.TransId=@TransId
			--and  ( (ISNULL(@Status, '') = '' or 
			--		(
			--			CASE WHEN @Status = 'N' THEN t1.IsCanceled END = 'Y' and t1.Status = 'C')  
			--		or  (CASE WHEN @Status = 'C' THEN t1.IsCanceled END = 'N' and t1.Status = 'C')  
			--		or ( CASE WHEN @Status = 'O' THEN t1.IsCanceled END = 'N' and t1.Status = 'O')  
			--		or ( CASE WHEN @Status = 'H' THEN t1.IsCanceled END = 'N' and t1.Status = 'H')  
			--	)  )
			  --and t1.IsCanceled <> 'C'
		  order by CreatedOn desc

--select t1.[TransId]
--      ,t1.[CompanyCode]
--      ,t1.[StoreId]
--      ,t1.[ContractNo]
--      ,t1.[StoreName]
--      ,t1.[ShiftId]
--      ,t1.[CusId]
--      ,t1.[CusIdentifier]
--      ,t1.[TotalAmount]
--      ,t1.[TotalPayable]
--      ,t1.[TotalDiscountAmt]
--      ,t1.[TotalReceipt]
--      ,t1.[AmountChange]
--      ,t1.[PaymentDiscount]
--      ,t1.[TotalTax]
--      ,t1.[DiscountType]
--      ,t1.[DiscountAmount]
--      ,t1.[DiscountRate]
--      ,t1.[CreatedOn]
--      ,t1.[CreatedBy]
--      ,t1.[ModifiedOn]
--      ,t1.[ModifiedBy]
--      ,t1.[Status]
--      ,t1.[IsCanceled]
--      ,t1.[Remarks]
--      ,t1.[SalesPerson]
--      ,t1.[SalesPersonName]
--      ,t1.[SalesMode]
--      ,t1.[SalesType]
--      ,t1.[RefTransId]
--      ,t1.[ManualDiscount]
--      ,t1.[DataSource]
--      ,t1.[POSType]
--      ,t1.[SyncMWIStatus]
--      ,t1.[SyncMWIDate]
--      ,t1.[SyncMWIMsg]
--      ,t1.[EInvoice]
--      ,t1.[SyncJAStatus]
--      ,t1.[SyncJADate]
--      ,t1.[SyncJAMsg]
--      ,t1.[Phone]
--      ,t1.[CusName]
--      ,t1.[CusAddress]
--      ,isnull(t2.Reason, t1.Reason) Reason
--from T_SalesHeader  t1 with (nolock)
--left join T_SalesHeader  t2 with (nolock) on t1.TransId = t2.RefTransId and t1.CompanyCode = t2.CompanyCode and t1.StoreId = t2.StoreId and t2.IsCanceled = 'C'
--where  (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
--	AND (t1.StoreId = @StoreId  or ISNULL(@StoreId, '')='')    
--	and t1.TransId=@TransId
end 



GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesHeaderByOrderId]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_S_T_SalesHeaderByOrderId]
	@CompanyCode	nvarchar(50)	,
    @StoreId	nvarchar(50)	 ,
	@OrderId	nvarchar(50)

 
AS	
	select * from T_SalesHeader with (nolock) 
	where OrderId = @OrderId and CompanyCode= @CompanyCode and StoreId= @StoreId


 

/****** Object:  Table [dbo].[S_Log]    Script Date: 12/13/2021 4:48:25 PM ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesHeaderByType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- USP_S_T_SalesHeaderByType 'CP001' ,'W0101', '','admin','','','', '', '',''
-- USP_S_T_SalesHeaderByType 'CP001' ,'W0101', '','','','2021-04-01','2021-05-28', 'ECOM',  'H',''
CREATE PROCEDURE [dbo].[USP_S_T_SalesHeaderByType] 
	@CompanyCode	nvarchar(50), 
	@StoreId	nvarchar(50),
	@TransId	nvarchar(50),
	@SalesMan nvarchar(50),
	@Type	nvarchar(250),
	@Fromdate	nvarchar(50),
	@Todate	nvarchar(50),
	@DataSource	nvarchar(50), 
	@Status	nvarchar(50),
	@Key	nvarchar(150),
	@ViewBy	nvarchar(150)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	/****** Script for SelectTopNRows command from SSMS  ******/
	 --USP_S_T_SalesHeaderByType 'CP001' ,'W0101', '','','','2021-05-22','2021-06-21', 'POS',  '','', 'admin'
	if  isnull(@DataSource,'')  = ''
	begin
    
		SELECT  t1.[TransId]
			  ,t1.[CompanyCode]
			  ,t1.[StoreId]
			  ,t1.[ContractNo]
			  ,t1.[StoreName]
			  ,t1.[ShiftId]
			  ,t1.[CusId]
			  ,t1.[CusIdentifier]
			  ,t1.[TotalAmount]
			  ,t1.[TotalPayable]
			  ,t1.[TotalDiscountAmt]
			  ,t1.[TotalReceipt]
			  ,t1.[AmountChange]
			  ,t1.[PaymentDiscount]
			  ,t1.[TotalTax]
			  ,t1.[DiscountType]
			  ,t1.[DiscountAmount]
			  ,t1.[DiscountRate]
			  ,t1.[CreatedOn]
			  ,t1.[CreatedBy]
			  ,t1.[ModifiedOn]
			  ,t1.[ModifiedBy]
			  --,t1.Status
			   ,case when IsCanceled = 'Y' then 'Canceled' else case when t1.Status = 'H' then 'Hold' when t1.Status = 'O' then 'Open' when t1.Status = 'C' then 'Closed' end end as Status
			  ,t1.[IsCanceled]
			  ,t1.[Remarks]
			  ,t1.[SalesPerson]
			  ,isnull([SalesPersonName], t2.EmployeeName) SalesPersonName
			   ,case when t1.[SalesMode] = 'EX' then 'EXCHANGE' else t1.[SalesMode] end as [SalesMode]  
			  ,  t1.[SalesType] 
			  ,t1.[RefTransId]
			  ,t1.[ManualDiscount]
			  ,t1.[DataSource]
			  ,t1.[POSType]
			  ,t1.[SyncMWIStatus]
			  ,t1.[SyncMWIDate]
			  ,t1.[SyncMWIMsg]
			  ,t1.[EInvoice]
			  ,t1.[SyncJAStatus]
			  ,t1.[SyncJADate]
			  ,t1.[SyncJAMsg]
			  ,t1.[Phone]
			  ,t1.[CusName]
			  ,t1.[CusAddress]
			  ,t1.[Reason]
			  ,t1.CollectedStatus
		  FROM [T_SalesHeader] t1 with (nolock ) 
		    left join M_Employee t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.SalesPerson = t2.EmployeeId
		    INNER JOIN M_UserStore t3 ON t3.StoreId = t1.StoreId
			 INNER JOIN M_User t4 ON t4.UserId = t3.UserId
		  where  (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
			and   (ISNULL(@StoreId, '') = '' OR t1.StoreId = @StoreId )
			and  (ISNULL(@Type, '') = '' OR t1.SalesMode = @Type )	 
			and   (ISNULL(@Fromdate, '') = '' OR CONVERT( date, t1.CreatedOn) >= CONVERT( date, @Fromdate) )
			and   (ISNULL(@Todate, '') = '' OR CONVERT( date, t1.CreatedOn) <= CONVERT( date, @Todate) )
			 and   (ISNULL(@SalesMan, '') = '' OR t2.EmployeeId = @SalesMan )

			 	and  ( (ISNULL(@Status, '') = '' or 
					(
						CASE WHEN @Status = 'N' THEN ISNULL( t1.IsCanceled , 'N') END = 'Y' and t1.Status = 'C')  
					or  (CASE WHEN @Status = 'C' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'C')  
					or ( CASE WHEN @Status = 'O' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'O')  
					or ( CASE WHEN @Status = 'H' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'H')  
				)  )
				and ISNULL( t1.IsCanceled , 'N') <> 'C'

			--and  ( (ISNULL(@Status, '') = '' or 
			--		(
			--			CASE WHEN @Status = 'N' THEN t1.IsCanceled END = 'Y' and t1.Status = 'C')  
			--		or  (CASE WHEN @Status = 'C' THEN t1.IsCanceled END = 'N' and t1.Status = 'C')  
			--		or ( CASE WHEN @Status = 'O' THEN t1.IsCanceled END = 'N' and t1.Status = 'O')  
			--		or ( CASE WHEN @Status = 'H' THEN t1.IsCanceled END = 'N' and t1.Status = 'H')  
			--	)  )
			--  and t1.IsCanceled <> 'C' 
			   and   (ISNULL(@TransId, '') = '' OR  t1.TransId = @TransId ) 
			   and  t4.Username = @ViewBy
		  order by CreatedOn desc
    end
	else
	begin
		if  @DataSource  = 'Ecom'
		begin
    
			SELECT  t1.[TransId]
				  ,t1.[CompanyCode]
				  ,t1.[StoreId]
				  ,t1.[ContractNo]
				  ,t1.[StoreName]
				  ,t1.[ShiftId]
				  ,t1.[CusId]
				  ,t1.[CusIdentifier]
				  ,t1.[TotalAmount]
				  ,t1.[TotalPayable]
				  ,t1.[TotalDiscountAmt]
				  ,t1.[TotalReceipt]
				  ,t1.[AmountChange]
				  ,t1.[PaymentDiscount]
				  ,t1.[TotalTax]
				  ,t1.[DiscountType]
				  ,t1.[DiscountAmount]
				  ,t1.[DiscountRate]
				  ,t1.[CreatedOn]
				  ,t1.[CreatedBy]
				  ,t1.[ModifiedOn]
				  ,t1.[ModifiedBy]
				  --,t1.Status
				    ,case when IsCanceled = 'Y' then 'Canceled' else case when t1.Status = 'H' then 'Hold' when t1.Status = 'O' then 'Open' when t1.Status = 'C' then 'Closed' end end as Status
				  ,t1.[IsCanceled]
				  ,t1.[Remarks]
				  ,t1.[SalesPerson]
				  ,isnull([SalesPersonName], t2.EmployeeName) SalesPersonName
				  ,case when t1.[SalesMode] = 'EX' then 'EXCHANGE' else t1.[SalesMode] end as [SalesMode]  
				  ,t1.[SalesType]
				  ,t1.[RefTransId]
				  ,t1.[ManualDiscount]
				  ,t1.[DataSource]
				  ,t1.[POSType]
				  ,t1.[SyncMWIStatus]
				  ,t1.[SyncMWIDate]
				  ,t1.[SyncMWIMsg]
				  ,t1.[EInvoice]
				  ,t1.[SyncJAStatus]
				  ,t1.[SyncJADate]
				  ,t1.[SyncJAMsg]
				  ,t1.[Phone]
				  ,t1.[CusName]
				  ,t1.[CusAddress]
				  ,t1.[Reason],t1.CollectedStatus
			  FROM [T_SalesHeader] t1 with (nolock ) 
			  left join M_Employee t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.SalesPerson = t2.EmployeeId
			      INNER JOIN M_UserStore t3 ON t3.StoreId = t1.StoreId
			 INNER JOIN M_User t4 ON t4.UserId = t3.UserId
			  where  (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
				and   (ISNULL(@StoreId, '') = '' OR t1.StoreId = @StoreId )
				and  (ISNULL(@Type, '') = '' OR t1.SalesMode = @Type )	 
				and   (ISNULL(@Fromdate, '') = '' OR CONVERT( date, t1.CreatedOn) >= CONVERT( date, @Fromdate) )
				and   (ISNULL(@Todate, '') = '' OR CONVERT( date, t1.CreatedOn) <= CONVERT( date, @Todate) )
				and t1.DataSource <> 'POS'
				and   (ISNULL(@SalesMan, '') = '' OR t2.EmployeeId = @SalesMan )
					and  ( (ISNULL(@Status, '') = '' or 
					(
						CASE WHEN @Status = 'N' THEN ISNULL( t1.IsCanceled , 'N') END = 'Y' and t1.Status = 'C')  
					or  (CASE WHEN @Status = 'C' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'C')  
					or ( CASE WHEN @Status = 'O' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'O')  
					or ( CASE WHEN @Status = 'H' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'H')  
				)  )
				--and ISNULL( t1.IsCanceled , 'N') <> 'C'

				--and  ( (ISNULL(@Status, '') = '' or 
				--	(
				--		CASE WHEN @Status = 'N' THEN t1.IsCanceled END = 'Y' and t1.Status = 'C')  
				--	or  (CASE WHEN @Status = 'C' THEN t1.IsCanceled END = 'N' and t1.Status = 'C')  
				--	or ( CASE WHEN @Status = 'O' THEN t1.IsCanceled END = 'N' and t1.Status = 'O')  
				--	or ( CASE WHEN @Status = 'H' THEN t1.Status END = 'H' and t1.Status = 'H')  
				--)  )
				   and   (ISNULL(@TransId, '') = '' OR  t1.TransId = @TransId ) 
			    --and t1.IsCanceled <> 'C'
			     and  t4.Username = @ViewBy
			  order by CreatedOn desc
		end
		else
			SELECT distinct  t1.[TransId]
				  ,t1.[CompanyCode]
				  ,t1.[StoreId]
				  ,t1.[ContractNo]
				  ,t1.[StoreName]
				  ,t1.[ShiftId]
				  ,t1.[CusId]
				  ,t1.[CusIdentifier]
				  ,t1.[TotalAmount]
				  ,t1.[TotalPayable]
				  ,t1.[TotalDiscountAmt]
				  ,t1.[TotalReceipt]
				  ,t1.[AmountChange]
				  ,t1.[PaymentDiscount]
				  ,t1.[TotalTax]
				  ,t1.[DiscountType]
				  ,t1.[DiscountAmount]
				  ,t1.[DiscountRate]
				  ,t1.[CreatedOn]
				  ,t1.[CreatedBy]
				  ,t1.[ModifiedOn]
				  ,t1.[ModifiedBy]
				  --,t1.Status
				  ,case when IsCanceled = 'Y' then 'Canceled' else case when t1.Status = 'H' then 'Hold' when t1.Status = 'O' then 'Open' when t1.Status = 'C' then 'Closed' end end as Status
				  ,t1.[IsCanceled]
				  ,t1.[Remarks]
				  ,t1.[SalesPerson]
				  ,isnull([SalesPersonName], t2.EmployeeName) SalesPersonName
				    ,case when t1.[SalesMode] = 'EX' then 'EXCHANGE' else t1.[SalesMode] end as [SalesMode]  
				  ,t1.[SalesType]
				  ,t1.[RefTransId]
				  ,t1.[ManualDiscount]
				  ,t1.[DataSource]
				  ,t1.[POSType]
				  ,t1.[SyncMWIStatus]
				  ,t1.[SyncMWIDate]
				  ,t1.[SyncMWIMsg]
				  ,t1.[EInvoice]
				  ,t1.[SyncJAStatus]
				  ,t1.[SyncJADate]
				  ,t1.[SyncJAMsg]
				  ,t1.[Phone]
				  ,t1.[CusName]
				  ,t1.[CusAddress]
				  ,t1.[Reason],t1.CollectedStatus
			  FROM [T_SalesHeader] t1 with (nolock ) 
				left join M_Employee t2 with (nolock ) on t1.CompanyCode = t2.CompanyCode and t1.SalesPerson = t2.EmployeeId  
			    left JOIN M_UserStore t3 ON t3.StoreId = t1.StoreId
				left JOIN M_User t4 ON t4.UserId = t3.UserId  
			  where  (ISNULL(@CompanyCode, '') = '' OR t1.CompanyCode = @CompanyCode )
				and   (ISNULL(@StoreId, '') = '' OR t1.StoreId = @StoreId )
				and  (ISNULL(@Type, '') = '' OR t1.SalesMode = @Type )	 
				and   (ISNULL(@Fromdate, '') = '' OR CONVERT( date, t1.CreatedOn) >= CONVERT( date, @Fromdate) )
				and   (ISNULL(@Todate, '') = '' OR CONVERT( date, t1.CreatedOn) <= CONVERT( date, @Todate) )
				and  (t4.Username = @ViewBy )
				--or t1.CreatedBy = @ViewBy
				and t1.DataSource = @DataSource
				and   (ISNULL(@SalesMan, '') = '' OR t2.EmployeeId = @SalesMan )
				 
				--and  ( (ISNULL(@Status, '') = '' or 
				--	(
				--		CASE WHEN @Status = 'N' THEN t1.IsCanceled END = 'Y' and t1.Status = 'C')  
				--	or  (CASE WHEN @Status = 'C' THEN t1.IsCanceled END = 'N' and t1.Status = 'C')  
				--	or ( CASE WHEN @Status = 'O' THEN t1.IsCanceled END = 'N' and t1.Status = 'O')  
				--	or ( CASE WHEN @Status = 'H' THEN t1.IsCanceled END = 'N' and t1.Status = 'H')  
				--)  )
				--and t1.IsCanceled <> 'C'
					and  ( (ISNULL(@Status, '') = '' or 
					(
						CASE WHEN @Status = 'N' THEN ISNULL( t1.IsCanceled , 'N') END = 'Y' and t1.Status = 'C')  
					or  (CASE WHEN @Status = 'C' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'C')  
					or ( CASE WHEN @Status = 'O' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'O')  
					or ( CASE WHEN @Status = 'H' THEN ISNULL( t1.IsCanceled , 'N') END = 'N' and t1.Status = 'H')  
				)  )
				and ISNULL( t1.IsCanceled , 'N') <> 'C'
				   and   (ISNULL(@TransId, '') = '' OR  t1.TransId = @TransId ) 
			
			  order by CreatedOn desc
		end
	 
END
--USP_S_T_SalesHeaderByType 'CP001' ,'W0101', '','','','','', 'ECOM', 'H',''


--select * from T_SalesHeader where StoreId ='W0101' and Status = 'O'
-- USP_S_T_SalesHeaderByType 'CP001' ,'W0101', '','','','2021-05-22','2021-06-21', 'POS',  '','', 'test2'
-- USP_S_T_SalesHeaderByType 'CP001' ,'W0101', '','','','2021-05-22','2021-06-21', 'POS',  '','', 'admin'
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesInvoice]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_S_T_SalesInvoice]
	@CompanyCode	nvarchar(50),
	@StoreId nvarchar(50),
	@TransId	nvarchar(50)
	 
AS
BEGIN
	select * 
	from T_SalesInvoice with (nolock)
	where CompanyCode = @CompanyCode 
	and StoreId =@StoreId
	and TransId = @TransId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_T_SalesLine]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@EventId	nvarchar(50)	 
 
AS	
	select distinct t1.[LineId]
      ,t1.[CompanyCode]
	  ,t1.StoreId
      ,t1.[ItemCode]
      ,t1.[SLocId]
      ,t1.[BarCode]
      ,t1.[UOMCode]
      ,t1.[Quantity]
      ,t1.[Price]
      ,t1.[LineTotal]
      ,t1.[DiscountType]
      ,t1.[DiscountAmt]
      ,t1.[DiscountRate]
      --,t1.[CreatedBy]
      --,t1.[CreatedOn]
      --,t1.[ModifiedBy]
      --,t1.[ModifiedOn]
      ,t1.[Status]
      ,t1.[Remark]
      ,t1.[PromoId]
      ,t1.[PromoType]
      ,t1.[PromoPercent]
      ,t1.[PromoBaseItem]
      ,t1.[SalesMode]
      ,t1.[TaxRate]
      ,t1.[TaxAmt]
      ,t1.[TaxCode]
      ,t1.[MinDepositAmt]
      ,t1.[MinDepositPercent]
      ,t1.[DeliveryType]
      ,t1.[POSService]
      ,t1.[StoreAreaId]
      ,t1.[TimeFrameId]
      ,t1.[AppointmentDate]
      ,t1.[BomID]
      ,t1.[PromoPrice]
      ,t1.[PromoLineTotal]
      ,t1.[BaseLine]
      ,t1.[BaseTransId]
      ,t1.[OpenQty]
      ,t1.[PromoDisAmt]
      ,t1.[IsPromo]
      ,t1.[IsSerial]
      ,t1.[IsVoucher]
      ,t1.[PrepaidCardNo]
      ,t1.[MemberDate]
      ,t1.[MemberValue]
      ,t1.[StartDate]
      ,t1.[EndDate]
      ,t1.[ItemType]
      ,isnull(t1.[Description], t5.ItemName) Description
	   ,isnull(t1.[Description], t5.ItemName) ItemName
	  , Sum(t3.Quantity) OVER(PARTITION BY t3.ItemCode, t3.UOMCode) AS CheckedQty
	from T_SalesLine t1 with (nolock)  
	left join T_SalesHeader t2 with (nolock) on t1.TransId = t2.TransId and t2.CompanyCode= t1.CompanyCode 
	left join T_InvoiceLine t3 with (nolock) on  t3.ItemCode = t1.ItemCode and t3.UOMCode = t1.UOMCode and t3.CompanyCode= t2.CompanyCode and t3.BaseTransId = t1.TransId
	left join M_Item t5 with (nolock) on  t5.ItemCode = t1.ItemCode 
	where t2.ContractNo = @EventId and  t2.CompanyCode= @CompanyCode and t2.StoreId= @StoreId



	 --USP_S_T_SalesLine 'CP001', 'W0101', 'EV002'

--select * from T_InvoiceLine

	 --select * from T_SalesLine
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_T_SalesLineSerial]
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(50)	,
	@StoreId	nvarchar(50)	 
 
AS	
	select t1.[TransId]
      ,t1.[LineId]
      ,t1.[CompanyCode]
      ,t1.[ItemCode]
      ,t1.[SerialNum]
      ,t1.[SLocId]
      ,t1.[Quantity]
      ,t1.[UOMCode]
      ,t1.[CreatedBy]
      ,t1.[CreatedOn]
      ,t1.[ModifiedBy]
      ,t1.[ModifiedOn]
      ,t1.[Status]
      ,t1.[OpenQty]
      ,t1.[BaseLine]
      ,t1.[BaseTransId]
      ,t1.[LineNum]
      ,t1.[Description]
      ,t1.[Phone]
      ,t1.[Name]
      ,t1.[CustomF1]
      ,t1.[CustomF2]
      ,t1.[Prefix]
      ,t1.[ExpDate]
      ,t1.[StoreId]
       
      ,REPLACE(t1.[CustomF3], '<PIN>' , '< PIN >' ) CustomF3
      ,t1.[CustomF4]
      ,t1.[CustomF5] 
	  ,t2.ItemName 
	  ,t3.UOMName 
	from T_SalesLineSerial t1 with(nolock) 
	left join M_Item t2 with(nolock)  on t1.ItemCode = t2.ItemCode AND T1.CompanyCode = t2.CompanyCode 
	left join M_UOM t3 with(nolock)  on t1.UOMCode = t3.UOMCode 
	where t1.TransId = @TransId and t1.CompanyCode =@CompanyCode 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesPaymentByTransId]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_T_SalesPaymentByTransId]
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(50)	,
	@StoreId	nvarchar(50)	 
 
AS	
	select 
	 t1.[PaymentCode]
      , t1.[CompanyCode]
	  ,t1.StoreId
      ,[TransId]
      ,[LineId]
      ,[TotalAmt]
      ,[ReceivedAmt]
      ,[PaidAmt]
      ,[ChangeAmt]
      ,[PaymentMode]
      ,[CardType]
      ,[CardHolderName]
      ,[CardNo]
      ,[VoucherBarCode]
      ,[VoucherSerial]
      , t1.[CreatedBy]
      , t1.[CreatedOn]
      , t1.[ModifiedBy]
      , t1.[ModifiedOn]
      , t1.[Status]
      ,[ChargableAmount]
      ,[PaymentDiscount]
      ,[CollectedAmount]
      ,[RefNumber]
      ,[SyncMWIStatus]
      ,[SyncMWIDate]
      ,[SyncMWIMsg]
      ,[DataSource]
      ,[SyncDate]
      ,[SyncSource]
      ,t1.[Currency]
      , case isnull(Rate,1 ) when 1 then 0 else [FCAmount] end FCAmount
      ,[Rate]
      ,[ShiftId]
      ,[CardExpiryDate]
      ,[AdjudicationCode]
      ,[AuthorizationDateTime]
      ,[TerminalId]
      ,[RoundingOff]
	  ,t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
	,isnull( t2.ShortName, t1.PaymentCode) ShortName 
	
	from T_SalesPayment t1 with (nolock)  
	left join M_PaymentMethod t2 with (nolock)  on t1.CompanyCode =t2.CompanyCode and t1.PaymentCode= t2.PaymentCode 
	--where t1.TransId=N'{Id}' and t1.CompanyCode= N'{CompanyCode}'
	where t1.TransId= @TransId and t1.CompanyCode= @CompanyCode 


 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_SalesPromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_S_T_SalesPromo]
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@TransId	nvarchar(50)	 
 
AS	
	
	select t1.* , t3.ItemName , t4.UOMName 
	from T_SalesPromo t1 with(nolock)  
	left join T_InvoiceHeader t2 with (nolock) on t1.TransId = t2.TransId and t2.CompanyCode= t1.CompanyCode 
	left join M_Item t3 with(nolock)  on t1.ItemCode = t3.ItemCode AND T1.CompanyCode=t3.CompanyCode 
	left join M_UOM t4 with(nolock)  on t1.UOMCode = t4.UOMCode 
	--left join T_InvoicePromo t5  with(nolock)  on t5.ItemCode = t1.ItemCode and t5.UOMCode = t1.UOMCode  
	where t2.RefTransId = @TransId and  t2.CompanyCode= @CompanyCode and t2.StoreId= @StoreId
	--where t2.ContractNo = @EventId and  t2.CompanyCode= @CompanyCode and t2.StoreId= @StoreId
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_ShiftHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_S_T_ShiftHeader]
	@CompanyCode	nvarchar(50)	,
	@StoreId nvarchar(50),
	@TransDate nvarchar(50) 
AS	
select * from T_ShiftHeader with (nolock)  
where Status = 'O'
and CompanyCode = @CompanyCode and StoreId = @StoreId and CONVERT( date, CreatedOn) = @TransDate

   
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_ShiftOpenInDate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_EndDateDetail] 'CP001', 'W0101','F6C620E4-074A-4692-8469-E0F37A7256EC'
create PROCEDURE [dbo].[USP_S_T_ShiftOpenInDate]
	-- Add the parameters for the stored procedure here 
    @CompanyCode nvarchar(50),
	@StoreId nvarchar(50) ,
	@Date Datetime
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	 
	SET NOCOUNT ON;
	select * from T_ShiftHeader with (nolock) where Status != 'C' and CompanyCode = @CompanyCode and StoreId = @StoreId and  CONVERT(varchar, CreatedOn, 23) = CONVERT(varchar, @Date, 23)
	 
END



GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_ShiftPayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_T_ShiftPayment] 'CP001','1001','100121082600001'
CREATE PROCEDURE [dbo].[USP_S_T_ShiftPayment]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50)	,
	@ShiftId	nvarchar(50)
AS	
Begin 
	Declare @Currency nvarchar(15) set @Currency = (select top 1 CurrencyCode from M_Store with (nolock) where StoreId = @StoreId and CompanyCode=@CompanyCode)



	select distinct t1.CounterId, t1.PaymentCode,isnull(t7.ShortName, t1.PaymentCode) ShortName,  t1.Currency, 1 Rate,  t1.Currency, case t1.Currency when @Currency then 0 else t1.FCCollectedAmount end FCAmount
	, isnull( t1.Value,0) TotalAmt, isnull( t1.CollectAmount,0) CollectedAmount, 0 ChargableAmount, isnull( t1.CollectAmount,0) - isnull( t1.Value,0)  ChangeAmt
	,   t1.Cashier, t1.CustomF1, t1.CustomF2, t1.CustomF3, t1.CustomF4, t1.CustomF5
	from T_ShiftLine t1 with (nolock) 
	left join T_ShiftHeader t3 with (nolock) on t1.ShiftId = t3.ShiftId and t1.CompanyCode = t3.CompanyCode  
	left join M_PaymentMethod t7 with (nolock) on t7.CompanyCode =t1.CompanyCode and t7.PaymentCode = t1.PaymentCode
	where T3.ShiftId = @ShiftId and t1.CompanyCode = @CompanyCode   and t3.StoreId = @StoreId   
	 --Group by  t1.PaymentCode
end


--select * from T_ShiftLine
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_ShippingDivisionHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_T_ShippingDivisionHeader]
	@CompanyCode nvarchar(50),
	@Id	nvarchar(50),
	@FromDate	nvarchar(50), 
	@ToDate	nvarchar(50)
AS
begin
select * from T_ShippingDivisionHeader  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (Id = @Id  or ISNULL(@Id, '')='')  
	AND (CONVERT(date, CreatedOn) >= CONVERT(date,  @FromDate)  or ISNULL(@FromDate, '')='') 
	AND (CONVERT(date, CreatedOn) <= CONVERT(date,  @ToDate)  or ISNULL(@ToDate, '')='') 
	 

end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_ShippingDivisionLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_T_ShippingDivisionLine]
	@CompanyCode nvarchar(50),
	@Id	nvarchar(50) 
AS
begin
select * from T_ShippingDivisionLine  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (Id = @Id  or ISNULL(@Id, '')='')  
 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_T_Voucher]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_S_T_Voucher]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@VoucherNo	nvarchar(50),
	@VoucherType	nvarchar(50)
AS
begin
select * from T_VoucherTransaction  with (nolock)
	   
where (ISNULL(@CompanyCode, '') = '' OR CompanyCode = @CompanyCode )
	AND (ItemCode = @ItemCode  or ISNULL(@ItemCode, '')='')   
	AND (VoucherNo = @VoucherNo  or ISNULL(@VoucherNo, '')='')   
	and (VoucherType = @VoucherType  or ISNULL(@VoucherType, '') = '')     
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_S_TimeFrame]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_TimeFrame] 'CP001', null

--SELECT (DATEPART(hour, Col1) * 3600) + (DATEPART(minute, Col1) * 60) + DATEPART(second, Col1) as SecondsFromMidnight FROM T1;
CREATE PROCEDURE [dbo].[USP_S_TimeFrame]
	 
	@CompanyCode	nvarchar(50),  
	@TimeFrameId	nvarchar(Max) 
AS
BEGIN
  select  t1.CompanyCode,   t1.TimeFrameId,
  --t1.StartTime, t1.EndTime, 
  CONVERT(INT, SUBSTRING( REPLACE( CONVERT(VARCHAR(8), t1.StartTime, 108), ':', '' ), 0, 
  Len(REPLACE( CONVERT(VARCHAR(8),  t1.StartTime, 108), ':', '' )) - 1 ) ) as StartTime, 
  CONVERT(INT, SUBSTRING( REPLACE( CONVERT(VARCHAR(8), t1.EndTime, 108), ':', '' ), 0,  
  Len(REPLACE( CONVERT(VARCHAR(8),  t1.EndTime, 108), ':', '' )) - 1 ) ) as EndTime, t1.Duration 
 
  from M_TimeFrame t1 with (nolock)
   
  where t1.Status = 'A' and T1.CompanyCode= @CompanyCode 
   and (T1.TimeFrameId= @TimeFrameId or @TimeFrameId='')
 
END

 
GO
/****** Object:  StoredProcedure [dbo].[USP_S_UserByUserName]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_S_UserByUserName 'admin','abeo@123', N'9Km/77HIzknoGfyNRIREuA=='
CREATE PROCEDURE [dbo].[USP_S_UserByUserName]
	@UserName  nvarchar(250)	,
	@Password	 nvarchar(250) ,
	@QRBarcode  nvarchar(250) = null
AS	

select u.*, r.DefaultScreen, r.RoleName,CONVERT( nvarchar(50), r.RoleId)  RoleId
from M_User u with (nolock)
left join M_UserRole ur with (nolock) on u.UserId = ur.UserId
left join M_Role r  with (nolock) on ur.RoleId = r.RoleId 
where  UserName= @UserName and Password= @Password
  or (QRBarcode = @QRBarcode )   

 
GO
/****** Object:  StoredProcedure [dbo].[USP_ScanBarcode]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---   [USP_ScanBarcode] 'CP001','1001', '2050000000577',''
CREATE PROCEDURE [dbo].[USP_ScanBarcode]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@BarCode	nvarchar(50),
	@CustomerGroupId nvarchar(50) = null
AS
BEGIN
SELECT M_I.ItemCode,
		M_I.CompanyCode,
		M_I.ItemGroupId,
		M_I.ItemName,
		ISNULL(M_IU.UOMCode, M_I.InventoryUOM) UomCode,
		ISNULL(t3.PriceAfterTax, M_I.DefaultPrice) DefaultPrice,
		t3.PriceListId,
		M_U.UomName,
		M_ISS.StockQty,
		M_ISS.SlocId,
		M_IU.BarCode,
		M_S.StoreId,
		M_S.StoreName
		
FROM M_ItemUOM M_IU 
LEFT JOIN M_Item M_I on M_I.ItemCode = M_IU.ItemCode 
LEFT JOIN M_ItemSerialStock M_ISS on M_IU.ItemCode = M_ISS.ItemCode 
LEFT JOIN M_Store M_S on M_S.StoreId = M_ISS.SLocId 
LEFT JOIN (select * from [fn_GetPriceListByCustomerGroup](@CompanyCode,@StoreId, @CustomerGroupId)) t3 on t3.ItemCode = M_I.ItemCode and t3.UOMCode= M_IU.UOMCode and GETDATE() between ISNULL(t3.ValidFrom, '2000-01-01')  and ISNULL(t3.ValidTo,  GETDATE())
LEFT JOIN M_UOM M_U with (nolock) on M_IU.UOMCode = M_U.UOMCode 
WHERE (ISNULL(@CompanyCode, '') = '' OR M_I.CompanyCode = @CompanyCode )
	AND M_S.StoreId = @StoreId
	AND (M_IU.BarCode = @BarCode  or ISNULL(@BarCode, '') = '')  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_InventoryCountingToCounted]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_GetInventoryTransfer]   '', '','', 'R','', '','',''
CREATE PROCEDURE [dbo].[USP_U_InventoryCountingToCounted]
	@CompanyCode nvarchar(50) , 
	@StoreId nvarchar(50) ,
	@ICId	nvarchar(50) 
AS
begin

	update t1 set t1.TotalStock = isnull(t2.Quantity, 0), t1.TotalCount= isnull(t1.Quantity, 0), 
		t1.TotalDifferent =  isnull(t1.Quantity, 0) - isnull(t2.Quantity, 0)
	from T_InventoryCountingLine t1 
		left join T_ItemStorage t2 on t1.CompanyCode = t2.CompanyCode and t1.ItemCode = t2.ItemCode 
		and T1.UOMCode = t2.UOMCode and T1.SLocId = t2.SLocId 
	where ICId = @ICId and t1.CompanyCode = @CompanyCode;

	update T_InventoryCountingHeader set Status = 'C' where ICId = @ICId and  CompanyCode = @CompanyCode
	and StoreId = @StoreId;
	
end 


--select * from T_InventoryCountingHeader with (nolock)
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_BankTerminal]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_M_BankTerminal]
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50),
	@Id nvarchar(50),
	@CounterId nvarchar(50),
	@PaymentMethod nvarchar(50), 
	@ModifiedBy nvarchar(50),
	@Status nvarchar(50),
	@TerminalIdDefault nvarchar(50),
	@CustomF1 nvarchar(50) ,
	@CustomF2 nvarchar(50) ,
	@CustomF3 nvarchar(50) ,
	@CustomF4 nvarchar(50) ,
	@CustomF5 nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	update [dbo].[M_BankTerminal]  set 
			ModifiedBy = @ModifiedBy , ModifiedOn = GETDATE(),
			Status=@Status,
			TerminalIdDefault= @TerminalIdDefault ,
			CustomF1= @CustomF1  ,
			CustomF2= @CustomF2  ,
			CustomF3= @CustomF3  ,
			CustomF4 = @CustomF4,
			CustomF5 = @CustomF5
			,SyncLocalStatus = 'U'
        where CompanyCode =@CompanyCode and
			Id = @Id and
			CounterId = @CounterId and
			PaymentMethod = @PaymentMethod
	 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_BOMHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_BOMHeader]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemName	nvarchar(250)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)		
AS	UPDATE [dbo].[M_BOMHeader]
   SET [ItemCode] = @ItemCode
      ,[CompanyCode] = @CompanyCode
      ,[ItemName] = @ItemName
      ,[Quantity] = @Quantity
      ,[UOMCode] = @UOMCode
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_BOMLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_BOMLine]
	@Id uniqueidentifier	,
	@BOMId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemName	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@IsOption	bit,
	@OptionGroup	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)		,
	@TriggerStatus	nvarchar(50)	,
	@TriggerSystem	nvarchar(250)
AS	UPDATE [dbo].[M_BOMLine]
   SET [ItemCode] = @ItemCode 
      ,[ItemName] = @ItemName
      ,[UOMCode] = @UOMCode
      ,[Quantity] = @Quantity
	   ,[IsOption] = @IsOption
	    ,OptionGroup = @OptionGroup
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status,
	  TriggerStatus=@TriggerStatus,
	  TriggerSystem=@TriggerSystem
 WHERE   CompanyCode = @CompanyCode AND BOMId = @BOMId and Id=@Id
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Company]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Company]
	@CompanyCode	nvarchar(50)	,
	@CompanyName	nvarchar(250)	,
		@ForeignName	nvarchar(250)	,
		@ShortName	nvarchar(250)	,
	@Logo	nvarchar(250)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(250)	,
	@TaxCode	nvarchar(250)	,
	@Email	nvarchar(150)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)		
AS	UPDATE [dbo].M_Company
   SET [CompanyCode] = @CompanyCode
      ,[CompanyName] = @CompanyName
	  ,ForeignName=	@ForeignName , ShortName=@ShortName,
	Logo=@Logo	 ,
	Address=@Address ,
	Phone=@Phone ,
	TaxCode=@TaxCode ,
	Email=@Email	 
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Control]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Control]
	@ControlId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ControlName	nvarchar(250)	,
	@FunctionId	nvarchar(50)	,
	@Status	char(1)	,
	@Action	nvarchar(50)	,
	@ControlType	nvarchar(50)	, 
	@ModifiedBy	nvarchar(50)	,
	 
	@OrderNum int null,
	@Require bit null,
	@OptionName	nvarchar(50)	,
	@OptionKey	nvarchar(50)	,
	@OptionValue	nvarchar(50),
	@Custom1	nvarchar(50)	,
	@Custom2	nvarchar(50)
AS	UPDATE [dbo].M_Control
   SET [CompanyCode] = @CompanyCode
      ,[ControlName] = @ControlName
     
      ,[Status] = @Status
      ,[Action] = @Action
      ,[ControlType] = @ControlType
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
	   ,OrderNum = @OrderNum
	    ,Require = @Require
		 ,OptionName = @OptionName
		  ,OptionKey = @OptionKey
		   ,OptionValue = @OptionValue
		    ,Custom1 = @Custom1
			  ,Custom2 = @Custom2
 WHERE CompanyCode = @CompanyCode AND ControlId = @ControlId and FunctionId = @FunctionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ControlOrder]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_U_M_ControlOrder]
	@ControlId	nvarchar(50)	,
	@FunctionId nvarchar(50)	,
	@CompanyCode	nvarchar(50)	, 
	@OrderNum int null 
	 
AS	UPDATE [dbo].M_Control
   SET   [ModifiedOn] = GETDATE()
	   ,OrderNum = @OrderNum
	     
 WHERE CompanyCode = @CompanyCode AND ControlId = @ControlId and FunctionId = @FunctionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Currency]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Currency] 
@CurrencyCode	nvarchar(50),
@CurrencyName	nvarchar(250),
@Rounding	nvarchar(50),
@ModifiedBy	nvarchar(50), 
@Status	char(1),
@MaxValue	decimal(19, 6),
@RoundingPaymentDif	decimal(19, 6) = null
	 
AS	
update M_Currency  set 
CurrencyName = @CurrencyName,
Rounding = @Rounding,
ModifiedBy = @ModifiedBy,
Status =@Status,
MaxValue = @MaxValue,
RoundingPaymentDif = @RoundingPaymentDif
 where CurrencyCode = @CurrencyCode
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Customer]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Customer]
	@CompanyCode	nvarchar(50)	,
	@CustomerId	nvarchar(50)	,
	@CustomerGrpId	nvarchar(50)	,
	@CustomerName	nvarchar(250)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@DOB	date	,
	@JoinedDate	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	,
	@CusType	char(1),
		@Gender	nvarchar(50) = null,
	@Email	nvarchar(50) = null,
	@CardNo nvarchar(50)  = null,
	@CustomF1 nvarchar(250)  = null,
	@CustomF2 nvarchar(250)  = null,
	@CustomF3 nvarchar(250)  = null,
	@CustomF4 nvarchar(250)  = null,
	@CustomF5 nvarchar(250)  = null
AS	UPDATE [dbo].[M_Customer]
   SET [CompanyCode] = @CompanyCode
      ,[CustomerId] = @CustomerId
      ,[CustomerGrpId] = @CustomerGrpId
      ,[CustomerName] = @CustomerName
      ,[Address] = @Address
      ,[Phone] = @Phone
      ,[DOB] = @DOB
      ,[JoinedDate] = @JoinedDate
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status,
	  CusType = @CusType,
	  Gender= @Gender,
	  Email=@Email,
	  CardNo= @CardNo,
	  @CustomF1= @CustomF1,
	  @CustomF2=@CustomF2,
	  @CustomF3=@CustomF3,
	  @CustomF4=@CustomF4,
	  @CustomF5=@CustomF5
 WHERE CompanyCode = @CompanyCode AND CustomerId = @CustomerId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_CustomerGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_CustomerGroup]
	@CompanyCode	nvarchar(50)	,
	@CusGrpId	nvarchar(50)	,
	@CusGrpDesc	nvarchar(250)	,
	  
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_CustomerGroup]
   SET    [CusGrpDesc] = @CusGrpDesc
      ,[ModifiedOn] = GETDATE()
      ,[ModifiedBy] = @ModifiedBy
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND CusGrpId = @CusGrpId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_DeliverryInfor]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_U_M_DeliverryInfor]
	@Id	uniqueidentifier,
	@CustomerId	nvarchar(150)	,
	@CompanyCode	nvarchar(50)	,
	@DeliveryPartner nvarchar(250) NULL,
	@DeliveryId nvarchar(150) NULL,
	@Phone	nvarchar(50)	,
	@Fax	nvarchar(150),
	@Email	nvarchar(150)	,
	@TaxCode	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Name	nvarchar(250)	, 
	@Remarks	nvarchar(MAX)	,
	@Status	char(1)																	
AS	
update[dbo].M_DeliverryInfor
set
Phone = @Phone,
Fax= @Fax,
Email=@Email,
TaxCode=@TaxCode,
Name=@Name,
Address=@Address,
Remarks=@Remarks,
Status= @Status,
DeliveryId = @DeliveryId,
DeliveryPartner = @DeliveryPartner  , SyncLocalStatus = 'U'
where Id= @Id and
CustomerId = @CustomerId and
CompanyCode = @CompanyCode
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Denomination]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_M_Denomination]
	@Id uniqueidentifier
	,@Currency  nvarchar(50)
	,@Name nvarchar(250)
	,@Description  nvarchar(250)
	,@Value  nvarchar(50)
	,@Status char(1)
	,@Remarks nvarchar(250),
	@ShowOnPayment bit = null,
	@ShowOnDiscount bit = null
AS	

update [dbo].M_Denomination set
          
			Name = @Name ,
			Description=@Description ,
			Value= @Value ,
			Status=@Status,
			Remarks=@Remarks,
			ShowOnDiscount = @ShowOnDiscount,
			ShowOnPayment = @ShowOnPayment
 where Id = @Id and Currency=@Currency
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Employee]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Employee]
	@EmployeeId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@EmployeeName	nvarchar(250)	,
	@Position	nvarchar(50)	,
	@Status	char(1)	,
	@ModifiedBy	nvarchar(50)	
AS	UPDATE [dbo].[M_Employee]
   SET [EmployeeId] = @EmployeeId
      ,[CompanyCode] = @CompanyCode
      ,[EmployeeName] = @EmployeeName
      ,[Position] = @Position
      ,[Status] = @Status
      ,[ModifiedOn] = GETDATE()
      ,[ModifiedBy] = @ModifiedBy  , SyncLocalStatus = 'U'
 WHERE CompanyCode = @CompanyCode AND EmployeeId = @EmployeeId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_EmployeeStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_EmployeeStore]
	@EmployeeId	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@FromDate	datetime	,
	@ToDate	datetime		
AS	UPDATE [dbo].[M_EmployeeStore]
   SET [EmployeeId] = @EmployeeId
      ,[StoreId] = @StoreId
      ,[FromDate] = @FromDate
      ,[ToDate] = @ToDate  , SyncLocalStatus = 'U'
 WHERE StoreId = @StoreId AND EmployeeId = @EmployeeId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ExchangeRate]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_U_M_ExchangeRate]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@Date	datetime,
	@Currency	nvarchar(50),
	@Rate	decimal(19, 6),
	@Status	nvarchar(10)
	
AS	update M_ExchangeRate
           set 
Rate = @Rate,
Status = @Status
where Id = @Id and
CompanyCode = @CompanyCode and
StoreId = @StoreId and
Date =@Date  and
Currency = @Currency
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Function]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Function]
	@FunctionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@Name	nvarchar(250)	,
	@Url	nvarchar(250)	,
	@Icon	nvarchar(250)	,
	@ParentId	nvarchar(50)	,
	@Status	char(1)	,
	@ModifiedBy	nvarchar(50)	,
	@LicenseType	nvarchar(50),
	@OrderNo int,
	@isShowMenu bit,
	@isParent bit
	
AS	UPDATE [dbo].[M_Function]
   SET [FunctionId] = @FunctionId
      ,[CompanyCode] = @CompanyCode
      ,[Name] = @Name
      ,[Url] = @Url
	  , Icon= @Icon
      ,[ParentId] = @ParentId
      ,[Status] = @Status
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[LicenseType] = @LicenseType,
	  OrderNo =@OrderNo 
	  , isShowMenu=@isShowMenu, isParent =@isParent
 WHERE FunctionId = @FunctionId AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_FunctionMenuShow]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_U_M_FunctionMenuShow]
	@CompanyCode nvarchar(50),
	@FunctionId	nvarchar(50)	, 
	@isShowMenu int,
	@MenuOrder int
AS
begin
	update M_Function set isShowMenu = @isShowMenu , MenuOrder= @MenuOrder where CompanyCode = @CompanyCode and FunctionId = @FunctionId
	 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_FunctionRemoveMenuShow]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_S_M_Customer] '', '', ''
create PROCEDURE [dbo].[USP_U_M_FunctionRemoveMenuShow]
	@CompanyCode nvarchar(50)
AS
begin
	update M_Function set isShowMenu = null , MenuOrder= null
	 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Holiday]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_M_Holiday]
	 
	@CompanyCode	nvarchar(50)	,
	@HldCode	nvarchar(250)	,
	@StrDate	datetime,
	@EndDate	datetime,
	@Rmrks	nvarchar(50)	, 
	@Status	char(1)	
	 
AS	update  M_Holiday set StrDate=@StrDate
           ,EndDate =@EndDate
           ,Rmrks=@Rmrks,status=@Status
where [CompanyCode] = @CompanyCode and HldCode=@HldCode
   

--		   StrDate	datetime	Checked
--EndDate	datetime	Checked
--Rmrks	nvarchar(150)	Checked
--Status	nvarchar(1)	Checked
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Image]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_M_Image]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@Type	nvarchar(15),
	@Num	nvarchar(250),
	@Image	varbinary(MAX),
	@Description	nvarchar(250)
	 
AS	

	begin
		update M_Image set  Type = @Type, Num = @Num, Image= @Image , Description = @Description  

		where Id = @Id and CompanyCode= @CompanyCode
	end
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_InvoiceInfor]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_M_InvoiceInfor]
	@Id	uniqueidentifier,
	@CustomerId	nvarchar(150)	,
	@CompanyCode	nvarchar(50)	,
	@Phone	nvarchar(50)	,
	@Fax	nvarchar(150),
	@Email	nvarchar(150)	,
	@TaxCode	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Name	nvarchar(250)	, 
	@Remarks	nvarchar(MAX)	,
	@Status	char(1)																	
AS	
update[dbo].M_InvoiceInfor
set
Phone = @Phone,
Fax= @Fax,
Email=@Email,
TaxCode=@TaxCode,
Name=@Name,
Address=@Address,
Remarks=@Remarks,
Status= @Status
where Id= @Id and
CustomerId = @CustomerId and
CompanyCode = @CompanyCode
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Item]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Item]
	@ItemCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ProductId	nvarchar(50)	,
	@VariantId	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	,
	@CapacityValue int,
	@ItemGroupId	nvarchar(50)	,
	@SalesTaxCode	nvarchar(50)	,
	@PurchaseTaxCode	nvarchar(50)	,
	@ItemName	nvarchar(250)	,
	@ItemDescription	nvarchar(250)	,
	@ItemCategory_1	nvarchar(50)	,
	@ItemCategory_2	nvarchar(50)	,
	@ItemCategory_3	nvarchar(50)	,
	@ForeignName	nvarchar(250)	,
	@InventoryUOM	nvarchar(50)	,
	@ImageURL	nvarchar(250)	,
	@ImageLink	nvarchar(250)	,
	@MCId	nvarchar(50)	,
	@CustomField1	nvarchar(250)	,
	@CustomField2	nvarchar(250)	,
	@CustomField3	nvarchar(250)	,
	@CustomField4	nvarchar(250)	,
	@CustomField5	nvarchar(250)	,
	@CustomField6	nvarchar(250)	,
	@CustomField7	nvarchar(250)	,
	@CustomField8	nvarchar(250)	,
	@CustomField9	nvarchar(250)	,
	@CustomField10	nvarchar(250)	,
	@DefaultPrice	decimal(19, 6)	,
	@IsSerial	char(1)	,
	@IsBOM	char(1)	, @IsVoucher	char(1)	,
	@ValidFrom	date	,
	@ValidTo	date		, @RejectPayType nvarchar(50)	, @Returnable bit = null	, @VoucherCollection nvarchar(50) = null	, @IsPriceTime bit = null		
AS	UPDATE [dbo].[M_Item]
   SET  [ModifiedBy] = @ModifiedBy
	  ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
	  , CapacityValue=@CapacityValue
	  --@MCId --
      ,[ItemGroupId] = @ItemGroupId
      ,[SalesTaxCode] = @SalesTaxCode
      ,[PurchaseTaxCode] = @PurchaseTaxCode
      ,[ItemName] = @ItemName
      ,[ItemDescription] = @ItemDescription
      ,[ItemCategory_1] = @ItemCategory_1
      ,[ItemCategory_2] = @ItemCategory_2
      ,[ItemCategory_3] = @ItemCategory_3
      ,[ForeignName] = @ForeignName
      ,[InventoryUOM] = @InventoryUOM
      ,[ImageURL] = @ImageURL
      ,[ImageLink] = @ImageLink
      ,[MCId] = @MCId
      ,[CustomField1] = @CustomField1
      ,[CustomField2] = @CustomField2
      ,[CustomField3] = @CustomField3
      ,[CustomField4] = @CustomField4
      ,[CustomField5] = @CustomField5
      ,[CustomField6] = @CustomField6
      ,[CustomField7] = @CustomField7
      ,[CustomField8] = @CustomField8
      ,[CustomField9] = @CustomField9
      ,[CustomField10] = @CustomField10
      ,[DefaultPrice] = @DefaultPrice
      ,[IsSerial] = @IsSerial
      ,[IsBOM] = @IsBOM
	  ,isVoucher =@IsVoucher
      ,[ValidFrom] = @ValidFrom
      ,[ValidTo] = @ValidTo
	  , RejectPayType = @RejectPayType
	  ,Returnable=@Returnable
	  ,VoucherCollection=@VoucherCollection,
	  IsPriceTime=@IsPriceTime   , SyncLocalStatus = 'U'
 WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode AND ProductId = @ProductId AND VariantId = @VariantId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ItemGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ItemGroup]
	@IGId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@IGName	nvarchar(250)	,
	@IGDescription	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)			
AS	UPDATE [dbo].[M_ItemGroup]
   SET [IGId] = @IGId
      ,[CompanyCode] = @CompanyCode
      ,[IGName] = @IGName
      ,[IGDescription] = @IGDescription
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
SELECT * FROM  M_MerchandiseCategory
SELECT * FROM  M_ItemGroup

 WHERE IGId = @IGId AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ItemSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ItemSerial]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(250)	,
	@Quantity	decimal(19, 6)	,
	@ExpDate	date	,
	@StoredDate	date	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ItemSerial]
   SET  [Quantity] = @Quantity
      ,[ExpDate] = @ExpDate
      ,[StoredDate] = @StoredDate
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE ItemCode = @ItemCode and [SerialNum] = @SerialNum AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ItemSerialStock]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ItemSerialStock]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@SerialNum	nvarchar(250)	,
	@StockQty	decimal(19, 6)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ItemSerialStock]
   SET [CompanyCode] = @CompanyCode
      ,[ItemCode] = @ItemCode
      ,[SLocId] = @SLocId
      ,[SerialNum] = @SerialNum
      ,[StockQty] = @StockQty
      ,[ModifiedBy] = @ModifiedBy
      ,[Status] = @Status
 WHERE ItemCode = @ItemCode AND CompanyCode = @CompanyCode AND SLocId = @SLocId AND SerialNum = @SerialNum
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ItemStoreListing]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ItemStoreListing] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@Status	nvarchar(50),
	@ModifiedBy	nvarchar(50) 
 
AS	
update M_ItemStoreListing  set
Status = @Status,
ModifiedBy = @ModifiedBy,
ModifiedOn = GETDATE(), SyncLocalStatus = 'U'
where CompanyCode = @CompanyCode and StoreId =@StoreId and ItemCode = @ItemCode
    
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ItemUOM]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ItemUOM]
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@Factor	decimal(19, 6)	,
	@BarCode	nvarchar(250)	,
	@QRCode	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ItemUOM]
   SET  [Factor] = @Factor 
      ,[QRCode] = @QRCode
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status, SyncLocalStatus = 'U'
 WHERE ItemCode = @ItemCode AND UOMCode = @UOMCode and [BarCode] = @BarCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_KeyCap]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[USP_U_M_KeyCap] 
	@Id	nvarchar(50),
	@Name	nvarchar(250),
	@Description	nvarchar(50),
	@Status	nvarchar(50)  
AS	
update  M_KeyCap set 
Name = @Name,
Description=@Description, 
Status = @Status 
where Id=@Id 
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_MerchandiseCategory]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_MerchandiseCategory]
	@MCId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@MCHier	nvarchar(50)	,
	@MCName	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	,
	@isShow	bit	,
	@OrderNum	int
AS	UPDATE [dbo].[M_MerchandiseCategory]
	SET [MCId] = @MCId
      ,[CompanyCode] = @CompanyCode
      ,[MCHier] = @MCHier
      ,[MCName] = @MCName
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
	  ,isShow=@isShow, OrderNum=@OrderNum
 WHERE MCId = @MCId AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_MovementType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_U_M_MovementType]
	 
	@Code	nvarchar(50)	,
	@Name	nvarchar(50)	,
	@Description	nvarchar(50),
	@Status	nvarchar(5)	
AS	
update  [dbo].[M_MovementType] set Name =@Name
           ,Description =@Description
           ,Status = @Status
where Code = @Code
       

GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_PaymentMethod]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE PROCEDURE [dbo].[USP_U_M_PaymentMethod]
	@PaymentCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@PaymentDesc	nvarchar(250)	,
	@ShortName	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	,
	@AccountCode	nvarchar(50)	,
	@IsRequireRefnum bit,
	@AllowChange bit,  
	@PaymentType	nvarchar(250)
	, @ForfeitCode	nvarchar(50)=null	,@RejectReturn bit =null,@RejectVoid bit =null, @RejectExchange bit =null,
	@EODApply  bit =null, @EODCode	nvarchar(50)=null, @AllowRefund	bit=null, @Currency  nvarchar(50)=null,
	@RequireTerminal	bit=null, @VoucherCategory	nvarchar(250)=null, @FatherId	nvarchar(250)=null, @BankPaymentType	nvarchar(250)=null
AS	UPDATE [dbo].[M_PaymentMethod]
   SET [PaymentCode] = @PaymentCode
      ,[CompanyCode] = @CompanyCode
      ,[PaymentDesc] = @PaymentDesc
	  ,ShortName = @ShortName
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
      ,[AccountCode] = @AccountCode
	  ,AllowChange = @AllowChange, EODApply = @EODApply , EODCode= @EODCode	 , AllowRefund= @AllowRefund
	  ,IsRequireRefnum = @IsRequireRefnum , PaymentType=@PaymentType, ForfeitCode = @ForfeitCode, RejectReturn= @RejectReturn , RejectVoid = @RejectVoid
	  ,Currency=@Currency, RejectExchange = @RejectExchange
	  ,RequireTerminal =@RequireTerminal
	  ,VoucherCategory= @VoucherCategory, FatherId = @FatherId, BankPaymentType= @BankPaymentType, SyncLocalStatus = 'U'
 WHERE CompanyCode = @CompanyCode AND PaymentCode = @PaymentCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Permission]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Permission]
	@CompanyCode	nvarchar(50)	,
	@PermissionId	nvarchar(50)	,
	@RoleId	nvarchar(50)	,
	@FunctionId	nvarchar(50)	,
	@ControlId	nvarchar(50)	,
	@Permissions	nvarchar(50)	,
	@Status	char(1)	,
	@ModifiedBy	nvarchar(50)	
AS
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();
		
	UPDATE [dbo].[M_Permission]
	   SET [CompanyCode] = @CompanyCode
		  ,[PermissionId] = @PermissionId
		  ,[RoleId] = @RoleId
		  ,[FunctionId] = @FunctionId
		  ,[ControlId] = @ControlId
		  ,[Permissions] = @Permissions
		  ,[Status] = @Status
		  ,[ModifiedBy] = @ModifiedBy, SyncLocalStatus = 'U'
	 WHERE CompanyCode = @CompanyCode AND @PermissionId = @PermissionId

	UPDATE M_Role SET StatusGuid = @StatusGuid WHERE RoleId = @RoleId AND CompanyCode = @CompanyCode;
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_Role', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_PrepaidCard]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_M_PrepaidCard]
	@CompanyCode	nvarchar(50)	,
	@PrepaidCardNo	nvarchar(50)	,
	@MainBalance	numeric(19, 2)	,
	@SubBalance	numeric(19, 2)	,
	@StartDate	date	,
	@Duration	int	,
	@Status	char(1)	,
	@ModifiedBy	nvarchar(50)
AS	update 
	M_PrepaidCard set
          
			MainBalance= @MainBalance,
			SubBalance=@SubBalance,
			StartDate	=@StartDate,
			Duration=@Duration,
			Status	=@Status,
			ModifiedBy = @ModifiedBy, ModifiedOn = GETDATE()
	 where  CompanyCode	=@CompanyCode and
			PrepaidCardNo=@PrepaidCardNo	
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_PriceList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_PriceList]
	 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@PriceListId	nvarchar(50)	,
	@PriceBeforeTax	decimal(19, 6)	,
	@PriceAfterTax	decimal(19, 6)	,
	@ValidFrom	datetime	,
	@ValidTo	datetime	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_PriceList]
   SET [BarCode] = @BarCode
      ,[PriceBeforeTax] = @PriceBeforeTax
      ,[PriceAfterTax] = @PriceAfterTax
      ,[ValidFrom] = @ValidFrom
     
      ,[ModifiedBy] = @ModifiedBy
	  ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
	  ,PriceListId=@PriceListId, SyncLocalStatus = 'U'
 WHERE CompanyCode = @CompanyCode   AND StoreId = @StoreId and  [ItemCode] = @ItemCode
      and [UOMCode] = @UOMCode and  [ValidTo] = @ValidTo
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_PriceListName]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_U_M_PriceListName] 
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@PriceListId	nvarchar(50)	,
	@PriceListName	nvarchar(250)
	 
AS	UPDATE [dbo].M_PriceListName
   SET PriceListId = @PriceListId
      ,PriceListName = @PriceListName
     
 WHERE CompanyCode = @CompanyCode   AND Id = @Id 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_PriorityPriceList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_PriorityPriceList]
	 
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@CusGrpId	nvarchar(50),
	@CusGrpDesc	nvarchar(250),
	@PriceListId	nvarchar(50),
	@Priority	int,
	@Status	char(10),  
	@ModifiedBy	nvarchar(50)
	
AS	UPDATE [dbo].[M_PriorityPriceList]
   SET CusGrpDesc = @CusGrpDesc
      ,PriceListId = @PriceListId 
      ,Priority = @Priority 
      ,[ModifiedBy] = @ModifiedBy
	  ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
	   
 WHERE CompanyCode = @CompanyCode   AND CusGrpId = @CusGrpId and  Id = @Id
      
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Product]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Product]
	@CompanyCode	nvarchar(50)	,
	@ProductId	nvarchar(50)	,
	@ProductName	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_Product]
   SET [CompanyCode] = @CompanyCode
      ,[ProductId] = @ProductId
      ,[ProductName] = @ProductName
      ,[ModifiedOn] = GETDATE()
      ,[ModifiedBy] = @ModifiedBy
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND ProductId = @ProductId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption1]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption1]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption1]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption10]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption10]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption10]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption2]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption2]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption2]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption3]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption3]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption3]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption4]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption4]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption4]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption5]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption5]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption5]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption6]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption6]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption6]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption7]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption7]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption7]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption8]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption8]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption8]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ProductOption9]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_ProductOption9]
	@OptionId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@OptionName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_ProductOption9]
   SET [OptionId] = @OptionId
      ,[CompanyCode] = @CompanyCode
      ,[OptionName] = @OptionName
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND OptionId = @OptionId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Reason]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_M_Reason]
	@Id nvarchar(50),
	@CompanyCode	nvarchar(50),
	@Value	nvarchar(50)	,
	@Language	nvarchar(250)	,
	@Remark	nvarchar(250)	,
	@Type	nvarchar(250)	,
	 @Status nvarchar(50),
	@ModifiedBy	nvarchar(50)
	
AS	update [dbo].[M_Reason]
       set  Value =@Value,  Language = @Language, Remark = @Remark, Type = @Type
            ,[Status] = @Status
           ,[ModifiedBy] = @ModifiedBy, ModifiedOn = GETDATE()

		where Id= @Id and CompanyCode = @CompanyCode
  
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Role]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Role]
	@RoleId	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	,
	@RoleName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,@DefaultScreen  nvarchar(250)	,
	@Status	char(1)	
AS	
BEGIN

	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	UPDATE [dbo].[M_Role]
	   SET [RoleId] = @RoleId
		  ,[CompanyCode] = @CompanyCode
		  ,[RoleName] = @RoleName
		  ,[Description] = @Description
		  ,[ModifiedOn] = GETDATE()
		  ,[ModifiedBy] = @ModifiedBy, DefaultScreen= @DefaultScreen
		  ,[Status] = @Status
		  ,[StatusGuid] = @StatusGuid
	 WHERE CompanyCode = @CompanyCode AND RoleId = @RoleId 

	 INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	 SELECT DISTINCT CompanyCode, 'M_Role', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store WHERE [Status] = 'A'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Serial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_U_M_Serial]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@Name	nvarchar(50),
	@Prefix	nvarchar(50),
	@Serial	nvarchar(150),
	@ExpiryDate	datetime,
	@Status	nvarchar(50),
	@Stock	decimal(19, 6),
	@Custom1	nvarchar(50),
	@Custom2	nvarchar(50),
	@Custom3	nvarchar(50) ,
	@ModifiedBy	nvarchar(150)
 

AS	UPDATE [dbo].[M_Serial]
   SET  Name = @Name
   ,Prefix=@Prefix,
   Serial=@Serial
      ,ExpiryDate = @Prefix
      ,Custom1 = @Custom1
	  ,Custom2 = @Custom2
	  ,Custom3 = @Custom3
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE Id = @Id  AND CompanyCode = @CompanyCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Shipping]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[USP_U_M_Shipping]
	@CompanyCode nvarchar(50) ,
	@ShippingCode nvarchar(150) ,
	@ShippingName nvarchar(550) ,
	@Description nvarchar(550) ,
	@Remark nvarchar(1500) , 
	@ModifiedBy nvarchar(50) , 
	@DocDate datetime =NULL,
	@DocDueDate datetime = NULL,
	@Status nvarchar(50) = NULL,
	@CustomF1 nvarchar(250) = NULL,
	@CustomF2 nvarchar(250) = NULL,
	@CustomF3 nvarchar(250) = NULL,
	@CustomF4 nvarchar(250) = NULL,
	@CustomF5 nvarchar(250) = NULL,
	@CustomF6 nvarchar(250) = NULL,
	@CustomF7 nvarchar(250) = NULL,
	@CustomF8 nvarchar(250) = NULL,
	@CustomF9 nvarchar(250) = NULL,
	@CustomF10 nvarchar(250) = NULL,
	@Amount1 decimal(19, 6) = NULL,
	@Amount2 decimal(19, 6) = NULL,
	@Amount3 decimal(19, 6) = NULL,
	@Amount4 decimal(19, 6) = NULL,
	@Amount5 decimal(19, 6) = NULL,
	@LicensePlate nvarchar(50) = NULL,
	@Driver nvarchar(50) = NULL
AS
begin
   update M_Shipping set
      [ShippingName] = @ShippingName
      ,[Description] = @Description
      ,[Remark] = @Remark
      ,ModifiedBy = @ModifiedBy
      ,ModifiedOn = GETDATE() 
      ,[DocDate] = @DocDate
      ,[DocDueDate] = @DocDueDate
      ,[Status] = @Status
      ,[CustomF1] = @CustomF1
      ,[CustomF2] = @CustomF2
      ,[CustomF3] = @CustomF3
      ,[CustomF4] = @CustomF4
      ,[CustomF5] = @CustomF5
      ,[CustomF6] = @CustomF6
      ,[CustomF7] = @CustomF7
      ,[CustomF8] = @CustomF8
      ,[CustomF9] = @CustomF9
      ,[CustomF10] = @CustomF10
      ,[Amount1] = @Amount1
      ,[Amount2] = @Amount2
      ,[Amoun3] = @Amount3
      ,[Amoun4] = @Amount4
      ,[Amount5] = @Amount5
      ,[LicensePlate] = @LicensePlate
      ,[Driver] = @Driver
	  where  [CompanyCode] = @CompanyCode and  [ShippingCode] = @ShippingCode
	  
	 
end 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_ShortcutKeyboard]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- EXEC SYNC_S_T_SalesInvoice( 'SOCP001JAOF00100000452;', 'CP001')
-- =============================================
CREATE   PROCEDURE [dbo].[USP_U_M_ShortcutKeyboard]
	-- Add the parameters for the stored procedure here
	 @Id	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	,
	@Name	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@Key1	nvarchar(50)	,
	@Key2	nvarchar(50)	,
	@Key3	nvarchar(50)	,
	@Key4	nvarchar(50)	,
	@Key5	nvarchar(50)	,
	@Custom1	nvarchar(50)	,
	@Custom2	nvarchar(50)	,
	@Custom3	nvarchar(50)	,
	@FunctionCode	nvarchar(50)	,
	@Window	nvarchar(50)	,
	@Status	nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	update M_ShortcutKeyboard  set 
	
		Name = @Name,
		Description= @Description,
		Key1= @Key1,
		Key2= @Key2,
		Key3= @Key3,
		Key4= @Key4,
		Key5 = @Key5,
		Custom1= @Custom1,
		Custom2= @Custom2,
		Custom3= @Custom3,
		FunctionCode= @FunctionCode,
		Window= @Window,
		Status= @Status
	
	where 	Id = @Id and
		CompanyCode = @CompanyCode
	
 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Storage]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Storage]
	@SLocId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@WhsCode	nvarchar(50)	,
	@SlocName	nvarchar(50)	,
	@IsNegative bit,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_Storage]
   SET  SlocName= @SlocName, IsNegative= @IsNegative
      ,[ModifiedBy] = @ModifiedBy , [WhsCode] = @WhsCode
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND SLocId = @SLocId 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Store]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--- 
---
CREATE PROCEDURE [dbo].[USP_U_M_Store]
	@StoreId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@StoreDescription	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	,
	@ForeignName	nvarchar(250)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@DefaultCusId	nvarchar(50)	,
	@StoreGroupId	nvarchar(50)	,
	@ProvinceId	nvarchar(50)	,
	@DistrictId	nvarchar(50)	,
	@WardId	nvarchar(50)	,
	@CountryCode	nvarchar(50)	,
	@CustomField1	nvarchar(250)	,
	@CustomField2	nvarchar(250)	,
	@CustomField3	nvarchar(250)	,
	@CustomField4	nvarchar(250)	,
	@CustomField5	nvarchar(250)	,
	@AreaCode	nvarchar(50)	,
	@CurrencyCode	nvarchar(50)	,
	@StoreType	nvarchar(50)	,
	@ListType	nvarchar(50)	,
	@FormatConfigId	nvarchar(50)	,
	@WhsCode	nvarchar(50)	,
	@RegionCode	nvarchar(50)	,@PrintRemarks ntext = null
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	UPDATE [dbo].[M_Store]
	   SET [StoreName] = @StoreName
		  ,[StoreDescription] =  @StoreDescription
		  ,[ModifiedBy] = @ModifiedBy
		  ,[ModifiedOn] = GETDATE()
		  ,[Status] = @Status
		  ,[ForeignName] = @ForeignName
		  ,[Address] = @Address
		  ,[Phone] = @Phone
		  ,[DefaultCusId] = @DefaultCusId
		  ,[StoreGroupId] = @StoreGroupId
		  ,[ProvinceId] = @ProvinceId
		  ,[DistrictId] = @DistrictId
		  ,[WardId] = @WardId
		  ,[CountryCode] = @CountryCode
		  ,[CustomField1] = @CustomField1
		  ,[CustomField2] = @CustomField2
		  ,[CustomField3] = @CustomField3
		  ,[CustomField4] = @CustomField4
		  ,[CustomField5] = @CustomField5
		  ,[AreaCode] = @AreaCode
		  ,[CurrencyCode] = @CurrencyCode
		  ,[StoreType] = @StoreType
		  ,[ListType] = @ListType
		  ,[FormatConfigId] = @FormatConfigId
		  ,[WhsCode] = @WhsCode
		  ,RegionCode = @RegionCode
		  ,PrintRemarks = @PrintRemarks
		  --, SyncLocalStatus = 'U'
		  ,[StatusGuid] = @StatusGuid
	WHERE CompanyCode = @CompanyCode AND StoreId = @StoreId 

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn])
	SELECT DISTINCT @CompanyCode, 'M_Store', @StoreId, @StatusGuid, GETDATE()

-- [USP_U_M_Store] 'ST0001','CP0001','Cửa hàng 1','Cửa hàng 1', null,'A', null,'Test', null, null,'FVI','06','063','01975','704', null, null, null, null, null,'NVN','VND',null, null, null,'W0001'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_StoreArea]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_M_StoreArea]
	@CompanyCode	nvarchar(50)	,
	@StoreAreaId	nvarchar(50)	,
	@StoreAreaName	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@StoreAreaType	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	char(1)	
AS	update [dbo].M_StoreArea
     set 
			StoreAreaName=@StoreAreaName	 ,
			Description=@Description	 ,
			StoreAreaType =@StoreAreaType,
			ModifiedBy	=@ModifiedBy, 
			Status	=@Status 
	 where CompanyCode = @CompanyCode and StoreAreaId= @StoreAreaId
      
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_StoreCapacity]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_M_StoreCapacity]
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50),
    @MaxCapacity	int,
	@ModifiedBy	nvarchar(50),
	@Status	char(1)	
AS	
 update[dbo].[M_StoreCapacity] set MaxCapacity = @MaxCapacity, ModifiedBy = @ModifiedBy, [Status] = @Status, ModifiedOn = GETDATE() 
   where  CompanyCode= @CompanyCode and StoreId = @StoreId and StoreAreaId = @StoreAreaId  and TimeFrameId = @TimeFrameId 

GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_StoreCurrency]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_U_M_StoreCurrency]
	@Id	uniqueidentifier,
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@Currency	nvarchar(50),
	@Status nvarchar(50)
AS	
update M_StoreCurrency set
 
	Currency = @Currency,
	Status  = @Status
where Id = @Id and CompanyCode =@CompanyCode and StoreId= @StoreId
          
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_StoreGroup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_StoreGroup]
	@StoreGroupId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreGroupName	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)		
AS	UPDATE [dbo].[M_StoreGroup]
   SET [StoreGroupId] = @StoreGroupId
      ,[CompanyCode] = @CompanyCode
      ,[StoreGroupName] = @StoreGroupName
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND StoreGroupId = @StoreGroupId 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_StorePayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_StorePayment]
	@StoreId	nvarchar(50)	,
	@PaymentCode	nvarchar(50)	,
	@isShow	bit, @AllowMix bit,
	@OrderNum	int,
	@Status	char(1)		
AS
BEGIN

	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	UPDATE [dbo].[M_StorePayment]
	   SET [isShow] =@isShow
		  ,[OrderNum]=@OrderNum
		  ,[Status] = @Status
		  ,AllowMix=@AllowMix, SyncLocalStatus = 'U'
		  ,StatusGuid = @StatusGuid
	 WHERE StoreId = @StoreId AND PaymentCode = @PaymentCode 

	 INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT 'CP001', 'M_StorePayment', @StoreId, @StatusGuid, GETDATE(), 'U'

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Tax]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Tax]
	@TaxCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@TaxName	nvarchar(50)	,
	@TaxPercent	decimal(19, 6)	,
	@TaxType	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
 
	@Status	char(1)		
AS	UPDATE [dbo].[M_Tax]
   SET [TaxCode] = @TaxCode
      ,[CompanyCode] = @CompanyCode
      ,[TaxName] = @TaxName
      ,[TaxPercent] = @TaxPercent
      ,[TaxType] = @TaxType
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status

 WHERE TaxCode = @TaxCode AND CompanyCode = @CompanyCode 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_TimeFrame]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[USP_U_M_TimeFrame]

	@CompanyCode	nvarchar(50)	,
    @TimeFrameId	nvarchar(50)	,
	@StartTime	datetime,
	@EndTime	datetime	,
	@Status	nvarchar(50)	, 
	@ModifiedBy	nvarchar(50)	 
 
AS	update M_TimeFrame set 
          
            [StartTime] = @StartTime
           ,[EndTime] = @EndTime
           ,[Status] = @Status
        
           ,ModifiedBy = @ModifiedBy, ModifiedOn = GETDATE()
		   where  [CompanyCode] = @CompanyCode and TimeFrameId =@TimeFrameId
           
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_TransactionType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_TransactionType]
	@TransType	nvarchar(50)	,
	@Description	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	
AS	UPDATE [dbo].[M_TransactionType]
   SET [TransType] = @TransType
      ,[Description] = @Description
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status

 WHERE TransType = @TransType 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_UOM]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_UOM]
	@UOMCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@UOMName	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status nvarchar(50)
	,@AllowDecimal bit =null
	,@DecimalFormat nvarchar(150) =null
	,@ThousandFormat nvarchar(150) =null
	,@DecimalPlacesFormat nvarchar(150) =null
	,@CustomF1 nvarchar(250) =null
	,@CustomF2 nvarchar(250) =null
	,@CustomF3 nvarchar(250) =null
	,@CustomF4 nvarchar(250) =null
	,@CustomF5 nvarchar(250) =null
AS	UPDATE [dbo].[M_UOM]
   SET [UOMCode] = @UOMCode
      ,[CompanyCode] = @CompanyCode
      ,[UOMName] = @UOMName
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status,
	  AllowDecimal = @AllowDecimal
		,DecimalFormat = @DecimalFormat
		,ThousandFormat = @ThousandFormat
		,DecimalPlacesFormat = @DecimalPlacesFormat
		,CustomF1 = @CustomF1
		,CustomF2 = @CustomF2
		,CustomF3 = @CustomF3
		,CustomF4 = @CustomF4
		,CustomF5 = @CustomF5
 WHERE CompanyCode = @CompanyCode AND UOMCode = @UOMCode




GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_User]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_U_M_User]
	@UserId	uniqueidentifier	,
	@CompanyCode	nvarchar(50)	,
	@Username	nvarchar(50)	,
	@Password	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@FirstName	nvarchar(150)	,
	@LastName	nvarchar(150)	,
	@Position	nvarchar(150)	,
	@LastLoginStoreId	nvarchar(50)	,
	@LastLoginStoreLang	nvarchar(50)	,
	@Status	char(1)	,
	@DefEmployee nvarchar(50) = null,
	@DefStore nvarchar(50) = null,
	@CustomF1 nvarchar(250) = null,
	@CustomF2 nvarchar(250) = null,
	@CustomF3 nvarchar(250) = null,
	@CustomF4 nvarchar(250) = null,
	@CustomF5 nvarchar(250) = null , @QRBarcode nvarchar(250) = null
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	UPDATE [dbo].[M_User]
	   SET [Username] = @Username
		  ,[Password] = @Password
		  ,[ModifiedBy] = @ModifiedBy
		  ,[ModifiedOn] = GETDATE()
		  ,[LastLoginStoreId] = @LastLoginStoreId
		  ,[LastLoginStoreLang] = @LastLoginStoreLang
		  ,[Status] = @Status,
		   FirstName = @FirstName,
		   LastName = @LastName,
		   Position= @Position,
		   DefEmployee= @DefEmployee,
			 DefStore = @DefStore ,
			CustomF1 =@CustomF1 ,
			CustomF2 = @CustomF2 ,
			CustomF3 =@CustomF3  ,
			CustomF4 = @CustomF4 ,
			CustomF5 = @CustomF5, QRBarcode= @QRBarcode
			,StatusGuid = @StatusGuid
	 WHERE CompanyCode = @CompanyCode AND UserId = @UserId

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_UserLicense]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_UserLicense]
	@UserId	uniqueidentifier	,
	@LicenseId	nvarchar(50)	
AS	UPDATE [dbo].[M_UserLicense]
   SET [UserId] = @UserId
      ,[LicenseId] = @LicenseId
 WHERE LicenseId = @LicenseId AND UserId = @UserId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_UserRole]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_UserRole]
	@UserId	uniqueidentifier	,
	@RoleId	nvarchar(50)	
AS	
BEGIN

	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	Delete [M_UserRole] where UserId = @UserId;
	Insert into [M_UserRole](UserId,RoleId) values(@UserId, @RoleId);
	 --WHERE RoleId = @RoleId AND UserId = @UserId

	UPDATE M_User SET StatusGuid = @StatusGuid WHERE UserId = @UserId
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn] ,[ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store WHERE [Status] = 'A'

END

GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_UserStore]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_UserStore]
	@UserId	uniqueidentifier	,
	@StoreId	nvarchar(50)	
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	UPDATE [dbo].[M_UserStore]
	SET [UserId] = @UserId
      ,[StoreId] = @StoreId
	WHERE StoreId = @StoreId AND UserId = @UserId

	UPDATE M_User SET StatusGuid = @StatusGuid WHERE UserId = @UserId
	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'M_User', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_M_Warehouse]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_M_Warehouse]
	@WhsCode	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@WhsName	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)	,
	@WhsType	nvarchar(50)	,
	@DefaultSlocId	nvarchar(50)
AS	UPDATE [dbo].[M_Warehouse]
   SET [WhsCode] = @WhsCode
      ,[CompanyCode] = @CompanyCode
      ,[WhsName] = @WhsName
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
      ,[WhsType] = @WhsType
	  ,DefaultSlocId= @DefaultSlocId
 WHERE CompanyCode = @CompanyCode AND WhsCode = @WhsCode
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_BarcodeSetup]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_S_BarcodeSetup]
	@Id [uniqueidentifier]  ,
	@CompanyCode [nvarchar](50) ,
	@Name [nvarchar](50)  ,
	@Prefix [nvarchar](50)  ,
	@PrefixPosition [int]  ,
	@PLUPosition int,
	@BarCodePosition [int]  ,
	@QtyPosition [int]  ,
	@AmountPosition [int]  ,
	@CheckPosition [int]  ,
	@CheckCode [nvarchar](50)  ,
	@CharSeparator [nvarchar](50)  ,
	@AmountCalculation [nvarchar](50)  ,
	@AmountValue int ,
	@WeightCalculation [nvarchar](50)  ,
	@WeightValue int  ,
	 
	@Status [nvarchar](10)  ,
	@PrefixCheckLength int null, 
	@IsOrgPrice bit null, 
	@CustomF1 nvarchar(50) null,
	@CustomF2 nvarchar(50) null,
	@CustomF3 nvarchar(50) null,
	@CustomF4 nvarchar(50) null,
	@CustomF5 nvarchar(50) null
AS	
Update S_BarcodeSetup
    set 
	Name   =@Name ,
	Prefix =@Prefix  ,
	PrefixPosition =@PrefixPosition ,
	BarCodePosition =@BarCodePosition ,
	PLUPosition= @PLUPosition,
	QtyPosition   =@QtyPosition ,
	AmountPosition  =@AmountPosition,
	CheckPosition  =@CheckPosition,
	CheckCode  =@CheckCode,
	CharSeparator  =@CharSeparator,
	Status = @Status,
	AmountCalculation = @AmountCalculation,
	AmountValue = @AmountValue,
	WeightCalculation= @WeightCalculation,
	WeightValue= @WeightValue,
	PrefixCheckLength = @PrefixCheckLength, 
	IsOrgPrice = @IsOrgPrice, 
	CustomF1 = @CustomF1,
	CustomF2 = @CustomF2,
	CustomF3 = @CustomF3,
	CustomF4 = @CustomF4,
	CustomF5 = @CustomF5
where Id  = @Id and CompanyCode  =@CompanyCode


 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_CurrencyRoundingOff]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_S_CurrencyRoundingOff] 
	@Id	nvarchar(50), 
	@CompanyCode	nvarchar(50), 
	@StoreId	nvarchar(50)	,
	@CurrencyCode	nvarchar(50)	,
	@RoundingOff	decimal(19, 6)	,
	 
	@CustomF1	nvarchar(50)	,
	@CustomF2	nvarchar(50)	,
	@CustomF3	nvarchar(50),
	@Status nvarchar(10)	
AS	


update  [dbo].[S_CurrencyRoundingOff]
        set StoreId=@StoreId, CurrencyCode = @CurrencyCode
           ,RoundingOff= @RoundingOff
           ,CustomF1= @CustomF1
           ,CustomF2=@CustomF2
           ,CustomF3=@CustomF3
           ,Status=@Status
		where Id= @Id and CompanyCode= @CompanyCode
           
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_DataSourceEdit]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create   PROCEDURE [dbo].[USP_U_S_DataSourceEdit]
	 
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@DataSource	nvarchar(50)	,
	@Field	nvarchar(250)	,
	@CanEdit	bit,
	@ModifiedBy	nvarchar(50) 
	 
AS
BEGIN
	 
Update[dbo].[S_DataSourceEdit]
       set DataSource= @DataSource
           ,Field = @Field
           ,CanEdit = @CanEdit
           
           ,ModifiedOn = GETDATE(), ModifiedBy =@ModifiedBy
          where CompanyCode=  @CompanyCode and Id = @Id
          
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_FormatConfig]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_S_FormatConfig]
	@FormatId	int	,
	@CompanyCode	nvarchar(50)	,
	@FormatName	nvarchar(150)	,
	@SetupType	nvarchar(50)	,
	@SetupCode	nvarchar(50)	,
	@DateFormat	nvarchar(50)	,
	@DecimalFormat	nvarchar(50)	,
	@ThousandFormat	nvarchar(50)	,
	@DecimalPlacesFormat	nvarchar(50)	,
	@QtyDecimalPlacesFormat	nvarchar(50)	,
	@PerDecimalPlacesFormat	nvarchar(50)	,
	@RateDecimalPlacesFormat	nvarchar(50)	,
	@Status	char(1)	,
	@ModifiedBy	nvarchar(50)	

AS	UPDATE [dbo].[S_FormatConfig]
   SET [FormatName] =@FormatName
      ,[CompanyCode] =@CompanyCode
      ,[SetupType] = @SetupType
      ,[SetupCode] = @SetupCode
      ,[DateFormat] = @DateFormat
      ,[DecimalFormat] = @DecimalFormat
      ,[ThousandFormat] = @ThousandFormat
      ,[DecimalPlacesFormat] = @DecimalPlacesFormat
      ,[Status] =@Status
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE(),
	  QtyDecimalPlacesFormat = @QtyDecimalPlacesFormat, PerDecimalPlacesFormat = @PerDecimalPlacesFormat, RateDecimalPlacesFormat = @RateDecimalPlacesFormat
 WHERE CompanyCode = @CompanyCode AND FormatId = @FormatId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_GeneralSetting]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_S_GeneralSetting]
	@SettingId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@SettingName	nvarchar(250)	,
	@SettingValue	nvarchar(250)	,
	@SettingDescription	nvarchar(250)	,
	@ValueType	nvarchar(250)	,
	@Status	char(1)	,
	@ModifiedBy	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@TokenExpired	decimal(19, 6)	, @DefaultValue	nvarchar(250),
	@CustomField1	nvarchar(250),
	@CustomField2	nvarchar(250),
	@CustomField3	nvarchar(250),
	@CustomField4	nvarchar(250),
	@CustomField5	nvarchar(250)
AS	
BEGIN
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	UPDATE [dbo].[S_GeneralSetting]
	SET [SettingName] = @SettingName
      ,[SettingValue] = @SettingValue
      ,[SettingDescription] = @SettingDescription
      ,[ValueType] = @ValueType
      ,[Status] = @Status
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[StoreId] = @StoreId
      ,[TokenExpired] = @TokenExpired
	  , DefaultValue = @DefaultValue 
	  , CustomField1 = @CustomField1
	  , CustomField2= @CustomField2
	  , CustomField3= @CustomField3
	  , CustomField4= @CustomField4
	  , CustomField5= @CustomField5
	  , SyncLocalStatus = 'U'
	  ,[StatusGuid] = @StatusGuid
	WHERE CompanyCode = @CompanyCode AND SettingId = @SettingId and [StoreId] = @StoreId

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT CompanyCode, 'S_GeneralSetting', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store WHERE StoreId = @StoreId --AND [Status] = 'A'


END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_ItemCustomList]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_S_ItemCustomList]
	-- Add the parameters for the stored procedure here
	@Type nvarchar(50) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

		SELECT  distinct  'CustomField1' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField1), ',') AS csv 
		FROM (select distinct  CustomField1 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField2' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField2), ',') AS csv 
		FROM (select distinct  CustomField2 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField3' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField3), ',') AS csv 
		FROM (select distinct  CustomField3 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField4' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField4), ',') AS csv 
		FROM (select distinct  CustomField4 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField5' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField5), ',') AS csv 
		FROM (select distinct  CustomField5 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField6' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField6), ',') AS csv 
		FROM (select distinct  CustomField6 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField7' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField7), ',') AS csv 
		FROM (select distinct  CustomField7 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField8' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField8), ',') AS csv 
		FROM (select distinct  CustomField8 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField9' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField9), ',') AS csv 
		FROM (select distinct  CustomField9 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'CustomField10' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), CustomField10), ',') AS csv 
		FROM (select distinct  CustomField10 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'ItemCategory_1' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), ItemCategory_1), ',') AS csv 
		FROM (select distinct  ItemCategory_1 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'ItemCategory_2' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), ItemCategory_2), ',') AS csv 
		FROM (select distinct  ItemCategory_2 from M_Item with (nolock)) t 

		union all

		SELECT  distinct  'ItemCategory_3' as 'Column',  STRING_AGG (CONVERT(NVARCHAR(max), ItemCategory_3), ',') AS csv 
		FROM (select distinct  ItemCategory_3 from M_Item with (nolock)) t 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_License]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create   PROCEDURE [dbo].[USP_U_S_License]
	@LicenseId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LicenseType	nvarchar(50)	,
	@LicenseDesc	nvarchar(250)	,
	@LicenseCode	nvarchar(250)	,
	@ValidFrom	datetime	,
	@ValidTo	datetime	,
	@Status	char(1)	,
	@LicenseAmt	decimal(19, 6)	,
	@LicenseRemain	decimal(19, 6)	
AS	UPDATE [dbo].[S_License]
   SET [LicenseId] = @LicenseId
      ,[CompanyCode] = @CompanyCode
      ,[LicenseType] = @LicenseType
      ,[LicenseDesc] = @LicenseDesc
      ,[LicenseCode] = @LicenseCode
      ,[ValidFrom] = @ValidFrom
      ,[ValidTo] = @ValidTo
      ,[Status] = @Status
      ,[LicenseAmt] = @LicenseAmt
      ,[LicenseRemain] = @LicenseRemain
 WHERE CompanyCode = @CompanyCode AND LicenseId = @LicenseId


GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_LicenseType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_S_LicenseType]
	@LicenseType	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@Description    nvarchar(50)		
AS	UPDATE [dbo].[S_LicenseType]
   SET [LicenseType] = @LicenseType
      ,[CompanyCode] = @CompanyCode
      ,[Description] = @Description
 WHERE CompanyCode = @CompanyCode AND LicenseType = @LicenseType
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_LoyaltyHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_S_LoyaltyHeader]
	-- Add the parameters for the stored procedure here
	@LoyaltyId nvarchar(50),
	@CompanyCode nvarchar(50),
	@LoyaltyType int,
	@LoyaltyName nvarchar(250),
	@CustomerType char(1),
	@ValidDateFrom date,
	@ValidDateTo date,
	@ValidTimeFrom int,
	@ValidTimeTo int,
	@IsMon char(1),
	@IsTue char(1),
	@IsWed char(1),
	@IsThu char(1),
	@IsFri char(1),
	@IsSat char(1),
	@IsSun char(1),
	@TotalBuyFrom decimal(19, 6),
	@TotalBuyTo decimal(19, 6),
	@TotalEarnType nvarchar(50),
	@TotalEarnValue decimal(19, 6),
	@MaxTotalEarnValue decimal(19, 6),
	@ModifiedBy nvarchar(50),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE [dbo].[S_LoyaltyHeader]
	SET [LoyaltyType] = @LoyaltyType
      ,[LoyaltyName] = @LoyaltyName
      ,[CustomerType] = @CustomerType
      ,[ValidDateFrom] = @ValidDateFrom
      ,[ValidDateTo] = @ValidDateTo
      ,[ValidTimeFrom] = @ValidTimeFrom
      ,[ValidTimeTo] = @ValidTimeTo
      ,[IsMon] = @IsMon
      ,[IsTue] = @IsTue
      ,[IsWed] = @IsWed
      ,[IsThu] = @IsThu
      ,[IsFri] = @IsFri
      ,[IsSat] = @IsSat
      ,[IsSun] = @IsSun
      ,[TotalBuyFrom] = @TotalBuyFrom
      ,[TotalBuyTo] = @TotalBuyTo
      ,[TotalEarnType] = @TotalEarnType
	  ,[TotalEarnValue] = @TotalEarnValue, MaxTotalEarnValue = @MaxTotalEarnValue
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status, SyncLocalStatus = 'U'
	WHERE LoyaltyId = @LoyaltyId AND CompanyCode = @CompanyCode


END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_LoyaltyRank]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_U_S_LoyaltyRank]
@CompanyCode	nvarchar(50),
	@RankId	nvarchar(10),
	@RankName	nvarchar(50),
	@Factor	decimal(19, 6),
	@TargetAmount	decimal(19, 6),
	@Period	int,
	@Status	nvarchar(5)
	
AS	
begin
	update [dbo].[S_LoyaltyRank]
           set
	RankName	=@RankName ,
	Factor=@Factor ,
	TargetAmount =@TargetAmount,
	Period	=@Period ,
	Status=@Status where RankId	=@RankId and CompanyCode=@CompanyCode
	 
end
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_PersonalSetting]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_U_S_PersonalSetting]
	@SettingId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@FunctionId	nvarchar(50)	,
	@SettingName	nvarchar(50)	,
	@SettingType	nvarchar(50)	,
	@SettingValue	nvarchar(50)	,
	@UserId	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	,
	@Status	char(1)		
AS	UPDATE [dbo].[S_PersonalSetting]
   SET [SettingId] = @SettingId
      ,[CompanyCode] = @CompanyCode
      ,[FunctionId] = @FunctionId
      ,[SettingName] = @SettingName
      ,[SettingType] = @SettingType
      ,[SettingValue] = @SettingValue
      ,[UserId] = @UserId
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
 WHERE CompanyCode = @CompanyCode AND SettingId = @SettingId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_PromoHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_S_PromoHeader]
	-- Add the parameters for the stored procedure here
	@PromoId nvarchar(50),
	@CompanyCode nvarchar(50),
	@PromoType int,
	@PromoName nvarchar(250),
	@CustomerType char(1),
	@ValidDateFrom date,
	@ValidDateTo date,
	@ValidTimeFrom int,
	@ValidTimeTo int,
	@IsMon char(1),
	@IsTue char(1),
	@IsWed char(1),
	@IsThu char(1),
	@IsFri char(1),
	@IsSat char(1),
	@IsSun char(1),
	@TotalBuyFrom decimal(19, 6),
	@TotalBuyTo decimal(19, 6),
	@TotalGetType nvarchar(50),
	@TotalGetValue decimal(19, 6),
	@MaxTotalGetValue decimal(19, 6),
	@IsCombine char(1),
	@IsVoucher bit,
	@ModifiedBy nvarchar(50),
	@Status char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE [dbo].[S_PromoHeader]
	SET [PromoType] = @PromoType
      ,[PromoName] = @PromoName
      ,[CustomerType] = @CustomerType
      ,[ValidDateFrom] = @ValidDateFrom
      ,[ValidDateTo] = @ValidDateTo
      ,[ValidTimeFrom] = @ValidTimeFrom
      ,[ValidTimeTo] = @ValidTimeTo
      ,[IsMon] = @IsMon
      ,[IsTue] = @IsTue
      ,[IsWed] = @IsWed
      ,[IsThu] = @IsThu
      ,[IsFri] = @IsFri
      ,[IsSat] = @IsSat
      ,[IsSun] = @IsSun
      ,[TotalBuyFrom] = @TotalBuyFrom
      ,[TotalBuyTo] = @TotalBuyTo
      ,[TotalGetType] = @TotalGetType
	  ,[TotalGetValue] = @TotalGetValue, MaxTotalGetValue=@MaxTotalGetValue
      ,[IsCombine] = @IsCombine
	  ,IsVoucher = @IsVoucher
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedOn] = GETDATE()
      ,[Status] = @Status
	  , SyncLocalStatus = 'U'
	WHERE PromoId = @PromoId AND CompanyCode = @CompanyCode


END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_PromoSchema]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_S_PromoSchema]
	-- Add the parameters for the stored procedure here
	@SchemaId nvarchar(50),
    @CompanyCode nvarchar(50),
    @SchemaName nvarchar(250),
    @ModifiedBy nvarchar(50),
    @Status char(1),
	@AllowChain char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	UPDATE [dbo].[S_PromoSchema]
	SET [SchemaName] = @SchemaName
		,[ModifiedBy] = @ModifiedBy
		,[ModifiedOn] = GETDATE()
		,[Status] = @Status
		,[AllowChain] = @AllowChain
		, SyncLocalStatus = 'U'
	 WHERE SchemaId = @SchemaId AND CompanyCode = @CompanyCode


END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_QuickAccessMenu]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_S_QuickAccessMenu]
	@Id	int	,
	@Name	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@Url	nvarchar(250)	,
	@Icon	nvarchar(250)	,
	@Image	nvarchar(250)	,
	@OrderNum	int	,
	@Status	nvarchar(5)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update S_QuickAccessMenu 
	set  Name=@Name	,
		Description	=@Description,
		Url=@Url,
		Icon=@Icon,
		Image=@Image	,
		OrderNum=@OrderNum	,
		Status=@Status
	where  Id= @Id
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_QuickAccessMenu_ReOrder]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_S_QuickAccessMenu_ReOrder]
	@SourceId	int, @DesId int	
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Declare @SourceNum int = (select OrderNum from S_QuickAccessMenu with (nolock)), @DesNum int = (select OrderNum from S_QuickAccessMenu with (nolock))
	update S_QuickAccessMenu 
	set OrderNum = @DesNum
	where  Id= @SourceId;
	update S_QuickAccessMenu 
	set OrderNum = @SourceNum
	where  Id= @DesId;
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_ReleaseNote]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   PROCEDURE [dbo].[USP_U_S_ReleaseNote]
	@CompanyCode	nvarchar(50)	,
	@Id	nvarchar(50)	,
	@Version	nvarchar(250)	,
	@Description	nvarchar(MAX)	 
    ,@ReleaseTime  Datetime 
    ,@ReleaseContent nvarchar(MAX)	
    ,@ReleaseContentForeign nvarchar(MAX)	
    ,@CustomF1 nvarchar(MAX)	
    ,@CustomF2 nvarchar(MAX)	
    ,@CustomF3 nvarchar(MAX)	
    ,@CustomF4 nvarchar(MAX)	
    ,@CustomF5 nvarchar(MAX)	
    ,@ModifiedBy  nvarchar(250)
    ,@Status nvarchar(15)	


AS	

Update [dbo].S_ReleaseNote
        
      set  Description = @Description
      ,ReleaseTime = @ReleaseTime
      ,ReleaseContent = @ReleaseContent
      ,ReleaseContentForeign= @ReleaseContentForeign
      ,CustomF1= @CustomF1
      ,CustomF2= @CustomF1
      ,CustomF3= @CustomF1
      ,CustomF4= @CustomF1
      ,CustomF5= @CustomF1
      ,Status= @Status
      ,ModifiedBy= @ModifiedBy
      ,ModifiedOn = GETDATE()  
     where Id = @Id
     and CompanyCode = @CompanyCode
     and Version = @Version

GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_SalesType]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_S_SalesType]
	@Id int,
	@Code	nvarchar(50)	,
	@Description	nvarchar(50)	, 
	@Status	char(1)	
AS	update [dbo].S_SalesType set [Code]= @Code, Description= @Description, Status= @Status where Id= @Id 


 


GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_StoreClient]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_U_S_StoreClient]
	@CompanyCode nvarchar(50),
	
	@StoreId	nvarchar(50),  
	@Id	nvarchar(50),  
	@FromDate	DateTime,  
	@ToDate	DateTime , 
	@Name	nvarchar(250),  
	@LocalIP	nvarchar(50),  
	@PublicIP	nvarchar(50),  
	@Custom1	nvarchar(250),  
	@Custom2	nvarchar(250),  
	@Custom3	nvarchar(250),  
	@Custom4	nvarchar(250),  
	@Custom5	nvarchar(250),  
	@PoleName	nvarchar(250) = null,  
	@PoleBaudRate	nvarchar(50) = null,  
	@PoleParity	nvarchar(50) = null,  
	@PoleDataBits	nvarchar(50) = null,  
	@PoleStopBits	nvarchar(50)= null,  
	@PoleHandshake	nvarchar(50)= null,  
	@PrintSize	nvarchar(50)= null,  @PrintName	nvarchar(50)= null,  
	@Status	nvarchar(10) 
AS
begin
	
	DECLARE @StatusGuid uniqueidentifier;
	SET @StatusGuid = NEWID();

	update S_StoreClient set
 
		FromDate =@FromDate ,  
		ToDate= @ToDate , 
		Name =@Name,  
		Custom1 =@Custom1,  
		Custom2 =@Custom2,  
		Custom3 =@Custom3,  
		Custom4 =@Custom4,  
		Custom5	=@Custom5 ,
		Status	 = @Status,
		LocalIP=@LocalIP,
		PublicIP = @PublicIP,
		PoleName= @PoleName,  
		PoleBaudRate = @PoleBaudRate,  
		PoleParity= @PoleParity,  
		PoleDataBits = @PoleDataBits,  
		PoleStopBits = @PoleStopBits,  
		PoleHandshake =@PoleHandshake,
		PrintSize= @PrintSize,
		PrintName = @PrintName, SyncLocalStatus = 'U',
		[StatusGuid] = @StatusGuid
	where  CompanyCode = @CompanyCode and StoreId = @StoreId and Id	= @Id

	INSERT INTO [dbo].[T_SyncActionData]
			   ([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
	SELECT DISTINCT 'CP001', 'S_StoreClient', @StoreId, @StatusGuid, GETDATE(), 'U'
 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_StoreClientByPublicId]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_S_M_Customer] '', '', ''
CREATE PROCEDURE [dbo].[USP_U_S_StoreClientByPublicId]
	@CompanyCode nvarchar(50), 
	@StoreId	nvarchar(50),   
	@FromDate	DateTime,  
	@ToDate	DateTime , 
	@Name	nvarchar(250),  
	@LocalIP	nvarchar(250),  
	@PublicIP	nvarchar(250),  
	@Custom1	nvarchar(250),  
	@Custom2	nvarchar(250),  
	@Custom3	nvarchar(250),  
	@Custom4	nvarchar(250),  
	@Custom5	nvarchar(250),  
	@Status	nvarchar(10) 
AS
begin
update S_StoreClient set
 
	FromDate =@FromDate ,  
	ToDate= @ToDate , 
	Name =@Name,  
	Custom1 =@Custom1,  
	Custom2 =@Custom2,  
	Custom3 =@Custom3,  
	Custom4 =@Custom4,  
	Custom5	=@Custom5 ,
	Status	 = @Status,
	LocalIP=@LocalIP
	, SyncLocalStatus = 'U'
where  CompanyCode = @CompanyCode and StoreId = @StoreId and PublicIP = @PublicIP
 
end 


--select * from M_ItemUOM
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_Version]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   PROCEDURE [dbo].[USP_U_S_Version]
	@Id	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@Version	nvarchar(250)	,
	@ReleaseTime	datetime, 
	@Description nvarchar(500)	, 
	@ModifiedBy	nvarchar(50)	, 
	@Status	nvarchar(15)	
	 
AS	 
update S_Version set Description = @Description, ModifiedBy = @ModifiedBy, ModifiedOn = GETDATE()
where Id= @Id and CompanyCode = @CompanyCode
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_S_VoidOrderSetting]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_S_VoidOrderSetting]
	@Id	nvarchar(50)	,
	@Type	nvarchar(50)	,
	@Code	nvarchar(50)	,
	@Description	nvarchar(250)	,
	@Value	nvarchar(50)	,
	@Status	nvarchar(50)	,
	@Custom1	nvarchar(50)	,
	@Custom2	nvarchar(50)	,
	@Custom3	decimal(19, 6)
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
update  [dbo].S_VoidOrderSetting
           set 
			Description= @Description,
			Value= @Value,
			Status= @Status,
			Custom1= @Custom1,
			Custom2= @Custom2,
			Custom3= @Custom3
			where Id	= @Id and  Type= @Type and  Code= @Code
     
 

END

--select * from S_VoidOrderSetting
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_BankIn]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_T_BankIn] 
    @Id	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@DailyId	nvarchar(50),
	@LineNum	int,
	@Currency	nvarchar(50),
	@FCAmt	decimal(19, 6),
	@Rate	decimal(19, 6),
	@BankInAmt	decimal(19, 6),
	@RefNum	nvarchar(150),
	@RefNum2	nvarchar(150),
	@CustomF1	nvarchar(150),
	@CustomF2	nvarchar(150),
	@CustomF3	nvarchar(150),
	@CustomF4	nvarchar(150),
	@CustomF5	nvarchar(150), 
	@ModifiedBy	nvarchar(150), 
	@DocDate datetime, 
				@Status	nvarchar(150)							
AS	
update [dbo].[T_BankIn]
          set
			Currency = @Currency,
			FCAmt = @FCAmt,
			Rate = @Rate,
			BankInAmt = @BankInAmt,
			RefNum	= @RefNum,
			RefNum2 = @RefNum2,
			CustomF1 =@CustomF1	,
			CustomF2 = @CustomF2,
			CustomF3 = @CustomF3	,
			CustomF4 = @CustomF4	,
			CustomF5= @CustomF5, 
			ModifiedBy	= @ModifiedBy,
			ModifiedOn = Getdate(),
			DocDate = @DocDate,
			Status =@Status, SyncLocalStatus = 'U'
			where CompanyCode = @CompanyCode and
			StoreId= @StoreId and 
			DailyId = @DailyId and 
			LineNum= @LineNum and 
			Id = @Id
     
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_GoodsIssueHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_U_T_GoodsIssueHeader]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TotalPayable	decimal(19, 6),
	@TotalDiscountAmt	decimal(19, 6),
	@TotalReceipt	decimal(19, 6),	
	@TotalTax	decimal(19, 6),
	@ModifiedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	bit,
	@Remark	nvarchar(250),
	@StoreName 	nvarchar(250),
	@RefId nvarchar(50),
	@MovementType nvarchar(50), @ShiftId  nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_GoodsIssueHeader 
	set [TotalPayable] =@TotalPayable
      ,[TotalDiscountAmt] = @TotalDiscountAmt
      ,[TotalReceipt] = @TotalReceipt
      ,[TotalTax] = @TotalTax
      , ModifiedBy = @ModifiedBy
      , ModifiedOn = GETDATE()
      ,[Status] = @Status
      ,[IsCanceled] =@IsCanceled
      ,[Remark]= @Remark
	  ,StoreName = @StoreName
	  ,RefId = @RefId
	  ,MovementType = @MovementType, ShiftId= @ShiftId
	 where  [INVTId]=@INVTId and [CompanyCode]=@CompanyCode and [StoreId]=@StoreId
	   
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_GoodsIssueLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_GoodsIssueLine]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@LineId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@SLocId	nvarchar(50),
	@BarCode	nvarchar(250),
	@UOMCode	nvarchar(50),
	@Quantity	decimal(19, 6),
	@Price	decimal(19, 6),
	@LineTotal	decimal(19, 6),
	@CurrencyCode	nvarchar(50),
	@CurrencyRate	decimal(19, 6),
	@TaxCode	nvarchar(50),
	@TaxRate	decimal(19, 6),
	@TaxAmt	decimal(19, 6),
	@Remark	nvarchar(250), 
	@ModifiedBy	nvarchar(50), 
	@Status	char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_GoodsIssueLine 
	set 
		ItemCode = @ItemCode,
		SLocId = @SLocId,
		BarCode= @BarCode,
		UOMCode= @UOMCode,
		Quantity=@Quantity	,
		Price=@Price	,
		LineTotal= @LineTotal,
		CurrencyCode= @CurrencyCode,
		CurrencyRate= @CurrencyRate,
		TaxCode= @TaxCode,
		TaxRate= @TaxRate,
		TaxAmt= @TaxAmt,
		Remark= @Remark,
		ModifiedBy=	@ModifiedBy, 
		ModifiedOn = GETDATE(),
		Status=@Status
	where INVTId=@INVTId and  CompanyCode= @CompanyCode and LineId= @LineId
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_GoodsIssueLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_GoodsIssueLineSerial]
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@ItemCode	nvarchar(50),
	@SerialNum	nvarchar(100),
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6),
	@UOMCode	nvarchar(50),
	@CreatedBy	nvarchar(50),
	@Status	char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_GoodsIssueLineSerial 
	set  
		SerialNum =@SerialNum,
		SLocId	 = @SLocId,
		Quantity = @Quantity,
		UOMCode= @UOMCode,
		CreatedBy= @CreatedBy,
		Status	= @Status
 
	where INVTId	=@INVTId and
		LineId = @LineId and
		CompanyCode = @CompanyCode and
		ItemCode= @ItemCode
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_GoodsReceiptHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_U_T_GoodsReceiptHeader]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@TotalPayable	decimal(19, 6),
	@TotalDiscountAmt	decimal(19, 6),
	@TotalReceipt	decimal(19, 6),	
	@TotalTax	decimal(19, 6),
	@ModifiedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	bit,
	@Remark	nvarchar(250),
	@StoreName 	nvarchar(250),
	@RefId nvarchar(50),
	@MovementType nvarchar(50), @ShiftId  nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_GoodsReceiptHeader 
	set [TotalPayable] =@TotalPayable
      ,[TotalDiscountAmt] = @TotalDiscountAmt
      ,[TotalReceipt] = @TotalReceipt
      ,[TotalTax] = @TotalTax
      , ModifiedBy = @ModifiedBy
      , ModifiedOn = GETDATE()
      ,[Status] = @Status
      ,[IsCanceled] =@IsCanceled
      ,[Remark]= @Remark
	  ,StoreName = @StoreName
	  ,RefId = @RefId
	  ,MovementType = @MovementType, ShiftId = @ShiftId
	 where  [INVTId]=@INVTId and [CompanyCode]=@CompanyCode and [StoreId]=@StoreId
	   
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_GoodsReceiptLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_GoodsReceiptLine]
	@INVTId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@LineId	nvarchar(50),
	@ItemCode	nvarchar(50),
	@SLocId	nvarchar(50),
	@BarCode	nvarchar(250),
	@UOMCode	nvarchar(50),
	@Quantity	decimal(19, 6),
	@Price	decimal(19, 6),
	@LineTotal	decimal(19, 6),
	@CurrencyCode	nvarchar(50),
	@CurrencyRate	decimal(19, 6),
	@TaxCode	nvarchar(50),
	@TaxRate	decimal(19, 6),
	@TaxAmt	decimal(19, 6),
	@Remark	nvarchar(250), 
	@ModifiedBy	nvarchar(50), 
	@Status	char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_GoodsReceiptLine 
	set 
		ItemCode = @ItemCode,
		SLocId = @SLocId,
		BarCode= @BarCode,
		UOMCode= @UOMCode,
		Quantity=@Quantity	,
		Price=@Price	,
		LineTotal= @LineTotal,
		CurrencyCode= @CurrencyCode,
		CurrencyRate= @CurrencyRate,
		TaxCode= @TaxCode,
		TaxRate= @TaxRate,
		TaxAmt= @TaxAmt,
		Remark= @Remark,
		ModifiedBy=	@ModifiedBy, 
		ModifiedOn = GETDATE(),
		Status=@Status
	where INVTId=@INVTId and  CompanyCode= @CompanyCode and LineId= @LineId
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_GoodsReceiptLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_GoodsReceiptLineSerial]
	@INVTId	nvarchar(50),
	@LineId	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@ItemCode	nvarchar(50),
	@SerialNum	nvarchar(100),
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6),
	@UOMCode	nvarchar(50),
	@CreatedBy	nvarchar(50),
	@Status	char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_GoodsReceiptLineSerial 
	set  
		SerialNum =@SerialNum,
		SLocId	 = @SLocId,
		Quantity = @Quantity,
		UOMCode= @UOMCode,
		CreatedBy= @CreatedBy,
		Status	= @Status
 
	where INVTId	=@INVTId and
		LineId = @LineId and
		CompanyCode = @CompanyCode and
		ItemCode= @ItemCode
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryCountingHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_T_InventoryCountingHeader]
	@ICId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled	nvarchar(50)	,
	@Name	nvarchar(250) ,
	@RefId nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryCountingHeader 
	set  
		StoreName =@StoreName,
		DocStatus=@DocStatus 	,
		DocDate= @DocDate,
		DocDueDate =@DocDueDate,
		DocTotal=@DocTotal ,
		Comment =@Comment,
		CreatedBy=@CreatedBy , 
		Status	=@Status ,
		IsCanceled =@IsCanceled,
		Name	=@Name ,
		RefId=@RefId
	  where ICId = @ICId and
	    CompanyCode =@CompanyCode and
		StoreId =@StoreId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryCountingLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_T_InventoryCountingLine]
	@ICId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseRef	nvarchar(50)	,
	@BaseType	nvarchar(50)	,
	@BaseEntry	nvarchar(50)	,
	@LineStatus	char(1)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@TotalStock	decimal(19, 6)	,
	@TotalCount	decimal(19, 6)	,
	@TotalDifferent	decimal(19, 6)	,
	@CreatedBy	nvarchar(50)	, 
	@Status	char(1)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryCountingLine
	set 
		ItemCode=@ItemCode,
		SLocId	=@SLocId,
		BarCode	=@BarCode,
		Description =@Description,
		UOMCode	=@UOMCode,
		Quantity=@Quantity	,
		Price =@Price,
		BaseRef	=@BaseRef,
		BaseType=@BaseType	,
		BaseEntry=@BaseEntry,
		LineStatus=@LineStatus	,
		LineTotal=@LineTotal,
		Comment=@Comment,
		TotalStock	=@TotalStock,
		TotalCount=@TotalCount	,
		TotalDifferent=@TotalDifferent,
		CreatedBy=@CreatedBy,
		Status =@Status 
	 where ICId	=@ICId and
		CompanyCode=@CompanyCode and 
		LineId	=@LineId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryCountingLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_InventoryCountingLineSerial]
	@ICId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@TotalStock	decimal(19, 6)	,
	@TotalCount	decimal(19, 6)	,
	@TotalDifferent	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryCountingLineSerial 
	set 
		ItemCode=@ItemCode,
		SerialNum=@SerialNum,
		SLocId	=@SLocId,
		Quantity=@Quantity	,
		TotalStock	=@TotalStock,
		TotalCount	=@TotalCount,
		TotalDifferent=@TotalDifferent,
		UOMCode	=@UOMCode,
		ModifiedBy=@ModifiedBy,
		ModifiedOn = GETDATE()
	where ICId	=@ICId and
		LineId	=@LineId and
		CompanyCode=@CompanyCode

	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_U_T_InventoryHeader] 'IVCP001ST00100000001','CP001','','','admin','A',0,null,null,'ST001','','ST002','','Test','Test'

--select * from T_InventoryHeader
CREATE   PROCEDURE [dbo].[USP_U_T_InventoryHeader]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50),
	@DocType	nvarchar(50),
	@RefINVTId	nvarchar(50),
	@ModifiedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	bit	,
	@DocDate	datetime,
	@DocDueDate	datetime,
	@FromStore	nvarchar(50),
	@FromStoreName	nvarchar(250),
	@ToStore nvarchar(50),
	@ToStoreName	nvarchar(250),
	@Name nvarchar(150),
	@Remark	nvarchar(250),
	@RefId nvarchar(50),
	@TransitWhs nvarchar(50), @FromWhs nvarchar(50), @ToWhs nvarchar(50),  @ShiftId  nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryHeader 
	set  DocType =@DocType,
		RefINVTId=@RefINVTId	,
		ModifiedBy=@ModifiedBy,
		Status=	@Status	,
		IsCanceled	=@IsCanceled	,
		DocDate=@DocDate,
		DocDueDate=@DocDueDate,
		FromStore=@FromStore,
		FromStoreName=@FromStoreName,
		ToStore = @ToStore ,
		ToStoreName= @ToStoreName,
		ModifiedOn =Getdate(),
		Name = @Name,
		Remark =@Remark,
		RefId =@RefId ,
		TransitWhs =@TransitWhs  ,
		FromWhs= @FromWhs,
		ToWhs= @ToWhs,  ShiftId = @ShiftId
	where INVTId = @INVTId and CompanyCode=@CompanyCode 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

-- usp_U_T_InventoryLine 'IVCP001ST00100000001','CP001','c7926624-279c-fd27-781c-ad4d58e7d36d','110000287','SL001','SL001','','11111222',
--'HANDY-A  Giá Đỡ Kệ 19.5x19.5x1.8 cm Màu Bạc','Bo','1','','','10000','10000','',''


--usp_U_T_InventoryLine 'IVCP001ST00100000001','CP001','c7926624-279c-fd27-781c-ad4d58e7d36d','110000287','SL001','SL001','','11111222','HANDY-A  Giá Đỡ Kệ 19.5x19.5x1.8 cm Màu Bạc','Bo','1',null,null,'10000','10000','',''
CREATE PROCEDURE [dbo].[USP_U_T_InventoryLine]
	@INVTId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@DocType	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@ShipDate	datetime	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@BaseTransId	nvarchar(50)	,
	@BaseLine nvarchar(50)	,
	@Approve	decimal(19, 6)	=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryLine
	set 
		ItemCode=@ItemCode,
		FrSLocId =@FrSLocId,
		ToSlocId=@ToSlocId ,
		DocType =@DocType ,
		BarCode =@BarCode ,
		Description =@Description ,
		UOMCode=@UOMCode,
		Quantity=@Quantity ,
		ShipDate =@ShipDate ,
		OpenQty=@OpenQty ,
		Price=@Price	 ,
		LineTotal=@LineTotal	 ,
		ModifiedBy= @ModifiedBy , 
		Status= @Status,
		BaseTransId = @BaseTransId,
		BaseLine = @BaseLine
	where   INVTId=@INVTId and CompanyCode= @CompanyCode and LineId	=@LineId 
		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[USP_U_T_InventoryLineSerial]
	@INVTId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryLineSerial
	set ItemCode = @ItemCode,
		SerialNum = @SerialNum	 ,
		FrSLocId = @FrSLocId,
		ToSlocId = @ToSlocId,
		Quantity =@Quantity,
		UOMCode = @UOMCode ,
		ModifiedBy = @ModifiedBy,
		ModifiedOn = GETDATE(),
		Status = @Status
	 where INVTId = @INVTId and
		LineId= @LineId  and
		CompanyCode = @CompanyCode
	  
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryPostingHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_T_InventoryPostingHeader]
	@IPId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@DocStatus	char(1)	,
	@DocDate	datetime	,
	@DocDueDate	datetime	,
	@DocTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@IsCanceled	nvarchar(50)	,
	@Name	nvarchar(250),
	@RefId nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryPostingHeader 
	set 
		StoreName=@StoreName,
		DocStatus=@DocStatus,
		DocDate=@DocDate,
		DocDueDate=@DocDueDate,
		DocTotal=@DocTotal,
		Comment=@Comment,
		ModifiedBy	=@ModifiedBy,
		ModifiedOn = GETDATE(),
		Status=@Status	,
		IsCanceled=@IsCanceled,
		Name =@Name ,
		RefId = @RefId
		where  IPId =@IPId and
	    CompanyCode =@CompanyCode and
		StoreId =@StoreId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryPostingLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_InventoryPostingLine]
	@IPId	nvarchar(50),
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SLocId	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@BaseRef	nvarchar(50)	,
	@BaseType	nvarchar(50)	,
	@BaseEntry	nvarchar(50)	,
	@LineStatus	char(1)	,
	@LineTotal	decimal(19, 6)	,
	@Comment	nvarchar(250)	, 
	@ModifiedBy	nvarchar(50)	, 
	@Status	char(1)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryPostingLine
	set 
		ItemCode=@ItemCode,
		SLocId	=@SLocId,
		BarCode	=@BarCode,
		Description =@Description,
		UOMCode	=@UOMCode,
		Quantity=@Quantity	,
		Price =@Price,
		BaseRef	=@BaseRef,
		BaseType=@BaseType	,
		BaseEntry=@BaseEntry,
		LineStatus=@LineStatus	,
		LineTotal=@LineTotal,
		Comment=@Comment, 
		ModifiedBy=@ModifiedBy,
		Status =@Status 
	 where IPId	=@IPId and
		CompanyCode=@CompanyCode and 
		LineId	=@LineId
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryPostingLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_InventoryPostingLineSerial]
	@IPId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@TotalStock	decimal(19, 6)	,
	@TotalCount	decimal(19, 6)	,
	@TotalDifferent	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryPostingLineSerial 
	set 
		ItemCode=@ItemCode,
		SerialNum=@SerialNum,
		SLocId	=@SLocId,
		Quantity=@Quantity	,
		TotalStock	=@TotalStock,
		TotalCount	=@TotalCount,
		TotalDifferent=@TotalDifferent,
		UOMCode	=@UOMCode,
		ModifiedBy=@ModifiedBy,
		ModifiedOn = GETDATE()
	where IPId	=@IPId and
		LineId	=@LineId and
		CompanyCode=@CompanyCode

	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryTransferHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--[USP_U_T_InventoryTransferHeader] 'IVTCP001ST00100000001','CP001','','','admin','A',0,null,null,'ST001','','ST002','','Test','Test'

--select * from T_InventoryTransferHeader
CREATE   PROCEDURE [dbo].[USP_U_T_InventoryTransferHeader]
	@INVTTransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50),
	@DocType	nvarchar(50),
	@RefINVTId	nvarchar(50),
	@ModifiedBy	nvarchar(50), 
	@Status	char(1),
	@IsCanceled	bit	,
	@DocDate	datetime,
	@DocDueDate	datetime,
	@StoreId	nvarchar(50),
	@StoreName	nvarchar(250),
	@FromSloc	nvarchar(50),
	@FromSlocName	nvarchar(250),
	@ToSloc nvarchar(50),
	@ToSlocName	nvarchar(250),
	@Name nvarchar(150),
	@Remark	nvarchar(250),
	@RefId nvarchar(50),
	@TransitWhs nvarchar(50), 
	@FromWhs nvarchar(50), 
	@ToWhs nvarchar(50),   
	@ShiftId  nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryTransferHeader 
	set  DocType ='T',
		RefINVTId=@RefINVTId	,
		ModifiedBy=@ModifiedBy,
		Status=	@Status	,
		IsCanceled	=@IsCanceled	,
		DocDate=@DocDate,
		DocDueDate=@DocDueDate,
		StoreId = @StoreId,
		StoreName = @StoreName,
		FromSloc=@FromSloc,
		FromSlocName=@FromSlocName,
		ToSloc = @ToSloc ,
		ToSlocName= @ToSlocName,
		ModifiedOn =Getdate(),
		Name = @Name,
		Remark =@Remark,
		RefId =@RefId ,
		TransitWhs =@TransitWhs  ,
		FromWhs= @FromWhs,
		ToWhs= @ToWhs,  
		ShiftId = @ShiftId
	where INVTTransId = @INVTTransId and CompanyCode=@CompanyCode 
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_InventoryTransferLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

-- usp_U_T_InventoryLine 'IVCP001ST00100000001','CP001','c7926624-279c-fd27-781c-ad4d58e7d36d','110000287','SL001','SL001','','11111222',
--'HANDY-A  Giá Đỡ Kệ 19.5x19.5x1.8 cm Màu Bạc','Bo','1','','','10000','10000','',''


--usp_U_T_InventoryLine 'IVCP001ST00100000001','CP001','c7926624-279c-fd27-781c-ad4d58e7d36d','110000287','SL001','SL001','','11111222','HANDY-A  Giá Đỡ Kệ 19.5x19.5x1.8 cm Màu Bạc','Bo','1',null,null,'10000','10000','',''
CREATE PROCEDURE [dbo].[USP_U_T_InventoryTransferLine]
	@INVTTransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@FrSLocId	nvarchar(50)	,
	@ToSlocId	nvarchar(50)	,
	@DocType	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@Description	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@ShipDate	datetime	,
	@OpenQty	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@LineTotal	decimal(19, 6)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	char(1)	,
	@BaseTransId	nvarchar(50)	,
	@BaseLine nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_InventoryTransferLine
	set 
		ItemCode=@ItemCode,
		FrSLocId =@FrSLocId,
		ToSlocId=@ToSlocId ,
		DocType =@DocType ,
		BarCode =@BarCode ,
		Description =@Description ,
		UOMCode=@UOMCode,
		Quantity=@Quantity ,
		ShipDate =@ShipDate ,
		OpenQty=@OpenQty ,
		Price=@Price	 ,
		LineTotal=@LineTotal	 ,
		ModifiedBy= @ModifiedBy , 
		Status= @Status,
		BaseTransId = @BaseTransId,
		BaseLine = @BaseLine
	where   INVTTransId=@INVTTransId and CompanyCode= @CompanyCode and LineId	=@LineId 
		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_ItemStorage]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_ItemStorage] 
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@SLocId	nvarchar(50),
	@ItemCode	nvarchar(50)	,
	@UOMCode	nvarchar(50),
	@Quantity decimal(19, 6)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_ItemStorage Set Quantity =   @Quantity where CompanyCode=@CompanyCode and StoreId= @StoreId and SLocId=@SLocId and ItemCode=@ItemCode and UOMCode=@UOMCode
	 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_PickupAmount]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [dbo].[USP_U_T_PickupAmount] 
	@Id nvarchar(50),
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@CounterId	nvarchar(50),
	@ShiftId	nvarchar(50),
	@PickupBy	nvarchar(50),
	@Amount	decimal(19,6),
	 @Remarks	nvarchar(250),
	 @CustomF1	nvarchar(50) = null, @CustomF2	nvarchar(50) = null,
	@CustomF3	nvarchar(50) = null, @CustomF4	nvarchar(50) = null 
	, @CustomF5	nvarchar(50) = null
	, @CreatedBy	nvarchar(50), @Status	nvarchar(50), @DailyId	nvarchar(50)= null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update T_PickupAmount  set
	ShiftId = @ShiftId, PickupBy=@PickupBy, Remarks=@Remarks, CustomF1=@CustomF1, CustomF2= @CustomF2, CustomF3 = CustomF3, CustomF4 = CustomF4, CustomF5 = CustomF5 
	, Status= @Status
	where CompanyCode = @CompanyCode and StoreId = @StoreId and CounterId=@CounterId and Id = @Id and  DailyId=@DailyId
 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_PrepaidCardTrans]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_T_PrepaidCardTrans]
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(50)	,
	@PepaidCardNo	nvarchar(50)	,
	@TransType	nvarchar(50)	,
	@MainBalance	numeric(19, 2)	,
	@SubBlance	numeric(19, 2)	,
	@ModifiedBy	nvarchar(50)
	 
AS	 
	update  T_PrepaidCardTrans set
       
		TransType =@TransType,
		MainBalance=@MainBalance ,
		SubBlance =@SubBlance,
			ModifiedBy=@ModifiedBy, ModifiedOn=GETDATE(), SyncLocalStatus = 'U'
			where   CompanyCode =@CompanyCode and
		TransId =@TransId and
		PepaidCardNo=@PepaidCardNo 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_Sales_Delivery]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_T_Sales_Delivery]
	@Id	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@TransId	nvarchar(250)	,
	@DeliveryType	nvarchar(250)	,
	@DeliveryMethod	nvarchar(50)	,
	@DeliveryFee	char(50)
	 
AS	
	return
	update [dbo].T_Sales_Delivery set  DeliveryType = @DeliveryType
           ,DeliveryMethod = @DeliveryMethod
           ,DeliveryFee = @DeliveryFee
           
    where    Id = @ID and [CompanyCode] = @CompanyCode
           and TransId = @TransId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_SalesInvoice]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[USP_U_T_SalesInvoice]
	@TransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@StoreName	nvarchar(250)	,
	@CustomerName	nvarchar(250)	,
	@TaxCode	nvarchar(150)	,
	@Email	nvarchar(150)	,
	@Address	nvarchar(250)	,
	@Phone	nvarchar(50)	,
	@Remark	nvarchar(250)	, 
	@ModifiedBy	nvarchar(50) 
	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	insert into T_SalesInvoice 
	(   TransId,
		CompanyCode,
		StoreId	,
		StoreName,
		CustomerName,
		TaxCode,
		Email	,
		Address,
		Phone	,
		Remark,
		ModifiedOn	,
		ModifiedBy 
 
	)
	
	values( 
		@TransId,
		@CompanyCode,
		@StoreId	,
		@StoreName,
		@CustomerName,
		@TaxCode,
		@Email	,
		@Address,
		@Phone	,
		@Remark,
	    GETDATE()	,
		@ModifiedBy 
	)
END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_SalesLine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_T_SalesLine]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nchar(10)	,
	@StoreId	nvarchar(50)	=null,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@UOMCode	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@Price	decimal(19, 6)	,
	@DiscountType nvarchar(50)	,
	@DiscountAmt	decimal(19, 6)	,
	@DiscountRate	decimal(19, 6)	, 
	@ModifiedBy	nvarchar(50)	, 
    @Status nvarchar(50)	,
    @Remark nvarchar(250)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoPercent	decimal(19, 6)	,
	@PromoBaseItem	nvarchar(50)	,
	@SalesMode	nvarchar(50)	,
	@Remarks	nvarchar(250)	,
	@TaxRate	decimal(19, 6)	,
	@TaxAmt	decimal(19, 6)	,
	@TaxCode	nvarchar(50)	,
	@SlocId	nvarchar(50)	,
	@MinDepositAmt	decimal(19, 6)	,
	@MinDepositPercent	decimal(19, 6)	,
	@DeliveryType	char(1)	,
	@POSService	nvarchar(50),	
	@StoreAreaId	nvarchar(50),
	@TimeFrameId	nvarchar(50),
	@AppointmentDate	Datetime,
	@BomId	nvarchar(50),
	@PromoPrice	decimal(19, 6)	,
	@PromoLineTotal	decimal(19, 6),
	@ItemType	nvarchar(50)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
update [dbo].[T_SalesLine]
        set 
           [Quantity]=  @Quantity, 
           [Price]= @Price,
		   DiscountType=@DiscountType,
           [DiscountAmt]=@DiscountAmt, 
           [DiscountRate]=@DiscountRate, 
           StoreId= @StoreId,
           [ModifiedBy]= @ModifiedBy, 
           [ModifiedOn]= GETDATE(), 
           [Status]=  @Status, 
           [Remark]=@Remark, 
           [PromoId]=  @PromoId, 
           [PromoType]=  @PromoType, 
           [PromoPercent]= @PromoPercent, 
           [PromoBaseItem]= @PromoBaseItem, 
           [SalesMode] = @SalesMode, 
           [TaxRate]= @TaxRate, 
           [TaxAmt]=  @TaxAmt,
           [TaxCode]= @TaxCode,
           [SLocId]=   @SLocId, 
           [MinDepositAmt]=@MinDepositAmt, 
           [MinDepositPercent]= @MinDepositPercent,
           [DeliveryType]= @DeliveryType,
           [POSService]= @POSService,
		   StoreAreaId= @StoreAreaId,
		   TimeFrameId= @TimeFrameId,
		   AppointmentDate=@AppointmentDate,
		   BomId =@BomId,
		   PromoPrice=@PromoPrice ,
			PromoLineTotal=@PromoLineTotal,
			ItemType =@ItemType 
       where 
            [TransId] =@TransId and
           [LineId]=  @LineId and
           [CompanyCode]= @CompanyCode and
           [ItemCode]= @ItemCode and
           
           [UOMCode]= @UOMCode
		  
		   
		  
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_SalesLineSerial]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_T_SalesLineSerial]
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@SerialNum	nvarchar(100)	,
	@SLocId	nvarchar(50)	,
	@Quantity	decimal(19, 6)	,
	@UOMCode	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	nvarchar(50),
	@ExpDate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
INSERT INTO [dbo].[T_SalesLineSerial]
           (  TransId	,
	LineId	,
	CompanyCode,
	ItemCode,
	SerialNum,
	SLocId,
	Quantity,
	UOMCode,
	ModifiedBy	,
	ModifiedOn,
	Status, ExpDate)
     VALUES(    @TransId	,
	@LineId	,
	@CompanyCode,
	@ItemCode,
	@SerialNum,
	@SLocId,
	@Quantity,
	@UOMCode,
	@ModifiedBy	, 
	GETDATE(),
	@Status, @ExpDate)
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_SalesPayment]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_U_T_SalesPayment]
	@PaymentCode	nvarchar(50),
	@CompanyCode	nvarchar(50),
	@TransId	nvarchar(50)	,
	@LineId	nvarchar(50)	,
	@TotalAmt	decimal(19, 6)	,
	@ReceivedAmt	decimal(19, 6)	,
	@PaidAmt	decimal(19, 6)	,
	@ChangeAmt	decimal(19, 6)	,
	@PaymentMode	nvarchar(50)	,
	@CardType	nvarchar(50)	,
	@CardHolderName	nvarchar(250)	,
	@CardNo	nvarchar(50)	,
	@VoucherBarCode	nvarchar(250)	,
	@VoucherSerial	nvarchar(50)	,  
	@ModifiedBy	nvarchar(50)	, 
	@Status nvarchar(50)	,
	@ChargableAmount	decimal(19, 6)	,
	@PaymentDiscount	decimal(19, 6)	,
	@CollectedAmount	decimal(19, 6)	,
	@RefNumber	nvarchar(50) ,
	@DataSource	nvarchar(50) ,
	@Currency nvarchar(50) = null,
	@Rate	decimal(19, 6)= null	,
	@FCAmount	decimal(19, 6)	= null,
	@ShiftId nvarchar(50)	= null, @CardExpiryDate datetime = null, @AdjudicationCode nvarchar(50)= null,  @AuthorizationDateTime datetime = null,
	  @TerminalId nvarchar(50) = null, @RoundingOff	decimal(19, 6)= null, @FCRoundingOff	decimal(19, 6)= null, @StoreId nvarchar(250) = null
AS	

update [dbo].[T_SalesPayment]
         set [TotalAmt] = @TotalAmt
           ,[ReceivedAmt]= @ReceivedAmt
           ,[PaidAmt]= @PaidAmt
           ,[ChangeAmt]= @ChangeAmt
           ,[PaymentMode]= @PaymentMode
           ,[CardType]= @CardType
           ,[CardHolderName]= @CardHolderName
           ,[CardNo]= @CardNo
           ,[VoucherBarCode]= @VoucherBarCode
           ,[VoucherSerial]= @VoucherSerial 
           ,[ModifiedBy]= @ModifiedBy
           ,[ModifiedOn] = GETDATE()
           ,[Status] =   @Status
		   ,ChargableAmount =  @ChargableAmount
		   ,PaymentDiscount =  @PaymentDiscount
		   ,CollectedAmount=  @CollectedAmount
		   ,RefNumber=  @RefNumber, DataSource=  @DataSource,Currency=  @Currency, Rate=  @Rate, FCAmount=  @FCAmount, ShiftId=  @ShiftId
		   , CardExpiryDate=  @CardExpiryDate, AdjudicationCode=  @AdjudicationCode, AuthorizationDateTime=  @AuthorizationDateTime,
		   RoundingOff= @RoundingOff, FCRoundingOff= @FCRoundingOff,
		   TerminalId=@TerminalId, StoreId= @StoreId
		    where [PaymentCode] = @PaymentCode
            and [CompanyCode] = @CompanyCode
			and [TransId] = @TransId
           and [LineId] = @LineId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_SalesPromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_U_T_SalesPromo]
	@TransId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@BarCode	nvarchar(250)	,
	@RefTransId	nvarchar(50)	,
	@ApplyType	nvarchar(50)	,
	@ItemGroupId	nvarchar(50)	,
	@UOMCode	nvarchar(50)	,
	@Value	decimal(19, 6)	,
	@PromoId	nvarchar(50)	,
	@PromoType	nvarchar(50)	,
	@PromoTypeLine	nvarchar(50)	,
	@ModifiedBy	nvarchar(50)	, 
	@Status	char(1), @StoreId nvarchar(250) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
INSERT INTO [dbo].[T_SalesPromo]
           ( TransId	,
				CompanyCode,
				ItemCode	,
				BarCode	,
				RefTransId	,
				ApplyType	,
				ItemGroupId,
				UOMCode,
				Value	,
				PromoId	,
				PromoType	,
				PromoTypeLine	,
				ModifiedBy	,
				ModifiedOn,
				Status, StoreId)
     VALUES(    @TransId	,
				@CompanyCode,
				@ItemCode	,
				@BarCode	,
				@RefTransId	,
				@ApplyType	,
				@ItemGroupId,
				@UOMCode,
				@Value	,
				@PromoId	,
				@PromoType	,
				@PromoTypeLine	,
				@ModifiedBy	, 
				GETDATE(),
				@Status, @StoreId)
 

END
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_ShiftHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_T_ShiftHeader]
	@ShiftId	nvarchar(50)	,
	@CompanyCode	nvarchar(50)	,
	@StoreId	nvarchar(50)	,
	@DailyId	nvarchar(50)	,
	@DeviceId	nvarchar(50)	,
	@OpenAmt	decimal(19, 6)	,
	@EndAmt	decimal(19, 6)	,
	@ShiftTotal	decimal(19, 6)	,
	@ModifiedBy	nvarchar(50),
	@Status	char(1)	
			
AS
 update [dbo].[T_ShiftHeader] set 
		[OpenAmt] = @OpenAmt
           ,[EndAmt] = @EndAmt
           ,[ShiftTotal] = @ShiftTotal 
           ,ModifiedBy = @ModifiedBy
            ,ModifiedOn = GETDATE()
           ,[Status] = @Status
		   where  [ShiftId] = @ShiftId and [CompanyCode] = @CompanyCode and [StoreId] = @StoreId and [DailyId] = @DailyId and [DeviceId] = @DeviceId
GO
/****** Object:  StoredProcedure [dbo].[USP_U_T_VoucherTransaction]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_T_VoucherTransaction]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@VoucherNo	nvarchar(50)	,
	@VoucherValue	numeric(19, 6)	,
	@VoucherType	nvarchar(50)	,
	@IssueDate	nvarchar(50)	,
	@IssueTransId	nvarchar(50)	,
	@RedeemDate	nvarchar(50)	,
	@RedeemTransId	nvarchar(50)
AS	

update [dbo].T_VoucherTransaction
set 
	VoucherValue	=@VoucherValue ,
	VoucherType	=@VoucherType ,
	IssueDate=@IssueDate ,
	IssueTransId	=@IssueTransId ,
	RedeemDate =@RedeemDate,
	RedeemTransId	=@RedeemTransId where CompanyCode =@CompanyCode and
	ItemCode=@ItemCode and 
	VoucherNo =@VoucherNo 
   
GO
/****** Object:  StoredProcedure [dbo].[USP_U_UpShift2PickupByCounter]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [USP_S_T_PickupAmount] 'CP001','','','','','','',''
create   PROCEDURE [dbo].[USP_U_UpShift2PickupByCounter] 
	@CompanyCode	nvarchar(50),
	@StoreId	nvarchar(50),
	@CounterId	nvarchar(50),
	@ShiftId	nvarchar(50),
	@DailyId nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;
	Update   T_PickupAmount  set ShiftId = @ShiftId, Status = 'C' 
	--select * from T_PickupAmount
	where  CompanyCode = @CompanyCode 
	AND  StoreId = @StoreId   
	and CounterId = @CounterId    
	and ISNULL(ShiftId, '')  = ''
	and ISNULL(Status, 'O')  = 'O' 
    and ShiftId in (select ShiftId from T_ShiftHeader where DailyId = @DailyId and CompanyCode = @CompanyCode and StoreId = @StoreId and CounterId = @CounterId) 
END

--USP_U_UpShift2PickupByCounter 'CP001','1001','XXXX','100121112300001','2021-11-23'
GO
/****** Object:  StoredProcedure [dbo].[USP_U_VoucherTransaction]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[USP_U_VoucherTransaction]
	@CompanyCode	nvarchar(50)	,
	@ItemCode	nvarchar(50)	,
	@VoucherNo	nvarchar(50)	,
	@VoucherValue	numeric(19, 6)	,
	@VoucherType	nvarchar(50)	,
	@IssueDate	nvarchar(50)	,
	@IssueTransId	nvarchar(50)	,
	@RedeemDate	nvarchar(50)	,
	@RedeemTransId	nvarchar(50)
AS	

update [dbo].T_VoucherTransaction
set 
	VoucherValue	=@VoucherValue ,
	VoucherType	=@VoucherType ,
	IssueDate=@IssueDate ,
	IssueTransId	=@IssueTransId ,
	RedeemDate =@RedeemDate,
	RedeemTransId	=@RedeemTransId where CompanyCode =@CompanyCode and
	ItemCode=@ItemCode and 
	VoucherNo =@VoucherNo 
   
GO
/****** Object:  StoredProcedure [dbo].[USP_Update_Status_SalesHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_Update_Status_SalesHeader] 'IVCP001W010100000016', 'CP001'
CREATE PROCEDURE [dbo].[USP_Update_Status_SalesHeader]
	 
	@TransId	nvarchar(150)	 ,
	 @CompanyCode nvarchar(50)
AS	
	Declare @SourceQty int ;
	set @SourceQty = (select Sum(isnull(Quantity, 0)) from T_InventoryLine where INVTId = @TransId and CompanyCode = @CompanyCode)
	Declare @DesQty int ;
	set @DesQty = (select Sum(isnull(Quantity, 0)) from T_InventoryLine t1 
					left join T_InventoryHeader t2 on t1.CompanyCode = t2.CompanyCode and t1.INVTId = t2.INVTId 
	where t2.RefINVTId = @TransId and t2.CompanyCode = @CompanyCode and t2.IsCanceled <> 'Y' )
	--select @SourceQty, @DesQty
	if @DesQty < @SourceQty 
	begin 
		update T_InventoryHeader set Status = 'P' where  INVTId = @TransId and CompanyCode = @CompanyCode
	end
	else
	begin
		update T_InventoryHeader set Status = 'C' where  INVTId = @TransId and CompanyCode = @CompanyCode 
	end
	 
	 --update T_InventoryHeader set Status = 'C' where INVTId = 'IVCP001W010100000018' 
	-- select * from T_InventoryHeader


	-- select isnull(Quantity, 0) from T_InventoryLine where INVTId = 'IVCP001JAOF00100000009' and CompanyCode = 'CP001'
GO
/****** Object:  StoredProcedure [dbo].[USP_Update_Status_SalesTransHeader]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [USP_Update_Status_SalesTransHeader] 'IVTCP001W010100000016', 'CP001'
CREATE PROCEDURE [dbo].[USP_Update_Status_SalesTransHeader]
	 
	@TransId	nvarchar(150)	 ,
	 @CompanyCode nvarchar(50)
AS	
	Declare @SourceQty int ;
	set @SourceQty = (select Sum(isnull(Quantity, 0)) from T_InventoryLine where INVTId = @TransId and CompanyCode = @CompanyCode)
	Declare @DesQty int ;
	set @DesQty = (select Sum(isnull(Quantity, 0)) from T_InventoryLine t1 
					left join T_InventoryHeader t2 on t1.CompanyCode = t2.CompanyCode and t1.INVTId = t2.INVTId 
	where t2.RefINVTId = @TransId and t2.CompanyCode = @CompanyCode and t2.IsCanceled <> 'Y' )
	--select @SourceQty, @DesQty
	if @DesQty < @SourceQty 
	begin 
		update T_InventoryTransferHeader set Status = 'P' where  INVTTransId = @TransId and CompanyCode = @CompanyCode
	end
	else
	begin
		update T_InventoryTransferHeader set Status = 'C' where  INVTTransId = @TransId and CompanyCode = @CompanyCode 
	end
	 
	 --update T_InventoryHeader set Status = 'C' where INVTId = 'IVCP001W010100000018' 
	-- select * from T_InventoryHeader


	-- select isnull(Quantity, 0) from T_InventoryLine where INVTId = 'IVCP001JAOF00100000009' and CompanyCode = 'CP001'
GO
/****** Object:  StoredProcedure [dbo].[USP_UpdateCheckinOrder]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [USP_GetItem] '','W0101', 'JA020201004', '', '','','',''
CREATE PROCEDURE [dbo].[USP_UpdateCheckinOrder]
	@CompanyCode nvarchar(50),
	@StoreId nvarchar(50),
	@DataSource nvarchar(50),
	@PosType	nvarchar(50),
	@TransId	nvarchar(50)
	 
AS
begin
		 
 	if @DataSource = 'Ecom' and isnull(@PosType,'')  <> 'E'
	begin
		
		DECLARE @OpenQuantity DECIMAL(19,6) = (select sum(isnull(openQty,0)) from dbo.T_SalesLine where CompanyCode= @CompanyCode and TransId = @TransId 
		and itemtype <> 'Member' and itemtype <> 'Class' and itemtype <> 'Booklet')
 
		if @OpenQuantity <= 0
		begin
			update dbo.T_SalesHeader set Status ='C', CollectedStatus = 'Closed' where  CompanyCode= @CompanyCode and TransId = @TransId  and StoreId = @StoreId
		end
	end
end 

--select * from M_Tax

--select * from M_PriceList where ItemCode ='JA020201004'

-- [USP_GetItem] 'CP001', 'W0101', '', '','','','',''
 --[USP_GetItem] '', '', '', '','',''
 --select * from M_PriceList
--select * from M_ItemUOMCaiCai
--select * from M_ItemUOM 

--select * from M_UOM

--delete M_ItemUOM where ItemCode = 'JA010101002_2' and UOMCode = 'JA010000000000101001_2_7' and CompanyCode ='7pcs'
GO
/****** Object:  StoredProcedure [dbo].[USP_UpdateLoyaltyPoint]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[USP_UpdateLoyaltyPoint]
 
	@CompanyCode	nvarchar(50),
	@CustomerId	nvarchar(50),
	@Point	nvarchar(50)
AS	
begin
	Declare @CurentPoint decimal(19,6); 
	--set @CurentPoint = (select RewardPoints  from M_Customer --with (nolock)
	--	where CustomerId = @CustomerId and CompanyCode= @CompanyCode)
	--update M_Customer set RewardPoints = @CurentPoint - @Point where CustomerId = @CustomerId and CompanyCode= @CompanyCode
end
GO
/****** Object:  StoredProcedure [dbo].[USP_UpdatePromoNotCombine]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	@ListLine = (CompanyCode;ItemCode-SLocId-UOMCode-Quantity)
-- =============================================
CREATE PROCEDURE [dbo].[USP_UpdatePromoNotCombine]
	@CompanyCode	nchar(10) 
AS
 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	update S_PromoHeader set IsCombine = 'N' , SyncLocalStatus = 'U' where PromoId In ( 
	select t1.PromoId from S_PromoHeader t1 
	left join S_SchemaLine t2 on t1.PromoId = t2.PromoId
	where t2.PromoId is null and t1.CompanyCode = @CompanyCode
	)

 
END




GO
/****** Object:  StoredProcedure [dbo].[USP_UpdateStatusSO]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--drop PROCEDURE InserSaleLine
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_UpdateStatusSO]
	 
	@TransId	nvarchar(50),
	@Status	nvarchar(50),
	@Reason		nvarchar(250)	 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON; 

	Update T_SalesHeader set  OMSStatus=@Status,  Reason = @Reason, SyncLocalStatus = 'U' where OMSId= @TransId 

	if @Status = 'COLLECTED'
	begin
		Update T_SalesHeader set CollectedStatus='Open Picked'   where OMSId= @TransId 
	end
	else
	begin
		if @Status = 'DELIVERED'
		begin
			Update T_SalesHeader set  Status ='C', CollectedStatus='Completed' where OMSId= @TransId 
		end
	end
END
 
GO
/****** Object:  StoredProcedure [dbo].[Z_AutoDeactivePromo]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Z_AutoDeactivePromo] 
	-- Add the parameters for the stored procedure here
	@CompanyCode nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @RCount int = 0
	SELECT @RCount = COUNT(*) FROM S_PromoHeader WHERE DATEDIFF(DAY,GETDATE(),ValidDateTo) < 0  AND Status <> 'N'

	IF @RCount > 0
		BEGIN

			DECLARE @StatusGuid uniqueidentifier;
			SET @StatusGuid = NEWID();

			UPDATE S_PromoHeader SET [Status] = 'N', StatusGuid = @StatusGuid WHERE DATEDIFF(DAY,GETDATE(),ValidDateTo) < 0  AND [Status] <> 'N';

			INSERT INTO [dbo].[T_SyncActionData]
				([CompanyCode], [TableName] ,[StoreId] ,[StatusGuid] ,[CreatedOn], [ActionType])
			SELECT DISTINCT CompanyCode, 'S_PromoHeader', StoreId, @StatusGuid, GETDATE(), 'U' FROM M_Store
		END

END
GO
/****** Object:  StoredProcedure [dbo].[Z_DEMO_COUNTER_CONNECT_LST]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[Z_DEMO_COUNTER_CONNECT_LST]
	 
AS
BEGIN
	 
	SET NOCOUNT ON;
	select null
	 
END
GO
/****** Object:  StoredProcedure [dbo].[Z_Mirgation_BETWEEN_2_PRD_TMP]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Z_Mirgation_BETWEEN_2_PRD_TMP]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;



	----T_EndDate
	--UPDATE T_EndDate SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	--WHERE StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004') 
	--AND Id NOT IN (SELECT Id FROM RPFO_POS_PRD..T_EndDate)

	--INSERT INTO RPFO_POS_PRD..T_EndDate 
	--(CompanyCode,StoreId,Id,Date,Description,Remark,Status,CreateOn,CreateBy,ModifiedOn,ModifiedBy,TotalSales,TotalCount,TotalCollected,TotalBalance,TaxTotal,DiscountTotal,PaymentTotal,LineItemCount,TaxCount,DiscountCount,PaymentCount)
	--SELECT 
	--CompanyCode,StoreId,Id,Date,Description,Remark,Status,CreateOn,CreateBy,ModifiedOn,ModifiedBy,TotalSales,TotalCount,TotalCollected,TotalBalance,TaxTotal,DiscountTotal,PaymentTotal,LineItemCount,TaxCount,DiscountCount,PaymentCount
	--FROM  T_EndDate WHERE StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND Id NOT IN (SELECT Id FROM RPFO_POS_PRD..T_EndDate)

	----T_EndDateDetail
	--INSERT INTO RPFO_POS_PRD..T_EndDateDetail 
	--(CompanyCode,StoreId,Id,EndDateId,LineId,ItemCode,UoMCode,Description,Barcode,Price,Quantity,LineTotal)
	--SELECT 
	--CompanyCode,StoreId,Id,EndDateId,LineId,ItemCode,UoMCode,Description,Barcode,Price,Quantity,LineTotal
	--FROM  T_EndDateDetail WHERE StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND Id NOT IN (SELECT Id FROM RPFO_POS_PRD..T_EndDateDetail)

	----EndDatePayment
	--INSERT INTO RPFO_POS_PRD..T_EndDatePayment
	--([CompanyCode] ,[StoreId] ,[EndDateId] ,[Id] ,[Currency] ,[CounterId] ,[LineId] ,[PaymentCode] ,[EOD_Code] ,[Amount] ,[FCAmount] ,[CollectedAmount] ,[Balance] ,[ShiftId] ,[FCCollectedAmount] ,[ChangeAmt] ,[BankInAmt] ,[BankInBalance])
	--SELECT 
	--[CompanyCode] ,[StoreId] ,[EndDateId] ,[Id] ,[Currency] ,[CounterId] ,[LineId] ,[PaymentCode] ,[EOD_Code] ,[Amount] ,[FCAmount] ,[CollectedAmount] ,[Balance] ,[ShiftId] ,[FCCollectedAmount] ,[ChangeAmt] ,[BankInAmt] ,[BankInBalance]
	--FROM  T_EndDatePayment WHERE StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND Id NOT IN (SELECT Id FROM RPFO_POS_PRD..T_EndDatePayment)

	----------T_SalesHeader 

	--------UPDATE T_SalesHeader SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE(), SyncJAStatus = 'Y', SyncJADate = GETDATE() 
	--------FROM T_SalesHeader A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	--------INSERT INTO RPFO_POS_PRD..T_SalesHeader 
	--------(TransId,CompanyCode,StoreId,ContractNo,StoreName,ShiftId,CusId,CusIdentifier,CusGrpId,TotalAmount,TotalPayable,TotalDiscountAmt,TotalReceipt,AmountChange,PaymentDiscount,TotalTax,DiscountType,DiscountAmount,DiscountRate,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,IsCanceled,Remarks,SalesPerson,SalesPersonName,SalesMode,SalesType,RefTransId,ManualDiscount,DataSource,POSType,EInvoice,Phone,CusName,CusAddress,Reason,CollectedStatus,OMSId,Chanel,StartTime,TerminalId,RoundingOff,ShortOrderID,MerchantId,OMSStatus,PromoId,ApprovalId,RewardPoints,ExpiryDate,DocDate,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,LuckyNo,OrderId)
	--------SELECT 
	--------A.TransId,A.CompanyCode,A.StoreId,A.ContractNo,A.StoreName,A.ShiftId,A.CusId,A.CusIdentifier,A.CusGrpId,A.TotalAmount,A.TotalPayable,A.TotalDiscountAmt,A.TotalReceipt,A.AmountChange,A.PaymentDiscount,A.TotalTax,A.DiscountType,A.DiscountAmount,A.DiscountRate,A.CreatedOn,A.CreatedBy,A.ModifiedOn,A.ModifiedBy,A.Status,A.IsCanceled,A.Remarks,A.SalesPerson,A.SalesPersonName,A.SalesMode,A.SalesType,A.RefTransId,A.ManualDiscount,A.DataSource,A.POSType,A.EInvoice,A.Phone,A.CusName,A.CusAddress,A.Reason,A.CollectedStatus,A.OMSId,A.Chanel,A.StartTime,A.TerminalId,A.RoundingOff,A.ShortOrderID,A.MerchantId,A.OMSStatus,A.PromoId,A.ApprovalId,A.RewardPoints,A.ExpiryDate,A.DocDate,A.CustomF1,A.CustomF2,A.CustomF3,A.CustomF4,A.CustomF5,A.LuckyNo,A.OrderId
	--------FROM T_SalesHeader A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----------INSERT INTO RPFO_POS_PRD..T_SalesHeader 
	----------(TransId,CompanyCode,StoreId,ContractNo,StoreName,ShiftId,CusId,CusIdentifier,CusGrpId,TotalAmount,TotalPayable,TotalDiscountAmt,TotalReceipt,AmountChange,PaymentDiscount,TotalTax,DiscountType,DiscountAmount,DiscountRate,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,IsCanceled,Remarks,SalesPerson,SalesPersonName,SalesMode,SalesType,RefTransId,ManualDiscount,DataSource,POSType,SyncMWIStatus,SyncMWIDate,SyncMWIMsg,EInvoice,SyncJAStatus,SyncJADate,SyncJAMsg,Phone,CusName,CusAddress,Reason,CollectedStatus,OMSId,Chanel,StartTime,TerminalId,RoundingOff,ShortOrderID,MerchantId,OMSStatus,PromoId,ApprovalId,RewardPoints,ExpiryDate,DocDate,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,LuckyNo,OrderId)
	----------SELECT 
	----------TransId,CompanyCode,StoreId,ContractNo,StoreName,ShiftId,CusId,CusIdentifier,CusGrpId,TotalAmount,TotalPayable,TotalDiscountAmt,TotalReceipt,AmountChange,PaymentDiscount,TotalTax,DiscountType,DiscountAmount,DiscountRate,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,IsCanceled,Remarks,SalesPerson,SalesPersonName,SalesMode,SalesType,RefTransId,ManualDiscount,DataSource,POSType,SyncMWIStatus,SyncMWIDate,SyncMWIMsg,EInvoice,SyncJAStatus,SyncJADate,SyncJAMsg,Phone,CusName,CusAddress,Reason,CollectedStatus,OMSId,Chanel,StartTime,TerminalId,RoundingOff,ShortOrderID,MerchantId,OMSStatus,PromoId,ApprovalId,RewardPoints,ExpiryDate,DocDate,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,LuckyNo,OrderId
	----------FROM  T_SalesHeader WHERE StoreID = '3020'  AND TransId NOT IN (SELECT TransId FROM RPFO_POS_PRD..T_SalesHeader)
	----------ORDER BY CreatedOn
	----------UPDATE T_SalesHeader SET SyncJAStatus = 'Y' , SyncJADate = GETDATE() , SyncMWIStatus = 'Y' , SyncMWIDate = GETDATE()
	----------WHERE StoreID = '3020' AND  SyncJAStatus <> 'Y' OR SyncMWIStatus <> 'Y'

	----------T_SalesLine 
	----------INSERT INTO RPFO_POS_PRD..T_SalesLine 
	----------(TransId,LineId,CompanyCode,ItemCode,SLocId,BarCode,UOMCode,Quantity,Price,LineTotal,DiscountType,DiscountAmt,DiscountRate,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,Remark,PromoId,PromoType,PromoPercent,PromoBaseItem,SalesMode,TaxRate,TaxAmt,TaxCode,MinDepositAmt,MinDepositPercent,DeliveryType,POSService,StoreAreaId,TimeFrameId,Duration,AppointmentDate,BomID,PromoPrice,PromoLineTotal,BaseLine,BaseTransId,OpenQty,PromoDisAmt,IsPromo,IsSerial,IsVoucher,PrepaidCardNo,MemberDate,MemberValue,StartDate,EndDate,ItemType,Description,LineTotalBefDis,LineTotalDisIncludeHeader,SerialNum,Name,Phone,ItemTypeS4,Custom1,Custom2,Custom3,Custom4,Custom5,PriceListId,ProductId,WeightScaleBarcode,StoreId,BookletNo)
	----------SELECT 
	----------TransId,LineId,CompanyCode,ItemCode,SLocId,BarCode,UOMCode,Quantity,Price,LineTotal,DiscountType,DiscountAmt,DiscountRate,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,Remark,PromoId,PromoType,PromoPercent,PromoBaseItem,SalesMode,TaxRate,TaxAmt,TaxCode,MinDepositAmt,MinDepositPercent,DeliveryType,POSService,StoreAreaId,TimeFrameId,Duration,AppointmentDate,BomID,PromoPrice,PromoLineTotal,BaseLine,BaseTransId,OpenQty,PromoDisAmt,IsPromo,IsSerial,IsVoucher,PrepaidCardNo,MemberDate,MemberValue,StartDate,EndDate,ItemType,Description,LineTotalBefDis,LineTotalDisIncludeHeader,SerialNum,Name,Phone,ItemTypeS4,Custom1,Custom2,Custom3,Custom4,Custom5,PriceListId,ProductId,WeightScaleBarcode,StoreId,BookletNo
	----------FROM  T_SalesLine WHERE StoreID = '3020' AND TransId NOT IN (SELECT TransId FROM RPFO_POS_PRD..T_SalesLine)

	--------INSERT INTO RPFO_POS_PRD..T_SalesLine 
	--------(TransId,LineId,CompanyCode,ItemCode,SLocId,BarCode,UOMCode,Quantity,Price,LineTotal,DiscountType,DiscountAmt,DiscountRate,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,Remark,PromoId,PromoType,PromoPercent,PromoBaseItem,SalesMode,TaxRate,TaxAmt,TaxCode,MinDepositAmt,MinDepositPercent,DeliveryType,POSService,StoreAreaId,TimeFrameId,Duration,AppointmentDate,BomID,PromoPrice,PromoLineTotal,BaseLine,BaseTransId,OpenQty,PromoDisAmt,IsPromo,IsSerial,IsVoucher,PrepaidCardNo,MemberDate,MemberValue,StartDate,EndDate,ItemType,Description,LineTotalBefDis,LineTotalDisIncludeHeader,SerialNum,Name,Phone,ItemTypeS4,Custom1,Custom2,Custom3,Custom4,Custom5,PriceListId,ProductId,WeightScaleBarcode,StoreId,BookletNo)
	--------SELECT 
	--------A.TransId,A.LineId,A.CompanyCode,A.ItemCode,A.SLocId,A.BarCode,A.UOMCode,A.Quantity,A.Price,A.LineTotal,A.DiscountType,A.DiscountAmt,A.DiscountRate,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.Remark,A.PromoId,A.PromoType,A.PromoPercent,A.PromoBaseItem,A.SalesMode,A.TaxRate,A.TaxAmt,A.TaxCode,A.MinDepositAmt,A.MinDepositPercent,A.DeliveryType,A.POSService,A.StoreAreaId,A.TimeFrameId,A.Duration,A.AppointmentDate,A.BomID,A.PromoPrice,A.PromoLineTotal,A.BaseLine,A.BaseTransId,A.OpenQty,A.PromoDisAmt,A.IsPromo,A.IsSerial,A.IsVoucher,A.PrepaidCardNo,A.MemberDate,A.MemberValue,A.StartDate,A.EndDate,A.ItemType,A.Description,A.LineTotalBefDis,A.LineTotalDisIncludeHeader,A.SerialNum,A.Name,A.Phone,A.ItemTypeS4,A.Custom1,A.Custom2,A.Custom3,A.Custom4,A.Custom5,A.PriceListId,A.ProductId,A.WeightScaleBarcode,A.StoreId,A.BookletNo
	--------FROM T_SalesLine A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesLine B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----------T_SalesPromo 
	----------INSERT INTO RPFO_POS_PRD..T_SalesPromo 
	----------(Id,TransId,CompanyCode,ItemCode,BarCode,RefTransId,ApplyType,ItemGroupId,UOMCode,Value,PromoId,PromoType,PromoTypeLine,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,PromoPercent,PromoAmt,StoreId)
	----------SELECT 
	----------Id,TransId,CompanyCode,ItemCode,BarCode,RefTransId,ApplyType,ItemGroupId,UOMCode,Value,PromoId,PromoType,PromoTypeLine,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,PromoPercent,PromoAmt,StoreId
	----------FROM  T_SalesPromo WHERE StoreID = '3020'  AND TransId NOT IN (SELECT TransId FROM RPFO_POS_PRD..T_SalesPromo)

	--------INSERT INTO RPFO_POS_PRD..T_SalesPromo 
	--------(Id,TransId,CompanyCode,ItemCode,BarCode,RefTransId,ApplyType,ItemGroupId,UOMCode,Value,PromoId,PromoType,PromoTypeLine,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,PromoPercent,PromoAmt,StoreId)
	--------SELECT 
	--------A.Id,A.TransId,A.CompanyCode,A.ItemCode,A.BarCode,A.RefTransId,A.ApplyType,A.ItemGroupId,A.UOMCode,A.Value,A.PromoId,A.PromoType,A.PromoTypeLine,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.PromoPercent,A.PromoAmt,A.StoreId
	--------FROM T_SalesPromo A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesPromo B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----------T_SalesLineSerial 
	----------INSERT INTO RPFO_POS_PRD..T_SalesLineSerial 
	----------(TransId,LineId,CompanyCode,ItemCode,SerialNum,SLocId,Quantity,UOMCode,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,OpenQty,BaseLine,BaseTransId,LineNum,Description,Phone,Name,CustomF1,CustomF2,Prefix,ExpDate,StoreId,CustomF3,CustomF4,CustomF5)
	----------SELECT
	----------TransId,LineId,CompanyCode,ItemCode,SerialNum,SLocId,Quantity,UOMCode,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,OpenQty,BaseLine,BaseTransId,LineNum,Description,Phone,Name,CustomF1,CustomF2,Prefix,ExpDate,StoreId,CustomF3,CustomF4,CustomF5
	----------FROM  T_SalesLineSerial WHERE StoreID = '3020' AND TransId NOT IN (SELECT TransId FROM RPFO_POS_PRD..T_SalesLineSerial)

	--------INSERT INTO RPFO_POS_PRD..T_SalesLineSerial 
	--------(TransId,LineId,CompanyCode,ItemCode,SerialNum,SLocId,Quantity,UOMCode,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,OpenQty,BaseLine,BaseTransId,LineNum,Description,Phone,Name,CustomF1,CustomF2,Prefix,ExpDate,StoreId,CustomF3,CustomF4,CustomF5)
	--------SELECT
	--------A.TransId,A.LineId,A.CompanyCode,A.ItemCode,A.SerialNum,A.SLocId,A.Quantity,A.UOMCode,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.OpenQty,A.BaseLine,A.BaseTransId,A.LineNum,A.Description,A.Phone,A.Name,A.CustomF1,A.CustomF2,A.Prefix,A.ExpDate,A.StoreId,A.CustomF3,A.CustomF4,A.CustomF5
	--------FROM T_SalesLineSerial A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesLineSerial B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----------T_SalesPayment  
	----------INSERT INTO RPFO_POS_PRD..T_SalesPayment 
	----------(PaymentCode,CompanyCode,TransId,LineId,TotalAmt,ReceivedAmt,PaidAmt,ChangeAmt,PaymentMode,CardType,CardHolderName,CardNo,VoucherBarCode,VoucherSerial,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,ChargableAmount,PaymentDiscount,CollectedAmount,RefNumber,SyncMWIStatus,SyncMWIDate,SyncMWIMsg,DataSource,SyncDate,SyncSource,Currency,FCAmount,Rate,ShiftId,CardExpiryDate,AdjudicationCode,AuthorizationDateTime,TerminalId,RoundingOff,FCRoundingOff,ForfeitCode,Forfeit,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,StoreId)
	----------SELECT 
	----------PaymentCode,CompanyCode,TransId,LineId,TotalAmt,ReceivedAmt,PaidAmt,ChangeAmt,PaymentMode,CardType,CardHolderName,CardNo,VoucherBarCode,VoucherSerial,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,ChargableAmount,PaymentDiscount,CollectedAmount,RefNumber,SyncMWIStatus,SyncMWIDate,SyncMWIMsg,DataSource,SyncDate,SyncSource,Currency,FCAmount,Rate,ShiftId,CardExpiryDate,AdjudicationCode,AuthorizationDateTime,TerminalId,RoundingOff,FCRoundingOff,ForfeitCode,Forfeit,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,StoreId
	----------FROM  T_SalesPayment WHERE StoreID = '3020' AND TransId NOT IN (SELECT TransId FROM RPFO_POS_PRD..T_SalesPayment)
	----------UPDATE T_SalesPayment SET  SyncMWIStatus = 'Y' , SyncMWIDate = GETDATE()
	----------WHERE StoreID = '3020' AND   SyncMWIStatus <> 'Y'

	--------UPDATE T_SalesPayment SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	--------FROM T_SalesPayment A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesPayment B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	--------INSERT INTO RPFO_POS_PRD..T_SalesPayment 
	--------(PaymentCode,CompanyCode,TransId,LineId,TotalAmt,ReceivedAmt,PaidAmt,ChangeAmt,PaymentMode,CardType,CardHolderName,CardNo,VoucherBarCode,VoucherSerial,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,ChargableAmount,PaymentDiscount,CollectedAmount,RefNumber,DataSource,SyncDate,SyncSource,Currency,FCAmount,Rate,ShiftId,CardExpiryDate,AdjudicationCode,AuthorizationDateTime,TerminalId,RoundingOff,FCRoundingOff,ForfeitCode,Forfeit,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,StoreId)
	--------SELECT 
	--------A.PaymentCode,A.CompanyCode,A.TransId,A.LineId,A.TotalAmt,A.ReceivedAmt,A.PaidAmt,A.ChangeAmt,A.PaymentMode,A.CardType,A.CardHolderName,A.CardNo,A.VoucherBarCode,A.VoucherSerial,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.ChargableAmount,A.PaymentDiscount,A.CollectedAmount,A.RefNumber,A.DataSource,A.SyncDate,A.SyncSource,A.Currency,A.FCAmount,A.Rate,A.ShiftId,A.CardExpiryDate,A.AdjudicationCode,A.AuthorizationDateTime,A.TerminalId,A.RoundingOff,A.FCRoundingOff,A.ForfeitCode,A.Forfeit,A.CustomF1,A.CustomF2,A.CustomF3,A.CustomF4,A.CustomF5,A.StoreId
	--------FROM T_SalesPayment A
	--------LEFT JOIN RPFO_POS_PRD..T_SalesPayment B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--------WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----T_ShiftHeader 

	--UPDATE T_ShiftHeader SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	--WHERE StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND ShiftId NOT IN (SELECT ShiftId FROM RPFO_POS_PRD..T_ShiftHeader)
	
	--INSERT INTO RPFO_POS_PRD..T_ShiftHeader 
	--(ShiftId,CompanyCode,StoreId,DailyId,DeviceId,OpenAmt,EndAmt,ShiftTotal,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status)
	--SELECT 
	--ShiftId,CompanyCode,StoreId,DailyId,DeviceId,OpenAmt,EndAmt,ShiftTotal,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status
	--FROM  T_ShiftHeader WHERE StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND ShiftId NOT IN (SELECT ShiftId FROM RPFO_POS_PRD..T_ShiftHeader)

	----T_ShiftLine 
	--INSERT INTO RPFO_POS_PRD..T_ShiftLine 
	--(ShiftId,CompanyCode,PaymentCode,Currency,CounterId,Value,FCValue,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,CollectAmount,FCCollectedAmount,BankInAmt,CountedBalance,BankInBalance)
	--SELECT 
	--ShiftId,CompanyCode,PaymentCode,Currency,CounterId,Value,FCValue,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,CollectAmount,FCCollectedAmount,BankInAmt,CountedBalance,BankInBalance
	--FROM  T_ShiftLine WHERE LEFT(ShiftId,4) IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND ShiftId NOT IN (SELECT ShiftId FROM RPFO_POS_PRD..T_ShiftLine)

	----T_ShiftSummary

	--INSERT INTO RPFO_POS_PRD..T_ShiftSummary 
	--(CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy)
	--SELECT 
	--CompanyCode,ShiftId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,Currency,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy
	--FROM  T_ShiftSummary WHERE LEFT(ShiftId,4) IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')AND ShiftId NOT IN (SELECT ShiftId FROM RPFO_POS_PRD..T_ShiftSummary)

	----T_StoreDaily 

	--DELETE RPFO_POS_PRD..T_StoreDaily 
	--WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND CreateDate NOT IN (SELECT CreateDate FROM  T_StoreDaily WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004'))
	--AND CreatedOn >= '2022-09-19'

	--INSERT INTO RPFO_POS_PRD..T_StoreDaily 
	--(CompanyCode,StoreId,DailyId,DeviceId,CreateDate,TotalSales,TotalCount,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,TotalCollected,TotalBalance)
	--SELECT 
	--CompanyCode,StoreId,DailyId,DeviceId,CreateDate,TotalSales,TotalCount,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,TotalCollected,TotalBalance
	--FROM  T_StoreDaily WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004') 
	--AND CreateDate NOT IN (SELECT CreateDate FROM RPFO_POS_PRD..T_StoreDaily)

	----T_StoreSummary 

	----UPDATE T_StoreSummary SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	----WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004') AND CreatedOn NOT IN (SELECT CreatedOn FROM RPFO_POS_PRD..T_StoreSummary)
	
	----INSERT INTO RPFO_POS_PRD..T_StoreSummary 
	----(CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,BusinessDate,Currency,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy)
	----SELECT 
	----CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,BusinessDate,Currency,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy
	----FROM  T_StoreSummary WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004') AND CreatedOn NOT IN (SELECT CreatedOn FROM RPFO_POS_PRD..T_StoreSummary)

	--DELETE RPFO_POS_PRD..T_StoreSummary
	--FROM RPFO_POS_PRD..T_StoreSummary A
	--INNER JOIN T_StoreSummary B ON A.CompanyCode = B.CompanyCode AND A.StoreId = B.StoreId AND A.DailyId = B.DailyId
	--WHERE B.StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND ISNULL(B.SyncMWIStatus, '') <> 'Y'
	--and B.CreatedOn >= '2022-09-19'

	--INSERT INTO RPFO_POS_PRD..T_StoreSummary 
	--(CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,BusinessDate,Currency,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy)
	--SELECT 
	--CompanyCode,StoreId,DailyId,TerminalId,SummaryType,SummaryValue,SummaryCount,SummaryAmount,BusinessDate,Currency,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy
	--FROM T_StoreSummary WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND ISNULL(SyncMWIStatus, '') <> 'Y' AND CreatedOn >= '2022-09-19'

	--UPDATE T_StoreSummary SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	--WHERE StoreId IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND ISNULL(SyncMWIStatus, '') <> 'Y' AND CreatedOn >= '2022-09-19'

END
GO
/****** Object:  StoredProcedure [dbo].[Z_Mirgation_BETWEEN_2_PRD_TMP_Transaction]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Z_Mirgation_BETWEEN_2_PRD_TMP_Transaction]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE @SalesHeader TABLE
	--(
	--	CompanyCode nvarchar(50),
	--	TransId nvarchar(50)
	--)

	----T_SalesHeader 

	--INSERT INTO @SalesHeader (CompanyCode, TransId)
	--SELECT DISTINCT TOP 5000 A.CompanyCode, A.TransId
	--FROM T_SalesHeader A
	--INNER JOIN T_SalesLine L ON A.CompanyCode = L.CompanyCode AND A.TransId = L.TransId
	--LEFT JOIN T_SalesPayment P ON A.CompanyCode = P.CompanyCode AND A.TransId = P.TransId
	--LEFT JOIN RPFO_POS_PRD..T_SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	--WHERE A.StoreID IN ('3020', '3008', '3017', '3014', '3015', '3011', '3012', '3009', '3019', '3018', '3013', '3001', '3002', '3010', '3006', '3016', '3007', '3005', '3003', '3004')
	--AND B.TransId IS NULL
	--AND ((A.TotalPayable = 0 AND P.TransId IS NULL) OR (A.TotalPayable <> 0 AND P.TransId IS NOT NULL))

	--INSERT INTO RPFO_POS_PRD..T_SalesHeader 
	--(TransId,CompanyCode,StoreId,ContractNo,StoreName,ShiftId,CusId,CusIdentifier,CusGrpId,TotalAmount,TotalPayable,TotalDiscountAmt,TotalReceipt,AmountChange,PaymentDiscount,TotalTax,DiscountType,DiscountAmount,DiscountRate,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,IsCanceled,Remarks,SalesPerson,SalesPersonName,SalesMode,SalesType,RefTransId,ManualDiscount,DataSource,POSType,EInvoice,Phone,CusName,CusAddress,Reason,CollectedStatus,OMSId,Chanel,StartTime,TerminalId,RoundingOff,ShortOrderID,MerchantId,OMSStatus,PromoId,ApprovalId,RewardPoints,ExpiryDate,DocDate,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,LuckyNo,OrderId)
	--SELECT 
	--A.TransId,A.CompanyCode,A.StoreId,A.ContractNo,A.StoreName,A.ShiftId,A.CusId,A.CusIdentifier,A.CusGrpId,A.TotalAmount,A.TotalPayable,A.TotalDiscountAmt,A.TotalReceipt,A.AmountChange,A.PaymentDiscount,A.TotalTax,A.DiscountType,A.DiscountAmount,A.DiscountRate,A.CreatedOn,A.CreatedBy,A.ModifiedOn,A.ModifiedBy,A.Status,A.IsCanceled,A.Remarks,A.SalesPerson,A.SalesPersonName,A.SalesMode,A.SalesType,A.RefTransId,A.ManualDiscount,A.DataSource,A.POSType,A.EInvoice,A.Phone,A.CusName,A.CusAddress,A.Reason,A.CollectedStatus,A.OMSId,A.Chanel,A.StartTime,A.TerminalId,A.RoundingOff,A.ShortOrderID,A.MerchantId,A.OMSStatus,A.PromoId,A.ApprovalId,A.RewardPoints,A.ExpiryDate,A.DocDate,A.CustomF1,A.CustomF2,A.CustomF3,A.CustomF4,A.CustomF5,A.LuckyNo,A.OrderId
	--FROM T_SalesHeader A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId

	----T_SalesLine 
	--INSERT INTO RPFO_POS_PRD..T_SalesLine 
	--(TransId,LineId,CompanyCode,ItemCode,SLocId,BarCode,UOMCode,Quantity,Price,LineTotal,DiscountType,DiscountAmt,DiscountRate,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,Remark,PromoId,PromoType,PromoPercent,PromoBaseItem,SalesMode,TaxRate,TaxAmt,TaxCode,MinDepositAmt,MinDepositPercent,DeliveryType,POSService,StoreAreaId,TimeFrameId,Duration,AppointmentDate,BomID,PromoPrice,PromoLineTotal,BaseLine,BaseTransId,OpenQty,PromoDisAmt,IsPromo,IsSerial,IsVoucher,PrepaidCardNo,MemberDate,MemberValue,StartDate,EndDate,ItemType,Description,LineTotalBefDis,LineTotalDisIncludeHeader,SerialNum,Name,Phone,ItemTypeS4,Custom1,Custom2,Custom3,Custom4,Custom5,PriceListId,ProductId,WeightScaleBarcode,StoreId,BookletNo)
	--SELECT 
	--A.TransId,A.LineId,A.CompanyCode,A.ItemCode,A.SLocId,A.BarCode,A.UOMCode,A.Quantity,A.Price,A.LineTotal,A.DiscountType,A.DiscountAmt,A.DiscountRate,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.Remark,A.PromoId,A.PromoType,A.PromoPercent,A.PromoBaseItem,A.SalesMode,A.TaxRate,A.TaxAmt,A.TaxCode,A.MinDepositAmt,A.MinDepositPercent,A.DeliveryType,A.POSService,A.StoreAreaId,A.TimeFrameId,A.Duration,A.AppointmentDate,A.BomID,A.PromoPrice,A.PromoLineTotal,A.BaseLine,A.BaseTransId,A.OpenQty,A.PromoDisAmt,A.IsPromo,A.IsSerial,A.IsVoucher,A.PrepaidCardNo,A.MemberDate,A.MemberValue,A.StartDate,A.EndDate,A.ItemType,A.Description,A.LineTotalBefDis,A.LineTotalDisIncludeHeader,A.SerialNum,A.Name,A.Phone,A.ItemTypeS4,A.Custom1,A.Custom2,A.Custom3,A.Custom4,A.Custom5,A.PriceListId,A.ProductId,A.WeightScaleBarcode,A.StoreId,A.BookletNo
	--FROM T_SalesLine A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId

	----T_SalesPromo 
	--INSERT INTO RPFO_POS_PRD..T_SalesPromo 
	--(Id,TransId,CompanyCode,ItemCode,BarCode,RefTransId,ApplyType,ItemGroupId,UOMCode,Value,PromoId,PromoType,PromoTypeLine,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,PromoPercent,PromoAmt,StoreId)
	--SELECT 
	--A.Id,A.TransId,A.CompanyCode,A.ItemCode,A.BarCode,A.RefTransId,A.ApplyType,A.ItemGroupId,A.UOMCode,A.Value,A.PromoId,A.PromoType,A.PromoTypeLine,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.PromoPercent,A.PromoAmt,A.StoreId
	--FROM T_SalesPromo A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId

	----T_SalesLineSerial 
	--INSERT INTO RPFO_POS_PRD..T_SalesLineSerial 
	--(TransId,LineId,CompanyCode,ItemCode,SerialNum,SLocId,Quantity,UOMCode,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,OpenQty,BaseLine,BaseTransId,LineNum,Description,Phone,Name,CustomF1,CustomF2,Prefix,ExpDate,StoreId,CustomF3,CustomF4,CustomF5)
	--SELECT
	--A.TransId,A.LineId,A.CompanyCode,A.ItemCode,A.SerialNum,A.SLocId,A.Quantity,A.UOMCode,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.OpenQty,A.BaseLine,A.BaseTransId,A.LineNum,A.Description,A.Phone,A.Name,A.CustomF1,A.CustomF2,A.Prefix,A.ExpDate,A.StoreId,A.CustomF3,A.CustomF4,A.CustomF5
	--FROM T_SalesLineSerial A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId

	--UPDATE T_SalesHeader SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE(), SyncJAStatus = 'Y', SyncJADate = GETDATE() 
	--FROM T_SalesHeader A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId

	--INSERT INTO RPFO_POS_PRD..T_SalesPayment 
	--(PaymentCode,CompanyCode,TransId,LineId,TotalAmt,ReceivedAmt,PaidAmt,ChangeAmt,PaymentMode,CardType,CardHolderName,CardNo,VoucherBarCode,VoucherSerial,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,ChargableAmount,PaymentDiscount,CollectedAmount,RefNumber,DataSource,SyncDate,SyncSource,Currency,FCAmount,Rate,ShiftId,CardExpiryDate,AdjudicationCode,AuthorizationDateTime,TerminalId,RoundingOff,FCRoundingOff,ForfeitCode,Forfeit,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,StoreId)
	--SELECT 
	--A.PaymentCode,A.CompanyCode,A.TransId,A.LineId,A.TotalAmt,A.ReceivedAmt,A.PaidAmt,A.ChangeAmt,A.PaymentMode,A.CardType,A.CardHolderName,A.CardNo,A.VoucherBarCode,A.VoucherSerial,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.ChargableAmount,A.PaymentDiscount,A.CollectedAmount,A.RefNumber,A.DataSource,A.SyncDate,A.SyncSource,A.Currency,A.FCAmount,A.Rate,A.ShiftId,A.CardExpiryDate,A.AdjudicationCode,A.AuthorizationDateTime,A.TerminalId,A.RoundingOff,A.FCRoundingOff,A.ForfeitCode,A.Forfeit,A.CustomF1,A.CustomF2,A.CustomF3,A.CustomF4,A.CustomF5,A.StoreId
	--FROM T_SalesPayment A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId

	----T_SalesPayment  
	--UPDATE T_SalesPayment SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	--FROM T_SalesPayment A
	--INNER JOIN @SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId



	----UPDATE T_SalesHeader SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE(), SyncJAStatus = 'Y', SyncJADate = GETDATE() 
	----FROM T_SalesHeader A
	----LEFT JOIN RPFO_POS_PRD..T_SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----INSERT INTO RPFO_POS_PRD..T_SalesHeader 
	----(TransId,CompanyCode,StoreId,ContractNo,StoreName,ShiftId,CusId,CusIdentifier,CusGrpId,TotalAmount,TotalPayable,TotalDiscountAmt,TotalReceipt,AmountChange,PaymentDiscount,TotalTax,DiscountType,DiscountAmount,DiscountRate,CreatedOn,CreatedBy,ModifiedOn,ModifiedBy,Status,IsCanceled,Remarks,SalesPerson,SalesPersonName,SalesMode,SalesType,RefTransId,ManualDiscount,DataSource,POSType,EInvoice,Phone,CusName,CusAddress,Reason,CollectedStatus,OMSId,Chanel,StartTime,TerminalId,RoundingOff,ShortOrderID,MerchantId,OMSStatus,PromoId,ApprovalId,RewardPoints,ExpiryDate,DocDate,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,LuckyNo,OrderId)
	----SELECT 
	----A.TransId,A.CompanyCode,A.StoreId,A.ContractNo,A.StoreName,A.ShiftId,A.CusId,A.CusIdentifier,A.CusGrpId,A.TotalAmount,A.TotalPayable,A.TotalDiscountAmt,A.TotalReceipt,A.AmountChange,A.PaymentDiscount,A.TotalTax,A.DiscountType,A.DiscountAmount,A.DiscountRate,A.CreatedOn,A.CreatedBy,A.ModifiedOn,A.ModifiedBy,A.Status,A.IsCanceled,A.Remarks,A.SalesPerson,A.SalesPersonName,A.SalesMode,A.SalesType,A.RefTransId,A.ManualDiscount,A.DataSource,A.POSType,A.EInvoice,A.Phone,A.CusName,A.CusAddress,A.Reason,A.CollectedStatus,A.OMSId,A.Chanel,A.StartTime,A.TerminalId,A.RoundingOff,A.ShortOrderID,A.MerchantId,A.OMSStatus,A.PromoId,A.ApprovalId,A.RewardPoints,A.ExpiryDate,A.DocDate,A.CustomF1,A.CustomF2,A.CustomF3,A.CustomF4,A.CustomF5,A.LuckyNo,A.OrderId
	----FROM T_SalesHeader A
	----LEFT JOIN RPFO_POS_PRD..T_SalesHeader B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL

	------T_SalesLine 
	----INSERT INTO RPFO_POS_PRD..T_SalesLine 
	----(TransId,LineId,CompanyCode,ItemCode,SLocId,BarCode,UOMCode,Quantity,Price,LineTotal,DiscountType,DiscountAmt,DiscountRate,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,Remark,PromoId,PromoType,PromoPercent,PromoBaseItem,SalesMode,TaxRate,TaxAmt,TaxCode,MinDepositAmt,MinDepositPercent,DeliveryType,POSService,StoreAreaId,TimeFrameId,Duration,AppointmentDate,BomID,PromoPrice,PromoLineTotal,BaseLine,BaseTransId,OpenQty,PromoDisAmt,IsPromo,IsSerial,IsVoucher,PrepaidCardNo,MemberDate,MemberValue,StartDate,EndDate,ItemType,Description,LineTotalBefDis,LineTotalDisIncludeHeader,SerialNum,Name,Phone,ItemTypeS4,Custom1,Custom2,Custom3,Custom4,Custom5,PriceListId,ProductId,WeightScaleBarcode,StoreId,BookletNo)
	----SELECT 
	----A.TransId,A.LineId,A.CompanyCode,A.ItemCode,A.SLocId,A.BarCode,A.UOMCode,A.Quantity,A.Price,A.LineTotal,A.DiscountType,A.DiscountAmt,A.DiscountRate,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.Remark,A.PromoId,A.PromoType,A.PromoPercent,A.PromoBaseItem,A.SalesMode,A.TaxRate,A.TaxAmt,A.TaxCode,A.MinDepositAmt,A.MinDepositPercent,A.DeliveryType,A.POSService,A.StoreAreaId,A.TimeFrameId,A.Duration,A.AppointmentDate,A.BomID,A.PromoPrice,A.PromoLineTotal,A.BaseLine,A.BaseTransId,A.OpenQty,A.PromoDisAmt,A.IsPromo,A.IsSerial,A.IsVoucher,A.PrepaidCardNo,A.MemberDate,A.MemberValue,A.StartDate,A.EndDate,A.ItemType,A.Description,A.LineTotalBefDis,A.LineTotalDisIncludeHeader,A.SerialNum,A.Name,A.Phone,A.ItemTypeS4,A.Custom1,A.Custom2,A.Custom3,A.Custom4,A.Custom5,A.PriceListId,A.ProductId,A.WeightScaleBarcode,A.StoreId,A.BookletNo
	----FROM T_SalesLine A
	----LEFT JOIN RPFO_POS_PRD..T_SalesLine B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL

	------T_SalesPromo 
	----INSERT INTO RPFO_POS_PRD..T_SalesPromo 
	----(Id,TransId,CompanyCode,ItemCode,BarCode,RefTransId,ApplyType,ItemGroupId,UOMCode,Value,PromoId,PromoType,PromoTypeLine,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,PromoPercent,PromoAmt,StoreId)
	----SELECT 
	----A.Id,A.TransId,A.CompanyCode,A.ItemCode,A.BarCode,A.RefTransId,A.ApplyType,A.ItemGroupId,A.UOMCode,A.Value,A.PromoId,A.PromoType,A.PromoTypeLine,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.PromoPercent,A.PromoAmt,A.StoreId
	----FROM T_SalesPromo A
	----LEFT JOIN RPFO_POS_PRD..T_SalesPromo B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL

	------T_SalesLineSerial 
	----INSERT INTO RPFO_POS_PRD..T_SalesLineSerial 
	----(TransId,LineId,CompanyCode,ItemCode,SerialNum,SLocId,Quantity,UOMCode,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,OpenQty,BaseLine,BaseTransId,LineNum,Description,Phone,Name,CustomF1,CustomF2,Prefix,ExpDate,StoreId,CustomF3,CustomF4,CustomF5)
	----SELECT
	----A.TransId,A.LineId,A.CompanyCode,A.ItemCode,A.SerialNum,A.SLocId,A.Quantity,A.UOMCode,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.OpenQty,A.BaseLine,A.BaseTransId,A.LineNum,A.Description,A.Phone,A.Name,A.CustomF1,A.CustomF2,A.Prefix,A.ExpDate,A.StoreId,A.CustomF3,A.CustomF4,A.CustomF5
	----FROM T_SalesLineSerial A
	----LEFT JOIN RPFO_POS_PRD..T_SalesLineSerial B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL

	------T_SalesPayment  
	----UPDATE T_SalesPayment SET SyncMWIStatus = 'Y', SyncMWIDate = GETDATE()
	----FROM T_SalesPayment A
	----LEFT JOIN RPFO_POS_PRD..T_SalesPayment B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL

	----INSERT INTO RPFO_POS_PRD..T_SalesPayment 
	----(PaymentCode,CompanyCode,TransId,LineId,TotalAmt,ReceivedAmt,PaidAmt,ChangeAmt,PaymentMode,CardType,CardHolderName,CardNo,VoucherBarCode,VoucherSerial,CreatedBy,CreatedOn,ModifiedBy,ModifiedOn,Status,ChargableAmount,PaymentDiscount,CollectedAmount,RefNumber,DataSource,SyncDate,SyncSource,Currency,FCAmount,Rate,ShiftId,CardExpiryDate,AdjudicationCode,AuthorizationDateTime,TerminalId,RoundingOff,FCRoundingOff,ForfeitCode,Forfeit,CustomF1,CustomF2,CustomF3,CustomF4,CustomF5,StoreId)
	----SELECT 
	----A.PaymentCode,A.CompanyCode,A.TransId,A.LineId,A.TotalAmt,A.ReceivedAmt,A.PaidAmt,A.ChangeAmt,A.PaymentMode,A.CardType,A.CardHolderName,A.CardNo,A.VoucherBarCode,A.VoucherSerial,A.CreatedBy,A.CreatedOn,A.ModifiedBy,A.ModifiedOn,A.Status,A.ChargableAmount,A.PaymentDiscount,A.CollectedAmount,A.RefNumber,A.DataSource,A.SyncDate,A.SyncSource,A.Currency,A.FCAmount,A.Rate,A.ShiftId,A.CardExpiryDate,A.AdjudicationCode,A.AuthorizationDateTime,A.TerminalId,A.RoundingOff,A.FCRoundingOff,A.ForfeitCode,A.Forfeit,A.CustomF1,A.CustomF2,A.CustomF3,A.CustomF4,A.CustomF5,A.StoreId
	----FROM T_SalesPayment A
	----LEFT JOIN RPFO_POS_PRD..T_SalesPayment B ON A.CompanyCode = B.CompanyCode AND A.TransId = B.TransId
	----WHERE A.StoreID = '3020' AND B.TransId IS NULL


END
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_GoodsIssue]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   Trigger [dbo].[UTG_I_T_TransactionLog_GoodsIssue]
   ON  [dbo].[T_GoodsIssueLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'GOODS_ISSUE'
		  , CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_GoodsIssueHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode

END

GO
ALTER TABLE [dbo].[T_GoodsIssueLine] DISABLE TRIGGER [UTG_I_T_TransactionLog_GoodsIssue]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_GoodsIssue]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_T_ItemStorage_GoodsIssue]
   ON  [dbo].[T_GoodsIssueLine] 
   AFTER INSERT 
AS 

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @IsBOM BIT
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @Factor DECIMAL(19,6)

	DECLARE @InventoryUom NVARCHAR(50)
		
	SELECT 
		@Quantity =	A.Quantity ,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@SLocId = A.SLocId,
		@UOMCode = A.UOMCode,
		@StoreId = B.StoreId
	FROM inserted AS A INNER JOIN T_GoodsIssueHeader AS B with (nolock)
		ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode 
	set @Factor = 1
	--SELECT  @InventoryUom = InventoryUOM from M_Item  with (nolock) where CompanyCode = @CompanyCode and ItemCode= @ItemCode
	--IF (@InventoryUom = @UOMCode)
	--begin 
	--	set @Factor = 1
	--end
	--else
	--begin
	--	SELECT  @Factor = Factor from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode
	--end
	  
	
	SELECT @IsBOM = ISBOM 
		FROM M_Item with (nolock) 
		WHERE ItemCode = @ItemCode 
			AND CompanyCode = @CompanyCode
		
		IF (@IsBOM = 1)
			BEGIN
				SELECT @Propotion = @Quantity/Quantity 
				FROM M_BOMHeader with (nolock)
				WHERE ItemCode = @ItemCode
					AND CompanyCode = @CompanyCode

				DECLARE BOM_LINES CURSOR FOR
					SELECT ItemCode, UOMCode , Quantity 
					FROM M_BOMLine with (nolock)
					WHERE BOMId = @ItemCode 
						AND CompanyCode = @CompanyCode
				OPEN BOM_LINES  

				FETCH NEXT FROM BOM_LINES 
				INTO @ItemCode, @UOMCode, @Quantity

				WHILE @@FETCH_STATUS = 0 
					BEGIN
						IF (SELECT COUNT(*) 
							FROM T_ItemStorage with (nolock)
							WHERE 
								CompanyCode = @CompanyCode 
								AND ItemCode = @ItemCode
								AND SLocId = @SLocId
								AND UOMCode = @UOMCode) <> 0
							BEGIN
								UPDATE [dbo].[T_ItemStorage]
									SET [Quantity] = Quantity - @Quantity*@Propotion
									WHERE      CompanyCode =  @CompanyCode
											AND ItemCode = @CompanyCode
											AND SLocId = @SLocId
											AND UOMCode = @UOMCode
							END
						ELSE
							BEGIN
								INSERT INTO [dbo].[T_ItemStorage]
									([SLocId]
									,[CompanyCode]
									,[ItemCode]
									,[UOMCode]
									,[StoreId]
									,[Quantity])
								VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,-@Quantity*@Propotion)
							END
						FETCH NEXT FROM BOM_LINES
						INTO @ItemCode, @UOMCode, @Quantity
					END
					CLOSE BOM_LINES 
					DEALLOCATE BOM_LINES
				END

			-- IsBOM = 0
			ELSE
				IF (SELECT COUNT(*) 
							FROM T_ItemStorage with (nolock)
							WHERE 
								CompanyCode = @CompanyCode 
								AND ItemCode = @ItemCode
								AND SLocId = @SLocId
								AND UOMCode = @UOMCode) <> 0
					BEGIN
						UPDATE [dbo].[T_ItemStorage]
							SET [Quantity] = Quantity - @Quantity * @Factor
							WHERE     CompanyCode =  @CompanyCode
								AND ItemCode = @ItemCode
								AND SLocId = @SLocId
								AND UOMCode = @UOMCode
					END
				ELSE
					BEGIN
						INSERT INTO [dbo].[T_ItemStorage]
							([SLocId]
							,[CompanyCode]
							,[ItemCode]
							,[UOMCode]
							,[StoreId]
							,[Quantity])
						VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,-@Quantity * @Factor)
					END

END


--select * from M_item where ItemCode ='JA070703002'

 
--select * from M_ItemUOM where ItemCode ='JA070703002'





/****** Object:  Trigger [dbo].[UTG_T_ItemSerial_GoodsIssue]    Script Date: 6/18/2021 2:01:42 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_GoodsIssueLine] DISABLE TRIGGER [UTG_T_ItemStorage_GoodsIssue]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemSerial_GoodsIssue]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Trigger [dbo].[UTG_T_ItemSerial_GoodsIssue]
   ON  [dbo].[T_GoodsIssueLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)

	INSERT INTO [dbo].[T_ItemSerial]
           ([SLocId]
           ,[CompanyCode]
           ,[TransId]
           ,[ItemCode]
           ,[SerialNum]
           ,[StoreId]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[TransType]
           ,[TransDate]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[SLocId]
		  ,A.[CompanyCode]
		  ,A.[INVTId]
		  ,A.[ItemCode]
		  ,A.[SerialNum]
		  ,B.[StoreId]
		  ,0
          ,CASE WHEN ISNULL(B.IsCanceled,'') = 'N' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'Y' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'C' THEN -A.Quantity END 
		  ,[UOMCode]
		 
		  ,'GOODS_ISSUE'
		  ,A.[CreatedOn]
		 ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_GoodsIssueHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode


	SELECT @SLocId = SLocId
			, @CompanyCode = CompanyCode
			, @ItemCode = ItemCode
			, @SerialNum = SerialNum
			, @CreatedBy = CreatedBy
	FROM inserted
		
	if((select isnull(count(*), 0) from M_ItemSerialStock where CompanyCode = @CompanyCode and ItemCode = @ItemCode and SLocId = @SLocId and SerialNum = @SerialNum) <> 0)
	begin
		UPDATE M_ItemSerialStock 
		SET StockQty = 0 
			, ModifiedOn = GETDATE()
			, ModifiedBy = @CreatedBy
		WHERE	CompanyCode = @CompanyCode 
			AND SLocId = @SLocId
			AND ItemCode = @ItemCode
			AND SerialNum = @SerialNum
	end
	else
	begin
		INSERT INTO M_ItemSerialStock( [CompanyCode]
      ,[ItemCode]
      ,[SLocId]
      ,[SerialNum]
      ,[StockQty]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[ModifiedBy]
      ,[ModifiedOn]
      ,[Status])
		VALUES( @CompanyCode, @ItemCode, @SLocId, @SerialNum, 0, @CreatedBy,GETDATE(),null,null,null)
	end
	
END
GO
ALTER TABLE [dbo].[T_GoodsIssueLineSerial] ENABLE TRIGGER [UTG_T_ItemSerial_GoodsIssue]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_GoodsReceipt]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE Trigger [dbo].[UTG_I_T_TransactionLog_GoodsReceipt]
   ON  [dbo].[T_GoodsReceiptLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'GOODS_RECEIPT'
		  , CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_GoodsReceiptHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode

END
 
GO
ALTER TABLE [dbo].[T_GoodsReceiptLine] DISABLE TRIGGER [UTG_I_T_TransactionLog_GoodsReceipt]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_GoodsReceipt]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_T_ItemStorage_GoodsReceipt]
   ON  [dbo].[T_GoodsReceiptLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @Factor DECIMAL(19,6)
	DECLARE @InventoryUom NVARCHAR(50)
	

	SELECT 
		@Quantity =	A.Quantity   ,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@SLocId = A.SLocId,
		@UOMCode = A.UOMCode,
		@StoreId = B.StoreId
	FROM inserted AS A INNER JOIN T_GoodsReceiptHeader AS B with (nolock)
		ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode  
	set @Factor = 1
	--SELECT  @InventoryUom = InventoryUOM from M_Item  with (nolock) where CompanyCode = @CompanyCode and ItemCode= @ItemCode
	--IF (@InventoryUom = @UOMCode)
	--begin 
	--	set @Factor = 1
	--end
	--else
	--begin
	--	SELECT  @Factor = Factor from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode
	--end
	 
	IF (SELECT COUNT(*) 
					FROM T_ItemStorage with (nolock)
					WHERE 
						CompanyCode = @CompanyCode 
						AND ItemCode = @ItemCode
						AND SLocId = @SLocId
						AND UOMCode = @UOMCode
						) <> 0
		BEGIN
			UPDATE [dbo].[T_ItemStorage]
			   --SET [Quantity] = Quantity + @Quantity * @Factor
			   SET Quantity = isnull(@Quantity,0)*isnull(@Factor,0) + isnull(Quantity,0)
			 WHERE      CompanyCode =   @CompanyCode
					AND ItemCode = @ItemCode
					AND SLocId = @SLocId
					AND UOMCode = @UOMCode
		END
	ELSE
		BEGIN
		   INSERT INTO [dbo].[T_ItemStorage]
			   ([SLocId]
			   ,[CompanyCode]
			   ,[ItemCode]
			   ,[UOMCode]
			   ,[StoreId]
			   ,[Quantity])
			VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity * @Factor)
		END
END




/****** Object:  Trigger [dbo].[UTG_T_ItemSerial_GoodsReceipt]    Script Date: 6/18/2021 2:00:37 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_GoodsReceiptLine] DISABLE TRIGGER [UTG_T_ItemStorage_GoodsReceipt]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemSerial_GoodsReceipt]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE  Trigger [dbo].[UTG_T_ItemSerial_GoodsReceipt]
   ON  [dbo].[T_GoodsReceiptLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)
	

	INSERT INTO [dbo].[T_ItemSerial]
           ([SLocId]
           ,[CompanyCode]
           ,[TransId]
           ,[ItemCode]
           ,[SerialNum]
           ,[StoreId]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[TransType]
           ,[TransDate]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[SLocId]
		  ,A.[CompanyCode]
		  ,A.[INVTId]
		  ,A.[ItemCode]
		  ,A.[SerialNum]
		  ,B.[StoreId]
		  ,CASE WHEN ISNULL(B.IsCanceled,'') = 'N' THEN A.Quantity
				WHEN ISNULL(B.IsCanceled,'') = 'Y' THEN A.Quantity
				WHEN ISNULL(B.IsCanceled,'') = 'C' THEN -A.Quantity END 
          ,0
		  ,[UOMCode]
		 
		  ,'GOODS_RECEIPT'
		   ,A.[CreatedOn]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_GoodsReceiptHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode

		SELECT @SLocId = SLocId
			, @CompanyCode = CompanyCode
			, @ItemCode = ItemCode
			, @SerialNum = SerialNum
			, @CreatedBy = CreatedBy
		FROM inserted
		
		if((select isnull(count(*), 0) from M_ItemSerialStock where CompanyCode = @CompanyCode and ItemCode = @ItemCode and SLocId = @SLocId and SerialNum = @SerialNum) <> 0)
		begin
			
			UPDATE M_ItemSerialStock 
			SET StockQty = 1
				, ModifiedOn = GETDATE()
				, ModifiedBy = @CreatedBy
			WHERE	CompanyCode = @CompanyCode 
				AND SLocId = @SLocId
				AND ItemCode = @ItemCode
				AND SerialNum = @SerialNum
		end
		else
		begin
			INSERT INTO M_ItemSerialStock (
			[CompanyCode]
			  ,[ItemCode]
			  ,[SLocId]
			  ,[SerialNum]
			  ,[StockQty]
			  ,[CreatedBy]
			  ,[CreatedOn]
			  ,[ModifiedBy]
			  ,[ModifiedOn]
			  ,[Status])

			VALUES( @CompanyCode, @ItemCode, @SLocId, @SerialNum, 1, @CreatedBy,GETDATE(),null,null,null)
		end
	

END


--select * from M_ItemSerialStock
GO
ALTER TABLE [dbo].[T_GoodsReceiptLineSerial] DISABLE TRIGGER [UTG_T_ItemSerial_GoodsReceipt]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_GoodsReceiptPO]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   Trigger [dbo].[UTG_I_T_TransactionLog_GoodsReceiptPO]
   ON  [dbo].[T_GoodsReceiptPOLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[PurchaseId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'GOODS_RECEIPT_PO'
		  , CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_GoodsReceiptPOHeader AS B ON A.PurchaseId = B.PurchaseId AND A.CompanyCode = B.CompanyCode

END





GO
ALTER TABLE [dbo].[T_GoodsReceiptPOLine] DISABLE TRIGGER [UTG_I_T_TransactionLog_GoodsReceiptPO]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_GoodsReceiptPO]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_T_ItemStorage_GoodsReceiptPO]
   ON  [dbo].[T_GoodsReceiptPOLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @Factor DECIMAL(19,6)
	DECLARE @InventoryUom NVARCHAR(50)
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @IsBOM BIT
	DECLARE @DocType NVARCHAR(50)
	Declare @ItemManagementType nvarchar(50)
	SELECT 
		@Quantity = CASE B.IsCanceled  
						WHEN 'Y'  THEN -A.Quantity  
						WHEN 'C'  THEN -A.Quantity  
						else A.Quantity 
					END ,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@SLocId = A.SLocId,
		@UOMCode = A.UOMCode,
		@StoreId = B.StoreId
		
	FROM inserted AS A INNER JOIN T_GoodsReceiptPOHeader AS B with (nolock)
		ON A.PurchaseId = B.PurchaseId AND A.CompanyCode = B.CompanyCode   

	set @Factor = 1
	--SELECT  @InventoryUom = InventoryUOM from M_Item  with (nolock) where CompanyCode = @CompanyCode and ItemCode= @ItemCode
	--IF (@InventoryUom = @UOMCode)
	--begin 
	--	set @Factor = 1
	--end
	--else
	--begin
	--	SELECT  @Factor = Factor from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode
	--end
	SELECT @IsBOM = ISBOM, @ItemManagementType = CustomField4 FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
											AND CompanyCode = @CompanyCode
	IF (@IsBOM = 1)
	BEGIN
		SELECT @Propotion = @Quantity/Quantity 
		FROM M_BOMHeader with (nolock)
		WHERE ItemCode = @ItemCode
			AND CompanyCode = @CompanyCode

		DECLARE BOM_LINES CURSOR FOR
			SELECT ItemCode, UOMCode , Quantity 
			FROM M_BOMLine with (nolock)
			WHERE BOMId = @ItemCode 
				AND CompanyCode = @CompanyCode
		OPEN BOM_LINES  

		FETCH NEXT FROM BOM_LINES 
		INTO @ItemCode, @UOMCode, @Quantity

		WHILE @@FETCH_STATUS = 0 
		BEGIN
			  
			IF (SELECT COUNT(*) 
				FROM T_ItemStorage with (nolock)
				WHERE 
					CompanyCode = @CompanyCode 
					AND ItemCode = @ItemCode
					AND SLocId = @SLocId
					AND UOMCode = @UOMCode) <> 0
				BEGIN
					UPDATE [dbo].[T_ItemStorage]
						SET [Quantity] =  Quantity + @Quantity*@Propotion
						WHERE      CompanyCode =   @CompanyCode
							AND ItemCode = @ItemCode
							AND SLocId = @SLocId
							AND UOMCode = @UOMCode
				END
			ELSE
				BEGIN
					INSERT INTO [dbo].[T_ItemStorage]
						([SLocId]
						,[CompanyCode]
						,[ItemCode]
						,[UOMCode]
						,[StoreId]
						,[Quantity])
					VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity*@Propotion)
				END
			FETCH NEXT FROM BOM_LINES
			INTO @ItemCode, @UOMCode, @Quantity
		END
		CLOSE BOM_LINES 
		DEALLOCATE BOM_LINES
	END
ELSE
begin
	--if(@ItemManagementType = 'I')
	--begin 
		 
		IF (SELECT COUNT(*) 
			FROM T_ItemStorage with (nolock)
			WHERE 
				CompanyCode = @CompanyCode 
				AND ItemCode = @ItemCode
				AND SLocId = @SLocId
				AND UOMCode = @UOMCode) <> 0
			BEGIN
				UPDATE [dbo].[T_ItemStorage]
					SET [Quantity] =  Quantity + @Quantity*@Factor
					WHERE      CompanyCode =   @CompanyCode
						AND ItemCode = @ItemCode
						AND SLocId = @SLocId
						AND UOMCode = @UOMCode
			END
		ELSE
			BEGIN
				INSERT INTO [dbo].[T_ItemStorage]
					([SLocId]
					,[CompanyCode]
					,[ItemCode]
					,[UOMCode]
					,[StoreId]
					,[Quantity])
				VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity*@Factor)
			END
		end
	--end
	--IF (SELECT COUNT(*) 
	--	FROM T_ItemStorage with (nolock)
	--	WHERE 
	--		CompanyCode = @CompanyCode 
	--		AND ItemCode = @ItemCode
	--		AND SLocId = @SLocId
	--		AND UOMCode = @UOMCode) <> 0
	--	BEGIN
	--		UPDATE T_ItemStorage
	--			SET Quantity = isnull(@Quantity,0)*isnull(@Factor,0) + isnull(Quantity,0)
	--			--
	--			WHERE      CompanyCode =  @CompanyCode
	--				AND ItemCode = @ItemCode
	--				AND SLocId = @SLocId
	--				AND UOMCode = @UOMCode
	--	END
	--ELSE
	--	BEGIN
	--		INSERT INTO [dbo].[T_ItemStorage]
	--			([SLocId]
	--			,[CompanyCode]
	--			,[ItemCode]
	--			,[UOMCode]
	--			,[StoreId]
	--			,[Quantity])
	--		VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,(isnull(@Quantity,0)*isnull(@Factor,0)))
	--	END
END




/****** Object:  Trigger [dbo].[UTG_U_T_TransactionLog_InventoryFrom]    Script Date: 6/18/2021 1:59:32 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_GoodsReceiptPOLine] DISABLE TRIGGER [UTG_T_ItemStorage_GoodsReceiptPO]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_Inventory_From]    Script Date: 1/30/2023 9:43:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE  Trigger [dbo].[UTG_I_T_TransactionLog_Inventory_From]
   ON  [dbo].[T_InventoryLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET NOCOUNT ON;

	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[FrSLocId]
		  ,A.[ItemCode]
		  ,B.[FromStore]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , 0
		  ,	ISNULL(Quantity,0)
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'S'
	UNION ALL
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,B.[TransitWhs] [SLocId]
		  ,A.[ItemCode]
		  ,B.[FromStore] [StoreId]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , ISNULL(Quantity,0)
		  ,	0
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'S'

END

 
GO
ALTER TABLE [dbo].[T_InventoryLine] ENABLE TRIGGER [UTG_I_T_TransactionLog_Inventory_From]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_Inventory_To]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   Trigger [dbo].[UTG_I_T_TransactionLog_Inventory_To]
   ON  [dbo].[T_InventoryLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,A.[ToSLocId]
		  ,A.[ItemCode]
		  ,B.[ToStore]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , ISNULL(Quantity,0)
		  ,	0
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'R'
	UNION ALL
     SELECT 
		   A.[INVTId]
		  ,A.[CompanyCode]
		  ,B.[TransitWhs]  
		  ,A.[ItemCode]
		  ,B.[ToStore]
		  ,A.[CreatedOn]
		  ,'INVENTORY'
		  , 0
		  ,	ISNULL(Quantity,0)
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
	WHERE A.DocType = 'R'

END



GO
ALTER TABLE [dbo].[T_InventoryLine] ENABLE TRIGGER [UTG_I_T_TransactionLog_Inventory_To]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Inventory_From]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_T_ItemStorage_Inventory_From]
   ON  [dbo].[T_InventoryLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @FrSLocId NVARCHAR(50)
	DECLARE @FromStore NVARCHAR(50) 
	DECLARE @ToStore NVARCHAR(50) 
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @Factor DECIMAL(19,6)
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @IsBOM BIT
	DECLARE @DocType NVARCHAR(50)
	Declare @ItemManagementType nvarchar(50)
	SELECT 
		@Quantity = CASE B.IsCanceled  
						WHEN 'Y'  THEN -A.Quantity  
						WHEN 'C'  THEN -A.Quantity  
						else A.Quantity 
					END ,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@FrSLocId = A.FrSLocId,
		@UOMCode = A.UOMCode,
		@StoreId = B.FromStore,
		@DocType= A.DocType,
		@FromStore = B.FromStore,
		@ToStore = B.ToStore
	FROM inserted AS A INNER JOIN T_InventoryHeader AS B with (nolock)
		ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode  
	set @Factor=1;
	 --SELECT  @Factor = Factor from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode
	--if(@DocType='R')
	--begin
	--IF (SELECT COUNT(*) 
	--	FROM T_ItemStorage with (nolock)
	--	WHERE 
	--		CompanyCode = @CompanyCode 
	--		AND ItemCode = @ItemCode
	--		AND SLocId = @FrSLocId
	--		AND UOMCode = @UOMCode) <> 0
	--	BEGIN
	--		UPDATE [dbo].[T_ItemStorage]
	--		   SET [Quantity] = Quantity - @Quantity*@Factor
	--		 WHERE      CompanyCode =   @CompanyCode
	--				AND ItemCode = @ItemCode
	--				AND SLocId = @FrSLocId
	--				AND UOMCode = @UOMCode
	--	END
	--ELSE
	--	BEGIN
	--	   INSERT INTO [dbo].[T_ItemStorage]
	--		   ([SLocId]
	--		   ,[CompanyCode]
	--		   ,[ItemCode]
	--		   ,[UOMCode]
	--		   ,[StoreId]
	--		   ,[Quantity])
	--		VALUES (@FrSLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId, -@Quantity*@Factor)
	--	END
	--end
	SELECT @IsBOM = ISBOM, @ItemManagementType = CustomField4 FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
											AND CompanyCode = @CompanyCode
	if(@DocType='S')
	begin
		declare @VirtualWhs nvarchar(50);  set @VirtualWhs= (select   dbo.[fnc_GetVirtualWhs]( @CompanyCode, @FromStore))
			IF (@IsBOM = 1)
			BEGIN
				SELECT @Propotion = @Quantity/Quantity 
				FROM M_BOMHeader with (nolock)
				WHERE ItemCode = @ItemCode
					AND CompanyCode = @CompanyCode

				DECLARE BOM_LINES CURSOR FOR
					SELECT ItemCode, UOMCode , Quantity 
					FROM M_BOMLine with (nolock)
					WHERE BOMId = @ItemCode 
						AND CompanyCode = @CompanyCode
				OPEN BOM_LINES  

				FETCH NEXT FROM BOM_LINES 
				INTO @ItemCode, @UOMCode, @Quantity

				WHILE @@FETCH_STATUS = 0 
				BEGIN
					IF (SELECT COUNT(*) 
						FROM T_ItemStorage with (nolock)
						WHERE 
							CompanyCode = @CompanyCode 
							AND ItemCode = @ItemCode
							AND SLocId = @FrSLocId
							AND UOMCode = @UOMCode
							AND StoreId = @StoreId) <> 0
						BEGIN
							UPDATE [dbo].[T_ItemStorage]
								SET [Quantity] = Quantity - @Quantity*@Propotion
								WHERE      CompanyCode =  @CompanyCode
										AND ItemCode = @ItemCode
										AND SLocId = @FrSLocId
										AND UOMCode = @UOMCode
										AND StoreId = @StoreId
						END
					ELSE
						BEGIN
							INSERT INTO [dbo].[T_ItemStorage]
								([SLocId]
								,[CompanyCode]
								,[ItemCode]
								,[UOMCode]
								,[StoreId]
								,[Quantity])
							VALUES (@FrSLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId, -@Quantity*@Propotion)
						END
					-- Update Virtual
					IF (SELECT COUNT(*) 
						FROM T_ItemStorage with (nolock)
						WHERE 
							CompanyCode = @CompanyCode 
							AND ItemCode = @ItemCode
							AND SLocId = @VirtualWhs
							AND UOMCode = @UOMCode) <> 0
						BEGIN
							UPDATE [dbo].[T_ItemStorage]
							   SET [Quantity] =  Quantity + @Quantity*@Propotion
							 WHERE      CompanyCode =   @CompanyCode
									AND ItemCode = @ItemCode
									AND SLocId = @VirtualWhs
									AND UOMCode = @UOMCode
									AND StoreId = @StoreId
						END
					ELSE
						BEGIN
						   INSERT INTO [dbo].[T_ItemStorage]
							   ([SLocId]
							   ,[CompanyCode]
							   ,[ItemCode]
							   ,[UOMCode]
							   ,[StoreId]
							   ,[Quantity])
							VALUES (@VirtualWhs,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity*@Propotion)
						END
					FETCH NEXT FROM BOM_LINES
					INTO @ItemCode, @UOMCode, @Quantity
				END
				CLOSE BOM_LINES 
				DEALLOCATE BOM_LINES
			END
		ELSE
		begin
			if(@ItemManagementType = 'I')
			begin 
				IF (SELECT COUNT(*)  FROM T_ItemStorage with (nolock)
					WHERE  CompanyCode = @CompanyCode  AND ItemCode = @ItemCode
						AND SLocId = @FrSLocId AND UOMCode = @UOMCode) <> 0
					BEGIN
						UPDATE [dbo].[T_ItemStorage] SET [Quantity] = Quantity - @Quantity*@Factor
						 WHERE      CompanyCode =   @CompanyCode AND ItemCode = @ItemCode
								AND SLocId = @FrSLocId AND UOMCode = @UOMCode
					END
				ELSE
					BEGIN
					   INSERT INTO [dbo].[T_ItemStorage]
						   ([SLocId]
						   ,[CompanyCode]
						   ,[ItemCode]
						   ,[UOMCode]
						   ,[StoreId]
						   ,[Quantity])
						VALUES (@FrSLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId, -@Quantity*@Factor)
					END
					---- Update to Virtual WHS
				IF (SELECT COUNT(*) 
					FROM T_ItemStorage with (nolock)
					WHERE 
						CompanyCode = @CompanyCode 
						AND ItemCode = @ItemCode
						AND SLocId = @VirtualWhs
						AND UOMCode = @UOMCode) <> 0
					BEGIN
						UPDATE [dbo].[T_ItemStorage]
						   SET [Quantity] =  Quantity + @Quantity*@Factor
						 WHERE      CompanyCode =   @CompanyCode
								AND ItemCode = @ItemCode
								AND SLocId = @VirtualWhs
								AND UOMCode = @UOMCode AND StoreId = @StoreId
					END
				ELSE
					BEGIN
					   INSERT INTO [dbo].[T_ItemStorage]
						   ([SLocId]
						   ,[CompanyCode]
						   ,[ItemCode]
						   ,[UOMCode]
						   ,[StoreId]
						   ,[Quantity])
						VALUES (@VirtualWhs,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity*@Factor)
					END
				end
			end
		end
			--IF (SELECT COUNT(*) 
			--		FROM T_ItemStorage with (nolock)
			--		WHERE 
			--			CompanyCode = @CompanyCode 
			--			AND ItemCode = @ItemCode
			--			AND SLocId = @SLocId
			--			AND UOMCode = @UOMCode AND StoreId = @StoreId) <> 0
			--	BEGIN
			--		UPDATE [dbo].[T_ItemStorage]
			--			SET [Quantity] = CASE @SaleMode 
			--					WHEN 'SALES' THEN  Quantity - @Quantity 
			--					WHEN 'SALESDEP' THEN  Quantity - @Quantity  
			--					WHEN 'EX' THEN  Quantity - @Quantity  
			--					WHEN 'EXDEP' THEN  Quantity - @Quantity  
			--					WHEN 'RETURN' THEN  Quantity - @Quantity 
			--				end
			--			WHERE      CompanyCode =   @CompanyCode
			--				AND ItemCode = @ItemCode
			--				AND SLocId = @SLocId
			--				AND UOMCode = @UOMCode AND StoreId = @StoreId
			--	END
			--ELSE
			--	BEGIN
			--		INSERT INTO [dbo].[T_ItemStorage]
			--			([SLocId]
			--			,[CompanyCode]
			--			,[ItemCode]
			--			,[UOMCode]
			--			,[StoreId]
			--			,[Quantity])
			--		VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,  CASE @SaleMode 
			--					WHEN 'SALES' THEN -@Quantity * @Factor
			--					WHEN 'SALESDEP' THEN -@Quantity * @Factor
			--					WHEN 'EX' THEN -@Quantity * @Factor
			--					WHEN 'EXDEP' THEN -@Quantity * @Factor
			--					WHEN 'RETURN' THEN - @Quantity * @Factor
			--				end)
			--END

		
end
		
 
 
 



/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Inventory_To]    Script Date: 6/18/2021 1:58:17 AM ******/
SET ANSI_NULLS ON

 
GO
ALTER TABLE [dbo].[T_InventoryLine] ENABLE TRIGGER [UTG_T_ItemStorage_Inventory_From]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Inventory_To]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_T_ItemStorage_Inventory_To]
   ON  [dbo].[T_InventoryLine] 
   AFTER INSERT 
AS 
BEGIN
	 
	SET NOCOUNT ON;
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @FrSLocId NVARCHAR(50)
	DECLARE @ToSLocId NVARCHAR(50)
	DECLARE @FromStore NVARCHAR(50) 
	DECLARE @ToStore NVARCHAR(50) 
	DECLARE @UOMCode NVARCHAR(50)
 
	DECLARE @Factor DECIMAL(19,6)
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @IsBOM BIT
	DECLARE @DocType NVARCHAR(50)
	Declare @ItemManagementType nvarchar(50)
	DECLARE @isCanceled NVARCHAR(50)
	SELECT 
		@Quantity = CASE B.IsCanceled  
						WHEN 'Y'  THEN -A.Quantity  
						WHEN 'C'  THEN -A.Quantity  
						else A.Quantity 
					END ,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@ToSLocId = A.ToSLocId,
		@FrSLocId= A.FrSLocId,
		@UOMCode = A.UOMCode,
		@FromStore = B.FromStore,
		@ToStore = B.ToStore,
		@DocType= A.DocType 
	FROM inserted AS A INNER JOIN T_InventoryHeader AS B with (nolock)
		ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode  
	set @Factor=1
	--SELECT  @Factor = Factor from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode
   SELECT @IsBOM = ISBOM, @ItemManagementType = CustomField4 FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
											AND CompanyCode = @CompanyCode
	if(@DocType='R')
	begin
			declare @VirtualWhs nvarchar(50);  set @VirtualWhs= (select top 1  dbo.[fnc_GetVirtualWhs]( @CompanyCode, @FromStore))
			IF (@IsBOM = 1)
			BEGIN
				SELECT @Propotion = @Quantity/Quantity 
				FROM M_BOMHeader with (nolock)
				WHERE ItemCode = @ItemCode
					AND CompanyCode = @CompanyCode

				DECLARE BOM_LINES CURSOR FOR
					SELECT ItemCode, UOMCode , Quantity 
					FROM M_BOMLine with (nolock)
					WHERE BOMId = @ItemCode 
						AND CompanyCode = @CompanyCode
				OPEN BOM_LINES  

				FETCH NEXT FROM BOM_LINES 
				INTO @ItemCode, @UOMCode, @Quantity

				WHILE @@FETCH_STATUS = 0 
				BEGIN
					IF (SELECT COUNT(*) 
						FROM T_ItemStorage with (nolock)
						WHERE 
							CompanyCode = @CompanyCode 
							AND ItemCode = @ItemCode
							AND SLocId = @VirtualWhs
							AND UOMCode = @UOMCode
							AND StoreId = @FromStore) <> 0
						BEGIN
							UPDATE [dbo].[T_ItemStorage]
								SET [Quantity] = Quantity - @Quantity*@Propotion
								WHERE      CompanyCode =  @CompanyCode
										AND ItemCode = @ItemCode
										AND SLocId = @VirtualWhs
										AND UOMCode = @UOMCode
										AND StoreId = @FromStore
						END
					ELSE
						BEGIN
							INSERT INTO [dbo].[T_ItemStorage]
								([SLocId]
								,[CompanyCode]
								,[ItemCode]
								,[UOMCode]
								,[StoreId]
								,[Quantity])
							VALUES (@VirtualWhs,@CompanyCode,@ItemCode,@UOMCode, @FromStore, -@Quantity*@Propotion)
						END
					-- Update Virtual
					IF (SELECT COUNT(*) 
						FROM T_ItemStorage with (nolock)
						WHERE 
							CompanyCode = @CompanyCode 
							AND ItemCode = @ItemCode
							AND SLocId = @ToSLocId
							AND UOMCode = @UOMCode) <> 0
						BEGIN
							UPDATE [dbo].[T_ItemStorage]
							   SET [Quantity] =  Quantity + @Quantity*@Propotion
							 WHERE      CompanyCode =   @CompanyCode
									AND ItemCode = @ItemCode
									AND SLocId = @ToSLocId
									AND UOMCode = @UOMCode
									AND StoreId = @ToStore
						END
					ELSE
						BEGIN
						   INSERT INTO [dbo].[T_ItemStorage]
							   ([SLocId]
							   ,[CompanyCode]
							   ,[ItemCode]
							   ,[UOMCode]
							   ,[StoreId]
							   ,[Quantity])
							VALUES (@ToSLocId,@CompanyCode,@ItemCode,@UOMCode, @ToStore,@Quantity*@Propotion)
						END
					FETCH NEXT FROM BOM_LINES
					INTO @ItemCode, @UOMCode, @Quantity
				END
				CLOSE BOM_LINES 
				DEALLOCATE BOM_LINES
			END
		ELSE
		begin
			if(@ItemManagementType = 'I')
			begin 
				IF (SELECT COUNT(*)  FROM T_ItemStorage with (nolock)
					WHERE  CompanyCode = @CompanyCode  AND ItemCode = @ItemCode
						AND SLocId = @VirtualWhs AND UOMCode = @UOMCode) <> 0
					BEGIN
						UPDATE [dbo].[T_ItemStorage] SET [Quantity] = Quantity - @Quantity*@Factor
						 WHERE      CompanyCode =   @CompanyCode AND ItemCode = @ItemCode
								AND SLocId = @VirtualWhs AND UOMCode = @UOMCode AND StoreId = @FromStore
					END
				ELSE
					BEGIN
					   INSERT INTO [dbo].[T_ItemStorage]
						   ([SLocId]
						   ,[CompanyCode]
						   ,[ItemCode]
						   ,[UOMCode]
						   ,[StoreId]
						   ,[Quantity])
						VALUES (@VirtualWhs,@CompanyCode,@ItemCode,@UOMCode, @FromStore, -@Quantity*@Factor)
					END
					---- Update to To WHS
				IF (SELECT COUNT(*) 
					FROM T_ItemStorage with (nolock)
					WHERE 
						CompanyCode = @CompanyCode 
						AND ItemCode = @ItemCode
						AND SLocId = @ToSLocId
						AND UOMCode = @UOMCode) <> 0
					BEGIN
						UPDATE [dbo].[T_ItemStorage]
						   SET [Quantity] =  Quantity + @Quantity*@Factor
						 WHERE      CompanyCode =   @CompanyCode
								AND ItemCode = @ItemCode
								AND SLocId = @ToSLocId
								AND UOMCode = @UOMCode AND StoreId = @ToStore
					END
				ELSE
					BEGIN
					   INSERT INTO [dbo].[T_ItemStorage]
						   ([SLocId]
						   ,[CompanyCode]
						   ,[ItemCode]
						   ,[UOMCode]
						   ,[StoreId]
						   ,[Quantity])
						VALUES (@ToSLocId,@CompanyCode,@ItemCode,@UOMCode,@ToStore,@Quantity*@Factor)
					END
				end
			end
		end
end
	 ---- Update to Virtual WHS
 
	 
 
 


GO
ALTER TABLE [dbo].[T_InventoryLine] ENABLE TRIGGER [UTG_T_ItemStorage_Inventory_To]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_ItemSerial_Inventory_From]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   Trigger [dbo].[UTG_I_T_ItemSerial_Inventory_From]
   ON  [dbo].[T_InventoryLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)
	DECLARE @DocType NVARCHAR(50)
	SELECT 
		 
		@DocType= B.DocType
	 
	FROM inserted AS A INNER JOIN T_InventoryHeader AS B with (nolock)
		ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode  


	INSERT INTO [dbo].[T_ItemSerial]
           ([SLocId]
           ,[CompanyCode]
           ,[TransId]
           ,[ItemCode]
           ,[SerialNum]
           ,[StoreId]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[TransType]
           ,[TransDate]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[FrSLocId]
		  ,A.[CompanyCode]
		  ,A.[INVTId]
		  ,A.[ItemCode]
		  ,A.[SerialNum]
		  ,B.[FromStore]
		  ,0	   
          ,CASE WHEN ISNULL(B.IsCanceled,'') = 'N' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'Y' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'C' THEN -A.Quantity END 		
		  ,[UOMCode]
		  ,'INVENTORY'
		  ,A.[CreatedOn]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode
   if(@DocType='S')
	begin
		SELECT @SLocId = FrSLocId
				, @CompanyCode = CompanyCode
				, @ItemCode = ItemCode
				, @SerialNum = SerialNum
				, @CreatedBy = CreatedBy
		FROM inserted

		UPDATE M_ItemSerialStock 
		SET StockQty = 0 
			, ModifiedOn = GETDATE()
			, ModifiedBy = @CreatedBy
		WHERE	CompanyCode = @CompanyCode 
			AND SLocId = @SLocId
			AND ItemCode = @ItemCode
			AND SerialNum = @SerialNum
	end
END

GO
ALTER TABLE [dbo].[T_InventoryLineSerial] ENABLE TRIGGER [UTG_I_T_ItemSerial_Inventory_From]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_ItemSerial_Inventory_To]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Trigger [dbo].[UTG_I_T_ItemSerial_Inventory_To]
   ON  [dbo].[T_InventoryLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)
	DECLARE @DocType NVARCHAR(50)
	SELECT 
		 
		@DocType= B.DocType,
		@CreatedBy = B.CreatedBy
	FROM inserted AS A INNER JOIN T_InventoryHeader AS B with (nolock)
		ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode  

	INSERT INTO [dbo].[T_ItemSerial]
           ([SLocId]
           ,[CompanyCode]
           ,[TransId]
           ,[ItemCode]
           ,[SerialNum]
           ,[StoreId]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[TransType]
           ,[TransDate]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[ToSLocId]
		  ,A.[CompanyCode]
		  ,A.[INVTId]
		  ,A.[ItemCode]
		  ,A.[SerialNum]
		  ,B.[ToStore]
		  ,CASE WHEN ISNULL(B.IsCanceled,'') = 'N' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'Y' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'C' THEN -A.Quantity END 
          ,0
		  ,[UOMCode]
		  ,'INVENTORY'
		  ,A.[CreatedOn]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryHeader AS B ON A.INVTId = B.INVTId AND A.CompanyCode = B.CompanyCode

	if(@DocType='R')
	begin
		SELECT @SLocId = ToSLocId
				, @CompanyCode = CompanyCode
				, @ItemCode = ItemCode
				, @SerialNum = SerialNum
				, @CreatedBy = CreatedBy
			FROM inserted
			if((select isnull(count(*), 0) from M_ItemSerialStock where CompanyCode = @CompanyCode and ItemCode = @ItemCode and SLocId = @SLocId and SerialNum = @SerialNum) <> 0)
			begin
			
				UPDATE M_ItemSerialStock 
				SET StockQty = 1
					, ModifiedOn = GETDATE()
					, ModifiedBy = @CreatedBy
				WHERE	CompanyCode = @CompanyCode 
					AND SLocId = @SLocId
					AND ItemCode = @ItemCode
					AND SerialNum = @SerialNum
			end
			else
			begin
				INSERT INTO M_ItemSerialStock( [CompanyCode]
				,[ItemCode]
				,[SLocId]
				,[SerialNum]
				,[StockQty]
				,[CreatedBy]
				,[CreatedOn]
				,[ModifiedBy]
				,[ModifiedOn]
				,[Status])
				VALUES( @CompanyCode, @ItemCode, @SLocId, @SerialNum, 1, @CreatedBy,GETDATE(),null,null,null)
			end
		end
		--INSERT INTO M_ItemSerialStock
		--VALUES( @CompanyCode, @ItemCode, @SLocId, @SerialNum, 1, @CreatedBy,GETDATE(),null,null,null)

END
GO
ALTER TABLE [dbo].[T_InventoryLineSerial] ENABLE TRIGGER [UTG_I_T_ItemSerial_Inventory_To]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_InventoryPosting]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_T_ItemStorage_InventoryPosting]
   ON  [dbo].[T_InventoryPostingLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @CurrentQuantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)

	SELECT 
		@Quantity =	A.Quantity,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@SLocId = A.SLocId,
		@UOMCode = A.UOMCode,
		@StoreId = B.StoreId
	FROM inserted AS A INNER JOIN T_InventoryPostingHeader AS B with (nolock)
		ON A.IPId = B.IPId AND A.CompanyCode = B.CompanyCode


	IF (SELECT COUNT(*) 
		FROM T_ItemStorage with (nolock)
		WHERE 
			CompanyCode = @CompanyCode 
			AND ItemCode = @ItemCode
			AND SLocId = @SLocId
			AND UOMCode = @UOMCode) <> 0
		BEGIN
			set @CurrentQuantity = (SELECT top 1 isnull(Quantity ,0)
			FROM T_ItemStorage with (nolock)
			WHERE 
				CompanyCode = @CompanyCode 
				AND ItemCode = @ItemCode
				AND SLocId = @SLocId
				AND UOMCode = @UOMCode) 
			UPDATE [dbo].[T_ItemStorage]
			   SET [Quantity] = @CurrentQuantity +  @Quantity
			 WHERE      CompanyCode =   @CompanyCode
					AND ItemCode = @ItemCode
					AND SLocId = @SLocId
					AND UOMCode = @UOMCode
					AND StoreId = @StoreId
		END
	ELSE
		BEGIN
		   INSERT INTO [dbo].[T_ItemStorage]
			   ([SLocId]
			   ,[CompanyCode]
			   ,[ItemCode]
			   ,[UOMCode]
			   ,[StoreId]
			   ,[Quantity])
			VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity)
		END
END




/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_Invoice]    Script Date: 6/18/2021 1:57:01 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_InventoryPostingLine] ENABLE TRIGGER [UTG_T_ItemStorage_InventoryPosting]
GO
/****** Object:  Trigger [dbo].[UTG_T_TransactionLog_InventoryPosting]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE  Trigger [dbo].[UTG_T_TransactionLog_InventoryPosting]
   ON  [dbo].[T_InventoryPostingLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	INSERT INTO [dbo].[T_TransactionLog]
           ([TransId]
           ,[CompanyCode]
           ,[SLocId]
           ,[ItemCode]
           ,[StoreId]
           ,[TransDate]
           ,[TransType]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[IPId]
		  ,A.[CompanyCode]
		  ,A.[SLocId]
		  ,A.[ItemCode]
		  ,B.[StoreId]
		  ,A.[CreatedOn]
		  ,'INVENTORY_POSTING'
		  , CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
		  ,	CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
		  ,[UOMCode]
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InventoryPostingHeader AS B ON A.[IPId] = B.[IPId] AND A.CompanyCode = B.CompanyCode

END




/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_Invoice]    Script Date: 6/18/2021 1:57:01 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_InventoryPostingLine] ENABLE TRIGGER [UTG_T_TransactionLog_InventoryPosting]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemSerial_InventoryPosting]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Trigger [dbo].[UTG_T_ItemSerial_InventoryPosting]
   ON  [dbo].[T_InventoryPostingLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)
	DECLARE @Quantity	decimal(19, 6)
	INSERT INTO [dbo].[T_ItemSerial]
           ([SLocId]
           ,[CompanyCode]
           ,[TransId]
           ,[ItemCode]
           ,[SerialNum]
           ,[StoreId]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[TransType]
           ,[TransDate]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[SLocId]
		  ,A.[CompanyCode]
		  ,A.IPId
		  ,A.[ItemCode]
		  ,A.[SerialNum]
		  ,B.[StoreId]
		  
          ,CASE WHEN ISNULL(B.IsCanceled,'') = 'N' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'Y' THEN A.Quantity
											WHEN ISNULL(B.IsCanceled,'') = 'C' THEN -A.Quantity END 
		   ,0
		  ,[UOMCode]
		 
		  ,'INV_POSTING'
		  ,A.[CreatedOn]
		 ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,'C'
		FROM inserted AS A
		INNER JOIN T_InventoryPostingHeader AS B ON A.IPId = B.IPId AND A.CompanyCode = B.CompanyCode


	SELECT @SLocId = SLocId
			, @CompanyCode = CompanyCode
			, @ItemCode = ItemCode
			, @SerialNum = SerialNum
			, @CreatedBy = CreatedBy,
			@Quantity = Quantity
	FROM inserted
		
	if((select isnull(count(*), 0) from M_ItemSerialStock where CompanyCode = @CompanyCode and ItemCode = @ItemCode and SLocId = @SLocId and SerialNum = @SerialNum) <> 0)
	begin
		UPDATE M_ItemSerialStock 
		SET StockQty = @Quantity
			, ModifiedOn = GETDATE()
			, ModifiedBy = @CreatedBy
		WHERE	CompanyCode = @CompanyCode 
			AND SLocId = @SLocId
			AND ItemCode = @ItemCode
			AND SerialNum = @SerialNum
	end
	else
	begin
		INSERT INTO M_ItemSerialStock( [CompanyCode]
		,[ItemCode]
		,[SLocId]
		,[SerialNum]
		,[StockQty]
		,[CreatedBy]
		,[CreatedOn]
		,[ModifiedBy]
		,[ModifiedOn]
		,[Status])
		VALUES( @CompanyCode, @ItemCode, @SLocId, @SerialNum, @Quantity, @CreatedBy,GETDATE(),null,null,null)
	end
	
END
GO
ALTER TABLE [dbo].[T_InventoryPostingLineSerial] ENABLE TRIGGER [UTG_T_ItemSerial_InventoryPosting]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_Invoice]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE  Trigger [dbo].[UTG_I_T_TransactionLog_Invoice]
   ON  [dbo].[T_InvoiceLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	-- Insert capacity transaction
	DECLARE @Capacity int
	DECLARE @BOMId nvarchar(50)
	DECLARE @SalesMode NVARCHAR(50)
	DECLARE @RevertQty INT

	SELECT @Capacity = CapacityValue, @BOMId = ISNULL(BomID,'') 
	FROM M_Item as A
	INNER JOIN inserted as B 
		ON A.CompanyCode = B.CompanyCode 
			AND A.ItemCode = B.ItemCode

	SELECT @SalesMode = A.Status , @RevertQty = CASE WHEN ISNULL(A.IsCanceled,'') = 'N' THEN 1
														WHEN ISNULL(A.IsCanceled,'') = 'Y' THEN -1
														WHEN ISNULL(A.IsCanceled,'') = 'C' THEN 1 END
			FROM T_InvoiceHeader AS A
			INNER JOIN inserted AS B 
					ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	
	IF(@SalesMode <> 'H')
		BEGIN
			IF @Capacity > 0 
				BEGIN
					INSERT INTO [dbo].[T_CapacityTransaction]
					   ([CompanyCode]
					   ,[TransId]
					   ,[StoreId]
					   ,[StoreAreaId]
					   ,[TimeFrameId]
					   ,[ItemCode]
					   ,[CapacityValue]
					   ,[TransDate]
					   ,[CreatedBy]
					   ,[Status])
					SELECT 
					   A.[CompanyCode]
					  ,A.[TransId]
					  ,B.[StoreId]
					  ,A.StoreAreaId
					  ,A.TimeFrameId
					  ,A.[ItemCode]
					  ,@Capacity*A.Quantity
					  ,A.CreatedOn
					  ,A.CreatedBy
					  ,A.Status
					FROM inserted AS A
					INNER JOIN T_InvoiceHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
					END

			-- Insert Transaction Log
			--INSERT INTO [dbo].[T_TransactionLog]
			--		([TransId]
			--		,[CompanyCode]
			--		,[SLocId]
			--		,[ItemCode]
			--		,[StoreId]
			--		,[TransDate]
			--		,[TransType]
			--		,[InQty]
			--		,[OutQty]
			--		,[UOMCode]
			--		,[CreatedBy]
			--		,[CreatedOn]
			--		,[ModifiedBy]
			--		,[ModifiedOn]
			--		,[Status])
			--	SELECT 
			--		A.[TransId]
			--		,A.[CompanyCode]
			--		,A.[SLocId]
			--		,A.[ItemCode]
			--		,B.[StoreId]
			--		,A.[CreatedOn]
			--		,'INVOICE'
			--		, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
			--		,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
			--		,[UOMCode]
			--		,A.[CreatedBy]
			--		,GETDATE()
			--		,A.[ModifiedBy]
			--		,A.[ModifiedOn]
			--		,A.[Status]
			--	FROM inserted AS A
			--				INNER JOIN T_InvoiceHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
			--				INNER JOIN M_Item AS C ON A.ItemCode = C.ItemCode AND A.CompanyCode = C.CompanyCode
			--	WHERE B.Status <> 'H' AND ISNULL(C.IsBOM,0) = 0 AND B.POSType = 'E'
			--	UNION ALL
			--	SELECT 
			--		A.[TransId]
			--		,A.[CompanyCode]
			--		,A.[SLocId]
			--		,A.[ItemCode]
			--		,B.[StoreId]
			--		,A.[CreatedOn]
			--		,'INVOICE'
			--		, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
			--		,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
			--		,[UOMCode]
			--		,A.[CreatedBy]
			--		,GETDATE()
			--		,A.[ModifiedBy]
			--		,A.[ModifiedOn]
			--		,A.[Status]
			--	FROM inserted AS A
			--				INNER JOIN T_InvoiceHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
			--				INNER JOIN M_Item AS C ON A.ItemCode = C.ItemCode AND A.CompanyCode = C.CompanyCode
			--	WHERE B.Status <> 'H' AND ISNULL(C.IsBOM,0) = 0 AND B.POSType = 'R' AND B.InvoiceType = 'CheckIn'

		END
END


GO
ALTER TABLE [dbo].[T_InvoiceLine] ENABLE TRIGGER [UTG_I_T_TransactionLog_Invoice]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Invoice]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   Trigger [dbo].[UTG_T_ItemStorage_Invoice]
   ON  [dbo].[T_InvoiceLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @IsBOM BIT
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @CapacityValue	int
	DECLARE @TimeFrameId	NVARCHAR(50)
	DECLARE @StoreAreaId NVARCHAR(50)
	DECLARE @TransDate DATE
	DECLARE @MaxCapacity int
	DECLARE @AppointmentDate Date 
	DECLARE @CreatedBy nvarchar(50)
	Declare @RefTransId nvarchar(50)
	Declare @BaseLine nvarchar(50)
	Declare @PrepaidCardNo nvarchar(50)
	Declare @LineTotal nvarchar(50)
	Declare @Duration decimal(19,6)
	Declare @Subbalance nvarchar(50)
	DECLARE @BaseTransId  nvarchar(50) 
    DECLARE @DataSource nvarchar(50 ) 
	Declare @POSType nvarchar(50)
	Declare @ItemManagementType nvarchar(50)
	Declare @SaleType nvarchar(50)
	Declare @SaleTypeHeader nvarchar(50)
	Declare @SaleMode nvarchar(50)
	Declare @Satus nvarchar(50)
	Declare @InvoiceType nvarchar(50)
	DECLARE @LineNum int
	DECLARE @OriQuantity DECIMAL(19,6)
	Declare @TransId nvarchar(50)
	DECLARE @Factor DECIMAL(19,6)

	--SELECT 
	--		@Quantity =	CASE B.IsCanceled   
	--					WHEN 'Y'  THEN -A.Quantity 
	--					else A.Quantity 
	--				END ,
	--	@CompanyCode = A.CompanyCode ,
	--	@ItemCode = A.ItemCode ,
	--	@SLocId = A.SLocId,
	--	@UOMCode = A.UOMCode,
	--	@StoreId = B.StoreId,
	--	@TimeFrameId = A.TimeFrameId,
	--	@StoreAreaId = A.StoreAreaId,
	--	@TransDate = A.CreatedOn,
	--	@CreatedBy = A.CreatedBy,
	--	@AppointmentDate = AppointmentDate,
	--	@SaleType= A.ItemType,
	--	@TransId= b.TransId,
	--	@PrepaidCardNo= a.PrepaidCardNo,
	--	@LineTotal = a.LineTotal,
	--	@SaleMode= B.SalesMode,
	--	@SaleTypeHeader = B.SalesType,
	--	@Subbalance= A.DiscountAmt,
	--	@RefTransId = A.BaseTransId,
	--	@BaseLine = A.BaseLine,
	--	@DataSource = B.DataSource,
	--	@POSType = B.POSType,
	--	@InvoiceType= B.InvoiceType,
	--	@Satus = B.Status
	--FROM inserted AS A INNER JOIN T_InvoiceHeader AS B with (nolock)
	--	ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode  

	--SELECT @IsBOM = ISBOM FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
	--									AND CompanyCode = @CompanyCode

	--SELECT  @Factor = ISNULL( Factor,0) from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode

	--update T_SalesLine set OpenQty = isnull(OpenQty,0)  where  CompanyCode= @CompanyCode and TransId = @BaseTransId and BaseLine = @BaseLine 

	--if ( @InvoiceType = 'CheckIn' or @InvoiceType = 'CheckOut')
	--begin

	--	SELECT @IsBOM = ISBOM, @ItemManagementType = CustomField4 FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
	--										AND CompanyCode = @CompanyCode
		
	--	DECLARE @Count DECIMAL(19,6)
	--	if @SaleMode = 'RETURN'
	--	begin
	--		set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
	--		if ABS(@Quantity) < @OriQuantity
	--		begin
	--			update  T_SalesLine set Status = 'RP' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		else 
	--		begin
	--			update  T_SalesLine set Status = 'RC' where LineId = @BaseLine and TransId = @RefTransId
	--		end
		
	-- 		set @Count = (select  ISNULL(count(*), 0) from T_SalesLine where Status = 'RP' and LineId = @BaseLine and TransId = @RefTransId)
	--		if @Count > 0
	--		begin
	--		   update  T_SalesHeader set CollectedStatus = 'Partial Return' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
	--		end
	--		else
	--		begin 
	--			update  T_SalesHeader set CollectedStatus = 'Returned' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
	--		end 

	--	end

	--	if @SaleMode = 'EX'
	--	begin
	--		set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
	--		if ABS(@Quantity) < @OriQuantity
	--		begin
	--			update  T_SalesLine set Status = 'EP' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		else 
	--		begin
	--			update  T_SalesLine set Status = 'EC' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		update  T_SalesHeader set CollectedStatus = 'Closed' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId

	--	end

	--	set @LineNum= 1;
	--	 --Update Item Storage
	--	if(@SaleType='Card' and @Satus<>'H')
	--	begin	 
	--		SELECT  @Duration = ISNULL(CustomField2,0) from M_Item where CompanyCode = @CompanyCode and InventoryUOM = @UOMCode and ItemCode= @ItemCode
	--		Update M_PrepaidCard set Status = 'A' where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
	--		INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo, LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--					VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,  @LineNum, @SaleMode, @LineTotal, @Subbalance, @CreatedBy, GETDATE() )  ;
	--		set @LineNum =@LineNum +1;
	--		--select * from T_PrepaidCardTransaction
	--		update M_PrepaidCard set MainBalance =  CASE @SaleMode 
	--															WHEN 'SALES' THEN isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'SALESDEP' THEN isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'EX' THEN  isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'EXDEP' THEN  isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'RETURN' THEN  isnull(MainBalance, 0) - @LineTotal
	--													   end 
	--												 , SubBalance = CASE @SaleMode 
	--															WHEN 'SALES' THEN  isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
	--															WHEN 'SALESDEP' THEN  isnull(SubBalance, 0) +  isnull(@Subbalance, 0) 
	--															WHEN 'EX' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0 )
	--															WHEN 'EXDEP' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
	--															WHEN 'RETURN' THEN  isnull(SubBalance, 0) - isnull(@Subbalance, 0) 
	--													   end , Duration =  CASE @SaleMode 
	--															WHEN 'SALES' THEN  isnull(Duration, 0)  + @Duration
	--															WHEN 'SALESDEP' THEN isnull(Duration, 0)  + @Duration
	--															WHEN 'EX' THEN   isnull(Duration, 0)  + @Duration
	--															WHEN 'EXDEP' THEN  isnull(Duration, 0)  + @Duration
	--															WHEN 'RETURN' THEN  isnull(Duration, 0)  - @Duration
	--													   end where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
	--	end
	--	else
	--	begin
		 
	--	 --select * from M_Item where ItemCode ='JA070704003'
			
	--		--IF (@IsBOM = 1 and @SaleTypeHeader = 'Voucher')
	--		--BEGIN
	--		--	SELECT @Propotion = @Quantity / Quantity 
	--		--	FROM M_BOMHeader with (nolock)
	--		--	WHERE ItemCode = @ItemCode
	--		--		AND CompanyCode = @CompanyCode

	--		--	DECLARE BOM_LINES CURSOR FOR
	--		--		SELECT ItemCode, UOMCode , Quantity 
	--		--		FROM M_BOMLine with (nolock)
	--		--		WHERE BOMId = @ItemCode  AND CompanyCode = @CompanyCode
	--		--	OPEN BOM_LINES  

	--		--	FETCH NEXT FROM BOM_LINES 
	--		--	INTO @ItemCode, @UOMCode, @Quantity

	--		--	WHILE @@FETCH_STATUS = 0 
	--		--	BEGIN
	--		--		IF (SELECT COUNT(*)  FROM T_ItemStorage with (nolock)
	--		--				WHERE 
	--		--					CompanyCode = @CompanyCode 
	--		--					AND ItemCode = @ItemCode
	--		--					AND SLocId = @SLocId
	--		--					AND UOMCode = @UOMCode
	--		--					AND StoreId = @StoreId) <> 0
	--		--			BEGIN
	--		--				UPDATE [dbo].[T_ItemStorage]
	--		--					SET [Quantity] =  CASE @SaleMode 
	--		--											WHEN 'SALES' THEN Quantity - @Quantity * @Propotion
	--		--											WHEN 'SALESDEP' THEN Quantity - @Quantity * @Propotion
	--		--											WHEN 'EX' THEN  Quantity - @Quantity*@Propotion
	--		--											WHEN 'EXDEP' THEN  Quantity - @Quantity*@Propotion
	--		--											WHEN 'RETURN' THEN  Quantity - @Quantity*@Propotion
	--		--											else  Quantity - @Quantity*@Propotion
	--		--										end 
	--		--					WHERE      CompanyCode =  @CompanyCode
	--		--							AND ItemCode = @ItemCode
	--		--							AND SLocId = @SLocId
	--		--							AND UOMCode = @UOMCode
	--		--							AND StoreId = @StoreId
	--		--			END
	--		--		ELSE
	--		--			BEGIN
	--		--				INSERT INTO [dbo].[T_ItemStorage]
	--		--					([SLocId]
	--		--					,[CompanyCode]
	--		--					,[ItemCode]
	--		--					,[UOMCode]
	--		--					,[StoreId]
	--		--					,[Quantity])
	--		--				VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,
	--		--										CASE @SaleMode 
	--		--											WHEN 'SALES' THEN  -@Quantity*@Propotion
	--		--											WHEN 'SALESDEP' THEN  -@Quantity*@Propotion
	--		--											WHEN 'EX' THEN  -@Quantity*@Propotion
	--		--											WHEN 'EXDEP' THEN   -@Quantity*@Propotion
	--		--											WHEN 'RETURN' THEN   -@Quantity*@Propotion
	--		--											else   -@Quantity*@Propotion
	--		--										end)
	--		--			END
	--		--		FETCH NEXT FROM BOM_LINES
	--		--		INTO @ItemCode, @UOMCode, @Quantity
	--		--	END
	--		--	CLOSE BOM_LINES 
	--		--	DEALLOCATE BOM_LINES
	--		--END
	--		--ELSE
	--		--if(@ItemManagementType = 'I')
	--		--begin 
	--		--	IF (SELECT COUNT(*) 
	--		--		FROM T_ItemStorage with (nolock)
	--		--		WHERE 
	--		--			CompanyCode = @CompanyCode 
	--		--			AND ItemCode = @ItemCode
	--		--			AND SLocId = @SLocId
	--		--			AND UOMCode = @UOMCode AND StoreId = @StoreId) <> 0
	--		--	BEGIN
	--		--		UPDATE [dbo].[T_ItemStorage]
	--		--			SET [Quantity] = CASE @SaleMode 
	--		--					WHEN 'SALES' THEN  Quantity - @Quantity 
	--		--					WHEN 'SALESDEP' THEN  Quantity - @Quantity  
	--		--					WHEN 'EX' THEN  Quantity - @Quantity  
	--		--					WHEN 'EXDEP' THEN  Quantity - @Quantity  
	--		--					WHEN 'RETURN' THEN  Quantity - @Quantity 
	--		--				end
	--		--			WHERE      CompanyCode =   @CompanyCode
	--		--				AND ItemCode = @ItemCode
	--		--				AND SLocId = @SLocId
	--		--				AND UOMCode = @UOMCode AND StoreId = @StoreId
	--		--	END
	--		--ELSE
	--		--	BEGIN
	--		--		INSERT INTO [dbo].[T_ItemStorage]
	--		--			([SLocId]
	--		--			,[CompanyCode]
	--		--			,[ItemCode]
	--		--			,[UOMCode]
	--		--			,[StoreId]
	--		--			,[Quantity])
	--		--		VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,  CASE @SaleMode 
	--		--					WHEN 'SALES' THEN -@Quantity * @Factor
	--		--					WHEN 'SALESDEP' THEN -@Quantity * @Factor
	--		--					WHEN 'EX' THEN -@Quantity * @Factor
	--		--					WHEN 'EXDEP' THEN -@Quantity * @Factor
	--		--					WHEN 'RETURN' THEN - @Quantity * @Factor
	--		--				end)
	--		--		END
	--		--end
			
	--		-- Update Capacity Remaining
	--		SELECT @CapacityValue = CapacityValue
	--		FROM M_Item as A
	--		INNER JOIN inserted as B 
	--			ON A.CompanyCode = B.CompanyCode 
	--				AND A.ItemCode = B.ItemCode

	--		IF @CapacityValue > 0 
	--			IF (SELECT COUNT(*) 
	--						FROM T_CapacityRemain with (nolock)
	--						WHERE 
	--							CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId
	--							AND TimeFrameId = @TimeFrameId
	--							AND StoreAreaId = @StoreAreaId
	--							AND TransDate = @AppointmentDate) <> 0
	--				BEGIN
	--					UPDATE [dbo].[T_CapacityRemain]
	--					SET 
	--							[CurrentCapacity] = CASE @SaleMode 
	--								WHEN 'SALES' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'EX' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN CurrentCapacity + @CapacityValue*@Quantity 
	--							end
	--							,[RemainCapacity] =  CASE @SaleMode 
	--								WHEN 'SALES' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'SALESDEP' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'EX' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'EXDEP' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'RETURN' THEN  MaxCapacity - ([CurrentCapacity] - @CapacityValue*@Quantity)
	--							end
							 
	--							,[ModifiedBy] = @CreatedBy
	--							,[ModifiedOn] = GETDATE()
	--					WHERE  CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId
	--							AND TimeFrameId = @TimeFrameId
	--							AND StoreAreaId = @StoreAreaId
	--							AND TransDate = @AppointmentDate
	--				END
	--			ELSE 
	--				BEGIN
	--					SELECT @MaxCapacity = MaxCapacity
	--					FROM M_StoreCapacity
	--					WHERE CompanyCode = @CompanyCode 
	--						AND StoreId = @StoreId 
	--						AND StoreAreaId = @StoreAreaId
	--						AND TimeFrameId = @TimeFrameId
	--					INSERT INTO [dbo].[T_CapacityRemain]
	--						([StoreId]
	--						,[CompanyCode]
	--						,[TimeFrameId]
	--						,[StoreAreaId]
	--						,[TransDate]
	--						,[MaxCapacity]
	--						,[CurrentCapacity]
	--						,[RemainCapacity]
	--						,[CreatedBy]
	--						,[Status])
	--					VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
	--						CASE @SaleMode 
	--								WHEN 'SALES' THEN  @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN  @CapacityValue*@Quantity
	--								WHEN 'EX' THEN  @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN  @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN @CapacityValue*@Quantity
	--							end
	--							,
	--							CASE @SaleMode 
	--								WHEN 'SALES' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'EX' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN @MaxCapacity - @CapacityValue*@Quantity
	--							end, @CreatedBy,'A')
	--				END
		 
	--	end
	--end
	----update dbo.T_SalesHeader set Status ='X', CollectedStatus = 'Test'where  CompanyCode= @CompanyCode and TransId = @BaseTransId  and StoreId = @StoreId
 ----	if @DataSource = 'Ecom' and @PosType  <> 'E'
	----begin
		
	----	DECLARE @OpenQuantity DECIMAL(19,6) = (select sum(isnull(openQty,0)) from dbo.T_SalesLine where CompanyCode= @CompanyCode and TransId = @BaseTransId  and itemtype <> 'Member' and itemtype <> 'Class' and itemtype <> 'Booklet')
 
	----	if @OpenQuantity <= 0
	----	begin
	----		update dbo.T_SalesHeader set Status ='C', CollectedStatus = 'Closed' where  CompanyCode= @CompanyCode and TransId = @BaseTransId  and StoreId = @StoreId
	----	end
	----end
 --  	--IF (@IsBOM = 1)
	----	BEGIN
	----		SELECT @Propotion = @Quantity/Quantity 
	----		FROM M_BOMHeader with (nolock)
	----		WHERE ItemCode = @ItemCode
	----			AND CompanyCode = @CompanyCode

	----		DECLARE BOM_LINES CURSOR FOR
	----			SELECT ItemCode, UOMCode , Quantity 
	----			FROM M_BOMLine with (nolock)
	----			WHERE BOMId = @ItemCode 
	----				AND CompanyCode = @CompanyCode
	----		OPEN BOM_LINES  

	----		FETCH NEXT FROM BOM_LINES 
	----		INTO @ItemCode, @UOMCode, @Quantity

	----		WHILE @@FETCH_STATUS = 0 
	----		BEGIN
	----			IF (SELECT COUNT(*) 
	----				FROM T_ItemStorage with (nolock)
	----				WHERE 
	----					CompanyCode = @CompanyCode 
	----					AND ItemCode = @ItemCode
	----					AND SLocId = @SLocId
	----					AND UOMCode = @UOMCode
	----					AND StoreId = @StoreId) <> 0
	----				BEGIN
	----					UPDATE [dbo].[T_ItemStorage]
	----						SET [Quantity] = Quantity + @Quantity*@Propotion
	----						WHERE      CompanyCode =  @CompanyCode
	----								AND ItemCode = @CompanyCode
	----								AND SLocId = @SLocId
	----								AND UOMCode = @UOMCode
	----								AND StoreId = @StoreId
	----				END
	----			ELSE
	----				BEGIN
	----					INSERT INTO [dbo].[T_ItemStorage]
	----						([SLocId]
	----						,[CompanyCode]
	----						,[ItemCode]
	----						,[UOMCode]
	----						,[StoreId]
	----						,[Quantity])
	----					VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity*@Propotion)
	----				END
	----			FETCH NEXT FROM BOM_LINES
	----			INTO @ItemCode, @UOMCode, @Quantity
	----		END
	----		CLOSE BOM_LINES 
	----		DEALLOCATE BOM_LINES
	----	END
	----ELSE
	----	IF (SELECT COUNT(*) FROM T_ItemStorage AS A with (nolock)
	----			       INNER JOIN inserted AS B 
	----				   ON A.CompanyCode = B.CompanyCode 
	----				   AND A.ItemCode = B.ItemCode
	----				   AND A.SLocId = B.SLocId
	----				   AND A.UOMCode = B.UOMCode) <> 0
	----		BEGIN
	----			UPDATE [dbo].[T_ItemStorage]
	----			   SET [Quantity] = Quantity + @Quantity
	----			 WHERE      CompanyCode =   @CompanyCode
	----					AND ItemCode = @CompanyCode
	----					AND SLocId = @SLocId
	----					AND UOMCode = @UOMCode
	----		END
	----	ELSE
	----		BEGIN
	----		   INSERT INTO [dbo].[T_ItemStorage]
	----			   ([SLocId]
	----			   ,[CompanyCode]
	----			   ,[ItemCode]
	----			   ,[UOMCode]
	----			 ,[StoreId]
	----			   ,[Quantity])
	----			VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,@Quantity)
	----	END

	 
	----SELECT @CapacityValue = CapacityValue
	----FROM M_Item as A
	----INNER JOIN inserted as B 
	----	ON A.CompanyCode = B.CompanyCode 
	----		AND A.ItemCode = B.ItemCode

	----IF @CapacityValue > 0 
	----	IF (SELECT COUNT(*) 
	----				FROM T_CapacityRemain with (nolock)
	----				WHERE 
	----					CompanyCode = @CompanyCode 
	----					AND StoreId = @StoreId
	----					AND TimeFrameId = @TimeFrameId
	----					AND StoreAreaId = @StoreAreaId
	----					AND TransDate = @AppointmentDate) <> 0
	----		BEGIN
	----			UPDATE [dbo].[T_CapacityRemain]
	----			SET 
	----				   [CurrentCapacity] = CurrentCapacity + @CapacityValue*@Quantity
	----				  ,[RemainCapacity] = MaxCapacity - ([CurrentCapacity]+ @CapacityValue*@Quantity)
	----				  ,[ModifiedBy] = @CreatedBy
	----				  ,[ModifiedOn] = GETDATE()
	----			WHERE  CompanyCode = @CompanyCode 
	----					AND StoreId = @StoreId
	----					AND TimeFrameId = @TimeFrameId
	----					AND StoreAreaId = @StoreAreaId
	----					AND TransDate = @AppointmentDate
	----		END
	----	ELSE 
	----		BEGIN
	----			SELECT @MaxCapacity = MaxCapacity
	----			FROM M_StoreCapacity
	----			WHERE CompanyCode = @CompanyCode 
	----				AND StoreId = @StoreId 
	----				AND StoreAreaId = @StoreAreaId
	----				AND TimeFrameId = @TimeFrameId
	----			INSERT INTO [dbo].[T_CapacityRemain]
	----			   ([StoreId]
	----			   ,[CompanyCode]
	----			   ,[TimeFrameId]
	----			   ,[StoreAreaId]
	----			   ,[TransDate]
	----			   ,[MaxCapacity]
	----			   ,[CurrentCapacity]
	----			   ,[RemainCapacity]
	----			   ,[CreatedBy]
	----			   ,[Status])
	----			VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity, @CapacityValue*@Quantity, @MaxCapacity - @CapacityValue*@Quantity, @CreatedBy,'A')
	----		END
END
GO
ALTER TABLE [dbo].[T_InvoiceLine] ENABLE TRIGGER [UTG_T_ItemStorage_Invoice]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_ItemSerial_Invoice]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE Trigger [dbo].[UTG_I_T_ItemSerial_Invoice]
   ON  [dbo].[T_InvoiceLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)

	INSERT INTO [dbo].[T_ItemSerial]
           ([SLocId]
           ,[CompanyCode]
           ,[TransId]
           ,[ItemCode]
           ,[SerialNum]
           ,[StoreId]
           ,[InQty]
           ,[OutQty]
           ,[UOMCode]
           ,[TransType]
           ,[TransDate]
           ,[CreatedBy]
           ,[CreatedOn]
           ,[ModifiedBy]
           ,[ModifiedOn]
           ,[Status])
     SELECT 
		   A.[SLocId]
		  ,A.[CompanyCode]
		  ,A.[TransId]
		  ,A.[ItemCode]
		  ,A.[SerialNum]
		  ,B.[StoreId]
		  ,0
          ,CASE WHEN ISNULL(B.IsCanceled,'') = 'N' THEN A.Quantity
				WHEN ISNULL(B.IsCanceled,'') = 'Y' THEN A.Quantity
				WHEN ISNULL(B.IsCanceled,'') = 'C' THEN -A.Quantity END
		  ,[UOMCode]
		   ,'SALES'
		  ,A.[CreatedOn]
		 
		  ,A.[CreatedBy]
          ,GETDATE()
          ,A.[ModifiedBy]
          ,A.[ModifiedOn]
		  ,A.[Status]
		FROM inserted AS A
		INNER JOIN T_InvoiceHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode

		SELECT @SLocId = SLocId
			, @CompanyCode = CompanyCode
			, @ItemCode = ItemCode
			, @SerialNum = SerialNum
			, @CreatedBy = CreatedBy
		FROM inserted

		UPDATE M_ItemSerialStock 
		SET StockQty = 0 
			, ModifiedOn = GETDATE()
			, ModifiedBy = @CreatedBy
		WHERE	CompanyCode = @CompanyCode 
			AND SLocId = @SLocId
			AND ItemCode = @ItemCode
			AND SerialNum = @SerialNum
END





GO
ALTER TABLE [dbo].[T_InvoiceLineSerial] ENABLE TRIGGER [UTG_I_T_ItemSerial_Invoice]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_TransactionLog_Sales]    Script Date: 1/30/2023 9:43:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   Trigger [dbo].[UTG_I_T_TransactionLog_Sales]
   ON  [dbo].[T_SalesLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	SET NOCOUNT ON;
	-- Insert capacity transaction
	DECLARE @Capacity int
	DECLARE @BOMId nvarchar(50)
	 
	DECLARE @Status NVARCHAR(50)
	DECLARE @RevertQty INT

	SELECT @Capacity = CapacityValue, @BOMId = ISNULL(BomID,'') 
	FROM M_Item as A
	INNER JOIN inserted as B 
		ON A.CompanyCode = B.CompanyCode 
			AND A.ItemCode = B.ItemCode

	SELECT @Status = A.Status , @RevertQty = CASE WHEN ISNULL(A.IsCanceled,'') = 'N' THEN 1
														WHEN ISNULL(A.IsCanceled,'') = 'Y' THEN 1
														WHEN ISNULL(A.IsCanceled,'') = 'C' THEN -1 END
			FROM T_SalesHeader AS A
			INNER JOIN inserted AS B 
					ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	
	--IF(@Status <> 'H')
	--	BEGIN
	--		IF @Capacity > 0 
	--			BEGIN
	--				INSERT INTO [dbo].[T_CapacityTransaction]
	--				   (Id,[CompanyCode]
	--				   ,[TransId]
	--				   ,[StoreId]
	--				   ,[StoreAreaId]
	--				   ,[TimeFrameId]
	--				   ,[LineId]
	--				   ,[ItemCode]
	--				   ,[CapacityValue]
	--				   ,[TransDate]
	--				   ,[CreatedBy]
	--				   ,[Status])
	--				SELECT NewID(),
	--				   A.[CompanyCode]
	--				  ,A.[TransId]
	--				  ,B.[StoreId]
	--				  ,A.StoreAreaId
	--				  ,A.TimeFrameId
	--				  , A.LineId  
	--				  ,A.[ItemCode]
	--				  ,@Capacity*A.Quantity
	--				  ,A.CreatedOn
	--				  ,A.CreatedBy
	--				  ,A.Status
	--				FROM inserted AS A
	--				INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	--			END

	--		-- Insert Transaction Log
	--		INSERT INTO [dbo].[T_TransactionLog]
	--				([TransId]
	--				,[CompanyCode]
	--				,[SLocId]
	--				,[ItemCode]
	--				,[StoreId]
	--				,[TransDate]
	--				,[TransType]
	--				,[InQty]
	--				,[OutQty]
	--				,[UOMCode]
	--				,[CreatedBy]
	--				,[CreatedOn]
	--				,[ModifiedBy]
	--				,[ModifiedOn]
	--				,[Status])
	--			SELECT 
	--				A.[TransId]
	--				,A.[CompanyCode]
	--				,A.[SLocId]
	--				,A.[ItemCode]
	--				,B.[StoreId]
	--				,A.[CreatedOn]
	--				,'SALES'
	--				, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
	--				,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
	--				,[UOMCode]
	--				,A.[CreatedBy]
	--				,GETDATE()
	--				,A.[ModifiedBy]
	--				,A.[ModifiedOn]
	--				,A.[Status]
	--			FROM inserted AS A
	--								INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	--								INNER JOIN M_Item AS C ON A.ItemCode = C.ItemCode AND A.CompanyCode = C.CompanyCode
	--			WHERE B.Status <> 'H' AND B.POSType <> 'E' AND ISNULL(C.IsBOM,0) = 0
	--END
END
GO
ALTER TABLE [dbo].[T_SalesLine] ENABLE TRIGGER [UTG_I_T_TransactionLog_Sales]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Sales]    Script Date: 1/30/2023 9:43:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE       Trigger [dbo].[UTG_T_ItemStorage_Sales]
   ON  [dbo].[T_SalesLine] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @OriQuantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @IsBOM BIT
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @CapacityValue	DECIMAL(19,6)
	DECLARE @TimeFrameNum	int
	DECLARE @TimeFrameId	NVARCHAR(50)
	DECLARE @StoreAreaId NVARCHAR(50)
	DECLARE @TransDate DATE
	DECLARE @MaxCapacity DECIMAL(19,6)
	DECLARE @AppointmentDate Date 
	DECLARE @CreatedBy nvarchar(50)
	DECLARE @Factor DECIMAL(19,6)
	DECLARE @LineNum int
	Declare @SaleType nvarchar(50)
	Declare @SaleMode nvarchar(50)
	Declare @Satus nvarchar(50)
	Declare @TransId nvarchar(50)
	Declare @RefTransId nvarchar(50)
	Declare @BaseLine nvarchar(50)
	Declare @PrepaidCardNo nvarchar(50)
	Declare @LineTotal nvarchar(50)
	Declare @Duration decimal(19,6)
	Declare @Subbalance nvarchar(50)
	Declare @DataSource nvarchar(50)
	Declare @POSType nvarchar(50)
	Declare @ItemManagementType nvarchar(50)
	--SELECT 
	--	@Quantity =	Quantity,
	--	@CompanyCode = A.CompanyCode ,
	--	@ItemCode = A.ItemCode ,
	--	@SLocId = A.SLocId,
	--	@UOMCode = A.UOMCode,
	--	@StoreId = B.StoreId,
	--	@TimeFrameId = A.TimeFrameId,
	--	@StoreAreaId = A.StoreAreaId,
	--	@TransDate = A.CreatedOn,
	--	@CreatedBy = A.CreatedBy,
	--	@AppointmentDate = AppointmentDate,
	--	@SaleType= A.ItemType,
	--	@TransId= b.TransId,
	--	@PrepaidCardNo= a.PrepaidCardNo,
	--	@LineTotal = a.LineTotal,
	--	@SaleMode= B.SalesMode,
	--	@Subbalance= A.DiscountAmt,
	--	@RefTransId = A.BaseTransId,
	--	@BaseLine = A.BaseLine,
	--	@DataSource = B.DataSource,
	--	@POSType = B.POSType,
	--	@Satus = B.Status
	--FROM inserted AS A INNER JOIN T_SalesHeader AS B with (nolock)
	--	ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode  
	-- SELECT  @Factor = ISNULL( Factor,0) from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode


	--if @DataSource = 'POS'
	--begin

	--	SELECT @IsBOM = ISBOM, @ItemManagementType = CustomField4 FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
	--										AND CompanyCode = @CompanyCode
		
	--	DECLARE @Count DECIMAL(19,6)
	--	if @SaleMode = 'RETURN'
	--	begin
	--		set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
	--		if ABS(@Quantity) < @OriQuantity
	--		begin
	--			update  T_SalesLine set Status = 'RP' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		else 
	--		begin
	--			update  T_SalesLine set Status = 'RC' where LineId = @BaseLine and TransId = @RefTransId
	--		end
		
	-- 		set @Count = (select  ISNULL(count(*), 0) from T_SalesLine where Status = 'RP' and LineId = @BaseLine and TransId = @RefTransId)
	--		if @Count > 0
	--		begin
	--		   update  T_SalesHeader set CollectedStatus = 'Partial Return' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
	--		end
	--		else
	--		begin 
	--			update  T_SalesHeader set CollectedStatus = 'Returned' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
	--		end 

	--	end

	--	if @SaleMode = 'EX'
	--	begin
	--		set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
	--		if ABS(@Quantity) < @OriQuantity
	--		begin
	--			update  T_SalesLine set Status = 'EP' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		else 
	--		begin
	--			update  T_SalesLine set Status = 'EC' where LineId = @BaseLine and TransId = @RefTransId
	--		end
			
	--		update  T_SalesHeader set CollectedStatus = 'Closed' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId

	--	end

	--	set @LineNum= 1;
	--	 --Update Item Storage
	--	if(@SaleType='Card' and @Satus<>'H')
	--	begin	 
	--		set @LineNum = (select isnull(count(*),0) from T_PrepaidCardTransaction where CompanyCode = @CompanyCode and TransId = @TransId and PrepaidCardNo = @PrepaidCardNo) +1;
	--		SELECT  @Duration = ISNULL(CustomField2,0) from M_Item where CompanyCode = @CompanyCode and InventoryUOM = @UOMCode and ItemCode= @ItemCode
	--		Update M_PrepaidCard set Status = 'A' where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
	--		INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo, LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--					VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,  @LineNum, @SaleMode, @LineTotal, @Subbalance, @CreatedBy, GETDATE() )  ;
			
	--		--select * from T_PrepaidCardTransaction
	--		update M_PrepaidCard set MainBalance =  CASE @SaleMode 
	--															WHEN 'SALES' THEN isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'SALESDEP' THEN isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'EX' THEN  isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'EXDEP' THEN  isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'RETURN' THEN  isnull(MainBalance, 0) - @LineTotal
	--													   end 
	--												 , SubBalance = CASE @SaleMode 
	--															WHEN 'SALES' THEN  isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
	--															WHEN 'SALESDEP' THEN  isnull(SubBalance, 0) +  isnull(@Subbalance, 0) 
	--															WHEN 'EX' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0 )
	--															WHEN 'EXDEP' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
	--															WHEN 'RETURN' THEN  isnull(SubBalance, 0) - isnull(@Subbalance, 0) 
	--													   end , Duration =  CASE @SaleMode 
	--															WHEN 'SALES' THEN  isnull(Duration, 0)  + @Duration
	--															WHEN 'SALESDEP' THEN isnull(Duration, 0)  + @Duration
	--															WHEN 'EX' THEN   isnull(Duration, 0)  + @Duration
	--															WHEN 'EXDEP' THEN  isnull(Duration, 0)  + @Duration
	--															WHEN 'RETURN' THEN  isnull(Duration, 0)  - @Duration
	--													   end where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
	--	end
	--	else
	--	begin
	--		if(@Satus<>'H')
	--		begin
	--			if(@ItemManagementType = 'I')
	--			begin 
	--				IF (@IsBOM = 1)
	--					BEGIN
	--						SELECT @Propotion = @Quantity/Quantity 
	--						FROM M_BOMHeader with (nolock)
	--						WHERE ItemCode = @ItemCode
	--							AND CompanyCode = @CompanyCode

	--						DECLARE BOM_LINES CURSOR FOR
	--							SELECT ItemCode, UOMCode , Quantity 
	--							FROM M_BOMLine with (nolock)
	--							WHERE BOMId = @ItemCode 
	--								AND CompanyCode = @CompanyCode
	--						OPEN BOM_LINES  

	--						FETCH NEXT FROM BOM_LINES 
	--						INTO @ItemCode, @UOMCode, @Quantity

	--						WHILE @@FETCH_STATUS = 0 
	--						BEGIN
	--							IF (SELECT COUNT(*) 
	--								FROM T_ItemStorage with (nolock)
	--								WHERE 
	--									CompanyCode = @CompanyCode 
	--									AND ItemCode = @ItemCode
	--									AND SLocId = @SLocId
	--									AND UOMCode = @UOMCode
	--									AND StoreId = @StoreId) <> 0
	--								BEGIN
	--									UPDATE [dbo].[T_ItemStorage]
	--										SET [Quantity] = CASE @SaleMode 
	--																WHEN 'SALES' THEN Quantity - @Quantity*@Propotion
	--																WHEN 'SALESDEP' THEN Quantity - @Quantity*@Propotion
	--																WHEN 'EX' THEN  Quantity - @Quantity*@Propotion
	--																WHEN 'EXDEP' THEN  Quantity - @Quantity*@Propotion
	--																WHEN 'RETURN' THEN  Quantity - @Quantity*@Propotion
	--														   end 
	--										WHERE      CompanyCode =  @CompanyCode
	--												AND ItemCode = @ItemCode
	--												AND SLocId = @SLocId
	--												AND UOMCode = @UOMCode
	--												AND StoreId = @StoreId
	--								END
	--							ELSE
	--								BEGIN
	--									INSERT INTO [dbo].[T_ItemStorage]
	--										([SLocId]
	--										,[CompanyCode]
	--										,[ItemCode]
	--										,[UOMCode]
	--										,[StoreId]
	--										,[Quantity])
	--									VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,
	--														 CASE @SaleMode 
	--																WHEN 'SALES' THEN  -@Quantity*@Propotion
	--																WHEN 'SALESDEP' THEN  -@Quantity*@Propotion
	--																WHEN 'EX' THEN  -@Quantity*@Propotion
	--																WHEN 'EXDEP' THEN   -@Quantity*@Propotion
	--																WHEN 'RETURN' THEN   -@Quantity*@Propotion
	--														   end)
	--								END
	--							FETCH NEXT FROM BOM_LINES
	--							INTO @ItemCode, @UOMCode, @Quantity
	--						END
	--						CLOSE BOM_LINES 
	--						DEALLOCATE BOM_LINES
	--					END
	--				ELSE
	--					IF (SELECT COUNT(*) 
	--							FROM T_ItemStorage with (nolock)
	--							WHERE 
	--								CompanyCode = @CompanyCode 
	--								AND ItemCode = @ItemCode
	--								AND SLocId = @SLocId
	--								AND UOMCode = @UOMCode AND StoreId = @StoreId) <> 0
	--						BEGIN
	--							UPDATE [dbo].[T_ItemStorage]
	--							   SET [Quantity] = CASE @SaleMode 
	--										WHEN 'SALES' THEN  Quantity - @Quantity 
	--										WHEN 'SALESDEP' THEN  Quantity - @Quantity  
	--										WHEN 'EX' THEN  Quantity - @Quantity  
	--										WHEN 'EXDEP' THEN  Quantity - @Quantity  
	--										WHEN 'RETURN' THEN  Quantity - @Quantity 
	--								   end
	--							 WHERE      CompanyCode =   @CompanyCode
	--									AND ItemCode = @ItemCode
	--									AND SLocId = @SLocId
	--									AND UOMCode = @UOMCode AND StoreId = @StoreId
	--						END
	--					ELSE
	--						BEGIN
	--						   INSERT INTO [dbo].[T_ItemStorage]
	--							   ([SLocId]
	--							   ,[CompanyCode]
	--							   ,[ItemCode]
	--							   ,[UOMCode]
	--							   ,[StoreId]
	--							   ,[Quantity])
	--							VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,  CASE @SaleMode 
	--										WHEN 'SALES' THEN -@Quantity * @Factor
	--										WHEN 'SALESDEP' THEN -@Quantity * @Factor
	--										WHEN 'EX' THEN -@Quantity * @Factor
	--										WHEN 'EXDEP' THEN -@Quantity * @Factor
	--										WHEN 'RETURN' THEN - @Quantity * @Factor
	--								   end)
	--					END
	--			end
	--			-- Update Capacity Remaining
	--			SELECT @CapacityValue = CapacityValue, @TimeFrameNum = isnull(CustomField10, 1)
	--			FROM M_Item as A
	--			INNER JOIN inserted as B 
	--				ON A.CompanyCode = B.CompanyCode 
	--					AND A.ItemCode = B.ItemCode
				 
				 
	--			IF @CapacityValue > 0 
	--			Begin
					 
	--				select Top (@TimeFrameNum) * into #tmpTable from M_TimeFrame
	--				where StartTime >= ( select StartTime from M_TimeFrame where TimeFrameId = @TimeFrameId) 
	--				order by TimeFrameId 

	--				DECLARE TimeFrame_LINES CURSOR FOR
	--					SELECT TimeFrameId  FROM #tmpTable
					 
	--				OPEN TimeFrame_LINES  

	--				FETCH NEXT FROM TimeFrame_LINES 
	--				INTO @TimeFrameId
	--				WHILE @@FETCH_STATUS = 0 
	--				BEGIN
	--					IF (SELECT COUNT(*) 
	--							FROM T_CapacityRemain with (nolock)
	--							WHERE 
	--								CompanyCode = @CompanyCode 
	--								AND StoreId = @StoreId
	--								AND TimeFrameId = @TimeFrameId
	--								AND StoreAreaId = @StoreAreaId
	--								AND TransDate = @AppointmentDate) <> 0
	--					BEGIN
	--						UPDATE [dbo].[T_CapacityRemain]
	--						SET 
	--								[CurrentCapacity] = CASE @SaleMode 
	--									WHEN 'SALES' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'SALESDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'EX' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'EXDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'RETURN' THEN CurrentCapacity + @CapacityValue*@Quantity 
	--							   end
	--							  ,[RemainCapacity] =  CASE @SaleMode 
	--									WHEN 'SALES' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue * @Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'SALESDEP' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'EX' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'EXDEP' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'RETURN' THEN  isnull(RemainCapacity, MaxCapacity) + @CapacityValue*@Quantity  --([CurrentCapacity] + @CapacityValue*@Quantity)
	--							   end
							 
	--							  ,[ModifiedBy] = @CreatedBy
	--							  ,[ModifiedOn] = GETDATE()
	--						WHERE  CompanyCode = @CompanyCode 
	--								AND StoreId = @StoreId
	--								AND TimeFrameId = @TimeFrameId
	--								AND StoreAreaId = @StoreAreaId
	--								AND TransDate = @AppointmentDate
	--					END
	--				ELSE 
	--					BEGIN
	--						SELECT @MaxCapacity = MaxCapacity
	--						FROM M_StoreCapacity
	--						WHERE CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId 
	--							AND StoreAreaId = @StoreAreaId
	--							AND TimeFrameId = @TimeFrameId
	--						INSERT INTO [dbo].[T_CapacityRemain]
	--						   ([StoreId]
	--						   ,[CompanyCode]
	--						   ,[TimeFrameId]
	--						   ,[StoreAreaId]
	--						   ,[TransDate]
	--						   ,[MaxCapacity]
	--						   ,[CurrentCapacity]
	--						   ,[RemainCapacity]
	--						   ,[CreatedBy]
	--						   ,[Status])
	--						VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
	--						 CASE @SaleMode 
	--									WHEN 'SALES' THEN  @CapacityValue*@Quantity
	--									WHEN 'SALESDEP' THEN  @CapacityValue*@Quantity
	--									WHEN 'EX' THEN  @CapacityValue*@Quantity
	--									WHEN 'EXDEP' THEN  @CapacityValue*@Quantity
	--									WHEN 'RETURN' THEN -@CapacityValue*@Quantity
	--							   end
	--							   ,
	--								CASE @SaleMode 
	--									WHEN 'SALES' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'SALESDEP' THEN @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'EX' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'EXDEP' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'RETURN' THEN @MaxCapacity - @CapacityValue*@Quantity
	--							   end, @CreatedBy,'A')
	--					END
	--					FETCH NEXT FROM TimeFrame_LINES
	--					INTO @TimeFrameId
	--				End
	--				CLOSE TimeFrame_LINES 
	--			    DEALLOCATE TimeFrame_LINES
	--				BEGIN TRAN

	--				IF object_id('RPFO_POS_UAT..##TempTable') is not null
	--				BEGIN
	--				   DROP TABLE #TempTable
	--				END

	--				COMMIT TRAN
	--				--DROP TABLE #TempTable
	--			end
				 
	--		end
	--	end
	--end
END


/****** Object:  Trigger [dbo].[UTG_I_T_ItemSerial_Sales]    Script Date: 6/18/2021 1:54:30 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_SalesLine] ENABLE TRIGGER [UTG_T_ItemStorage_Sales]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Sales_Update]    Script Date: 1/30/2023 9:43:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE       Trigger [dbo].[UTG_T_ItemStorage_Sales_Update]
   ON  [dbo].[T_SalesLine] 
   AFTER Update 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
	DECLARE @OldQuantity DECIMAL(19,6)
	DECLARE @OriQuantity DECIMAL(19,6)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @UOMCode NVARCHAR(50)
	DECLARE @StoreId NVARCHAR(50)
	DECLARE @IsBOM BIT
	DECLARE @Propotion DECIMAL(19,6)
	DECLARE @CapacityValue	DECIMAL(19,6)
	DECLARE @TimeFrameId	NVARCHAR(50)
	DECLARE @NewTimeFrameId	NVARCHAR(50)
	DECLARE @OldTimeFrameId	NVARCHAR(50)
	DECLARE @OldStatus	NVARCHAR(50)
	
	DECLARE @StoreAreaId NVARCHAR(50)
	DECLARE @TransDate DATE
	DECLARE @MaxCapacity DECIMAL(19,6)
	DECLARE @AppointmentDate Date 
	DECLARE @CreatedBy nvarchar(50)
	DECLARE @Factor DECIMAL(19,6)
	DECLARE @LineNum int
	Declare @SaleType nvarchar(50)
	Declare @SaleMode nvarchar(50)
	Declare @TransId nvarchar(50)
	Declare @RefTransId nvarchar(50)
	Declare @BaseLine nvarchar(50)
	Declare @PrepaidCardNo nvarchar(50)
	Declare @LineTotal nvarchar(50)
	Declare @Duration decimal(19,6)
	Declare @Subbalance nvarchar(50)
	Declare @DataSource nvarchar(50)
	Declare @POSType nvarchar(50)
	DECLARE @TimeFrameNum	int
	Declare @ItemManagementType nvarchar(50)
	SELECT 
		@Quantity =	CASE B.IsCanceled  
						WHEN 'Y'  THEN -A.Quantity  
						else A.Quantity 
					END ,
		@CompanyCode = A.CompanyCode ,
		@ItemCode = A.ItemCode ,
		@SLocId = A.SLocId,
		@UOMCode = A.UOMCode,
		@StoreId = B.StoreId,
		@TimeFrameId = A.TimeFrameId,
		@StoreAreaId = A.StoreAreaId,
		@TransDate = A.CreatedOn,
		@CreatedBy = A.CreatedBy,
		@AppointmentDate = A.AppointmentDate,
		@SaleType= A.ItemType,
		@TransId= b.TransId,
		@PrepaidCardNo= a.PrepaidCardNo,
		@LineTotal = a.LineTotal,
		@SaleMode= B.SalesMode,
		@Subbalance= A.DiscountAmt,
		@RefTransId = A.BaseTransId,
		@BaseLine = A.BaseLine,
		@DataSource = B.DataSource,
		@OldStatus = old.Status,
		@POSType = B.POSType,
		@OldTimeFrameId = old.TimeFrameId,
		@NewTimeFrameId = A.TimeFrameId
	FROM inserted AS A INNER JOIN T_SalesHeader AS B with (nolock)
		ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
		 JOIN deleted AS old ON old.TransId = A.TransId
	 SELECT  @Factor = ISNULL( Factor,0) from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode

	 --update T_SalesLine set Status ='M' where TransId = @TransId 
	if @DataSource <> 'POS' and isnull(@POSType,'') <> 'E'
	begin

		SELECT @IsBOM = ISBOM , @ItemManagementType = CustomField4  FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
											AND CompanyCode = @CompanyCode

		DECLARE @Count DECIMAL(19,6)
		if @SaleMode = 'RETURN'
		begin
			set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
			if ABS(@Quantity) < @OriQuantity
			begin
				update  T_SalesLine set Status = 'RP' where LineId = @BaseLine and TransId = @RefTransId
			end
			else 
			begin
				update  T_SalesLine set Status = 'RC' where LineId = @BaseLine and TransId = @RefTransId
			end
		
	 		set @Count = (select  ISNULL(count(*), 0) from T_SalesLine where Status = 'RP' and LineId = @BaseLine and TransId = @RefTransId)
			if @Count > 0
			begin
			   update  T_SalesHeader set CollectedStatus = 'Partial Return' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
			end
			else
			begin 
				update  T_SalesHeader set CollectedStatus = 'Returned' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
			end 

		end

		if @SaleMode = 'EX'
		begin
			set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
			if ABS(@Quantity) < @OriQuantity
			begin
				update  T_SalesLine set Status = 'EP' where LineId = @BaseLine and TransId = @RefTransId
			end
			else 
			begin
				update  T_SalesLine set Status = 'EC' where LineId = @BaseLine and TransId = @RefTransId
			end
			update  T_SalesHeader set CollectedStatus = 'Closed' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId

		end

		set @LineNum= 1;
		 --Update Item Storage
		if(@SaleType='Card' and @SaleMode<>'HOLD')
		begin	 
			SELECT  @Duration = ISNULL(CustomField2,0) from M_Item where CompanyCode = @CompanyCode and InventoryUOM = @UOMCode and ItemCode= @ItemCode
			Update M_PrepaidCard set Status = 'A' where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
			INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo, LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
						VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,  @LineNum, @SaleMode, @LineTotal, @Subbalance, @CreatedBy, GETDATE() )  ;
			set @LineNum =@LineNum +1;
			--select * from T_PrepaidCardTransaction
			update M_PrepaidCard set MainBalance =  CASE @SaleMode 
																WHEN 'SALES' THEN isnull(MainBalance, 0) + @LineTotal
																WHEN 'SALESDEP' THEN isnull(MainBalance, 0) + @LineTotal
																WHEN 'EX' THEN  isnull(MainBalance, 0) + @LineTotal
																WHEN 'EXDEP' THEN  isnull(MainBalance, 0) + @LineTotal
																WHEN 'RETURN' THEN  isnull(MainBalance, 0) - @LineTotal
														   end 
													 , SubBalance = CASE @SaleMode 
																WHEN 'SALES' THEN  isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
																WHEN 'SALESDEP' THEN  isnull(SubBalance, 0) +  isnull(@Subbalance, 0) 
																WHEN 'EX' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0 )
																WHEN 'EXDEP' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
																WHEN 'RETURN' THEN  isnull(SubBalance, 0) - isnull(@Subbalance, 0) 
														   end , Duration =  CASE @SaleMode 
																WHEN 'SALES' THEN  isnull(Duration, 0)  + @Duration
																WHEN 'SALESDEP' THEN isnull(Duration, 0)  + @Duration
																WHEN 'EX' THEN   isnull(Duration, 0)  + @Duration
																WHEN 'EXDEP' THEN  isnull(Duration, 0)  + @Duration
																WHEN 'RETURN' THEN  isnull(Duration, 0)  - @Duration
														   end where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
		end
		else
		begin
			if(@SaleMode<>'HOLD' and @ItemManagementType = 'I')
			begin
				IF (@IsBOM = 1)
					BEGIN
						SELECT @Propotion = @Quantity/Quantity 
						FROM M_BOMHeader with (nolock)
						WHERE ItemCode = @ItemCode
							AND CompanyCode = @CompanyCode

						DECLARE BOM_LINES CURSOR FOR
							SELECT ItemCode, UOMCode , Quantity 
							FROM M_BOMLine with (nolock)
							WHERE BOMId = @ItemCode 
								AND CompanyCode = @CompanyCode
						OPEN BOM_LINES  

						FETCH NEXT FROM BOM_LINES 
						INTO @ItemCode, @UOMCode, @Quantity

						WHILE @@FETCH_STATUS = 0 
						BEGIN
							IF (SELECT COUNT(*) 
								FROM T_ItemStorage with (nolock)
								WHERE 
									CompanyCode = @CompanyCode 
									AND ItemCode = @ItemCode
									AND SLocId = @SLocId
									AND UOMCode = @UOMCode
									AND StoreId = @StoreId) <> 0
								BEGIN
									UPDATE [dbo].[T_ItemStorage]
										SET [Quantity] = CASE @SaleMode 
																WHEN 'SALES' THEN Quantity - @Quantity*@Propotion
																WHEN 'SALESDEP' THEN Quantity - @Quantity*@Propotion
																WHEN 'EX' THEN  Quantity - @Quantity*@Propotion
																WHEN 'EXDEP' THEN  Quantity - @Quantity*@Propotion
																WHEN 'RETURN' THEN  Quantity - @Quantity*@Propotion
														   end 
										WHERE      CompanyCode =  @CompanyCode
												AND ItemCode = @ItemCode
												AND SLocId = @SLocId
												AND UOMCode = @UOMCode
												AND StoreId = @StoreId
								END
							ELSE
								BEGIN
									INSERT INTO [dbo].[T_ItemStorage]
										([SLocId]
										,[CompanyCode]
										,[ItemCode]
										,[UOMCode]
										,[StoreId]
										,[Quantity])
									VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,
														 CASE @SaleMode 
																WHEN 'SALES' THEN  -@Quantity*@Propotion
																WHEN 'SALESDEP' THEN  -@Quantity*@Propotion
																WHEN 'EX' THEN  -@Quantity*@Propotion
																WHEN 'EXDEP' THEN   -@Quantity*@Propotion
																WHEN 'RETURN' THEN   -@Quantity*@Propotion
														   end)
								END
							FETCH NEXT FROM BOM_LINES
							INTO @ItemCode, @UOMCode, @Quantity
						END
						CLOSE BOM_LINES 
						DEALLOCATE BOM_LINES
					END
				ELSE
					DECLARE @Capacity int
					SELECT @Capacity = CapacityValue 
					FROM M_Item as A
					INNER JOIN inserted as B 
						ON A.CompanyCode = B.CompanyCode 
							AND A.ItemCode = B.ItemCode

					-- Insert transaction Log
 						INSERT INTO [dbo].[T_TransactionLog]
							([TransId]
							,[CompanyCode]
							,[SLocId]
							,[ItemCode]
							,[StoreId]
							,[TransDate]
							,[TransType]
							,[InQty]
							,[OutQty]
							,[UOMCode]
							,[CreatedBy]
							,[CreatedOn]
							,[ModifiedBy]
							,[ModifiedOn]
							,[Status])
						SELECT 
							A.[TransId]
							,A.[CompanyCode]
							,A.[SLocId]
							,A.[ItemCode]
							,B.[StoreId]
							,A.[CreatedOn]
							,'SALES'
							, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
							,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
							,[UOMCode]
							,A.[CreatedBy]
							,GETDATE()
							,A.[ModifiedBy]
							,A.[ModifiedOn]
							,A.[Status]
						FROM inserted AS A
						INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode

					IF (SELECT COUNT(*) 
							FROM T_ItemStorage with (nolock)
							WHERE 
								CompanyCode = @CompanyCode 
								AND ItemCode = @ItemCode
								AND SLocId = @SLocId
								AND UOMCode = @UOMCode AND StoreId = @StoreId) <> 0
						BEGIN
							UPDATE [dbo].[T_ItemStorage]
							   SET [Quantity] = CASE @SaleMode 
										WHEN 'SALES' THEN  Quantity - @Quantity 
										WHEN 'SALESDEP' THEN  Quantity - @Quantity  
										WHEN 'EX' THEN  Quantity - @Quantity  
										WHEN 'EXDEP' THEN  Quantity - @Quantity  
										WHEN 'RETURN' THEN  Quantity - @Quantity 
								   end
							 WHERE      CompanyCode =   @CompanyCode
									AND ItemCode = @ItemCode
									AND SLocId = @SLocId
									AND UOMCode = @UOMCode AND StoreId = @StoreId
						END
					ELSE
						BEGIN
						   INSERT INTO [dbo].[T_ItemStorage]
							   ([SLocId]
							   ,[CompanyCode]
							   ,[ItemCode]
							   ,[UOMCode]
							   ,[StoreId]
							   ,[Quantity])
							VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,  CASE @SaleMode 
										WHEN 'SALES' THEN -@Quantity * @Factor
										WHEN 'SALESDEP' THEN -@Quantity * @Factor
										WHEN 'EX' THEN -@Quantity * @Factor
										WHEN 'EXDEP' THEN -@Quantity * @Factor
										WHEN 'RETURN' THEN -@Quantity * @Factor
								   end)
					END

				-- Update Capacity Remaining
				SELECT @CapacityValue = CapacityValue
				FROM M_Item as A
				INNER JOIN inserted as B 
					ON A.CompanyCode = B.CompanyCode 
						AND A.ItemCode = B.ItemCode

				IF @CapacityValue > 0 
				begin
					IF (SELECT COUNT(*) 
								FROM T_CapacityRemain with (nolock)
								WHERE 
									CompanyCode = @CompanyCode 
									AND StoreId = @StoreId
									AND TimeFrameId = @TimeFrameId
									AND StoreAreaId = @StoreAreaId
									AND TransDate = @AppointmentDate) <> 0
					BEGIN
							UPDATE [dbo].[T_CapacityRemain]
							SET 
									[CurrentCapacity] = CASE @SaleMode 
										WHEN 'SALES' THEN CurrentCapacity + @CapacityValue*@Quantity
										WHEN 'SALESDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
										WHEN 'EX' THEN CurrentCapacity + @CapacityValue*@Quantity
										WHEN 'EXDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
										WHEN 'RETURN' THEN CurrentCapacity - @CapacityValue*@Quantity 
								   end
								  ,[RemainCapacity] =  CASE @SaleMode 
										WHEN 'SALES' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'SALESDEP' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'EX' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'EXDEP' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'RETURN' THEN  MaxCapacity - ([CurrentCapacity] + @CapacityValue*@Quantity)
								   end
							 
								  ,[ModifiedBy] = @CreatedBy
								  ,[ModifiedOn] = GETDATE()
							WHERE  CompanyCode = @CompanyCode 
									AND StoreId = @StoreId
									AND TimeFrameId = @TimeFrameId
									AND StoreAreaId = @StoreAreaId
									AND TransDate = @AppointmentDate
						END
					ELSE 
						BEGIN
							SELECT @MaxCapacity = MaxCapacity
							FROM M_StoreCapacity
							WHERE CompanyCode = @CompanyCode 
								AND StoreId = @StoreId 
								AND StoreAreaId = @StoreAreaId
								AND TimeFrameId = @TimeFrameId
							INSERT INTO [dbo].[T_CapacityRemain]
							   ([StoreId]
							   ,[CompanyCode]
							   ,[TimeFrameId]
							   ,[StoreAreaId]
							   ,[TransDate]
							   ,[MaxCapacity]
							   ,[CurrentCapacity]
							   ,[RemainCapacity]
							   ,[CreatedBy]
							   ,[Status])
							VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
							 CASE @SaleMode 
										WHEN 'SALES' THEN  @CapacityValue*@Quantity
										WHEN 'SALESDEP' THEN  @CapacityValue*@Quantity
										WHEN 'EX' THEN  @CapacityValue*@Quantity
										WHEN 'EXDEP' THEN  @CapacityValue*@Quantity
										WHEN 'RETURN' THEN -@CapacityValue*@Quantity
								   end
								   ,
									CASE @SaleMode 
										WHEN 'SALES' THEN  @MaxCapacity - @CapacityValue*@Quantity
										WHEN 'SALESDEP' THEN @MaxCapacity - @CapacityValue*@Quantity
										WHEN 'EX' THEN  @MaxCapacity - @CapacityValue*@Quantity
										WHEN 'EXDEP' THEN  @MaxCapacity - @CapacityValue*@Quantity
										WHEN 'RETURN' THEN @MaxCapacity + @CapacityValue*@Quantity
								   end, @CreatedBy,'A')
						END

					INSERT INTO [dbo].[T_CapacityTransaction]
					   (Id,[CompanyCode]
						   ,[TransId]
						   ,[StoreId]
						   ,[StoreAreaId]
						   ,[TimeFrameId]
						   ,[LineId]
						   ,[ItemCode]
						   ,[CapacityValue]
						   ,[TransDate]
						   ,[CreatedBy]
						   ,[Status])
						SELECT NewID(),
						   A.[CompanyCode]
						  ,A.[TransId]
						  ,B.[StoreId]
						  ,A.StoreAreaId
						  ,A.TimeFrameId
						  , A.LineId  
						  ,A.[ItemCode]
						  ,@Capacity*A.Quantity
						  ,A.CreatedOn
						  ,A.CreatedBy
						  ,A.Status
						FROM inserted AS A
						INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode

				end
			end
		end
	end

	if @DataSource <> 'POS'  
	begin

		--select * 
		--from T_SalesLine
		Declare @CustomeF8 nvarchar(50)
		 
		SELECT  @CapacityValue = CapacityValue , @CustomeF8 = CustomField8 ,  @TimeFrameNum = ISNULL( CustomField10, 1)  FROM M_Item with (nolock) WHERE ItemCode = @ItemCode
											AND CompanyCode = @CompanyCode
				SELECT @MaxCapacity = MaxCapacity FROM M_StoreCapacity
								WHERE CompanyCode = @CompanyCode 
									AND StoreId = @StoreId 
									AND StoreAreaId = @StoreAreaId
									AND TimeFrameId = @TimeFrameId

				if(@CustomeF8 = '999999')
				begin
					set @MaxCapacity = (select MaxCapacity from M_StoreCapacity where CompanyCode = @CompanyCode and StoreId = @StoreId and Status ='A' and StoreAreaId =@StoreAreaId  AND TimeFrameId = @TimeFrameId)
				end
	    		IF @CapacityValue > 0 
				Begin
					if @OldStatus <> 'H' 
					begin
						---- remove line cũ
						set @SaleMode = 'RETURN'
						select Top (@TimeFrameNum) * into #tmpTable from M_TimeFrame
						where StartTime >= ( select StartTime from M_TimeFrame where TimeFrameId = @OldTimeFrameId) 
						order by TimeFrameId 
				 
						DECLARE TimeFrame_LINES CURSOR FOR
							SELECT TimeFrameId  FROM #tmpTable
					 
						OPEN TimeFrame_LINES  

						FETCH NEXT FROM TimeFrame_LINES 
						INTO @TimeFrameId
						WHILE @@FETCH_STATUS = 0 
						BEGIN
						 
							IF (SELECT COUNT(*) 
									FROM T_CapacityRemain with (nolock)
									WHERE 
										CompanyCode = @CompanyCode 
										AND StoreId = @StoreId
										AND TimeFrameId = @TimeFrameId
										AND StoreAreaId = @StoreAreaId
										AND TransDate = @AppointmentDate) <> 0
								BEGIN
						 
									UPDATE [dbo].[T_CapacityRemain]
									SET 
											[CurrentCapacity] =  CASE @SaleMode 
												WHEN 'SALES' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue * @Quantity end
												WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
												WHEN 'EX' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
												WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
												WHEN 'RETURN' THEN case @CustomeF8 when '999999' then -@MaxCapacity else isnull(CurrentCapacity, 0) - @CapacityValue*@Quantity end
										   end
										  ,[RemainCapacity] =  CASE @SaleMode 
												WHEN 'SALES' THEN  case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) -   @CapacityValue * @Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
												WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
												WHEN 'EX' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
												WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
												WHEN 'RETURN' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(RemainCapacity, MaxCapacity) + @CapacityValue*@Quantity end  --([CurrentCapacity] + @CapacityValue*@Quantity)
										   end
							 
										  ,[ModifiedBy] = 'Remove' + CONVERT(nvarchar(50), isnull(CurrentCapacity, 0)) + + CONVERT(nvarchar(50), isnull(@CapacityValue * @Quantity, 0))
										  ,[ModifiedOn] = GETDATE()
									WHERE  CompanyCode = @CompanyCode 
											AND StoreId = @StoreId
											AND TimeFrameId = @TimeFrameId
											AND StoreAreaId = @StoreAreaId
											AND TransDate = @AppointmentDate
								END
						 
							ELSE 
								BEGIN
								
									INSERT INTO [dbo].[T_CapacityRemain]
									   ([StoreId]
									   ,[CompanyCode]
									   ,[TimeFrameId]
									   ,[StoreAreaId]
									   ,[TransDate]
									   ,[MaxCapacity]
									   ,[CurrentCapacity]
									   ,[RemainCapacity]
									   ,[CreatedBy]
									   ,[Status])
									VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
									 CASE @SaleMode 
												WHEN 'SALES' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
												WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
												WHEN 'EX' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
												WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
												WHEN 'RETURN' THEN case @CustomeF8 when '999999' then -@MaxCapacity else  -@CapacityValue*@Quantity end
										   end
										   ,
											CASE @SaleMode 
												WHEN 'SALES' THEN case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
												WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
												WHEN 'EX' THEN case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
												WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
												WHEN 'RETURN' THEN case @CustomeF8 when '999999' then @MaxCapacity else @MaxCapacity + @CapacityValue*@Quantity end
										   end, @CreatedBy,'A')
								END

							FETCH NEXT FROM TimeFrame_LINES
							INTO @TimeFrameId
						End

						CLOSE TimeFrame_LINES 
						DEALLOCATE TimeFrame_LINES
						BEGIN TRAN

						IF object_id('RPFO_POS_UAT..#TempTable') is not null
						BEGIN
						   DROP TABLE #TempTable
						END

						COMMIT TRAN
					end

		----			
					--DROP TABLE #TempTable
					--- Insert lại
					set @SaleMode = 'SALES'
					select Top (@TimeFrameNum) * into #tmpNewTable from M_TimeFrame
					where StartTime >= ( select StartTime from M_TimeFrame where TimeFrameId = @NewTimeFrameId) 
					order by TimeFrameId 
					 
					DECLARE NewTimeFrame_LINES CURSOR FOR
						SELECT TimeFrameId  FROM #tmpNewTable
					 
					OPEN NewTimeFrame_LINES  

					FETCH NEXT FROM NewTimeFrame_LINES 
					INTO @TimeFrameId
					WHILE @@FETCH_STATUS = 0 
					BEGIN
						IF (SELECT COUNT(*) 
								FROM T_CapacityRemain with (nolock)
								WHERE 
									CompanyCode = @CompanyCode 
									AND StoreId = @StoreId
									AND TimeFrameId = @TimeFrameId
									AND StoreAreaId = @StoreAreaId
									AND TransDate = @AppointmentDate) <> 0
						BEGIN
							UPDATE [dbo].[T_CapacityRemain]
							SET 
									[CurrentCapacity] = CASE @SaleMode 
										WHEN 'SALES' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
										WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
										WHEN 'EX' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
										WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(CurrentCapacity, 0) + @CapacityValue*@Quantity end
										WHEN 'RETURN' THEN case @CustomeF8 when '999999' then -@MaxCapacity else isnull(CurrentCapacity, 0) - @CapacityValue*@Quantity  end
								   end
								  ,[RemainCapacity] =  
									  CASE @SaleMode 
										WHEN 'SALES' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) -  @CapacityValue * @Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) - @CapacityValue*@Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'EX' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) - @CapacityValue*@Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then 0 else isnull(RemainCapacity, MaxCapacity) - @CapacityValue*@Quantity end--([CurrentCapacity]- @CapacityValue*@Quantity)
										WHEN 'RETURN' THEN case @CustomeF8 when '999999' then @MaxCapacity else isnull(RemainCapacity, MaxCapacity) + @CapacityValue*@Quantity end --([CurrentCapacity] + @CapacityValue*@Quantity)
								   end
							 
								  ,[ModifiedBy] = @SaleMode
								  ,[ModifiedOn] = GETDATE()
							WHERE  CompanyCode = @CompanyCode 
									AND StoreId = @StoreId
									AND TimeFrameId = @TimeFrameId
									AND StoreAreaId = @StoreAreaId
									AND TransDate = @AppointmentDate
								--UPDATE [dbo].[T_CapacityRemain]
								--SET  [ModifiedBy] = @SaleMode 
								 
								--WHERE  CompanyCode = @CompanyCode AND StoreId = @StoreId
								--		AND TimeFrameId = @TimeFrameId
								--		AND StoreAreaId = @StoreAreaId
								--		AND TransDate = @AppointmentDate
						END
						ELSE 
						BEGIN
							SELECT @MaxCapacity = MaxCapacity
							FROM M_StoreCapacity
							WHERE CompanyCode = @CompanyCode 
								AND StoreId = @StoreId 
								AND StoreAreaId = @StoreAreaId
								AND TimeFrameId = @TimeFrameId
							INSERT INTO [dbo].[T_CapacityRemain]
							   ([StoreId]
							   ,[CompanyCode]
							   ,[TimeFrameId]
							   ,[StoreAreaId]
							   ,[TransDate]
							   ,[MaxCapacity]
							   ,[CurrentCapacity]
							   ,[RemainCapacity]
							   ,[CreatedBy]
							   ,[Status])
							VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
							 CASE @SaleMode 
										WHEN 'SALES' THEN  case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
										WHEN 'SALESDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
										WHEN 'EX' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
										WHEN 'EXDEP' THEN case @CustomeF8 when '999999' then @MaxCapacity else  @CapacityValue*@Quantity end
										WHEN 'RETURN' THEN case @CustomeF8 when '999999' then -@MaxCapacity else -@CapacityValue*@Quantity end
								   end
								   ,
									CASE @SaleMode 
										WHEN 'SALES' THEN  case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
										WHEN 'SALESDEP' THEN  case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
										WHEN 'EX' THEN  case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity  end
										WHEN 'EXDEP' THEN  case @CustomeF8 when '999999' then 0 else @MaxCapacity - @CapacityValue*@Quantity end
										WHEN 'RETURN' THEN  case @CustomeF8 when '999999' then @MaxCapacity else @MaxCapacity + @CapacityValue*@Quantity end
								   end, @CreatedBy,'A')
						END
					
							
						FETCH NEXT FROM NewTimeFrame_LINES
						INTO @TimeFrameId
					End
					CLOSE NewTimeFrame_LINES 
				    DEALLOCATE NewTimeFrame_LINES
					BEGIN TRAN

					IF object_id('RPFO_POS_UAT..#tmpNewTable') is not null
					BEGIN
					   DROP TABLE #tmpNewTable
					END

					COMMIT TRAN
				 
	end
	END
END
GO
ALTER TABLE [dbo].[T_SalesLine] ENABLE TRIGGER [UTG_T_ItemStorage_Sales_Update]
GO
/****** Object:  Trigger [dbo].[UTG_T_ItemStorage_Sales_Update_BAK_26072021]    Script Date: 1/30/2023 9:43:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE       Trigger [dbo].[UTG_T_ItemStorage_Sales_Update_BAK_26072021]
   ON  [dbo].[T_SalesLine] 
   AFTER Update 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE @CompanyCode NVARCHAR(50)
	--DECLARE @Quantity DECIMAL(19,6)
	--DECLARE @OldQuantity DECIMAL(19,6)
	--DECLARE @OriQuantity DECIMAL(19,6)
	--DECLARE @ItemCode NVARCHAR(50)
	--DECLARE @SLocId NVARCHAR(50)
	--DECLARE @UOMCode NVARCHAR(50)
	--DECLARE @StoreId NVARCHAR(50)
	--DECLARE @IsBOM BIT
	--DECLARE @Propotion DECIMAL(19,6)
	--DECLARE @CapacityValue	DECIMAL(19,6)
	--DECLARE @TimeFrameId	NVARCHAR(50)
	--DECLARE @NewTimeFrameId	NVARCHAR(50)
	--DECLARE @OldTimeFrameId	NVARCHAR(50)
	--DECLARE @StoreAreaId NVARCHAR(50)
	--DECLARE @TransDate DATE
	--DECLARE @MaxCapacity DECIMAL(19,6)
	--DECLARE @AppointmentDate Date 
	--DECLARE @CreatedBy nvarchar(50)
	--DECLARE @Factor DECIMAL(19,6)
	--DECLARE @LineNum int
	--Declare @SaleType nvarchar(50)
	--Declare @SaleMode nvarchar(50)
	--Declare @TransId nvarchar(50)
	--Declare @RefTransId nvarchar(50)
	--Declare @BaseLine nvarchar(50)
	--Declare @PrepaidCardNo nvarchar(50)
	--Declare @LineTotal nvarchar(50)
	--Declare @Duration decimal(19,6)
	--Declare @Subbalance nvarchar(50)
	--Declare @DataSource nvarchar(50)
	--Declare @POSType nvarchar(50)
	--DECLARE @TimeFrameNum	int
	--Declare @ItemManagementType nvarchar(50)
	--SELECT 
	--	@Quantity =	CASE B.IsCanceled  
	--					WHEN 'Y'  THEN -A.Quantity  
	--					else A.Quantity 
	--				END ,
	--	@CompanyCode = A.CompanyCode ,
	--	@ItemCode = A.ItemCode ,
	--	@SLocId = A.SLocId,
	--	@UOMCode = A.UOMCode,
	--	@StoreId = B.StoreId,
	--	@TimeFrameId = A.TimeFrameId,
	--	@StoreAreaId = A.StoreAreaId,
	--	@TransDate = A.CreatedOn,
	--	@CreatedBy = A.CreatedBy,
	--	@AppointmentDate = A.AppointmentDate,
	--	@SaleType= A.ItemType,
	--	@TransId= b.TransId,
	--	@PrepaidCardNo= a.PrepaidCardNo,
	--	@LineTotal = a.LineTotal,
	--	@SaleMode= B.SalesMode,
	--	@Subbalance= A.DiscountAmt,
	--	@RefTransId = A.BaseTransId,
	--	@BaseLine = A.BaseLine,
	--	@DataSource = B.DataSource,
	--	@POSType = B.POSType,
	--	@OldTimeFrameId = old.TimeFrameId,
	--	@NewTimeFrameId = A.TimeFrameId
	--FROM inserted AS A INNER JOIN T_SalesHeader AS B with (nolock)
	--	ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	--	 JOIN deleted AS old ON old.TransId = A.TransId
	-- SELECT  @Factor = ISNULL( Factor,0) from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode

	-- --update T_SalesLine set Status ='M' where TransId = @TransId 
	--if @DataSource <> 'POS' and isnull(@POSType,'') <> 'E'
	--begin

	--	SELECT @IsBOM = ISBOM , @ItemManagementType = CustomField4  FROM M_Item with (nolock) WHERE ItemCode = @ItemCode 
	--										AND CompanyCode = @CompanyCode

	--	DECLARE @Count DECIMAL(19,6)
	--	if @SaleMode = 'RETURN'
	--	begin
	--		set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
	--		if ABS(@Quantity) < @OriQuantity
	--		begin
	--			update  T_SalesLine set Status = 'RP' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		else 
	--		begin
	--			update  T_SalesLine set Status = 'RC' where LineId = @BaseLine and TransId = @RefTransId
	--		end
		
	-- 		set @Count = (select  ISNULL(count(*), 0) from T_SalesLine where Status = 'RP' and LineId = @BaseLine and TransId = @RefTransId)
	--		if @Count > 0
	--		begin
	--		   update  T_SalesHeader set CollectedStatus = 'Partial Return' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
	--		end
	--		else
	--		begin 
	--			update  T_SalesHeader set CollectedStatus = 'Returned' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId
	--		end 

	--	end

	--	if @SaleMode = 'EX'
	--	begin
	--		set @OriQuantity = (select  Quantity from T_SalesLine where LineId = @BaseLine and TransId = @RefTransId)
	--		if ABS(@Quantity) < @OriQuantity
	--		begin
	--			update  T_SalesLine set Status = 'EP' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		else 
	--		begin
	--			update  T_SalesLine set Status = 'EC' where LineId = @BaseLine and TransId = @RefTransId
	--		end
	--		update  T_SalesHeader set CollectedStatus = 'Closed' where  TransId = @RefTransId and CompanyCode = @CompanyCode and StoreId = @StoreId

	--	end

	--	set @LineNum= 1;
	--	 --Update Item Storage
	--	if(@SaleType='Card' and @SaleMode<>'HOLD')
	--	begin	 
	--		SELECT  @Duration = ISNULL(CustomField2,0) from M_Item where CompanyCode = @CompanyCode and InventoryUOM = @UOMCode and ItemCode= @ItemCode
	--		Update M_PrepaidCard set Status = 'A' where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
	--		INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo, LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--					VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,  @LineNum, @SaleMode, @LineTotal, @Subbalance, @CreatedBy, GETDATE() )  ;
	--		set @LineNum =@LineNum +1;
	--		--select * from T_PrepaidCardTransaction
	--		update M_PrepaidCard set MainBalance =  CASE @SaleMode 
	--															WHEN 'SALES' THEN isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'SALESDEP' THEN isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'EX' THEN  isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'EXDEP' THEN  isnull(MainBalance, 0) + @LineTotal
	--															WHEN 'RETURN' THEN  isnull(MainBalance, 0) - @LineTotal
	--													   end 
	--												 , SubBalance = CASE @SaleMode 
	--															WHEN 'SALES' THEN  isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
	--															WHEN 'SALESDEP' THEN  isnull(SubBalance, 0) +  isnull(@Subbalance, 0) 
	--															WHEN 'EX' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0 )
	--															WHEN 'EXDEP' THEN   isnull(SubBalance, 0) + isnull(@Subbalance, 0)  
	--															WHEN 'RETURN' THEN  isnull(SubBalance, 0) - isnull(@Subbalance, 0) 
	--													   end , Duration =  CASE @SaleMode 
	--															WHEN 'SALES' THEN  isnull(Duration, 0)  + @Duration
	--															WHEN 'SALESDEP' THEN isnull(Duration, 0)  + @Duration
	--															WHEN 'EX' THEN   isnull(Duration, 0)  + @Duration
	--															WHEN 'EXDEP' THEN  isnull(Duration, 0)  + @Duration
	--															WHEN 'RETURN' THEN  isnull(Duration, 0)  - @Duration
	--													   end where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo;
	--	end
	--	else
	--	begin
	--		if(@SaleMode<>'HOLD' and @ItemManagementType = 'I')
	--		begin
	--			IF (@IsBOM = 1)
	--				BEGIN
	--					SELECT @Propotion = @Quantity/Quantity 
	--					FROM M_BOMHeader with (nolock)
	--					WHERE ItemCode = @ItemCode
	--						AND CompanyCode = @CompanyCode

	--					DECLARE BOM_LINES CURSOR FOR
	--						SELECT ItemCode, UOMCode , Quantity 
	--						FROM M_BOMLine with (nolock)
	--						WHERE BOMId = @ItemCode 
	--							AND CompanyCode = @CompanyCode
	--					OPEN BOM_LINES  

	--					FETCH NEXT FROM BOM_LINES 
	--					INTO @ItemCode, @UOMCode, @Quantity

	--					WHILE @@FETCH_STATUS = 0 
	--					BEGIN
	--						IF (SELECT COUNT(*) 
	--							FROM T_ItemStorage with (nolock)
	--							WHERE 
	--								CompanyCode = @CompanyCode 
	--								AND ItemCode = @ItemCode
	--								AND SLocId = @SLocId
	--								AND UOMCode = @UOMCode
	--								AND StoreId = @StoreId) <> 0
	--							BEGIN
	--								UPDATE [dbo].[T_ItemStorage]
	--									SET [Quantity] = CASE @SaleMode 
	--															WHEN 'SALES' THEN Quantity - @Quantity*@Propotion
	--															WHEN 'SALESDEP' THEN Quantity - @Quantity*@Propotion
	--															WHEN 'EX' THEN  Quantity - @Quantity*@Propotion
	--															WHEN 'EXDEP' THEN  Quantity - @Quantity*@Propotion
	--															WHEN 'RETURN' THEN  Quantity - @Quantity*@Propotion
	--													   end 
	--									WHERE      CompanyCode =  @CompanyCode
	--											AND ItemCode = @ItemCode
	--											AND SLocId = @SLocId
	--											AND UOMCode = @UOMCode
	--											AND StoreId = @StoreId
	--							END
	--						ELSE
	--							BEGIN
	--								INSERT INTO [dbo].[T_ItemStorage]
	--									([SLocId]
	--									,[CompanyCode]
	--									,[ItemCode]
	--									,[UOMCode]
	--									,[StoreId]
	--									,[Quantity])
	--								VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,
	--													 CASE @SaleMode 
	--															WHEN 'SALES' THEN  -@Quantity*@Propotion
	--															WHEN 'SALESDEP' THEN  -@Quantity*@Propotion
	--															WHEN 'EX' THEN  -@Quantity*@Propotion
	--															WHEN 'EXDEP' THEN   -@Quantity*@Propotion
	--															WHEN 'RETURN' THEN   -@Quantity*@Propotion
	--													   end)
	--							END
	--						FETCH NEXT FROM BOM_LINES
	--						INTO @ItemCode, @UOMCode, @Quantity
	--					END
	--					CLOSE BOM_LINES 
	--					DEALLOCATE BOM_LINES
	--				END
	--			ELSE
	--				DECLARE @Capacity int
	--				SELECT @Capacity = CapacityValue 
	--				FROM M_Item as A
	--				INNER JOIN inserted as B 
	--					ON A.CompanyCode = B.CompanyCode 
	--						AND A.ItemCode = B.ItemCode

	--				-- Insert transaction Log
	--				INSERT INTO [dbo].[T_CapacityTransaction]
	--				   (Id,[CompanyCode]
	--				   ,[TransId]
	--				   ,[StoreId]
	--				   ,[StoreAreaId]
	--				   ,[TimeFrameId]
	--				   ,[LineId]
	--				   ,[ItemCode]
	--				   ,[CapacityValue]
	--				   ,[TransDate]
	--				   ,[CreatedBy]
	--				   ,[Status])
	--				SELECT NewID(),
	--				   A.[CompanyCode]
	--				  ,A.[TransId]
	--				  ,B.[StoreId]
	--				  ,A.StoreAreaId
	--				  ,A.TimeFrameId
	--				  , A.LineId  
	--				  ,A.[ItemCode]
	--				  ,@Capacity*A.Quantity
	--				  ,A.CreatedOn
	--				  ,A.CreatedBy
	--				  ,A.Status
	--				FROM inserted AS A
	--				INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode

	--				INSERT INTO [dbo].[T_TransactionLog]
	--						([TransId]
	--						,[CompanyCode]
	--						,[SLocId]
	--						,[ItemCode]
	--						,[StoreId]
	--						,[TransDate]
	--						,[TransType]
	--						,[InQty]
	--						,[OutQty]
	--						,[UOMCode]
	--						,[CreatedBy]
	--						,[CreatedOn]
	--						,[ModifiedBy]
	--						,[ModifiedOn]
	--						,[Status])
	--					SELECT 
	--						A.[TransId]
	--						,A.[CompanyCode]
	--						,A.[SLocId]
	--						,A.[ItemCode]
	--						,B.[StoreId]
	--						,A.[CreatedOn]
	--						,'SALES'
	--						, CASE WHEN ISNULL(Quantity,0) < 0 THEN ABS(Quantity) ELSE 0 END
	--						,	CASE WHEN ISNULL(Quantity,0) > 0 THEN ABS(Quantity) ELSE 0 END
	--						,[UOMCode]
	--						,A.[CreatedBy]
	--						,GETDATE()
	--						,A.[ModifiedBy]
	--						,A.[ModifiedOn]
	--						,A.[Status]
	--					FROM inserted AS A
	--					INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode

	--				IF (SELECT COUNT(*) 
	--						FROM T_ItemStorage with (nolock)
	--						WHERE 
	--							CompanyCode = @CompanyCode 
	--							AND ItemCode = @ItemCode
	--							AND SLocId = @SLocId
	--							AND UOMCode = @UOMCode AND StoreId = @StoreId) <> 0
	--					BEGIN
	--						UPDATE [dbo].[T_ItemStorage]
	--						   SET [Quantity] = CASE @SaleMode 
	--									WHEN 'SALES' THEN  Quantity - @Quantity 
	--									WHEN 'SALESDEP' THEN  Quantity - @Quantity  
	--									WHEN 'EX' THEN  Quantity - @Quantity  
	--									WHEN 'EXDEP' THEN  Quantity - @Quantity  
	--									WHEN 'RETURN' THEN  Quantity - @Quantity 
	--							   end
	--						 WHERE      CompanyCode =   @CompanyCode
	--								AND ItemCode = @ItemCode
	--								AND SLocId = @SLocId
	--								AND UOMCode = @UOMCode AND StoreId = @StoreId
	--					END
	--				ELSE
	--					BEGIN
	--					   INSERT INTO [dbo].[T_ItemStorage]
	--						   ([SLocId]
	--						   ,[CompanyCode]
	--						   ,[ItemCode]
	--						   ,[UOMCode]
	--						   ,[StoreId]
	--						   ,[Quantity])
	--						VALUES (@SLocId,@CompanyCode,@ItemCode,@UOMCode,@StoreId,  CASE @SaleMode 
	--									WHEN 'SALES' THEN -@Quantity * @Factor
	--									WHEN 'SALESDEP' THEN -@Quantity * @Factor
	--									WHEN 'EX' THEN -@Quantity * @Factor
	--									WHEN 'EXDEP' THEN -@Quantity * @Factor
	--									WHEN 'RETURN' THEN -@Quantity * @Factor
	--							   end)
	--				END

	--			-- Update Capacity Remaining
	--			SELECT @CapacityValue = CapacityValue
	--			FROM M_Item as A
	--			INNER JOIN inserted as B 
	--				ON A.CompanyCode = B.CompanyCode 
	--					AND A.ItemCode = B.ItemCode

	--			IF @CapacityValue > 0 
	--				IF (SELECT COUNT(*) 
	--							FROM T_CapacityRemain with (nolock)
	--							WHERE 
	--								CompanyCode = @CompanyCode 
	--								AND StoreId = @StoreId
	--								AND TimeFrameId = @TimeFrameId
	--								AND StoreAreaId = @StoreAreaId
	--								AND TransDate = @AppointmentDate) <> 0
	--					BEGIN
	--						UPDATE [dbo].[T_CapacityRemain]
	--						SET 
	--								[CurrentCapacity] = CASE @SaleMode 
	--									WHEN 'SALES' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'SALESDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'EX' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'EXDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--									WHEN 'RETURN' THEN CurrentCapacity - @CapacityValue*@Quantity 
	--							   end
	--							  ,[RemainCapacity] =  CASE @SaleMode 
	--									WHEN 'SALES' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'SALESDEP' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'EX' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'EXDEP' THEN  MaxCapacity - ([CurrentCapacity]- @CapacityValue*@Quantity)
	--									WHEN 'RETURN' THEN  MaxCapacity - ([CurrentCapacity] + @CapacityValue*@Quantity)
	--							   end
							 
	--							  ,[ModifiedBy] = @CreatedBy
	--							  ,[ModifiedOn] = GETDATE()
	--						WHERE  CompanyCode = @CompanyCode 
	--								AND StoreId = @StoreId
	--								AND TimeFrameId = @TimeFrameId
	--								AND StoreAreaId = @StoreAreaId
	--								AND TransDate = @AppointmentDate
	--					END
	--				ELSE 
	--					BEGIN
	--						SELECT @MaxCapacity = MaxCapacity
	--						FROM M_StoreCapacity
	--						WHERE CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId 
	--							AND StoreAreaId = @StoreAreaId
	--							AND TimeFrameId = @TimeFrameId
	--						INSERT INTO [dbo].[T_CapacityRemain]
	--						   ([StoreId]
	--						   ,[CompanyCode]
	--						   ,[TimeFrameId]
	--						   ,[StoreAreaId]
	--						   ,[TransDate]
	--						   ,[MaxCapacity]
	--						   ,[CurrentCapacity]
	--						   ,[RemainCapacity]
	--						   ,[CreatedBy]
	--						   ,[Status])
	--						VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
	--						 CASE @SaleMode 
	--									WHEN 'SALES' THEN  @CapacityValue*@Quantity
	--									WHEN 'SALESDEP' THEN  @CapacityValue*@Quantity
	--									WHEN 'EX' THEN  @CapacityValue*@Quantity
	--									WHEN 'EXDEP' THEN  @CapacityValue*@Quantity
	--									WHEN 'RETURN' THEN -@CapacityValue*@Quantity
	--							   end
	--							   ,
	--								CASE @SaleMode 
	--									WHEN 'SALES' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'SALESDEP' THEN @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'EX' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'EXDEP' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--									WHEN 'RETURN' THEN @MaxCapacity + @CapacityValue*@Quantity
	--							   end, @CreatedBy,'A')
	--					END
	--		end
	--	end
	--end

	--if @DataSource <> 'POS'  
	--begin

	--	--select * 
	--	--from T_SalesLine
	--	Declare @CustomeF8 nvarchar(50)

	--	SELECT  @CapacityValue = CapacityValue ,  @CustomeF8 = CustomField8 , @TimeFrameNum = ISNULL( CustomField10, 1)  FROM M_Item with (nolock) WHERE ItemCode = @ItemCode
	--										AND CompanyCode = @CompanyCode
	--		if(@CustomeF8 = '999999')
	--		begin
	--			set @MaxCapacity = (select isnull(MaxCapacity, 9000) from M_StoreCapacity where CompanyCode = @CompanyCode and StoreId = @StoreId and Status ='A' and StoreAreaId =@StoreAreaId )
	--		end
	--    	IF @CapacityValue > 0 
	--		Begin
	----			---- remove line cũ
	--			set @SaleMode = 'RETURN'
	--			select Top (@TimeFrameNum) * into #tmpTable from M_TimeFrame
	--			where StartTime >= ( select StartTime from M_TimeFrame where TimeFrameId = @OldTimeFrameId) 
	--			order by TimeFrameId 
	--			--UPDATE [dbo].[T_CapacityRemain]
	--			--	SET 
	--			--ModifiedBy = @OldTimeFrameId
	--			--	WHERE  CompanyCode = @CompanyCode 
	--			--AND StoreId = @StoreId
	--			--AND TimeFrameId = @OldTimeFrameId
	--			--AND StoreAreaId = @StoreAreaId
	--			--AND TransDate = @AppointmentDate
	--			DECLARE TimeFrame_LINES CURSOR FOR
	--				SELECT TimeFrameId  FROM #tmpTable
					 
	--			OPEN TimeFrame_LINES  

	--			FETCH NEXT FROM TimeFrame_LINES 
	--			INTO @TimeFrameId
	--			WHILE @@FETCH_STATUS = 0 
	--			BEGIN
	--				IF (SELECT COUNT(*) 
	--						FROM T_CapacityRemain with (nolock)
	--						WHERE 
	--							CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId
	--							AND TimeFrameId = @TimeFrameId
	--							AND StoreAreaId = @StoreAreaId
	--							AND TransDate = @AppointmentDate) <> 0
	--				BEGIN
						 
	--					UPDATE [dbo].[T_CapacityRemain]
	--					SET 
	--							[CurrentCapacity] =  CASE @SaleMode 
	--								WHEN 'SALES' THEN  CurrentCapacity + @CapacityValue * @Quantity
	--								WHEN 'SALESDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'EX' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN CurrentCapacity - @CapacityValue*@Quantity 
	--							end
	--							,[RemainCapacity] =  CASE @SaleMode 
	--								WHEN 'SALES' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue * @Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'SALESDEP' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'EX' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'EXDEP' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'RETURN' THEN  isnull(RemainCapacity, MaxCapacity) + @CapacityValue*@Quantity  --([CurrentCapacity] + @CapacityValue*@Quantity)
	--							end
							 
	--							,[ModifiedBy] = @CreatedBy
	--							,[ModifiedOn] = GETDATE()
	--					WHERE  CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId
	--							AND TimeFrameId = @TimeFrameId
	--							AND StoreAreaId = @StoreAreaId
	--							AND TransDate = @AppointmentDate
	--				END
	--			ELSE 
	--				BEGIN
	--					SELECT @MaxCapacity = MaxCapacity
	--					FROM M_StoreCapacity
	--					WHERE CompanyCode = @CompanyCode 
	--						AND StoreId = @StoreId 
	--						AND StoreAreaId = @StoreAreaId
	--						AND TimeFrameId = @TimeFrameId
	--					INSERT INTO [dbo].[T_CapacityRemain]
	--						([StoreId]
	--						,[CompanyCode]
	--						,[TimeFrameId]
	--						,[StoreAreaId]
	--						,[TransDate]
	--						,[MaxCapacity]
	--						,[CurrentCapacity]
	--						,[RemainCapacity]
	--						,[CreatedBy]
	--						,[Status])
	--					VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
	--						CASE @SaleMode 
	--								WHEN 'SALES' THEN  @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN  @CapacityValue*@Quantity
	--								WHEN 'EX' THEN  @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN  @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN -@CapacityValue*@Quantity
	--							end
	--							,
	--							CASE @SaleMode 
	--								WHEN 'SALES' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'EX' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN @MaxCapacity + @CapacityValue*@Quantity
	--							end, @CreatedBy,'A')
	--				END
	--				FETCH NEXT FROM TimeFrame_LINES
	--				INTO @TimeFrameId
	--			End
	--			CLOSE TimeFrame_LINES 
	--			DEALLOCATE TimeFrame_LINES
	--			BEGIN TRAN

	--			IF object_id('RPFO_POS_UAT..#TempTable') is not null
	--			BEGIN
	--				DROP TABLE #TempTable
	--			END

	--			COMMIT TRAN
	--			--DROP TABLE #TempTable
	--			--- Insert lại
	--			set @SaleMode = 'SALES'
	--			select Top (@TimeFrameNum) * into #tmpNewTable from M_TimeFrame
	--			where StartTime >= ( select StartTime from M_TimeFrame where TimeFrameId = @NewTimeFrameId) 
	--			order by TimeFrameId 


	--			UPDATE [dbo].[T_CapacityRemain]
	--					SET  [ModifiedBy] = @NewTimeFrameId
								 
	--					WHERE  CompanyCode = @CompanyCode 

	--			DECLARE NewTimeFrame_LINES CURSOR FOR
	--				SELECT TimeFrameId  FROM #tmpNewTable
					 
	--			OPEN NewTimeFrame_LINES  

	--			FETCH NEXT FROM NewTimeFrame_LINES 
	--			INTO @TimeFrameId
	--			WHILE @@FETCH_STATUS = 0 
	--			BEGIN
	--				IF (SELECT COUNT(*) 
	--						FROM T_CapacityRemain with (nolock)
	--						WHERE 
	--							CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId
	--							AND TimeFrameId = @TimeFrameId
	--							AND StoreAreaId = @StoreAreaId
	--							AND TransDate = @AppointmentDate) <> 0
	--				BEGIN
	--					UPDATE [dbo].[T_CapacityRemain]
	--					SET 
	--							[CurrentCapacity] = CASE @SaleMode 
	--								WHEN 'SALES' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'EX' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN CurrentCapacity + @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN CurrentCapacity - @CapacityValue*@Quantity 
	--							end
	--							,[RemainCapacity] =  CASE @SaleMode 
	--									WHEN 'SALES' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue * @Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'SALESDEP' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'EX' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'EXDEP' THEN  isnull(RemainCapacity, MaxCapacity) -   @CapacityValue*@Quantity --([CurrentCapacity]- @CapacityValue*@Quantity)
	--								WHEN 'RETURN' THEN  isnull(RemainCapacity, MaxCapacity) + @CapacityValue*@Quantity  --([CurrentCapacity] + @CapacityValue*@Quantity)
	--							end
							 
	--							,[ModifiedBy] = @CreatedBy
	--							,[ModifiedOn] = GETDATE()
	--					WHERE  CompanyCode = @CompanyCode 
	--							AND StoreId = @StoreId
	--							AND TimeFrameId = @TimeFrameId
	--							AND StoreAreaId = @StoreAreaId
	--							AND TransDate = @AppointmentDate
	--				END
	--			ELSE 
	--				BEGIN
	--					SELECT @MaxCapacity = MaxCapacity
	--					FROM M_StoreCapacity
	--					WHERE CompanyCode = @CompanyCode 
	--						AND StoreId = @StoreId 
	--						AND StoreAreaId = @StoreAreaId
	--						AND TimeFrameId = @TimeFrameId
	--					INSERT INTO [dbo].[T_CapacityRemain]
	--						([StoreId]
	--						,[CompanyCode]
	--						,[TimeFrameId]
	--						,[StoreAreaId]
	--						,[TransDate]
	--						,[MaxCapacity]
	--						,[CurrentCapacity]
	--						,[RemainCapacity]
	--						,[CreatedBy]
	--						,[Status])
	--					VALUES (@StoreId, @CompanyCode, @TimeFrameId, @StoreAreaId, @AppointmentDate, @MaxCapacity,
	--						CASE @SaleMode 
	--								WHEN 'SALES' THEN  @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN  @CapacityValue*@Quantity
	--								WHEN 'EX' THEN  @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN  @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN -@CapacityValue*@Quantity
	--							end
	--							,
	--							CASE @SaleMode 
	--								WHEN 'SALES' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'SALESDEP' THEN @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'EX' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'EXDEP' THEN  @MaxCapacity - @CapacityValue*@Quantity
	--								WHEN 'RETURN' THEN @MaxCapacity + @CapacityValue*@Quantity
	--							end, @CreatedBy,'A')
	--				END
	--				FETCH NEXT FROM NewTimeFrame_LINES
	--				INTO @TimeFrameId
	--			End
	--			CLOSE NewTimeFrame_LINES 
	--			DEALLOCATE NewTimeFrame_LINES
	--			BEGIN TRAN

	--			IF object_id('RPFO_POS_UAT..#tmpNewTable') is not null
	--			BEGIN
	--				DROP TABLE #tmpNewTable
	--			END

	--			COMMIT TRAN
				 
	--end
	--END
END
GO
ALTER TABLE [dbo].[T_SalesLine] ENABLE TRIGGER [UTG_T_ItemStorage_Sales_Update_BAK_26072021]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_ItemSerial_Sales]    Script Date: 1/30/2023 9:43:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE Trigger [dbo].[UTG_I_T_ItemSerial_Sales]
   ON  [dbo].[T_SalesLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SLocId NVARCHAR(50)
	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)
	DECLARE @Satus	NVARCHAR(50)
	DECLARE @Quantity	NVARCHAR(50)
	DECLARE @IsCanceled	NVARCHAR(50)

	--IF (select COUNT(*) from T_ItemSerial where SLocId = @SLocId and CompanyCode = @CompanyCode and ItemCode = @ItemCode and SerialNum = @SerialNum) <= 0
	--BEGIN
	--	INSERT INTO [dbo].[T_ItemSerial]
	--		   ([SLocId]
	--		   ,[CompanyCode]
	--		   ,[TransId]
	--		   ,[ItemCode]
	--		   ,[SerialNum]
	--		   ,[StoreId]
	--		   ,[InQty]
	--		   ,[OutQty]
	--		   ,[UOMCode]
	--		   ,[TransType]
	--		   ,[TransDate]
	--		   ,[CreatedBy]
	--		   ,[CreatedOn]
	--		   ,[ModifiedBy]
	--		   ,[ModifiedOn]
	--		   ,[Status])
	--	 SELECT 
	--		   A.[SLocId]
	--		  ,A.[CompanyCode]
	--		  ,A.[TransId]
	--		  ,A.[ItemCode]
	--		  ,A.[SerialNum]
	--		  ,B.[StoreId]
	--		  , 0
	--		  ,  CASE ISNULL(B.IsCanceled,'')  
	--						WHEN 'N'  THEN A.Quantity 
	--						WHEN 'Y'  THEN A.Quantity 
	--						WHEN 'C'  THEN -A.Quantity 
	--					END
	--		  ,[UOMCode]
	--		   ,'SALES'
	--		  ,A.[CreatedOn]
		 
	--		  ,A.[CreatedBy]
	--		  ,GETDATE()
	--		  ,A.[ModifiedBy]
	--		  ,A.[ModifiedOn]
	--		  ,A.[Status]
	--		FROM inserted AS A
	--		INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	--	END

	--	UPDATE t1 
	--	SET StockQty = CASE ISNULL(B.IsCanceled,'N')   WHEN 'N'  THEN 0
	--					WHEN 'Y'  THEN 0
	--					WHEN 'C'  THEN 1
	--				END  , ModifiedOn = GETDATE() , ModifiedBy = t1.CreatedBy
	--	from M_ItemSerialStock t1
	--	join inserted A on t1.SerialNum = A.SerialNum and t1.CompanyCode = A.CompanyCode
	--	INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	--	WHERE	t1.CompanyCode = A.CompanyCode
	--		AND t1.SLocId = A.SLocId
	--		AND  t1.ItemCode = A.ItemCode
	--		AND  t1.SerialNum = A.SerialNum
	--		and B.Status <>'H'

	--	UPDATE t1 
	--	SET Status = CASE  when isnull( B.Status, 'N') = 'N' then 'A' else 'N/A'  END , ModifiedOn = GETDATE() , ModifiedBy = t1.CreatedBy
	--	from M_ItemSerial t1
	--	join inserted A on t1.SerialNum = A.SerialNum and t1.CompanyCode = A.CompanyCode
	--	INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
	--	WHERE	t1.CompanyCode = A.CompanyCode 
	--		AND  t1.ItemCode = A.ItemCode
	--		AND  t1.SerialNum = A.SerialNum
	--		and B.Status <>'H'

		--SELECT @SLocId = SLocId
		--		, @CompanyCode = A.CompanyCode
		--		, @ItemCode = ItemCode
		--		, @SerialNum = SerialNum
		--		, @CreatedBy = A.CreatedBy
		--		, @Satus = B.Status
		--		, @Quantity = CASE ISNULL(B.IsCanceled,'N')   WHEN 'N'  THEN 0
		--				WHEN 'Y'  THEN 0
		--				WHEN 'C'  THEN 1
		--			END,
		--			@IsCanceled = B.IsCanceled
		--	FROM inserted AS A
		--	INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode
 
		--if(@Satus<>'H')
		--begin 
		--	--select * from T_SalesHeader
		--	UPDATE M_ItemSerialStock 
		--	SET StockQty = @Quantity
		--		, ModifiedOn = GETDATE()
		--		, ModifiedBy =  @CreatedBy  
		--	WHERE	CompanyCode = @CompanyCode 
		--		AND SLocId = @SLocId
		--		AND ItemCode = @ItemCode
		--		AND SerialNum = @SerialNum

		--		   UPDATE M_ItemSerial 
		--	SET Status = CASE  when @IsCanceled = 'N' then 'A' else 'N/A'  END
		--		, ModifiedOn = GETDATE()
		--		, ModifiedBy = @CreatedBy
		--		--@
		--	WHERE	CompanyCode = @CompanyCode  
		--		AND ItemCode = @ItemCode
		--		AND SerialNum = @SerialNum
		--end
END




GO
ALTER TABLE [dbo].[T_SalesLineSerial] ENABLE TRIGGER [UTG_I_T_ItemSerial_Sales]
GO
/****** Object:  Trigger [dbo].[UTG_I_T_ItemSerial_Voucher]    Script Date: 1/30/2023 9:43:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE     Trigger [dbo].[UTG_I_T_ItemSerial_Voucher]
   ON  [dbo].[T_SalesLineSerial] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @SLocId NVARCHAR(50)
	DECLARE @ItemCode NVARCHAR(50)
	DECLARE @UomCode NVARCHAR(50)
	DECLARE @SerialNum NVARCHAR(50)
	DECLARE @TransId	NVARCHAR(50)
	DECLARE @CreatedBy	NVARCHAR(50)
	DECLARE @TransDate Datetime
		DECLARE @VoucherValue Decimal(19,6)
		DECLARE @IsVoucher bit
	--SELECT  @CompanyCode = A.CompanyCode ,
	--	@ItemCode = A.ItemCode ,
	--	@SLocId = A.SLocId,
	--	@UOMCode = A.UOMCode,
	--	@SerialNum = A.SerialNum,
	--	@TransDate = A.CreatedOn,
	--	@CreatedBy = A.CreatedBy, 
	--	@TransId= b.TransId,
	--	 @VoucherValue= line.Price
	--FROM inserted AS A INNER JOIN T_SalesHeader AS B with (nolock) ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode  
	--left join T_SalesLine line   with (nolock)  on line.ItemCode = A.ItemCode and line.UOMCode = A.UOMCode and line.CompanyCode= A.CompanyCode

	--select   @IsVoucher= isVoucher from M_Item  with (nolock) where ItemCode = @ItemCode and CompanyCode = @CompanyCode and InventoryUOM = @UomCode

	--if @IsVoucher= 1
	--begin
	--	INSERT INTO [dbo].T_VoucherTransaction (CompanyCode	, ItemCode, VoucherNo, VoucherValue, VoucherType, IssueDate, IssueTransId)
	--	values(@CompanyCode, @ItemCode, @SerialNum, @VoucherValue, 'Payment', @TransDate, @TransId)
	--end
	
  --   SELECT 
		--   A.[SLocId]
		--  ,A.[CompanyCode]
		--  ,A.[TransId]
		--  ,A.[ItemCode]
		--  ,A.[SerialNum]
		--  ,B.[StoreId]
		--  ,CASE B.IsCanceled
		--		WHEN 1 THEN A.Quantity
		--		WHEN 0 THEN 
		--					CASE B.SalesMode 
		--						 WHEN 'HOLD' THEN 0
		--						 WHEN 'SALES' THEN 0
		--						 WHEN 'SALESDEP' THEN 0
		--						 WHEN 'EX' THEN 0
		--						 WHEN 'EXDEP' THEN 0
		--						 WHEN 'RETURN' THEN A.Quantity
		--					END
		--   END
  --        ,CASE B.IsCanceled
		--		WHEN 1 THEN 0
		--		WHEN 0 THEN 
		--					CASE B.SalesMode 
		--						 WHEN 'HOLD' THEN 0
		--						 WHEN 'SALES' THEN Quantity
		--						 WHEN 'SALESDEP' THEN Quantity
		--						 WHEN 'EX' THEN Quantity
		--						 WHEN 'EXDEP' THEN Quantity
		--						 WHEN 'RETURN' THEN 0
		--					END
		--   END
		--  ,[UOMCode]
		--   ,'SALES'
		--  ,A.[CreatedOn]
		 
		--  ,A.[CreatedBy]
  --        ,GETDATE()
  --        ,A.[ModifiedBy]
  --        ,A.[ModifiedOn]
		--  ,A.[Status]
		--FROM inserted AS A
		--INNER JOIN T_SalesHeader AS B ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode

		--SELECT @SLocId = SLocId
		--	, @CompanyCode = CompanyCode
		--	, @ItemCode = ItemCode
		--	, @SerialNum = SerialNum
		--	, @CreatedBy = CreatedBy
		--FROM inserted

		--UPDATE M_ItemSerialStock 
		--SET StockQty = 0 
		--	, ModifiedOn = GETDATE()
		--	, ModifiedBy = @CreatedBy
		--WHERE	CompanyCode = @CompanyCode 
		--	AND SLocId = @SLocId
		--	AND ItemCode = @ItemCode
		--	AND SerialNum = @SerialNum
END





/****** Object:  Trigger [dbo].[UTG_T_Prepaid_SalesPayment]    Script Date: 6/18/2021 1:53:47 AM ******/
SET ANSI_NULLS ON
GO
ALTER TABLE [dbo].[T_SalesLineSerial] ENABLE TRIGGER [UTG_I_T_ItemSerial_Voucher]
GO
/****** Object:  Trigger [dbo].[UTG_T_Prepaid_SalesPayment]    Script Date: 1/30/2023 9:43:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE      TRIGGER [dbo].[UTG_T_Prepaid_SalesPayment]
   ON  [dbo].[T_SalesPayment] 
   AFTER INSERT 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CompanyCode NVARCHAR(50)
	DECLARE @Quantity DECIMAL(19,6)
 
	 
	DECLARE @StoreId NVARCHAR(50)
	  
	DECLARE @CreatedBy nvarchar(50)
	DECLARE @Factor int
	Declare @SaleType nvarchar(50)
	Declare @SaleMode nvarchar(50)
	Declare @TransId nvarchar(50)
	Declare @PrepaidCardNo nvarchar(50)
	Declare @LineTotal nvarchar(50)
	Declare @Chargable DECIMAL(19,6)
	Declare @CollectedAmount DECIMAL(19,6)
	Declare @Amount DECIMAL(19,6)
	Declare @MainBalance DECIMAL(19,6)
	Declare @SubBalance DECIMAL(19,6)
	Declare @Balance DECIMAL(19,6)
	Declare @RefNumber nvarchar(50)
	Declare @PaymentCode nvarchar(50)
	Declare @PaymentType nvarchar(50)
	DECLARE @LineNum int
	set @LineNum= 1;
	--SELECT 
	--	@Quantity =	CASE B.IsCanceled 
	--					WHEN 'Y' THEN -A.ChargableAmount 
	--					else A.ChargableAmount 
	--				END ,
	--	@CompanyCode = A.CompanyCode ,
		 
	--	@StoreId = B.StoreId,
		 
	--	@CreatedBy = A.CreatedBy,
	 
	--	@SaleType= B.SalesType,
	--	@TransId= b.TransId,
	--	@PrepaidCardNo= a.RefNumber,
	--	@Chargable = a.ChargableAmount,
	--	@CollectedAmount = a.CollectedAmount,
	--	@SaleMode = b.SalesMode,
	--	@RefNumber= a.RefNumber,
	--   @PaymentCode = a.PaymentCode
	--FROM inserted AS A INNER JOIN T_SalesHeader AS B with (nolock)
	--	ON A.TransId = B.TransId AND A.CompanyCode = B.CompanyCode  
	-- --SELECT  @Factor = Factor from M_ItemUOM where CompanyCode = @CompanyCode and UOMCode = @UOMCode and ItemCode= @ItemCode
	--if  @PaymentCode= 'PrepaidCard' and @SaleMode <> 'HOLD'
	--begin
	--    --Sale mode = Return thi + lại số vào SubBalance
	--	if(@Chargable - @CollectedAmount >= 0)
	--	begin
	--		set @Amount = @CollectedAmount 
	--	end
	--	else
	--	begin
	--		set @Amount = @CollectedAmount - @Chargable
	--	end
	--	if @SaleMode = 'RETURN'
	--	begin
	--			INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--							VALUES ( @CompanyCode, @TransId,@PrepaidCardNo, 'Payment',  0 , @Amount, @CreatedBy, GETDATE() )  
	--			update M_PrepaidCard set SubBalance = ISNULL(SubBalance,0) + @CollectedAmount  where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo
	--	end
	--	else
	--	begin 
	--		select @MainBalance =MainBalance, @SubBalance = SubBalance from M_PrepaidCard where CompanyCode = @CompanyCode and PrepaidCardNo=@PrepaidCardNo
	--		if @SubBalance > 0
	--		begin
	--			if(@SubBalance - @Amount > 0)
	--			begin
					
	--				INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo,LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--								VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,@LineNum, 'Payment', 0 , @Amount, @CreatedBy, GETDATE() )  
	--				update M_PrepaidCard set  SubBalance = ISNULL(SubBalance,0) - @CollectedAmount where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo
	--			end
	--			else
	--			begin
	--				-- ISNULL(SubBalance,0) - @CollectedAmount 
	--				INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo, LineNum,TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--								VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,@LineNum, 'Payment', 0 , @SubBalance, @CreatedBy, GETDATE() )  
	--				update M_PrepaidCard set SubBalance =  0 where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo
	--				set @LineNum =@LineNum +1;
	--				set @Balance = @CollectedAmount - @SubBalance;
	--				INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo,LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--								VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,@LineNum, 'Payment', @Balance , 0, @CreatedBy, GETDATE() )  
	--				update M_PrepaidCard set MainBalance =  ISNULL(MainBalance,0) - @Balance  where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo
	--			end
		
	--		end
	--		else
	--		begin
	  
	--			INSERT INTO [dbo].T_PrepaidCardTransaction([CompanyCode], TransId, PrepaidCardNo,LineNum, TransType,  MainBalance, SubBalance, CreatedBy, CreatedOn)
	--							VALUES ( @CompanyCode, @TransId,@PrepaidCardNo,@LineNum, 'Payment',  @Amount , 0, @CreatedBy, GETDATE() )  
	--			update M_PrepaidCard set MainBalance = ISNULL(MainBalance,0) - @Amount  where CompanyCode = @CompanyCode and PrepaidCardNo = @PrepaidCardNo

	--		end
	--	end

	--end
	---- Update Item Storage
	--set @PaymentType = (Select PaymentType from M_PaymentMethod where PaymentCode = @PaymentCode and CompanyCode = CompanyCode)
	---- Redeem Voucher
	--if((@PaymentCode = 'Voucher' or @PaymentType = 'V') and @SaleMode <> 'HOLD')
	--begin 
	--	update T_VoucherTransaction set RedeemDate = GETDATE(), RedeemTransId =	@TransId where VoucherNo = @RefNumber and CompanyCode= @CompanyCode
	--end
	
END

--select * from T_SalesPayment


--select * from T_PrepaidCardTransaction
GO
ALTER TABLE [dbo].[T_SalesPayment] ENABLE TRIGGER [UTG_T_Prepaid_SalesPayment]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Không dùng' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'T_GoodsReceiptHeader', @level2type=N'COLUMN',@level2name=N'TotalPayable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Không dùng' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'T_GoodsReceiptHeader', @level2type=N'COLUMN',@level2name=N'TotalDiscountAmt'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'T_GoodsReceiptHeader', @level2type=N'COLUMN',@level2name=N'TotalReceipt'
GO
